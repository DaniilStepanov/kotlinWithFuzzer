2021-03-12 08:20:26,176 [main:66] - Compilation checking started
2021-03-12 08:20:27,359 [main:50] - replacing p: P = P(1) P
2021-03-12 08:20:27,360 [main:54] - Getting value of type P
2021-03-12 08:20:27,470 [main:302] - generating value of type = P false depth = 0
2021-03-12 08:20:27,471 [main:112] - generating klass P text = inline class P(val i: Int)
2021-03-12 08:20:27,592 [main:194] - Type params = []
2021-03-12 08:20:27,722 [main:302] - generating value of type = Int true depth = 2
2021-03-12 08:20:27,725 [main:58] - GENERATED VALUE OF TYPE P = P(-438970846)
2021-03-12 08:20:27,725 [main:61] - GENERATED IS CALL =true
2021-03-12 08:20:28,266 [main:67] - randomType = ULong
2021-03-12 08:20:28,352 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 08:20:28,481 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 08:20:28,482 [main:66] - Compilation checking started
2021-03-12 08:20:28,484 [main:71] - Wrong syntax or breaks conditions
2021-03-12 08:20:28,484 [main:49] - Result = false
Text:
package a

inline class P(val i: Int)

suspend fun foo(p: P  = P(-438970846)) {}

suspend fun bar(p: P) {}
2021-03-12 08:20:28,485 [main:302] - generating value of type = P false depth = 0
2021-03-12 08:20:28,485 [main:112] - generating klass P text = inline class P(val i: Int)
2021-03-12 08:20:28,593 [main:194] - Type params = []
2021-03-12 08:20:28,676 [main:302] - generating value of type = Int true depth = 2
2021-03-12 08:20:28,678 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 08:20:28,679 [main:66] - Compilation checking started
2021-03-12 08:20:28,681 [main:71] - Wrong syntax or breaks conditions
2021-03-12 08:20:28,682 [main:49] - Result = false
Text:
package a

inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P = P(-495715930)) {}
2021-03-12 08:20:28,683 [main:50] - replacing val i: Int Int
2021-03-12 08:20:28,683 [main:54] - Getting value of type Int
2021-03-12 08:20:28,776 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:20:28,777 [main:58] - GENERATED VALUE OF TYPE Int = -918180403
2021-03-12 08:20:28,778 [main:61] - GENERATED IS CALL =false
2021-03-12 08:20:29,047 [main:67] - randomType = Char?
2021-03-12 08:20:29,170 [main:302] - generating value of type = Char true depth = 0
2021-03-12 08:20:29,275 [main:149] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6105522c]
2021-03-12 08:20:29,276 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6f4dd65d]
2021-03-12 08:20:29,279 [main:78] - Generated call from random type = ('‰Å≥')?.toShort().unaryMinus()
2021-03-12 08:20:29,291 [main:106] - GETTING Int from P
2021-03-12 08:20:29,304 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in a.P[SimpleFunctionDescriptorImpl@10c834af], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]]
2021-03-12 08:20:29,305 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in a.P[SimpleFunctionDescriptorImpl@10c834af]
2021-03-12 08:20:29,393 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:20:29,396 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:20:29,482 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:20:29,484 [main:117] - GENERATED CALL = (p).equals("utoth").compareTo(false)
2021-03-12 08:20:29,485 [main:113] - Case = [public final val i: kotlin.Int defined in a.P[PropertyDescriptorImpl@2c9d9931], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@53acdc6e]]
2021-03-12 08:20:29,485 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@53acdc6e]
2021-03-12 08:20:29,487 [main:117] - GENERATED CALL = (p).i.takeHighestOneBit()
2021-03-12 08:20:29,487 [main:113] - Case = [public final val i: kotlin.Int defined in a.P[PropertyDescriptorImpl@2c9d9931], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1f07773e]]
2021-03-12 08:20:29,487 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1f07773e]
2021-03-12 08:20:29,563 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:20:29,564 [main:117] - GENERATED CALL = (p).i.rotateRight(1966425036)
2021-03-12 08:20:29,564 [main:113] - Case = [public final val i: kotlin.Int defined in a.P[PropertyDescriptorImpl@2c9d9931]]
2021-03-12 08:20:29,565 [main:117] - GENERATED CALL = (p).i
2021-03-12 08:20:29,565 [main:113] - Case = [public final val i: kotlin.Int defined in a.P[PropertyDescriptorImpl@2c9d9931], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@425531c9]]
2021-03-12 08:20:29,565 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@425531c9]
2021-03-12 08:20:29,566 [main:117] - GENERATED CALL = (p).i.countOneBits()
2021-03-12 08:20:29,566 [main:113] - Case = [public final val i: kotlin.Int defined in a.P[PropertyDescriptorImpl@2c9d9931], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@175c25dd]]
2021-03-12 08:20:29,566 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@175c25dd]
2021-03-12 08:20:29,646 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:20:29,648 [main:117] - GENERATED CALL = (p).i.div(9)
2021-03-12 08:20:29,648 [main:113] - Case = [public final val i: kotlin.Int defined in a.P[PropertyDescriptorImpl@2c9d9931], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76b2a99c]]
2021-03-12 08:20:29,648 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76b2a99c]
2021-03-12 08:20:29,650 [main:117] - GENERATED CALL = (p).i.countTrailingZeroBits()
2021-03-12 08:20:29,650 [main:113] - Case = [public final val i: kotlin.Int defined in a.P[PropertyDescriptorImpl@2c9d9931], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3c108134]]
2021-03-12 08:20:29,650 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3c108134]
2021-03-12 08:20:29,652 [main:117] - GENERATED CALL = (p).i.countLeadingZeroBits()
2021-03-12 08:20:29,652 [main:113] - Case = [public final val i: kotlin.Int defined in a.P[PropertyDescriptorImpl@2c9d9931], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@77c8dd61]]
2021-03-12 08:20:29,652 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@77c8dd61]
2021-03-12 08:20:29,740 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:20:29,742 [main:117] - GENERATED CALL = (p).i.shr(-1240184852)
2021-03-12 08:20:29,742 [main:113] - Case = [public final val i: kotlin.Int defined in a.P[PropertyDescriptorImpl@2c9d9931], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d574310]]
2021-03-12 08:20:29,742 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d574310]
2021-03-12 08:20:29,823 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:20:29,824 [main:117] - GENERATED CALL = (p).i.plus(118)
2021-03-12 08:20:29,825 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 08:20:29,826 [main:66] - Compilation checking started
2021-03-12 08:20:29,827 [main:71] - Wrong syntax or breaks conditions
2021-03-12 08:20:29,828 [main:49] - Result = false
Text:
package a

inline class P(val i: Int = (p).i.countOneBits())

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}
2021-03-12 08:20:29,997 [main:112] - generating klass P text = inline class P(val i: Int)
2021-03-12 08:20:30,081 [main:194] - Type params = []
2021-03-12 08:20:30,162 [main:302] - generating value of type = Int true depth = 1
2021-03-12 08:20:30,394 [main:43] - GENERATING CALL OF suspend fun foo(p: P = P(1)) {}
2021-03-12 08:20:30,394 [main:61] - WITHOUT TYPE PARAMS = suspend fun foo(p: P = P(1)) {}
2021-03-12 08:20:30,469 [main:302] - generating value of type = P false depth = 1
2021-03-12 08:20:30,469 [main:112] - generating klass P text = inline class P(val i: Int)
2021-03-12 08:20:30,539 [main:194] - Type params = []
2021-03-12 08:20:30,623 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:20:30,624 [main:95] - GENERATED = foo(P(711889933))
2021-03-12 08:20:30,713 [main:43] - GENERATING CALL OF suspend fun bar(p: P) {}
2021-03-12 08:20:30,713 [main:61] - WITHOUT TYPE PARAMS = suspend fun bar(p: P) {}
2021-03-12 08:20:30,785 [main:302] - generating value of type = P false depth = 1
2021-03-12 08:20:30,786 [main:112] - generating klass P text = inline class P(val i: Int)
2021-03-12 08:20:30,856 [main:194] - Type params = []
2021-03-12 08:20:30,939 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:20:30,940 [main:95] - GENERATED = bar(P(-1383699568))
2021-03-12 08:20:31,032 [main:45] - Trying to change 2 nodes
2021-03-12 08:20:31,034 [main:53] - replacing (1, Int)
2021-03-12 08:20:31,035 [main:50] - replacing 1 Int
2021-03-12 08:20:31,035 [main:54] - Getting value of type Int
2021-03-12 08:20:31,116 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:20:31,116 [main:58] - GENERATED VALUE OF TYPE Int = -1462136284
2021-03-12 08:20:31,117 [main:61] - GENERATED IS CALL =false
2021-03-12 08:20:31,393 [main:67] - randomType = Function2<P, List<P>, Long>
2021-03-12 08:20:31,393 [main:106] - GETTING Int from Int
2021-03-12 08:20:31,473 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@53acdc6e]]
2021-03-12 08:20:31,473 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:20:31,544 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:20:31,545 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@53acdc6e]
2021-03-12 08:20:31,546 [main:117] - GENERATED CALL = (P(1013879359).i).compareTo(-506261961).takeHighestOneBit()
2021-03-12 08:20:31,546 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@38e09b9f]]
2021-03-12 08:20:31,546 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b]
2021-03-12 08:20:31,547 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@38e09b9f]
2021-03-12 08:20:31,547 [main:117] - GENERATED CALL = (P(1013879359).i).toByte().unaryMinus()
2021-03-12 08:20:31,548 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45b67d0e]]
2021-03-12 08:20:31,548 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d]
2021-03-12 08:20:31,548 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45b67d0e]
2021-03-12 08:20:31,549 [main:117] - GENERATED CALL = (P(1013879359).i).toShort().countOneBits()
2021-03-12 08:20:31,549 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@118cad8d]]
2021-03-12 08:20:31,549 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f]
2021-03-12 08:20:31,550 [main:117] - GENERATED CALL = (P(1013879359).i).toLong().sign
2021-03-12 08:20:31,550 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@1ae7c0a8]]
2021-03-12 08:20:31,550 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:20:31,551 [main:117] - GENERATED CALL = (P(1013879359).i).compareTo(P(1013879359).i).absoluteValue
2021-03-12 08:20:31,552 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@d30d6cd]]
2021-03-12 08:20:31,552 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d]
2021-03-12 08:20:31,552 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@d30d6cd]
2021-03-12 08:20:31,624 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:20:31,626 [main:117] - GENERATED CALL = (P(1013879359).i).toShort().compareTo(-90)
2021-03-12 08:20:31,626 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@425531c9]]
2021-03-12 08:20:31,626 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@425531c9]
2021-03-12 08:20:31,627 [main:117] - GENERATED CALL = (P(1013879359).i).countOneBits()
2021-03-12 08:20:31,628 [main:113] - Case = [@kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@1c465f7d]]
2021-03-12 08:20:31,628 [main:117] - GENERATED CALL = (P(1013879359).i).sign
2021-03-12 08:20:31,628 [main:113] - Case = [public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7118ba4d]]
2021-03-12 08:20:31,628 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7118ba4d]
2021-03-12 08:20:31,630 [main:117] - GENERATED CALL = (P(1013879359).i).or(P(1013879359).i)
2021-03-12 08:20:31,630 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e4c85e1]]
2021-03-12 08:20:31,630 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:20:31,630 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e4c85e1]
2021-03-12 08:20:31,732 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:20:31,734 [main:117] - GENERATED CALL = (P(1013879359).i).toInt().minus(66)
2021-03-12 08:20:31,734 [main:61] - replacement of 1 of type Int is (P(1013879359).i).or(P(1013879359).i)
2021-03-12 08:20:31,825 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:20:31,825 [main:66] - Compilation checking started
2021-03-12 08:20:32,262 [main:53] - Result = true
Text:
package a

inline class P(val i: Int)

suspend fun foo(p: P = P((P(1013879359).i).or(P(1013879359).i))) {}

suspend fun bar(p: P) {}
2021-03-12 08:20:32,262 [main:53] - replacing (1, Int)
2021-03-12 08:20:32,262 [main:50] - replacing 1 Int
2021-03-12 08:20:32,262 [main:54] - Getting value of type Int
2021-03-12 08:20:32,338 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:20:32,339 [main:58] - GENERATED VALUE OF TYPE Int = 1643343328
2021-03-12 08:20:32,339 [main:61] - GENERATED IS CALL =false
2021-03-12 08:20:32,340 [main:67] - randomType = P
2021-03-12 08:20:32,413 [main:302] - generating value of type = P false depth = 0
2021-03-12 08:20:32,413 [main:112] - generating klass P text = inline class P(val i: Int)
2021-03-12 08:20:32,496 [main:194] - Type params = []
2021-03-12 08:20:32,570 [main:302] - generating value of type = Int true depth = 2
2021-03-12 08:20:32,577 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6280d214]
2021-03-12 08:20:32,648 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:20:32,649 [main:78] - Generated call from random type = (P(-1184587870)).i.shl(1590038951)
2021-03-12 08:20:32,650 [main:61] - replacement of 1 of type Int is (P(-1184587870)).i.shl(1590038951)
2021-03-12 08:20:32,721 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:20:32,794 [main:119] - TRYING TO REPLACE CONSTANT 1013879359
2021-03-12 08:20:32,866 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:20:32,866 [main:66] - Compilation checking started
2021-03-12 08:20:33,305 [main:53] - Result = true
Text:
package a

inline class P(val i: Int)

suspend fun foo(p: P = P((P(P(1013879359).i).i).or(P(1013879359).i))) {}

suspend fun bar(p: P) {}
2021-03-12 08:20:33,305 [main:119] - TRYING TO REPLACE CONSTANT 1013879359
2021-03-12 08:20:33,387 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:20:33,387 [main:66] - Compilation checking started
2021-03-12 08:20:33,787 [main:53] - Result = true
Text:
package a

inline class P(val i: Int)

suspend fun foo(p: P = P((P(P(1013879359).i).i).or(P((P(P(1013879359).i).i).or(P(1013879359).i)).i))) {}

suspend fun bar(p: P) {}
2021-03-12 08:20:33,812 [main:41] - AFTER TRY 0 res = package a

inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}
2021-03-12 08:20:33,956 [main:112] - generating klass P text = inline class P(val i: Int)
2021-03-12 08:20:34,026 [main:194] - Type params = []
2021-03-12 08:20:34,096 [main:302] - generating value of type = Int true depth = 1
2021-03-12 08:20:34,249 [main:43] - GENERATING CALL OF suspend fun foo(p: P = P(1)) {}
2021-03-12 08:20:34,249 [main:61] - WITHOUT TYPE PARAMS = suspend fun foo(p: P = P(1)) {}
2021-03-12 08:20:34,321 [main:302] - generating value of type = P false depth = 1
2021-03-12 08:20:34,321 [main:112] - generating klass P text = inline class P(val i: Int)
2021-03-12 08:20:34,389 [main:194] - Type params = []
2021-03-12 08:20:34,456 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:20:34,457 [main:95] - GENERATED = foo(P(-1827795932))
2021-03-12 08:20:34,526 [main:43] - GENERATING CALL OF suspend fun bar(p: P) {}
2021-03-12 08:20:34,526 [main:61] - WITHOUT TYPE PARAMS = suspend fun bar(p: P) {}
2021-03-12 08:20:34,661 [main:302] - generating value of type = P false depth = 1
2021-03-12 08:20:34,661 [main:112] - generating klass P text = inline class P(val i: Int)
2021-03-12 08:20:34,744 [main:194] - Type params = []
2021-03-12 08:20:34,812 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:20:34,813 [main:95] - GENERATED = bar(P(-27740408))
2021-03-12 08:20:34,892 [main:43] - Try ‚Ññ0
2021-03-12 08:20:47,347 [main:48] - Already checked
2021-03-12 08:20:51,045 [main:69] - Trying to insert suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }
2021-03-12 08:20:51,243 [main:66] - Compilation checking started
2021-03-12 08:20:52,354 [main:103] - Trying to change 150 nodes
2021-03-12 08:20:52,355 [main:107] - replacing (getOrThrow(), Any?)
2021-03-12 08:20:52,355 [main:50] - replacing getOrThrow() Any?
2021-03-12 08:20:52,355 [main:54] - Getting value of type Any?
2021-03-12 08:20:52,510 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:20:52,510 [main:58] - GENERATED VALUE OF TYPE Any? = "oeqqm"
2021-03-12 08:20:52,510 [main:61] - GENERATED IS CALL =false
2021-03-12 08:20:52,684 [main:67] - randomType = Kla5
2021-03-12 08:20:52,881 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 08:20:52,884 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-12 08:20:52,923 [main:106] - GETTING Any? from Int
2021-03-12 08:20:52,983 [main:114] - replacement of getOrThrow() of type Any? is "oeqqm"
2021-03-12 08:20:53,119 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 08:20:53,120 [main:66] - Compilation checking started
2021-03-12 08:20:53,546 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn { prope3 ->
    prope3.resume(v)
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String {
    val prope2 = "K"
    val prope3 = fu0("O")
    val prope4 = prope3 + fu0(prope2)

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(prope3)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5."oeqqm"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:20:53,548 [main:107] - replacing (this, Kla1)
2021-03-12 08:20:53,548 [main:50] - replacing this Kla1
2021-03-12 08:20:53,548 [main:54] - Getting value of type Kla1
2021-03-12 08:20:53,702 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 08:20:53,703 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        this.prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}
2021-03-12 08:20:53,704 [main:58] - GENERATED VALUE OF TYPE Kla1 = Kla1()
2021-03-12 08:20:53,704 [main:61] - GENERATED IS CALL =true
2021-03-12 08:20:53,876 [main:67] - randomType = UInt
2021-03-12 08:20:54,008 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 08:20:54,055 [main:106] - GETTING Kla1 from Int
2021-03-12 08:20:54,094 [main:114] - replacement of this of type Kla1 is Kla1()
2021-03-12 08:20:54,229 [main:33] - Trying to replace Element(THIS_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:20:54,230 [main:66] - Compilation checking started
2021-03-12 08:20:54,896 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn { prope3 ->
    prope3.resume(v)
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String {
    val prope2 = "K"
    val prope3 = fu0("O")
    val prope4 = prope3 + fu0(prope2)

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(prope3)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:20:54,898 [main:107] - replacing (i, Int)
2021-03-12 08:20:54,898 [main:50] - replacing i Int
2021-03-12 08:20:54,898 [main:54] - Getting value of type Int
2021-03-12 08:20:55,037 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:20:55,038 [main:58] - GENERATED VALUE OF TYPE Int = -1406279289
2021-03-12 08:20:55,039 [main:61] - GENERATED IS CALL =false
2021-03-12 08:20:55,042 [main:67] - randomType = String
2021-03-12 08:20:55,176 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:20:55,208 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e0d2566]
2021-03-12 08:20:55,346 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:20:55,349 [main:78] - Generated call from random type = ("pwmmn").length.rem(-81)
2021-03-12 08:20:55,349 [main:106] - GETTING Int from Int
2021-03-12 08:20:55,411 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4f7e7ef8]]
2021-03-12 08:20:55,411 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:20:55,557 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:20:55,559 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4f7e7ef8]
2021-03-12 08:20:55,767 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:20:55,770 [main:117] - GENERATED CALL = (P(1118931594).i).compareTo(203881953).xor(1462298331)
2021-03-12 08:20:55,770 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@24ba5996]]
2021-03-12 08:20:55,770 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b]
2021-03-12 08:20:55,771 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@24ba5996]
2021-03-12 08:20:55,914 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:20:55,916 [main:117] - GENERATED CALL = (P(1118931594).i).toByte().plus(41)
2021-03-12 08:20:55,917 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3c108134]]
2021-03-12 08:20:55,917 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:20:56,045 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:20:56,047 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3c108134]
2021-03-12 08:20:56,048 [main:117] - GENERATED CALL = (P(1118931594).i).compareTo(-1762565669).countLeadingZeroBits()
2021-03-12 08:20:56,048 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@1ae7c0a8]]
2021-03-12 08:20:56,048 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:20:56,048 [main:117] - GENERATED CALL = (P(1118931594).i).compareTo(P(1118931594).i).absoluteValue
2021-03-12 08:20:56,048 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@45c1455]]
2021-03-12 08:20:56,048 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b]
2021-03-12 08:20:56,049 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@45c1455]
2021-03-12 08:20:56,219 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:20:56,221 [main:117] - GENERATED CALL = (P(1118931594).i).toByte().times(64)
2021-03-12 08:20:56,221 [main:113] - Case = [public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d657a3a]]
2021-03-12 08:20:56,221 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d657a3a]
2021-03-12 08:20:56,221 [main:117] - GENERATED CALL = (P(1118931594).i).inv()
2021-03-12 08:20:56,221 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@38ea499c]]
2021-03-12 08:20:56,221 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:20:56,221 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@38ea499c]
2021-03-12 08:20:56,222 [main:117] - GENERATED CALL = (P(1118931594).i).toInt().inc()
2021-03-12 08:20:56,222 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2c55842c]]
2021-03-12 08:20:56,222 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:20:56,222 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2c55842c]
2021-03-12 08:20:56,380 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:20:56,384 [main:117] - GENERATED CALL = (P(1118931594).i).toInt().times(67)
2021-03-12 08:20:56,384 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@53acdc6e]]
2021-03-12 08:20:56,384 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:20:56,556 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:20:56,558 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@53acdc6e]
2021-03-12 08:20:56,558 [main:117] - GENERATED CALL = (P(1118931594).i).compareTo(-1581451822).takeHighestOneBit()
2021-03-12 08:20:56,558 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4d84f8a6], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@5159fdd1]]
2021-03-12 08:20:56,558 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4d84f8a6]
2021-03-12 08:20:56,559 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@5159fdd1]
2021-03-12 08:20:56,559 [main:117] - GENERATED CALL = (P(1118931594).i).toFloat().roundToInt()
2021-03-12 08:20:56,559 [main:114] - replacement of i of type Int is (P(1118931594).i).toInt().inc()
2021-03-12 08:20:56,715 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:20:56,716 [main:66] - Compilation checking started
2021-03-12 08:20:57,357 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn { prope3 ->
    prope3.resume(v)
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String {
    val prope2 = "K"
    val prope3 = fu0("O")
    val prope4 = prope3 + fu0(prope2)

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(prope3)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (P(1118931594).i).toInt().inc() + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:20:57,359 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7, String)
2021-03-12 08:20:57,359 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7 String
2021-03-12 08:20:57,360 [main:54] - Getting value of type String
2021-03-12 08:20:57,483 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:20:57,485 [main:58] - GENERATED VALUE OF TYPE String = "trxuq"
2021-03-12 08:20:57,485 [main:61] - GENERATED IS CALL =false
2021-03-12 08:20:57,492 [main:67] - randomType = P
2021-03-12 08:20:57,621 [main:302] - generating value of type = P false depth = 0
2021-03-12 08:20:57,623 [main:112] - generating klass P text = inline class P(val i: Int)
2021-03-12 08:20:57,749 [main:194] - Type params = []
2021-03-12 08:20:57,876 [main:302] - generating value of type = Int true depth = 2
2021-03-12 08:20:57,886 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:20:57,886 [main:78] - Generated call from random type = (P(208643767)).i.toString(P(1118931594).i)
2021-03-12 08:20:57,888 [main:106] - GETTING String from Int
2021-03-12 08:20:57,937 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:20:57,938 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:20:57,938 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:20:58,070 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:20:58,072 [main:117] - GENERATED CALL = (P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143)
2021-03-12 08:20:58,072 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]]
2021-03-12 08:20:58,072 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:20:58,072 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]
2021-03-12 08:20:58,072 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().titlecase()
2021-03-12 08:20:58,073 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]]
2021-03-12 08:20:58,073 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b]
2021-03-12 08:20:58,073 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]
2021-03-12 08:20:58,197 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:20:58,199 [main:117] - GENERATED CALL = (P(1118931594).i).toByte().toString(-67781590)
2021-03-12 08:20:58,200 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:20:58,200 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:20:58,200 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:20:58,349 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:20:58,351 [main:117] - GENERATED CALL = (P(1118931594).i).toInt().toString(1508640417)
2021-03-12 08:20:58,351 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:20:58,351 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4]
2021-03-12 08:20:58,477 [main:302] - generating value of type = Long true depth = 0
2021-03-12 08:20:58,479 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:20:58,609 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:20:58,611 [main:117] - GENERATED CALL = (P(1118931594).i).div(5332790457162122302).toString(-882608680)
2021-03-12 08:20:58,612 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]]
2021-03-12 08:20:58,612 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:20:58,612 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]
2021-03-12 08:20:58,612 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().uppercase()
2021-03-12 08:20:58,612 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]]
2021-03-12 08:20:58,612 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:20:58,612 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]
2021-03-12 08:20:58,740 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:20:58,742 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().plus("eihtg")
2021-03-12 08:20:58,742 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]]
2021-03-12 08:20:58,742 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d]
2021-03-12 08:20:58,742 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]
2021-03-12 08:20:58,743 [main:117] - GENERATED CALL = (P(1118931594).i).toShort().toString(P(1118931594).i)
2021-03-12 08:20:58,743 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:20:58,743 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:20:58,867 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:20:58,869 [main:117] - GENERATED CALL = (P(1118931594).i).toString(-1603622492)
2021-03-12 08:20:58,869 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:20:58,870 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f]
2021-03-12 08:20:58,870 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:20:58,870 [main:117] - GENERATED CALL = (P(1118931594).i).toLong().toString(P(1118931594).i)
2021-03-12 08:20:58,870 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7 of type String is (P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143)
2021-03-12 08:20:59,022 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:20:59,023 [main:66] - Compilation checking started
2021-03-12 08:20:59,679 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn { prope3 ->
    prope3.resume(v)
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String {
    val prope2 = "K"
    val prope3 = fu0("O")
    val prope4 = prope3 + fu0(prope2)

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(prope3)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (P(1118931594).i).toInt().inc() + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:20:59,682 [main:107] - replacing (Kla0, Kla6)
2021-03-12 08:20:59,682 [main:50] - replacing Kla0 Kla6
2021-03-12 08:20:59,682 [main:54] - Getting value of type Kla6
2021-03-12 08:20:59,849 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 08:20:59,851 [main:112] - generating klass Kla6 text = companion object Kla6 : Kla0()
2021-03-12 08:20:59,851 [main:58] - GENERATED VALUE OF TYPE Kla6 = 
2021-03-12 08:20:59,996 [main:67] - randomType = Kla1
2021-03-12 08:21:00,143 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 08:21:00,145 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}
2021-03-12 08:21:00,176 [main:106] - GETTING Kla6 from Int
2021-03-12 08:21:00,231 [main:111] - Cant find and generate replacement for Kla0 type Kla6
2021-03-12 08:21:00,231 [main:107] - replacing (getOrThrow(), Ty0)
2021-03-12 08:21:00,231 [main:50] - replacing getOrThrow() Ty0
2021-03-12 08:21:00,231 [main:54] - Getting value of type Ty0
2021-03-12 08:21:00,359 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 08:21:00,367 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 08:21:00,374 [main:67] - randomType = Kla4
2021-03-12 08:21:00,506 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 08:21:00,508 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (P(1118931594).i).toInt().inc() + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 08:21:00,523 [main:106] - GETTING Ty0 from Int
2021-03-12 08:21:00,581 [main:111] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-12 08:21:00,581 [main:107] - replacing ("K", String)
2021-03-12 08:21:00,581 [main:50] - replacing "K" String
2021-03-12 08:21:00,581 [main:54] - Getting value of type String
2021-03-12 08:21:00,703 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:21:00,705 [main:58] - GENERATED VALUE OF TYPE String = "uijbf"
2021-03-12 08:21:00,706 [main:61] - GENERATED IS CALL =false
2021-03-12 08:21:01,012 [main:67] - randomType = ArrayDeque<UInt>
2021-03-12 08:21:01,152 [main:302] - generating value of type = ArrayDeque<UInt> false depth = 0
2021-03-12 08:21:01,302 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<UInt>): ArrayDeque<UInt> = TODO()
2021-03-12 08:21:01,306 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<UInt>): ArrayDeque<UInt> = TODO()
2021-03-12 08:21:01,616 [main:302] - generating value of type = Collection<UInt> false depth = 3
2021-03-12 08:21:01,761 [main:43] - GENERATING CALL OF fun <T> MutableList(size: kotlin.Int, init: (index: kotlin.Int)->UInt): Collection<UInt> = TODO()
2021-03-12 08:21:01,765 [main:61] - WITHOUT TYPE PARAMS = fun <T> MutableList(size: kotlin.Int, init: (index: kotlin.Int)->UInt): Collection<UInt> = TODO()
2021-03-12 08:21:02,275 [main:302] - generating value of type = Int true depth = 6
2021-03-12 08:21:02,277 [main:302] - generating value of type = Function1<[@kotlin.ParameterName] Int, UInt> false depth = 6
2021-03-12 08:21:02,279 [main:302] - generating value of type = UInt true depth = 7
2021-03-12 08:21:02,282 [main:95] - GENERATED = MutableList<UInt>(916490878, {a: Int -> 1058937574.toUInt()})
2021-03-12 08:21:02,282 [main:95] - GENERATED = ArrayDeque<UInt>(MutableList<UInt>(916490878, {a: Int -> 1058937574.toUInt()}))
2021-03-12 08:21:02,482 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:21:02,483 [main:78] - Generated call from random type = (ArrayDeque<UInt>(MutableList<UInt>(916490878, {a: Int -> 1058937574.toUInt()}))).size.toString(P(1118931594).i)
2021-03-12 08:21:02,484 [main:106] - GETTING String from Int
2021-03-12 08:21:02,536 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:21:02,536 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f]
2021-03-12 08:21:02,536 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:21:02,537 [main:117] - GENERATED CALL = (P(1118931594).i).toLong().toString(P(1118931594).i)
2021-03-12 08:21:02,537 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]]
2021-03-12 08:21:02,537 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b]
2021-03-12 08:21:02,537 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]
2021-03-12 08:21:02,537 [main:117] - GENERATED CALL = (P(1118931594).i).toByte().toString(P(1118931594).i)
2021-03-12 08:21:02,537 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:21:02,537 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:21:02,538 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:21:02,668 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:21:02,671 [main:117] - GENERATED CALL = (P(1118931594).i).toInt().toString(-1142434269)
2021-03-12 08:21:02,671 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:21:02,671 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:21:02,804 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:21:02,807 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:21:02,807 [main:117] - GENERATED CALL = (P(1118931594).i).compareTo(65677565).toString(P(1118931594).i)
2021-03-12 08:21:02,807 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]]
2021-03-12 08:21:02,807 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:02,807 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]
2021-03-12 08:21:02,807 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().titlecase()
2021-03-12 08:21:02,808 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]]
2021-03-12 08:21:02,808 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:02,808 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]
2021-03-12 08:21:02,922 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:21:02,924 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().plus("cmhra")
2021-03-12 08:21:02,924 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]]
2021-03-12 08:21:02,924 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:02,924 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]
2021-03-12 08:21:02,924 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().uppercase()
2021-03-12 08:21:02,925 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:21:02,925 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4]
2021-03-12 08:21:03,038 [main:302] - generating value of type = Long true depth = 0
2021-03-12 08:21:03,040 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:21:03,041 [main:117] - GENERATED CALL = (P(1118931594).i).div(79559548775993374).toString(P(1118931594).i)
2021-03-12 08:21:03,041 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]]
2021-03-12 08:21:03,041 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d]
2021-03-12 08:21:03,041 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]
2021-03-12 08:21:03,160 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:21:03,162 [main:117] - GENERATED CALL = (P(1118931594).i).toShort().toString(767635509)
2021-03-12 08:21:03,163 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:21:03,163 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:21:03,163 [main:117] - GENERATED CALL = (P(1118931594).i).toString(P(1118931594).i)
2021-03-12 08:21:03,163 [main:114] - replacement of "K" of type String is (P(1118931594).i).toChar().uppercase()
2021-03-12 08:21:03,278 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:21:03,278 [main:66] - Compilation checking started
2021-03-12 08:21:03,908 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn { prope3 ->
    prope3.resume(v)
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = fu0("O")
    val prope4 = prope3 + fu0(prope2)

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(prope3)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (P(1118931594).i).toInt().inc() + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:21:03,910 [main:107] - replacing ("tail-call optimization miss: method at " + it + " has state-machine ", String)
2021-03-12 08:21:03,911 [main:50] - replacing "tail-call optimization miss: method at " + it + " has state-machine " String
2021-03-12 08:21:03,911 [main:54] - Getting value of type String
2021-03-12 08:21:04,042 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:21:04,045 [main:58] - GENERATED VALUE OF TYPE String = "wggwl"
2021-03-12 08:21:04,045 [main:61] - GENERATED IS CALL =false
2021-03-12 08:21:04,058 [main:67] - randomType = Kla0
2021-03-12 08:21:04,197 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 08:21:04,199 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}
2021-03-12 08:21:04,317 [main:194] - Type params = []
2021-03-12 08:21:04,436 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 08:21:04,576 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:21:04,580 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:21:04,937 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 08:21:05,071 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:21:05,074 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:21:05,543 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 8
2021-03-12 08:21:05,705 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:21:05,708 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:21:06,102 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:21:06,102 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:21:06,102 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:21:06,123 [main:106] - GETTING String from Int
2021-03-12 08:21:06,178 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]]
2021-03-12 08:21:06,178 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b]
2021-03-12 08:21:06,178 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]
2021-03-12 08:21:06,350 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:21:06,352 [main:117] - GENERATED CALL = (P(1118931594).i).toByte().toString(-1088201723)
2021-03-12 08:21:06,352 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]]
2021-03-12 08:21:06,352 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:06,353 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]
2021-03-12 08:21:06,481 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:21:06,484 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().plus("imvsg")
2021-03-12 08:21:06,484 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]]
2021-03-12 08:21:06,484 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:06,484 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]
2021-03-12 08:21:06,484 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().titlecase()
2021-03-12 08:21:06,484 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:21:06,485 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:21:06,599 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:21:06,601 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:21:06,724 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:21:06,726 [main:117] - GENERATED CALL = (P(1118931594).i).compareTo(2060650446).toString(526117752)
2021-03-12 08:21:06,726 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]]
2021-03-12 08:21:06,726 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d]
2021-03-12 08:21:06,726 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]
2021-03-12 08:21:06,727 [main:117] - GENERATED CALL = (P(1118931594).i).toShort().toString(P(1118931594).i)
2021-03-12 08:21:06,727 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]]
2021-03-12 08:21:06,727 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:06,727 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]
2021-03-12 08:21:06,727 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().uppercase()
2021-03-12 08:21:06,727 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]]
2021-03-12 08:21:06,727 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:06,728 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]
2021-03-12 08:21:06,728 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().lowercase()
2021-03-12 08:21:06,728 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:21:06,728 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f]
2021-03-12 08:21:06,728 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:21:06,728 [main:117] - GENERATED CALL = (P(1118931594).i).toLong().toString(P(1118931594).i)
2021-03-12 08:21:06,728 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:21:06,728 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:21:06,859 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:21:06,861 [main:117] - GENERATED CALL = (P(1118931594).i).toString(92414192)
2021-03-12 08:21:06,861 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:21:06,861 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4]
2021-03-12 08:21:07,023 [main:302] - generating value of type = Long true depth = 0
2021-03-12 08:21:07,026 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:21:07,026 [main:117] - GENERATED CALL = (P(1118931594).i).div(2213654498839596737).toString(P(1118931594).i)
2021-03-12 08:21:07,026 [main:114] - replacement of "tail-call optimization miss: method at " + it + " has state-machine " of type String is (P(1118931594).i).toString(92414192)
2021-03-12 08:21:07,142 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:21:07,142 [main:66] - Compilation checking started
2021-03-12 08:21:07,770 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn { prope3 ->
    prope3.resume(v)
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = fu0("O")
    val prope4 = prope3 + fu0(prope2)

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(prope3)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((P(1118931594).i).toString(92414192) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (P(1118931594).i).toInt().inc() + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:21:07,774 [main:107] - replacing (Kla4(), Kla4)
2021-03-12 08:21:07,774 [main:50] - replacing Kla4() Kla4
2021-03-12 08:21:07,774 [main:54] - Getting value of type Kla4
2021-03-12 08:21:07,906 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 08:21:07,909 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (P(1118931594).i).toInt().inc() + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 08:21:07,910 [main:58] - GENERATED VALUE OF TYPE Kla4 = Kla4()
2021-03-12 08:21:07,910 [main:61] - GENERATED IS CALL =true
2021-03-12 08:21:08,052 [main:67] - randomType = UInt
2021-03-12 08:21:08,180 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 08:21:08,213 [main:106] - GETTING Kla4 from Int
2021-03-12 08:21:08,242 [main:114] - replacement of Kla4() of type Kla4 is Kla4()
2021-03-12 08:21:08,354 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:21:08,356 [main:107] - replacing ("\n", String)
2021-03-12 08:21:08,357 [main:50] - replacing "\n" String
2021-03-12 08:21:08,357 [main:54] - Getting value of type String
2021-03-12 08:21:08,471 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:21:08,473 [main:58] - GENERATED VALUE OF TYPE String = "alcpy"
2021-03-12 08:21:08,473 [main:61] - GENERATED IS CALL =false
2021-03-12 08:21:08,603 [main:67] - randomType = UInt
2021-03-12 08:21:08,726 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 08:21:08,758 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.ULong): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@672616c3]
2021-03-12 08:21:08,875 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 08:21:08,877 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@528471d6]
2021-03-12 08:21:09,038 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:21:09,041 [main:78] - Generated call from random type = (334552258.toUInt()).div(4313108497689600141.toULong()).toString(1026564877)
2021-03-12 08:21:09,042 [main:106] - GETTING String from Int
2021-03-12 08:21:09,085 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]]
2021-03-12 08:21:09,086 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:09,086 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]
2021-03-12 08:21:09,086 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().lowercase()
2021-03-12 08:21:09,086 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]]
2021-03-12 08:21:09,086 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d]
2021-03-12 08:21:09,086 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]
2021-03-12 08:21:09,208 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:21:09,212 [main:117] - GENERATED CALL = (P(1118931594).i).toShort().toString(-1708389768)
2021-03-12 08:21:09,212 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]]
2021-03-12 08:21:09,212 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:09,212 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]
2021-03-12 08:21:09,329 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:21:09,332 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().plus("kajsw")
2021-03-12 08:21:09,332 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:21:09,332 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:21:09,332 [main:117] - GENERATED CALL = (P(1118931594).i).toString(P(1118931594).i)
2021-03-12 08:21:09,332 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:21:09,332 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4]
2021-03-12 08:21:09,444 [main:302] - generating value of type = Long true depth = 0
2021-03-12 08:21:09,446 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:21:09,446 [main:117] - GENERATED CALL = (P(1118931594).i).div(-3564010251122316223).toString(P(1118931594).i)
2021-03-12 08:21:09,446 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]]
2021-03-12 08:21:09,446 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:09,446 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]
2021-03-12 08:21:09,447 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().titlecase()
2021-03-12 08:21:09,447 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:21:09,447 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:21:09,447 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:21:09,447 [main:117] - GENERATED CALL = (P(1118931594).i).toInt().toString(P(1118931594).i)
2021-03-12 08:21:09,447 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]]
2021-03-12 08:21:09,447 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:09,447 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]
2021-03-12 08:21:09,447 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().uppercase()
2021-03-12 08:21:09,447 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:21:09,448 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f]
2021-03-12 08:21:09,448 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:21:09,559 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:21:09,561 [main:117] - GENERATED CALL = (P(1118931594).i).toLong().toString(1469395274)
2021-03-12 08:21:09,561 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]]
2021-03-12 08:21:09,561 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b]
2021-03-12 08:21:09,561 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]
2021-03-12 08:21:09,562 [main:117] - GENERATED CALL = (P(1118931594).i).toByte().toString(P(1118931594).i)
2021-03-12 08:21:09,562 [main:114] - replacement of "\n" of type String is (P(1118931594).i).toString(P(1118931594).i)
2021-03-12 08:21:09,686 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:21:09,686 [main:66] - Compilation checking started
2021-03-12 08:21:10,284 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn { prope3 ->
    prope3.resume(v)
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = fu0("O")
    val prope4 = prope3 + fu0(prope2)

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(prope3)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((P(1118931594).i).toString(92414192) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (P(1118931594).i).toInt().inc() + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:21:10,286 [main:107] - replacing (Kla0, Kla6)
2021-03-12 08:21:10,286 [main:50] - replacing Kla0 Kla6
2021-03-12 08:21:10,286 [main:54] - Getting value of type Kla6
2021-03-12 08:21:10,409 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 08:21:10,411 [main:112] - generating klass Kla6 text = companion object Kla6 : Kla0()
2021-03-12 08:21:10,411 [main:58] - GENERATED VALUE OF TYPE Kla6 = 
2021-03-12 08:21:12,246 [main:67] - randomType = MutableMap<List<MutableMap<UInt, Function1<Long, UByte>>?>, MutableMap<UInt, Kla2<Kla0>>>
2021-03-12 08:21:12,247 [main:106] - GETTING Kla6 from Int
2021-03-12 08:21:12,291 [main:111] - Cant find and generate replacement for Kla0 type Kla6
2021-03-12 08:21:12,291 [main:107] - replacing ("tail-call optimization hit: method " + method, String)
2021-03-12 08:21:12,291 [main:50] - replacing "tail-call optimization hit: method " + method String
2021-03-12 08:21:12,291 [main:54] - Getting value of type String
2021-03-12 08:21:12,405 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:21:12,407 [main:58] - GENERATED VALUE OF TYPE String = "shzes"
2021-03-12 08:21:12,407 [main:61] - GENERATED IS CALL =false
2021-03-12 08:21:12,537 [main:67] - randomType = ULong
2021-03-12 08:21:12,668 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 08:21:12,721 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@528471d6]
2021-03-12 08:21:12,721 [main:78] - Generated call from random type = (3045302078931838022.toULong()).toString(P(1118931594).i)
2021-03-12 08:21:12,722 [main:106] - GETTING String from Int
2021-03-12 08:21:12,766 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:21:12,766 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:21:12,767 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:21:12,881 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:21:12,883 [main:117] - GENERATED CALL = (P(1118931594).i).toInt().toString(1152432205)
2021-03-12 08:21:12,883 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:21:12,883 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f]
2021-03-12 08:21:12,883 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:21:12,884 [main:117] - GENERATED CALL = (P(1118931594).i).toLong().toString(P(1118931594).i)
2021-03-12 08:21:12,884 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:21:12,884 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4]
2021-03-12 08:21:12,997 [main:302] - generating value of type = Long true depth = 0
2021-03-12 08:21:12,999 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:21:12,999 [main:117] - GENERATED CALL = (P(1118931594).i).div(5931145213466084952).toString(P(1118931594).i)
2021-03-12 08:21:12,999 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]]
2021-03-12 08:21:12,999 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:12,999 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]
2021-03-12 08:21:13,000 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().uppercase()
2021-03-12 08:21:13,000 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:21:13,000 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:21:13,000 [main:117] - GENERATED CALL = (P(1118931594).i).toString(P(1118931594).i)
2021-03-12 08:21:13,000 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]]
2021-03-12 08:21:13,000 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:13,000 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]
2021-03-12 08:21:13,112 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:21:13,114 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().plus("qdezg")
2021-03-12 08:21:13,114 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]]
2021-03-12 08:21:13,114 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b]
2021-03-12 08:21:13,114 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]
2021-03-12 08:21:13,226 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:21:13,228 [main:117] - GENERATED CALL = (P(1118931594).i).toByte().toString(2089435905)
2021-03-12 08:21:13,228 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]]
2021-03-12 08:21:13,228 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:13,229 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]
2021-03-12 08:21:13,229 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().lowercase()
2021-03-12 08:21:13,229 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]]
2021-03-12 08:21:13,229 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:13,229 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]
2021-03-12 08:21:13,229 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().titlecase()
2021-03-12 08:21:13,229 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:21:13,229 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:21:13,230 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:21:13,230 [main:117] - GENERATED CALL = (P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i)
2021-03-12 08:21:13,230 [main:114] - replacement of "tail-call optimization hit: method " + method of type String is (P(1118931594).i).toChar().titlecase()
2021-03-12 08:21:13,370 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:21:13,370 [main:66] - Compilation checking started
2021-03-12 08:21:13,934 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn { prope3 ->
    prope3.resume(v)
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = fu0("O")
    val prope4 = prope3 + fu0(prope2)

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(prope3)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((P(1118931594).i).toString(92414192) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (P(1118931594).i).toInt().inc() + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:21:13,937 [main:107] - replacing (prope5.getOrThrow(), Ty0)
2021-03-12 08:21:13,937 [main:50] - replacing prope5.getOrThrow() Ty0
2021-03-12 08:21:13,937 [main:54] - Getting value of type Ty0
2021-03-12 08:21:14,049 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 08:21:14,054 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 08:21:14,178 [main:67] - randomType = Byte
2021-03-12 08:21:14,289 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:21:14,321 [main:106] - GETTING Ty0 from Int
2021-03-12 08:21:14,350 [main:111] - Cant find and generate replacement for prope5.getOrThrow() type Ty0
2021-03-12 08:21:14,350 [main:107] - replacing (prope5, Result<Ty0>)
2021-03-12 08:21:14,350 [main:50] - replacing prope5 Result<Ty0>
2021-03-12 08:21:14,350 [main:54] - Getting value of type Result<Ty0>
2021-03-12 08:21:14,468 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-12 08:21:14,585 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 08:21:14,588 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 08:21:14,830 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 08:21:14,830 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-12 08:21:15,101 [main:67] - randomType = ULong?
2021-03-12 08:21:15,237 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 08:21:15,275 [main:106] - GETTING Result<Ty0> from Int
2021-03-12 08:21:15,304 [main:111] - Cant find and generate replacement for prope5 type Result<Ty0>
2021-03-12 08:21:15,304 [main:107] - replacing (prope8, Boolean)
2021-03-12 08:21:15,304 [main:50] - replacing prope8 Boolean
2021-03-12 08:21:15,305 [main:54] - Getting value of type Boolean
2021-03-12 08:21:15,417 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:21:15,419 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 08:21:15,420 [main:61] - GENERATED IS CALL =false
2021-03-12 08:21:15,672 [main:67] - randomType = UInt?
2021-03-12 08:21:15,783 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 08:21:15,815 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@ee7d236]
2021-03-12 08:21:15,815 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 08:21:15,947 [main:78] - Generated call from random type = (1748395295.toUInt())?.toShort().equals(null)
2021-03-12 08:21:15,949 [main:106] - GETTING Boolean from Int
2021-03-12 08:21:16,008 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]]
2021-03-12 08:21:16,008 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:21:16,009 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]
2021-03-12 08:21:16,137 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:21:16,138 [main:117] - GENERATED CALL = (P(1118931594).i).toInt().equals("avboo")
2021-03-12 08:21:16,138 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]]
2021-03-12 08:21:16,138 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]
2021-03-12 08:21:16,258 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:21:16,259 [main:117] - GENERATED CALL = (P(1118931594).i).equals("mgjxn")
2021-03-12 08:21:16,259 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21d5d759]]
2021-03-12 08:21:16,259 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:16,259 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21d5d759]
2021-03-12 08:21:16,259 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().isLetter()
2021-03-12 08:21:16,260 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]]
2021-03-12 08:21:16,260 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]
2021-03-12 08:21:16,379 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:21:16,379 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]
2021-03-12 08:21:16,487 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:21:16,489 [main:117] - GENERATED CALL = (P(1118931594).i).equals("mxcxp").or(false)
2021-03-12 08:21:16,489 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49fbfecf], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4047829]]
2021-03-12 08:21:16,489 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49fbfecf]
2021-03-12 08:21:16,602 [main:302] - generating value of type = Double true depth = 0
2021-03-12 08:21:16,605 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4047829]
2021-03-12 08:21:16,606 [main:117] - GENERATED CALL = (P(1118931594).i).div(0.8287106296827804).isInfinite()
2021-03-12 08:21:16,606 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ef15f6e]]
2021-03-12 08:21:16,606 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:16,606 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ef15f6e]
2021-03-12 08:21:16,606 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().isISOControl()
2021-03-12 08:21:16,606 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@706b2ff0], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3a79289b]]
2021-03-12 08:21:16,606 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@706b2ff0]
2021-03-12 08:21:16,606 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3a79289b]
2021-03-12 08:21:16,606 [main:117] - GENERATED CALL = (P(1118931594).i).toDouble().isFinite()
2021-03-12 08:21:16,606 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]]
2021-03-12 08:21:16,606 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:21:16,607 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]
2021-03-12 08:21:16,779 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:21:16,779 [main:117] - GENERATED CALL = (P(1118931594).i).compareTo(P(1118931594).i).equals("hwsrl")
2021-03-12 08:21:16,779 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5562ac50]]
2021-03-12 08:21:16,779 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:16,780 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5562ac50]
2021-03-12 08:21:16,780 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().isLowerCase()
2021-03-12 08:21:16,780 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e0ee1d2]]
2021-03-12 08:21:16,780 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:16,780 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e0ee1d2]
2021-03-12 08:21:16,780 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().isWhitespace()
2021-03-12 08:21:16,780 [main:114] - replacement of prope8 of type Boolean is (P(1118931594).i).equals("mgjxn")
2021-03-12 08:21:16,895 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:21:16,895 [main:66] - Compilation checking started
2021-03-12 08:21:17,454 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn { prope3 ->
    prope3.resume(v)
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = fu0("O")
    val prope4 = prope3 + fu0(prope2)

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(prope3)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((P(1118931594).i).toString(92414192) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (P(1118931594).i).toInt().inc() + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:21:17,456 [main:107] - replacing (exception, Throwable)
2021-03-12 08:21:17,456 [main:50] - replacing exception Throwable
2021-03-12 08:21:17,456 [main:54] - Getting value of type Throwable
2021-03-12 08:21:17,572 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 08:21:17,688 [main:43] - GENERATING CALL OF fun Error(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 08:21:17,691 [main:61] - WITHOUT TYPE PARAMS = fun Error(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 08:21:17,946 [main:302] - generating value of type = Throwable false depth = 3
2021-03-12 08:21:18,066 [main:43] - GENERATING CALL OF fun AssertionError(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 08:21:18,069 [main:61] - WITHOUT TYPE PARAMS = fun AssertionError(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 08:21:18,435 [main:302] - generating value of type = String true depth = 6
2021-03-12 08:21:18,437 [main:302] - generating value of type = Throwable false depth = 6
2021-03-12 08:21:18,442 [main:95] - GENERATED = AssertionError("ugbvh", Throwable())
2021-03-12 08:21:18,443 [main:95] - GENERATED = Error(AssertionError("ugbvh", Throwable()))
2021-03-12 08:21:18,443 [main:58] - GENERATED VALUE OF TYPE Throwable = Error(AssertionError("ugbvh", Throwable()))
2021-03-12 08:21:18,443 [main:61] - GENERATED IS CALL =true
2021-03-12 08:21:18,450 [main:67] - randomType = Kla3
2021-03-12 08:21:18,560 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 08:21:18,561 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((P(1118931594).i).toString(92414192) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}
2021-03-12 08:21:18,567 [main:106] - GETTING Throwable from Int
2021-03-12 08:21:18,596 [main:114] - replacement of exception of type Throwable is Error(AssertionError("ugbvh", Throwable()))
2021-03-12 08:21:18,749 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:21:18,750 [main:66] - Compilation checking started
2021-03-12 08:21:19,316 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn { prope3 ->
    prope3.resume(v)
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = fu0("O")
    val prope4 = prope3 + fu0(prope2)

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(prope3)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((P(1118931594).i).toString(92414192) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (P(1118931594).i).toInt().inc() + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:21:19,319 [main:107] - replacing (Kla1().prope5, Any?)
2021-03-12 08:21:19,319 [main:50] - replacing Kla1().prope5 Any?
2021-03-12 08:21:19,319 [main:54] - Getting value of type Any?
2021-03-12 08:21:19,450 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:21:19,450 [main:58] - GENERATED VALUE OF TYPE Any? = "brdhk"
2021-03-12 08:21:19,450 [main:61] - GENERATED IS CALL =false
2021-03-12 08:21:19,752 [main:67] - randomType = Collection<Kla4>
2021-03-12 08:21:19,753 [main:106] - GETTING Any? from Int
2021-03-12 08:21:19,783 [main:114] - replacement of Kla1().prope5 of type Any? is "brdhk"
2021-03-12 08:21:19,903 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 08:21:19,904 [main:66] - Compilation checking started
2021-03-12 08:21:20,267 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn { prope3 ->
    prope3.resume(v)
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = fu0("O")
    val prope4 = prope3 + fu0(prope2)

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(prope3)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        "brdhk" = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((P(1118931594).i).toString(92414192) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (P(1118931594).i).toInt().inc() + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:21:20,270 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 08:21:20,270 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 08:21:20,271 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 08:21:20,386 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 08:21:20,391 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 08:21:20,399 [main:67] - randomType = Kla4
2021-03-12 08:21:20,513 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 08:21:20,515 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (P(1118931594).i).toInt().inc() + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 08:21:20,526 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 08:21:20,569 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 08:21:20,569 [main:107] - replacing (0, Int)
2021-03-12 08:21:20,569 [main:50] - replacing 0 Int
2021-03-12 08:21:20,569 [main:54] - Getting value of type Int
2021-03-12 08:21:20,683 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:21:20,685 [main:58] - GENERATED VALUE OF TYPE Int = -88903899
2021-03-12 08:21:20,685 [main:61] - GENERATED IS CALL =false
2021-03-12 08:21:20,810 [main:67] - randomType = Double
2021-03-12 08:21:20,922 [main:302] - generating value of type = Double true depth = 0
2021-03-12 08:21:20,973 [main:149] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@24614b8a]
2021-03-12 08:21:20,973 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@542e3b11]
2021-03-12 08:21:21,097 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:21:21,099 [main:78] - Generated call from random type = (0.7710914626188926).toShort().plus(-42)
2021-03-12 08:21:21,099 [main:114] - replacement of 0 of type Int is (0.7710914626188926).toShort().plus(-42)
2021-03-12 08:21:21,212 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:21:21,212 [main:66] - Compilation checking started
2021-03-12 08:21:21,772 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn { prope3 ->
    prope3.resume(v)
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = fu0("O")
    val prope4 = prope3 + fu0(prope2)

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(prope3)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((P(1118931594).i).toString(92414192) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (P(1118931594).i).toInt().inc() + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:21:21,774 [main:107] - replacing ("O", String)
2021-03-12 08:21:21,774 [main:50] - replacing "O" String
2021-03-12 08:21:21,774 [main:54] - Getting value of type String
2021-03-12 08:21:21,898 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:21:21,900 [main:58] - GENERATED VALUE OF TYPE String = "blqdq"
2021-03-12 08:21:21,900 [main:61] - GENERATED IS CALL =false
2021-03-12 08:21:22,057 [main:67] - randomType = List<Kla4>
2021-03-12 08:21:22,058 [main:106] - GETTING String from Int
2021-03-12 08:21:22,119 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:21:22,119 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:21:22,119 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:21:22,120 [main:117] - GENERATED CALL = (P(1118931594).i).toInt().toString(P(1118931594).i)
2021-03-12 08:21:22,120 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]]
2021-03-12 08:21:22,120 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:22,120 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]
2021-03-12 08:21:22,120 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().uppercase()
2021-03-12 08:21:22,120 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]]
2021-03-12 08:21:22,120 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:22,120 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]
2021-03-12 08:21:22,121 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().titlecase()
2021-03-12 08:21:22,121 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:21:22,121 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:21:22,121 [main:117] - GENERATED CALL = (P(1118931594).i).toString(P(1118931594).i)
2021-03-12 08:21:22,121 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]]
2021-03-12 08:21:22,121 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:22,121 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]
2021-03-12 08:21:22,121 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().lowercase()
2021-03-12 08:21:22,121 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]]
2021-03-12 08:21:22,121 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d]
2021-03-12 08:21:22,121 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]
2021-03-12 08:21:22,122 [main:117] - GENERATED CALL = (P(1118931594).i).toShort().toString(P(1118931594).i)
2021-03-12 08:21:22,122 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]]
2021-03-12 08:21:22,122 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:22,122 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]
2021-03-12 08:21:22,279 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:21:22,282 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().plus("flreg")
2021-03-12 08:21:22,282 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:21:22,282 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4]
2021-03-12 08:21:22,408 [main:302] - generating value of type = Long true depth = 0
2021-03-12 08:21:22,410 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:21:22,525 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:21:22,527 [main:117] - GENERATED CALL = (P(1118931594).i).div(-1219242088742663598).toString(-809636528)
2021-03-12 08:21:22,527 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:21:22,527 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f]
2021-03-12 08:21:22,527 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:21:22,639 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:21:22,641 [main:117] - GENERATED CALL = (P(1118931594).i).toLong().toString(-1006226567)
2021-03-12 08:21:22,641 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:21:22,641 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:21:22,641 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:21:22,641 [main:117] - GENERATED CALL = (P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i)
2021-03-12 08:21:22,641 [main:114] - replacement of "O" of type String is (P(1118931594).i).div(-1219242088742663598).toString(-809636528)
2021-03-12 08:21:22,756 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:21:22,757 [main:66] - Compilation checking started
2021-03-12 08:21:23,341 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn { prope3 ->
    prope3.resume(v)
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = fu0((P(1118931594).i).div(-1219242088742663598).toString(-809636528))
    val prope4 = prope3 + fu0(prope2)

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(prope3)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((P(1118931594).i).toString(92414192) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (P(1118931594).i).toInt().inc() + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:21:23,343 [main:107] - replacing ({ prope3 ->
    prope3.resume(v)
    COROUTINE_SUSPENDED
}, Function1<Continuation<String>, Any?>)
2021-03-12 08:21:23,343 [main:50] - replacing { prope3 ->
    prope3.resume(v)
    COROUTINE_SUSPENDED
} Function1<Continuation<String>, Any?>
2021-03-12 08:21:23,343 [main:54] - Getting value of type Function1<Continuation<String>, Any?>
2021-03-12 08:21:23,465 [main:302] - generating value of type = Function1<Continuation<String>, Any?> false depth = 0
2021-03-12 08:21:23,467 [main:302] - generating value of type = Any false depth = 1
2021-03-12 08:21:23,467 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<String>, Any?> = {a: Continuation<String> -> "qxzuo"}
2021-03-12 08:21:23,467 [main:61] - GENERATED IS CALL =false
2021-03-12 08:21:23,475 [main:67] - randomType = Kla3
2021-03-12 08:21:23,598 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 08:21:23,600 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((P(1118931594).i).toString(92414192) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}
2021-03-12 08:21:23,609 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-12 08:21:23,663 [main:114] - replacement of { prope3 ->
    prope3.resume(v)
    COROUTINE_SUSPENDED
} of type Function1<Continuation<String>, Any?> is {a: Continuation<String> -> "qxzuo"}
2021-03-12 08:21:23,779 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 08:21:23,779 [main:66] - Compilation checking started
2021-03-12 08:21:24,351 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = fu0((P(1118931594).i).div(-1219242088742663598).toString(-809636528))
    val prope4 = prope3 + fu0(prope2)

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(prope3)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((P(1118931594).i).toString(92414192) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (P(1118931594).i).toInt().inc() + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:21:24,353 [main:107] - replacing ({ it?.methodName?.startsWith(method) == true }, Function0<Boolean>)
2021-03-12 08:21:24,354 [main:50] - replacing { it?.methodName?.startsWith(method) == true } Function0<Boolean>
2021-03-12 08:21:24,354 [main:54] - Getting value of type Function0<Boolean>
2021-03-12 08:21:24,468 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-12 08:21:24,471 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 08:21:24,473 [main:58] - GENERATED VALUE OF TYPE Function0<Boolean> = { true}
2021-03-12 08:21:24,473 [main:61] - GENERATED IS CALL =false
2021-03-12 08:21:24,477 [main:67] - randomType = Boolean
2021-03-12 08:21:24,594 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:21:24,608 [main:106] - GETTING Function0<Boolean> from Int
2021-03-12 08:21:24,650 [main:114] - replacement of { it?.methodName?.startsWith(method) == true } of type Function0<Boolean> is { true}
2021-03-12 08:21:24,773 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 08:21:24,773 [main:66] - Compilation checking started
2021-03-12 08:21:25,374 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = fu0((P(1118931594).i).div(-1219242088742663598).toString(-809636528))
    val prope4 = prope3 + fu0(prope2)

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.exceptionOrNull()?.let(prope3)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((P(1118931594).i).toString(92414192) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (P(1118931594).i).toInt().inc() + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:21:25,377 [main:107] - replacing (prope5.exceptionOrNull()?.let(prope3), Unit?)
2021-03-12 08:21:25,377 [main:50] - replacing prope5.exceptionOrNull()?.let(prope3) Unit?
2021-03-12 08:21:25,377 [main:54] - Getting value of type Unit?
2021-03-12 08:21:25,488 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 08:21:25,606 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:21:25,610 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:21:25,855 [main:95] - GENERATED = println(null)
2021-03-12 08:21:25,855 [main:58] - GENERATED VALUE OF TYPE Unit? = println(null)
2021-03-12 08:21:25,855 [main:61] - GENERATED IS CALL =true
2021-03-12 08:21:26,117 [main:67] - randomType = LinkedHashSet<Long?>
2021-03-12 08:21:26,227 [main:302] - generating value of type = LinkedHashSet<Long?> false depth = 0
2021-03-12 08:21:26,343 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Long?): LkedHashSet<Long?> = TODO()
2021-03-12 08:21:26,346 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Long?): LkedHashSet<Long?> = TODO()
2021-03-12 08:21:26,462 [main:302] - generating value of type = Long true depth = 3
2021-03-12 08:21:26,464 [main:95] - GENERATED = linkedSetOf<Long?>(-967000763942270004)
2021-03-12 08:21:26,624 [main:149] - GENERATING call of type @kotlin.internal.HidesMembers public inline fun <T> kotlin.collections.Iterable<T>.forEach(action: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5fa70745]
2021-03-12 08:21:26,737 [main:302] - generating value of type = Function1<T, Unit> false depth = 0
2021-03-12 08:21:26,739 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:21:26,854 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:21:26,857 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:21:27,119 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 08:21:27,121 [main:95] - GENERATED = check(true)
2021-03-12 08:21:27,121 [main:78] - Generated call from random type = (linkedSetOf<Long?>(-967000763942270004)).forEach({a: T -> check(true)})
2021-03-12 08:21:27,123 [main:106] - GETTING Unit? from Int
2021-03-12 08:21:27,161 [main:114] - replacement of prope5.exceptionOrNull()?.let(prope3) of type Unit? is println(null)
2021-03-12 08:21:27,274 [main:33] - Trying to replace Element(SAFE_ACCESS_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:21:27,275 [main:66] - Compilation checking started
2021-03-12 08:21:27,818 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = fu0((P(1118931594).i).div(-1219242088742663598).toString(-809636528))
    val prope4 = prope3 + fu0(prope2)

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((P(1118931594).i).toString(92414192) +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (P(1118931594).i).toInt().inc() + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:21:27,820 [main:107] - replacing ((P(1118931594).i).toString(92414192) +
                prope6.joinToString(separator = "\n"), String)
2021-03-12 08:21:27,820 [main:50] - replacing (P(1118931594).i).toString(92414192) +
                prope6.joinToString(separator = "\n") String
2021-03-12 08:21:27,820 [main:54] - Getting value of type String
2021-03-12 08:21:27,949 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:21:27,951 [main:58] - GENERATED VALUE OF TYPE String = "yxjmr"
2021-03-12 08:21:27,952 [main:61] - GENERATED IS CALL =false
2021-03-12 08:21:28,223 [main:67] - randomType = ArrayList<Long?>
2021-03-12 08:21:28,349 [main:302] - generating value of type = ArrayList<Long?> false depth = 0
2021-03-12 08:21:28,466 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Long?> = TODO()
2021-03-12 08:21:28,469 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Long?> = TODO()
2021-03-12 08:21:28,591 [main:95] - GENERATED = arrayListOf<Long?>()
2021-03-12 08:21:28,723 [main:149] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@73d1fc35]
2021-03-12 08:21:28,724 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6e4b15e9]
2021-03-12 08:21:28,724 [main:78] - Generated call from random type = (arrayListOf<Long?>()).toArray().contentToString()
2021-03-12 08:21:28,725 [main:106] - GETTING String from Int
2021-03-12 08:21:28,789 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]]
2021-03-12 08:21:28,789 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b]
2021-03-12 08:21:28,789 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]
2021-03-12 08:21:28,790 [main:117] - GENERATED CALL = (P(1118931594).i).toByte().toString(P(1118931594).i)
2021-03-12 08:21:28,790 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:21:28,790 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4]
2021-03-12 08:21:28,918 [main:302] - generating value of type = Long true depth = 0
2021-03-12 08:21:28,920 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:21:29,038 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:21:29,041 [main:117] - GENERATED CALL = (P(1118931594).i).div(-4613178209345701840).toString(731285758)
2021-03-12 08:21:29,041 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]]
2021-03-12 08:21:29,041 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d]
2021-03-12 08:21:29,041 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]
2021-03-12 08:21:29,154 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:21:29,156 [main:117] - GENERATED CALL = (P(1118931594).i).toShort().toString(-83507087)
2021-03-12 08:21:29,156 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]]
2021-03-12 08:21:29,156 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:29,156 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]
2021-03-12 08:21:29,267 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:21:29,269 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().plus("wcwgo")
2021-03-12 08:21:29,269 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]]
2021-03-12 08:21:29,269 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:29,270 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]
2021-03-12 08:21:29,270 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().lowercase()
2021-03-12 08:21:29,270 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:21:29,270 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:21:29,396 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:21:29,398 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:21:29,399 [main:117] - GENERATED CALL = (P(1118931594).i).compareTo(-448058219).toString(P(1118931594).i)
2021-03-12 08:21:29,399 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]]
2021-03-12 08:21:29,399 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:29,399 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]
2021-03-12 08:21:29,399 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().uppercase()
2021-03-12 08:21:29,399 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:21:29,399 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f]
2021-03-12 08:21:29,399 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:21:29,509 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:21:29,511 [main:117] - GENERATED CALL = (P(1118931594).i).toLong().toString(-1031303555)
2021-03-12 08:21:29,512 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]]
2021-03-12 08:21:29,512 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:29,512 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]
2021-03-12 08:21:29,512 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().titlecase()
2021-03-12 08:21:29,512 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:21:29,512 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:21:29,512 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:21:29,512 [main:117] - GENERATED CALL = (P(1118931594).i).toInt().toString(P(1118931594).i)
2021-03-12 08:21:29,512 [main:114] - replacement of (P(1118931594).i).toString(92414192) +
                prope6.joinToString(separator = "\n") of type String is (P(1118931594).i).toChar().titlecase()
2021-03-12 08:21:29,620 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:21:29,620 [main:66] - Compilation checking started
2021-03-12 08:21:30,144 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = fu0((P(1118931594).i).div(-1219242088742663598).toString(-809636528))
    val prope4 = prope3 + fu0(prope2)

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (P(1118931594).i).toInt().inc() + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:21:30,146 [main:107] - replacing (" is not subtype of CoroutineStackFrame", String)
2021-03-12 08:21:30,146 [main:50] - replacing " is not subtype of CoroutineStackFrame" String
2021-03-12 08:21:30,146 [main:54] - Getting value of type String
2021-03-12 08:21:30,267 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:21:30,269 [main:58] - GENERATED VALUE OF TYPE String = "viuoo"
2021-03-12 08:21:30,269 [main:61] - GENERATED IS CALL =false
2021-03-12 08:21:30,529 [main:67] - randomType = LinkedHashMap<String, List<Boolean>>
2021-03-12 08:21:30,636 [main:302] - generating value of type = LinkedHashMap<String, List<Boolean>> false depth = 0
2021-03-12 08:21:30,766 [main:43] - GENERATING CALL OF fun <V> linkedStringMapOf(pairs: Pair<String, List<Boolean>>): LkedHashMap<Strg, List<Boolean>> = TODO()
2021-03-12 08:21:30,769 [main:61] - WITHOUT TYPE PARAMS = fun <V> linkedStringMapOf(pairs: Pair<String, List<Boolean>>): LkedHashMap<Strg, List<Boolean>> = TODO()
2021-03-12 08:21:30,883 [main:302] - generating value of type = Pair<String, List<Boolean>> false depth = 3
2021-03-12 08:21:30,999 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: String, second: List<Boolean>): Pair<String, List<Boolean>> = TODO()
2021-03-12 08:21:31,002 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: String, second: List<Boolean>): Pair<String, List<Boolean>> = TODO()
2021-03-12 08:21:31,120 [main:302] - generating value of type = String true depth = 6
2021-03-12 08:21:31,122 [main:302] - generating value of type = List<Boolean> false depth = 6
2021-03-12 08:21:31,237 [main:43] - GENERATING CALL OF fun <T> listOf(element: Boolean): List<Boolean> = TODO()
2021-03-12 08:21:31,240 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOf(element: Boolean): List<Boolean> = TODO()
2021-03-12 08:21:31,351 [main:302] - generating value of type = Boolean true depth = 9
2021-03-12 08:21:31,353 [main:95] - GENERATED = listOf<Boolean>(true)
2021-03-12 08:21:31,353 [main:95] - GENERATED = Pair<String, List<Boolean>>("rsvqd", listOf<Boolean>(true))
2021-03-12 08:21:31,354 [main:95] - GENERATED = linkedStringMapOf<List<Boolean>>(Pair<String, List<Boolean>>("rsvqd", listOf<Boolean>(true)))
2021-03-12 08:21:31,555 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:21:31,681 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:21:31,684 [main:78] - Generated call from random type = (linkedStringMapOf<List<Boolean>>(Pair<String, List<Boolean>>("rsvqd", listOf<Boolean>(true)))).size.toString(-1879521952)
2021-03-12 08:21:31,684 [main:114] - replacement of " is not subtype of CoroutineStackFrame" of type String is (linkedStringMapOf<List<Boolean>>(Pair<String, List<Boolean>>("rsvqd", listOf<Boolean>(true)))).size.toString(-1879521952)
2021-03-12 08:21:31,794 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:21:31,794 [main:66] - Compilation checking started
2021-03-12 08:21:32,184 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = fu0((P(1118931594).i).div(-1219242088742663598).toString(-809636528))
    val prope4 = prope3 + fu0(prope2)

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + (linkedStringMapOf<List<Boolean>>(Pair<String, List<Boolean>>("rsvqd", listOf<Boolean>(true)))).size.toString(-1879521952))
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (P(1118931594).i).toInt().inc() + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:21:32,186 [main:107] - replacing (prope1, Kla4)
2021-03-12 08:21:32,186 [main:50] - replacing prope1 Kla4
2021-03-12 08:21:32,186 [main:54] - Getting value of type Kla4
2021-03-12 08:21:32,299 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 08:21:32,301 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (P(1118931594).i).toInt().inc() + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 08:21:32,301 [main:58] - GENERATED VALUE OF TYPE Kla4 = Kla4()
2021-03-12 08:21:32,301 [main:61] - GENERATED IS CALL =true
2021-03-12 08:21:32,428 [main:67] - randomType = UShort
2021-03-12 08:21:32,546 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 08:21:32,589 [main:106] - GETTING Kla4 from Int
2021-03-12 08:21:32,631 [main:114] - replacement of prope1 of type Kla4 is Kla4()
2021-03-12 08:21:32,740 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:21:32,740 [main:66] - Compilation checking started
2021-03-12 08:21:33,285 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = fu0((P(1118931594).i).div(-1219242088742663598).toString(-809636528))
    val prope4 = prope3 + fu0(prope2)

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (P(1118931594).i).toInt().inc() + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:21:33,288 [main:107] - replacing (numberOfSuspensions, Int)
2021-03-12 08:21:33,288 [main:50] - replacing numberOfSuspensions Int
2021-03-12 08:21:33,288 [main:54] - Getting value of type Int
2021-03-12 08:21:33,435 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:21:33,438 [main:58] - GENERATED VALUE OF TYPE Int = -1878650629
2021-03-12 08:21:33,438 [main:61] - GENERATED IS CALL =false
2021-03-12 08:21:34,807 [main:67] - randomType = MutableMap<List<P>, Function2<List<Short>, Kla4?, Kla2<List<Kla2<Boolean?>>>?>>
2021-03-12 08:21:34,807 [main:106] - GETTING Int from Int
2021-03-12 08:21:34,842 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43ac6084]]
2021-03-12 08:21:34,842 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:21:34,842 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43ac6084]
2021-03-12 08:21:34,842 [main:117] - GENERATED CALL = (P(1118931594).i).compareTo(P(1118931594).i).unaryPlus()
2021-03-12 08:21:34,842 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4d84f8a6], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@5159fdd1]]
2021-03-12 08:21:34,842 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4d84f8a6]
2021-03-12 08:21:34,842 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@5159fdd1]
2021-03-12 08:21:34,842 [main:117] - GENERATED CALL = (P(1118931594).i).toFloat().roundToInt()
2021-03-12 08:21:34,843 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@706b2ff0], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@1cebff9f]]
2021-03-12 08:21:34,843 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@706b2ff0]
2021-03-12 08:21:34,843 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@1cebff9f]
2021-03-12 08:21:34,956 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:21:34,959 [main:117] - GENERATED CALL = (P(1118931594).i).toDouble().compareTo(92)
2021-03-12 08:21:34,959 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@273f49cc]]
2021-03-12 08:21:34,959 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:34,959 [main:149] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@273f49cc]
2021-03-12 08:21:34,959 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().digitToInt()
2021-03-12 08:21:34,959 [main:113] - Case = [public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@19e015b2]]
2021-03-12 08:21:34,959 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@19e015b2]
2021-03-12 08:21:34,959 [main:117] - GENERATED CALL = (P(1118931594).i).coerceIn(P(1118931594).i, P(1118931594).i)
2021-03-12 08:21:34,959 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49fbfecf], public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@284e134c]]
2021-03-12 08:21:34,959 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49fbfecf]
2021-03-12 08:21:35,071 [main:302] - generating value of type = Double true depth = 0
2021-03-12 08:21:35,074 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@284e134c]
2021-03-12 08:21:35,074 [main:117] - GENERATED CALL = (P(1118931594).i).div(0.5354575610542145).toInt()
2021-03-12 08:21:35,074 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@283d49e5]]
2021-03-12 08:21:35,074 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f]
2021-03-12 08:21:35,074 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@283d49e5]
2021-03-12 08:21:35,184 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:21:35,186 [main:117] - GENERATED CALL = (P(1118931594).i).toLong().compareTo(74)
2021-03-12 08:21:35,186 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@1c465f7d]]
2021-03-12 08:21:35,186 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:21:35,186 [main:117] - GENERATED CALL = (P(1118931594).i).toInt().sign
2021-03-12 08:21:35,186 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1c645e05]]
2021-03-12 08:21:35,186 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4]
2021-03-12 08:21:35,294 [main:302] - generating value of type = Long true depth = 0
2021-03-12 08:21:35,296 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1c645e05]
2021-03-12 08:21:35,297 [main:117] - GENERATED CALL = (P(1118931594).i).div(-5488753834043150409).countTrailingZeroBits()
2021-03-12 08:21:35,297 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e0d2566]]
2021-03-12 08:21:35,297 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:21:35,406 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:21:35,408 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e0d2566]
2021-03-12 08:21:35,517 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:21:35,519 [main:117] - GENERATED CALL = (P(1118931594).i).compareTo(-621537835).rem(-46)
2021-03-12 08:21:35,519 [main:114] - replacement of numberOfSuspensions of type Int is (P(1118931594).i).compareTo(-621537835).rem(-46)
2021-03-12 08:21:35,630 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:21:35,630 [main:66] - Compilation checking started
2021-03-12 08:21:36,164 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = fu0((P(1118931594).i).div(-1219242088742663598).toString(-809636528))
    val prope4 = prope3 + fu0(prope2)

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(P(1118931594).i).compareTo(-621537835).rem(-46)) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (P(1118931594).i).toInt().inc() + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:21:36,167 [main:107] - replacing (c, Continuation<Unit>)
2021-03-12 08:21:36,167 [main:50] - replacing c Continuation<Unit>
2021-03-12 08:21:36,167 [main:54] - Getting value of type Continuation<Unit>
2021-03-12 08:21:36,307 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-12 08:21:36,421 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 08:21:36,424 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 08:21:36,817 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 08:21:36,936 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:21:36,939 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:21:37,187 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 08:21:37,307 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:21:37,310 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:21:37,764 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:21:37,765 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:21:37,765 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 08:21:37,765 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-12 08:21:37,886 [main:67] - randomType = ULong
2021-03-12 08:21:37,997 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 08:21:38,032 [main:106] - GETTING Continuation<Unit> from Int
2021-03-12 08:21:38,073 [main:111] - Cant find and generate replacement for c type Continuation<Unit>
2021-03-12 08:21:38,074 [main:107] - replacing (getOrThrow(), Any?)
2021-03-12 08:21:38,074 [main:50] - replacing getOrThrow() Any?
2021-03-12 08:21:38,074 [main:54] - Getting value of type Any?
2021-03-12 08:21:38,184 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:21:38,184 [main:58] - GENERATED VALUE OF TYPE Any? = "sbwya"
2021-03-12 08:21:38,184 [main:61] - GENERATED IS CALL =false
2021-03-12 08:21:38,188 [main:67] - randomType = Short
2021-03-12 08:21:38,297 [main:302] - generating value of type = Short true depth = 0
2021-03-12 08:21:38,330 [main:106] - GETTING Any? from Int
2021-03-12 08:21:38,365 [main:114] - replacement of getOrThrow() of type Any? is "sbwya"
2021-03-12 08:21:38,474 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 08:21:38,475 [main:66] - Compilation checking started
2021-03-12 08:21:38,838 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = fu0((P(1118931594).i).div(-1219242088742663598).toString(-809636528))
    val prope4 = prope3 + fu0(prope2)

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5."sbwya"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(P(1118931594).i).compareTo(-621537835).rem(-46)) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (P(1118931594).i).toInt().inc() + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:21:38,840 [main:107] - replacing ({
        prope5.getOrThrow()
    }, Any?)
2021-03-12 08:21:38,840 [main:50] - replacing {
        prope5.getOrThrow()
    } Any?
2021-03-12 08:21:38,840 [main:54] - Getting value of type Any?
2021-03-12 08:21:38,951 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:21:38,951 [main:58] - GENERATED VALUE OF TYPE Any? = "grtce"
2021-03-12 08:21:38,952 [main:61] - GENERATED IS CALL =false
2021-03-12 08:21:38,956 [main:67] - randomType = Short
2021-03-12 08:21:39,068 [main:302] - generating value of type = Short true depth = 0
2021-03-12 08:21:39,102 [main:106] - GETTING Any? from Int
2021-03-12 08:21:39,131 [main:114] - replacement of {
        prope5.getOrThrow()
    } of type Any? is "grtce"
2021-03-12 08:21:39,240 [main:33] - Trying to replace BLOCK on Element(STRING_TEMPLATE)
2021-03-12 08:21:39,240 [main:66] - Compilation checking started
2021-03-12 08:21:39,244 [main:71] - Wrong syntax or breaks conditions
2021-03-12 08:21:39,245 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = fu0((P(1118931594).i).div(-1219242088742663598).toString(-809636528))
    val prope4 = prope3 + fu0(prope2)

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) "grtce"
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(P(1118931594).i).compareTo(-621537835).rem(-46)) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (P(1118931594).i).toInt().inc() + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:21:39,246 [main:107] - replacing (prope7, Int)
2021-03-12 08:21:39,247 [main:50] - replacing prope7 Int
2021-03-12 08:21:39,247 [main:54] - Getting value of type Int
2021-03-12 08:21:39,357 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:21:39,359 [main:58] - GENERATED VALUE OF TYPE Int = 1435073091
2021-03-12 08:21:39,360 [main:61] - GENERATED IS CALL =false
2021-03-12 08:21:39,364 [main:67] - randomType = Short
2021-03-12 08:21:39,471 [main:302] - generating value of type = Short true depth = 0
2021-03-12 08:21:39,506 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:21:39,506 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76b2a99c]
2021-03-12 08:21:39,507 [main:78] - Generated call from random type = (-23608).toInt().countTrailingZeroBits()
2021-03-12 08:21:39,507 [main:106] - GETTING Int from Int
2021-03-12 08:21:39,535 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6280d214]]
2021-03-12 08:21:39,536 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:21:39,536 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6280d214]
2021-03-12 08:21:39,536 [main:117] - GENERATED CALL = (P(1118931594).i).toInt().shl(P(1118931594).i)
2021-03-12 08:21:39,536 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2f024c1]]
2021-03-12 08:21:39,536 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:21:39,644 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:21:39,646 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2f024c1]
2021-03-12 08:21:39,646 [main:117] - GENERATED CALL = (P(1118931594).i).compareTo(111231455).takeLowestOneBit()
2021-03-12 08:21:39,646 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4d84f8a6], public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@11d0654e]]
2021-03-12 08:21:39,646 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4d84f8a6]
2021-03-12 08:21:39,646 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@11d0654e]
2021-03-12 08:21:39,646 [main:117] - GENERATED CALL = (P(1118931594).i).toFloat().toInt()
2021-03-12 08:21:39,646 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@19e015b2]]
2021-03-12 08:21:39,646 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:21:39,647 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@19e015b2]
2021-03-12 08:21:39,761 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:21:39,764 [main:117] - GENERATED CALL = (P(1118931594).i).compareTo(P(1118931594).i).coerceIn(318413275, P(1118931594).i)
2021-03-12 08:21:39,764 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@782a0e57]]
2021-03-12 08:21:39,764 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4]
2021-03-12 08:21:39,872 [main:302] - generating value of type = Long true depth = 0
2021-03-12 08:21:39,874 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@782a0e57]
2021-03-12 08:21:39,875 [main:117] - GENERATED CALL = (P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits()
2021-03-12 08:21:39,875 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d574310]]
2021-03-12 08:21:39,875 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:21:39,875 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d574310]
2021-03-12 08:21:39,985 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:21:39,988 [main:117] - GENERATED CALL = (P(1118931594).i).compareTo(P(1118931594).i).plus(38)
2021-03-12 08:21:39,988 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@38e09b9f]]
2021-03-12 08:21:39,988 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b]
2021-03-12 08:21:39,988 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@38e09b9f]
2021-03-12 08:21:39,988 [main:117] - GENERATED CALL = (P(1118931594).i).toByte().unaryMinus()
2021-03-12 08:21:39,988 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1e3928b4]]
2021-03-12 08:21:39,988 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:21:39,988 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1e3928b4]
2021-03-12 08:21:39,989 [main:117] - GENERATED CALL = (P(1118931594).i).compareTo(P(1118931594).i).toInt()
2021-03-12 08:21:39,989 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1f07773e]]
2021-03-12 08:21:39,989 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:21:39,989 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1f07773e]
2021-03-12 08:21:39,989 [main:117] - GENERATED CALL = (P(1118931594).i).compareTo(P(1118931594).i).rotateRight(P(1118931594).i)
2021-03-12 08:21:39,989 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6f4dd65d]]
2021-03-12 08:21:39,989 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d]
2021-03-12 08:21:39,989 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6f4dd65d]
2021-03-12 08:21:39,989 [main:117] - GENERATED CALL = (P(1118931594).i).toShort().unaryMinus()
2021-03-12 08:21:39,989 [main:114] - replacement of prope7 of type Int is (P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits()
2021-03-12 08:21:40,099 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:21:40,100 [main:66] - Compilation checking started
2021-03-12 08:21:40,616 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = fu0((P(1118931594).i).div(-1219242088742663598).toString(-809636528))
    val prope4 = prope3 + fu0(prope2)

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(P(1118931594).i).compareTo(-621537835).rem(-46)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (P(1118931594).i).toInt().inc() + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:21:40,619 [main:107] - replacing (prope9, Function0<Unit>)
2021-03-12 08:21:40,619 [main:50] - replacing prope9 Function0<Unit>
2021-03-12 08:21:40,619 [main:54] - Getting value of type Function0<Unit>
2021-03-12 08:21:40,751 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 08:21:40,753 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:21:40,874 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:21:40,877 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:21:41,115 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 08:21:41,117 [main:95] - GENERATED = check(true)
2021-03-12 08:21:41,117 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true)}
2021-03-12 08:21:41,117 [main:61] - GENERATED IS CALL =false
2021-03-12 08:21:41,121 [main:67] - randomType = Int
2021-03-12 08:21:41,240 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:21:41,283 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 08:21:41,327 [main:114] - replacement of prope9 of type Function0<Unit> is { check(true)}
2021-03-12 08:21:41,438 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 08:21:41,439 [main:66] - Compilation checking started
2021-03-12 08:21:41,832 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = fu0((P(1118931594).i).div(-1219242088742663598).toString(-809636528))
    val prope4 = prope3 + fu0(prope2)

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(P(1118931594).i).compareTo(-621537835).rem(-46)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (P(1118931594).i).toInt().inc() + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if (prope8) error("Wrong state-machine generated: it is finished early")
        { check(true)}()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:21:41,834 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 08:21:41,835 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 08:21:41,835 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 08:21:41,960 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 08:21:41,965 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 08:21:41,973 [main:67] - randomType = Kla0
2021-03-12 08:21:42,090 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 08:21:42,093 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}
2021-03-12 08:21:42,207 [main:194] - Type params = []
2021-03-12 08:21:42,329 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 08:21:42,461 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:21:42,464 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:21:42,739 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 08:21:42,875 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:21:42,878 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:21:43,250 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-12 08:21:43,371 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:21:43,374 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:21:43,754 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 11
2021-03-12 08:21:43,965 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:21:43,968 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:21:44,370 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 14
2021-03-12 08:21:44,487 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:21:44,490 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:21:44,864 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:21:44,864 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:21:44,864 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:21:44,864 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:21:44,864 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:21:44,877 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 08:21:44,906 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 08:21:44,906 [main:107] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (P(1118931594).i).toInt().inc() + ", got " + prope7, String)
2021-03-12 08:21:44,907 [main:50] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (P(1118931594).i).toInt().inc() + ", got " + prope7 String
2021-03-12 08:21:44,907 [main:54] - Getting value of type String
2021-03-12 08:21:45,019 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:21:45,021 [main:58] - GENERATED VALUE OF TYPE String = "vmpjm"
2021-03-12 08:21:45,021 [main:61] - GENERATED IS CALL =false
2021-03-12 08:21:45,170 [main:67] - randomType = Byte
2021-03-12 08:21:45,312 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:21:45,355 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]
2021-03-12 08:21:45,355 [main:78] - Generated call from random type = (41).toString(P(1118931594).i)
2021-03-12 08:21:45,356 [main:106] - GETTING String from Int
2021-03-12 08:21:45,386 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]]
2021-03-12 08:21:45,386 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:45,386 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]
2021-03-12 08:21:45,496 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:21:45,498 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().plus("pthzp")
2021-03-12 08:21:45,498 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]]
2021-03-12 08:21:45,498 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:45,498 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]
2021-03-12 08:21:45,499 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().lowercase()
2021-03-12 08:21:45,499 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:21:45,499 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:21:45,499 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:21:45,608 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:21:45,610 [main:117] - GENERATED CALL = (P(1118931594).i).compareTo(P(1118931594).i).toString(1364742274)
2021-03-12 08:21:45,610 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:21:45,610 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4]
2021-03-12 08:21:45,719 [main:302] - generating value of type = Long true depth = 0
2021-03-12 08:21:45,721 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:21:45,721 [main:117] - GENERATED CALL = (P(1118931594).i).div(-1341880665368635745).toString(P(1118931594).i)
2021-03-12 08:21:45,721 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:21:45,721 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:21:45,830 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:21:45,833 [main:117] - GENERATED CALL = (P(1118931594).i).toString(1979271849)
2021-03-12 08:21:45,833 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]]
2021-03-12 08:21:45,833 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d]
2021-03-12 08:21:45,833 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]
2021-03-12 08:21:45,833 [main:117] - GENERATED CALL = (P(1118931594).i).toShort().toString(P(1118931594).i)
2021-03-12 08:21:45,833 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]]
2021-03-12 08:21:45,833 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:45,833 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]
2021-03-12 08:21:45,833 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().uppercase()
2021-03-12 08:21:45,833 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:21:45,834 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:21:45,834 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:21:45,834 [main:117] - GENERATED CALL = (P(1118931594).i).toInt().toString(P(1118931594).i)
2021-03-12 08:21:45,834 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]]
2021-03-12 08:21:45,834 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:45,834 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]
2021-03-12 08:21:45,834 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().titlecase()
2021-03-12 08:21:45,834 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]]
2021-03-12 08:21:45,834 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b]
2021-03-12 08:21:45,834 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]
2021-03-12 08:21:45,834 [main:117] - GENERATED CALL = (P(1118931594).i).toByte().toString(P(1118931594).i)
2021-03-12 08:21:45,834 [main:114] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (P(1118931594).i).toInt().inc() + ", got " + prope7 of type String is (P(1118931594).i).toString(1979271849)
2021-03-12 08:21:45,945 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:21:45,946 [main:66] - Compilation checking started
2021-03-12 08:21:46,522 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = fu0((P(1118931594).i).div(-1219242088742663598).toString(-809636528))
    val prope4 = prope3 + fu0(prope2)

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(P(1118931594).i).compareTo(-621537835).rem(-46)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != i) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:21:46,525 [main:107] - replacing ({
            prope1.prope8 = true
        }, Function0<Unit>)
2021-03-12 08:21:46,525 [main:50] - replacing {
            prope1.prope8 = true
        } Function0<Unit>
2021-03-12 08:21:46,525 [main:54] - Getting value of type Function0<Unit>
2021-03-12 08:21:46,649 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 08:21:46,651 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:21:46,766 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:21:46,769 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:21:47,007 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 08:21:47,009 [main:95] - GENERATED = require(false)
2021-03-12 08:21:47,009 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false)}
2021-03-12 08:21:47,009 [main:61] - GENERATED IS CALL =false
2021-03-12 08:21:47,402 [main:67] - randomType = LinkedHashMap<ArrayDeque<Kla1>, Boolean>?
2021-03-12 08:21:47,510 [main:302] - generating value of type = LinkedHashMap<ArrayDeque<Kla1>, Boolean> false depth = 0
2021-03-12 08:21:47,641 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<ArrayDeque<Kla1>, Boolean> = TODO()
2021-03-12 08:21:47,644 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<ArrayDeque<Kla1>, Boolean> = TODO()
2021-03-12 08:21:47,776 [main:95] - GENERATED = linkedMapOf<ArrayDeque<Kla1>, Boolean>()
2021-03-12 08:21:47,942 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 08:21:47,994 [main:114] - replacement of {
            prope1.prope8 = true
        } of type Function0<Unit> is { require(false)}
2021-03-12 08:21:48,107 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 08:21:48,107 [main:66] - Compilation checking started
2021-03-12 08:21:48,644 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = fu0((P(1118931594).i).div(-1219242088742663598).toString(-809636528))
    val prope4 = prope3 + fu0(prope2)

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(P(1118931594).i).compareTo(-621537835).rem(-46)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != i) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:21:48,646 [main:107] - replacing (it?.methodName?.startsWith(method) == true, Boolean)
2021-03-12 08:21:48,646 [main:50] - replacing it?.methodName?.startsWith(method) == true Boolean
2021-03-12 08:21:48,646 [main:54] - Getting value of type Boolean
2021-03-12 08:21:48,769 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:21:48,771 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 08:21:48,771 [main:61] - GENERATED IS CALL =false
2021-03-12 08:21:48,897 [main:67] - randomType = Byte
2021-03-12 08:21:49,017 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:21:49,054 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@28d52ecb]
2021-03-12 08:21:49,054 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51157c88]
2021-03-12 08:21:49,055 [main:78] - Generated call from random type = (-39).toChar().isDigit()
2021-03-12 08:21:49,055 [main:106] - GETTING Boolean from Int
2021-03-12 08:21:49,086 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@706b2ff0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@31fdc6f6]]
2021-03-12 08:21:49,086 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@706b2ff0]
2021-03-12 08:21:49,086 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@31fdc6f6]
2021-03-12 08:21:49,194 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:21:49,194 [main:117] - GENERATED CALL = (P(1118931594).i).toDouble().equals("syspl")
2021-03-12 08:21:49,194 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67136415]]
2021-03-12 08:21:49,194 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:49,195 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67136415]
2021-03-12 08:21:49,303 [main:302] - generating value of type = Char true depth = 0
2021-03-12 08:21:49,412 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:21:49,414 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().equals('Î≥Æ', false)
2021-03-12 08:21:49,414 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]]
2021-03-12 08:21:49,414 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]
2021-03-12 08:21:49,522 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:21:49,523 [main:117] - GENERATED CALL = (P(1118931594).i).equals("paxxn")
2021-03-12 08:21:49,523 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49fbfecf], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4047829]]
2021-03-12 08:21:49,523 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49fbfecf]
2021-03-12 08:21:49,635 [main:302] - generating value of type = Double true depth = 0
2021-03-12 08:21:49,638 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4047829]
2021-03-12 08:21:49,638 [main:117] - GENERATED CALL = (P(1118931594).i).div(0.8094109334636097).isInfinite()
2021-03-12 08:21:49,638 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4d84f8a6], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@47032d02]]
2021-03-12 08:21:49,638 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4d84f8a6]
2021-03-12 08:21:49,638 [main:149] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@47032d02]
2021-03-12 08:21:49,638 [main:117] - GENERATED CALL = (P(1118931594).i).toFloat().isFinite()
2021-03-12 08:21:49,638 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cc89c78]]
2021-03-12 08:21:49,638 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:49,638 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cc89c78]
2021-03-12 08:21:49,638 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().isSurrogate()
2021-03-12 08:21:49,638 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]]
2021-03-12 08:21:49,638 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]
2021-03-12 08:21:49,752 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:21:49,752 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]
2021-03-12 08:21:49,865 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:21:49,867 [main:117] - GENERATED CALL = (P(1118931594).i).equals("otzmq").xor(false)
2021-03-12 08:21:49,867 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]]
2021-03-12 08:21:49,867 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:21:49,867 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]
2021-03-12 08:21:49,979 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:21:49,979 [main:117] - GENERATED CALL = (P(1118931594).i).toInt().equals("dwqxb")
2021-03-12 08:21:49,980 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5562ac50]]
2021-03-12 08:21:49,980 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:49,980 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5562ac50]
2021-03-12 08:21:49,980 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().isLowerCase()
2021-03-12 08:21:49,980 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4d84f8a6], public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@5392abe7]]
2021-03-12 08:21:49,980 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4d84f8a6]
2021-03-12 08:21:49,980 [main:149] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@5392abe7]
2021-03-12 08:21:49,980 [main:117] - GENERATED CALL = (P(1118931594).i).toFloat().isInfinite()
2021-03-12 08:21:49,980 [main:114] - replacement of it?.methodName?.startsWith(method) == true of type Boolean is (P(1118931594).i).toChar().isLowerCase()
2021-03-12 08:21:50,111 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:21:50,111 [main:66] - Compilation checking started
2021-03-12 08:21:50,628 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = fu0((P(1118931594).i).div(-1219242088742663598).toString(-809636528))
    val prope4 = prope3 + fu0(prope2)

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { (P(1118931594).i).toChar().isLowerCase() }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(P(1118931594).i).compareTo(-621537835).rem(-46)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != i) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:21:50,629 [main:107] - replacing (getOrThrow(), Ty0)
2021-03-12 08:21:50,630 [main:50] - replacing getOrThrow() Ty0
2021-03-12 08:21:50,630 [main:54] - Getting value of type Ty0
2021-03-12 08:21:50,746 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 08:21:50,751 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 08:21:50,758 [main:67] - randomType = Kla0
2021-03-12 08:21:50,868 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 08:21:50,870 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}
2021-03-12 08:21:50,981 [main:194] - Type params = []
2021-03-12 08:21:51,090 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 08:21:51,206 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:21:51,208 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:21:51,482 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 08:21:51,599 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:21:51,604 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:21:51,980 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-12 08:21:52,097 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:21:52,100 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:21:52,513 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 11
2021-03-12 08:21:52,644 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:21:52,647 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:21:53,009 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:21:53,009 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:21:53,009 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:21:53,009 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:21:53,027 [main:106] - GETTING Ty0 from Int
2021-03-12 08:21:53,056 [main:111] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-12 08:21:53,056 [main:107] - replacing ({}, Function0<Unit>)
2021-03-12 08:21:53,056 [main:50] - replacing {} Function0<Unit>
2021-03-12 08:21:53,056 [main:54] - Getting value of type Function0<Unit>
2021-03-12 08:21:53,165 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 08:21:53,167 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:21:53,282 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 08:21:53,285 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 08:21:53,661 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 08:21:53,663 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 08:21:53,664 [main:302] - generating value of type = Any false depth = 5
2021-03-12 08:21:53,665 [main:95] - GENERATED = require(false, { "hsmww"})
2021-03-12 08:21:53,665 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false, { "hsmww"})}
2021-03-12 08:21:53,665 [main:61] - GENERATED IS CALL =false
2021-03-12 08:21:53,788 [main:67] - randomType = UInt
2021-03-12 08:21:53,897 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 08:21:53,927 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 08:21:53,955 [main:114] - replacement of {} of type Function0<Unit> is { require(false, { "hsmww"})}
2021-03-12 08:21:54,063 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 08:21:54,064 [main:66] - Compilation checking started
2021-03-12 08:21:54,562 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = fu0((P(1118931594).i).div(-1219242088742663598).toString(-809636528))
    val prope4 = prope3 + fu0(prope2)

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { (P(1118931594).i).toChar().isLowerCase() }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = false
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(P(1118931594).i).compareTo(-621537835).rem(-46)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != i) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:21:54,564 [main:107] - replacing (prope5, Result<Ty0>)
2021-03-12 08:21:54,564 [main:50] - replacing prope5 Result<Ty0>
2021-03-12 08:21:54,564 [main:54] - Getting value of type Result<Ty0>
2021-03-12 08:21:54,674 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-12 08:21:54,792 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 08:21:54,795 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 08:21:55,042 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 08:21:55,042 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-12 08:21:55,171 [main:67] - randomType = String?
2021-03-12 08:21:55,286 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:21:55,318 [main:106] - GETTING Result<Ty0> from Int
2021-03-12 08:21:55,355 [main:111] - Cant find and generate replacement for prope5 type Result<Ty0>
2021-03-12 08:21:55,355 [main:107] - replacing (prope5, String)
2021-03-12 08:21:55,356 [main:50] - replacing prope5 String
2021-03-12 08:21:55,356 [main:54] - Getting value of type String
2021-03-12 08:21:55,463 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:21:55,465 [main:58] - GENERATED VALUE OF TYPE String = "boijy"
2021-03-12 08:21:55,465 [main:61] - GENERATED IS CALL =false
2021-03-12 08:21:56,090 [main:67] - randomType = List<LinkedHashMap<Float, Char?>?>
2021-03-12 08:21:56,091 [main:106] - GETTING String from Int
2021-03-12 08:21:56,121 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]]
2021-03-12 08:21:56,121 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:56,122 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]
2021-03-12 08:21:56,122 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().titlecase()
2021-03-12 08:21:56,122 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:21:56,122 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f]
2021-03-12 08:21:56,122 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:21:56,122 [main:117] - GENERATED CALL = (P(1118931594).i).toLong().toString(P(1118931594).i)
2021-03-12 08:21:56,122 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]]
2021-03-12 08:21:56,122 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:56,122 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]
2021-03-12 08:21:56,247 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:21:56,250 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().plus("ytlnv")
2021-03-12 08:21:56,250 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:21:56,250 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:21:56,250 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:21:56,250 [main:117] - GENERATED CALL = (P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i)
2021-03-12 08:21:56,250 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]]
2021-03-12 08:21:56,250 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d]
2021-03-12 08:21:56,250 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]
2021-03-12 08:21:56,387 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:21:56,389 [main:117] - GENERATED CALL = (P(1118931594).i).toShort().toString(1384936131)
2021-03-12 08:21:56,389 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]]
2021-03-12 08:21:56,389 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:56,389 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]
2021-03-12 08:21:56,389 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().lowercase()
2021-03-12 08:21:56,389 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]]
2021-03-12 08:21:56,389 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b]
2021-03-12 08:21:56,389 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]
2021-03-12 08:21:56,390 [main:117] - GENERATED CALL = (P(1118931594).i).toByte().toString(P(1118931594).i)
2021-03-12 08:21:56,390 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:21:56,390 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:21:56,390 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:21:56,390 [main:117] - GENERATED CALL = (P(1118931594).i).toInt().toString(P(1118931594).i)
2021-03-12 08:21:56,390 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:21:56,390 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:21:56,390 [main:117] - GENERATED CALL = (P(1118931594).i).toString(P(1118931594).i)
2021-03-12 08:21:56,390 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]]
2021-03-12 08:21:56,390 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:56,390 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]
2021-03-12 08:21:56,391 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().uppercase()
2021-03-12 08:21:56,391 [main:114] - replacement of prope5 of type String is (P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i)
2021-03-12 08:21:56,497 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:21:56,497 [main:66] - Compilation checking started
2021-03-12 08:21:56,849 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = fu0((P(1118931594).i).div(-1219242088742663598).toString(-809636528))
    val prope4 = prope3 + fu0(prope2)

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        (P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i) = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { (P(1118931594).i).toChar().isLowerCase() }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = false
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(P(1118931594).i).compareTo(-621537835).rem(-46)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != i) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:21:56,851 [main:107] - replacing (prope9, Function0<Unit>)
2021-03-12 08:21:56,851 [main:50] - replacing prope9 Function0<Unit>
2021-03-12 08:21:56,851 [main:54] - Getting value of type Function0<Unit>
2021-03-12 08:21:56,960 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 08:21:56,962 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:21:57,081 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:21:57,084 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:21:57,320 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 08:21:57,322 [main:95] - GENERATED = require(false)
2021-03-12 08:21:57,322 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false)}
2021-03-12 08:21:57,322 [main:61] - GENERATED IS CALL =false
2021-03-12 08:21:57,442 [main:67] - randomType = UInt
2021-03-12 08:21:57,560 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 08:21:57,598 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 08:21:57,644 [main:114] - replacement of prope9 of type Function0<Unit> is { require(false)}
2021-03-12 08:21:57,758 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 08:21:57,758 [main:66] - Compilation checking started
2021-03-12 08:21:58,091 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = fu0((P(1118931594).i).div(-1219242088742663598).toString(-809636528))
    val prope4 = prope3 + fu0(prope2)

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { (P(1118931594).i).toChar().isLowerCase() }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = false
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(P(1118931594).i).compareTo(-621537835).rem(-46)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != i) error((P(1118931594).i).toString(1979271849))
            { require(false)}()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:21:58,093 [main:107] - replacing ("Continuation ", String)
2021-03-12 08:21:58,093 [main:50] - replacing "Continuation " String
2021-03-12 08:21:58,093 [main:54] - Getting value of type String
2021-03-12 08:21:58,207 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:21:58,209 [main:58] - GENERATED VALUE OF TYPE String = "emstw"
2021-03-12 08:21:58,210 [main:61] - GENERATED IS CALL =false
2021-03-12 08:21:58,473 [main:67] - randomType = Float?
2021-03-12 08:21:58,582 [main:302] - generating value of type = Float true depth = 0
2021-03-12 08:21:58,614 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@170f6972]
2021-03-12 08:21:58,614 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]
2021-03-12 08:21:58,722 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:21:58,724 [main:78] - Generated call from random type = (0.3358339f)?.toChar().plus("mpejv")
2021-03-12 08:21:58,725 [main:106] - GETTING String from Int
2021-03-12 08:21:58,756 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:21:58,756 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:21:58,864 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:21:58,866 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:21:58,867 [main:117] - GENERATED CALL = (P(1118931594).i).compareTo(-1548638074).toString(P(1118931594).i)
2021-03-12 08:21:58,867 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:21:58,867 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4]
2021-03-12 08:21:58,984 [main:302] - generating value of type = Long true depth = 0
2021-03-12 08:21:58,986 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:21:58,986 [main:117] - GENERATED CALL = (P(1118931594).i).div(-2143443500321665868).toString(P(1118931594).i)
2021-03-12 08:21:58,986 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]]
2021-03-12 08:21:58,986 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:58,986 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]
2021-03-12 08:21:58,987 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().lowercase()
2021-03-12 08:21:58,987 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:21:58,987 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:21:58,987 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:21:58,987 [main:117] - GENERATED CALL = (P(1118931594).i).toInt().toString(P(1118931594).i)
2021-03-12 08:21:58,987 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]]
2021-03-12 08:21:58,987 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:58,987 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]
2021-03-12 08:21:58,987 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().titlecase()
2021-03-12 08:21:58,987 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:21:58,987 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f]
2021-03-12 08:21:58,987 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:21:59,097 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:21:59,099 [main:117] - GENERATED CALL = (P(1118931594).i).toLong().toString(1455565261)
2021-03-12 08:21:59,100 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:21:59,100 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:21:59,100 [main:117] - GENERATED CALL = (P(1118931594).i).toString(P(1118931594).i)
2021-03-12 08:21:59,100 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]]
2021-03-12 08:21:59,100 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:59,100 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]
2021-03-12 08:21:59,208 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:21:59,210 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().plus("nvrhq")
2021-03-12 08:21:59,210 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]]
2021-03-12 08:21:59,210 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:21:59,210 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]
2021-03-12 08:21:59,210 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().uppercase()
2021-03-12 08:21:59,211 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]]
2021-03-12 08:21:59,211 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b]
2021-03-12 08:21:59,211 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]
2021-03-12 08:21:59,320 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:21:59,322 [main:117] - GENERATED CALL = (P(1118931594).i).toByte().toString(-604514850)
2021-03-12 08:21:59,322 [main:114] - replacement of "Continuation " of type String is (P(1118931594).i).toChar().lowercase()
2021-03-12 08:21:59,436 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:21:59,436 [main:66] - Compilation checking started
2021-03-12 08:21:59,978 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = fu0((P(1118931594).i).div(-1219242088742663598).toString(-809636528))
    val prope4 = prope3 + fu0(prope2)

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().lowercase() + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { (P(1118931594).i).toChar().isLowerCase() }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = false
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(P(1118931594).i).compareTo(-621537835).rem(-46)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != i) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:21:59,981 [main:107] - replacing (c, Continuation<Unit>)
2021-03-12 08:21:59,981 [main:50] - replacing c Continuation<Unit>
2021-03-12 08:21:59,981 [main:54] - Getting value of type Continuation<Unit>
2021-03-12 08:22:00,094 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-12 08:22:00,210 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 08:22:00,213 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 08:22:00,614 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 08:22:00,727 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:22:00,730 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:22:00,978 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 08:22:01,097 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:22:01,100 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:22:01,477 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:22:01,478 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:22:01,478 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 08:22:01,478 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-12 08:22:01,609 [main:67] - randomType = Kla3?
2021-03-12 08:22:01,717 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 08:22:01,719 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().lowercase() + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { (P(1118931594).i).toChar().isLowerCase() }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}
2021-03-12 08:22:01,726 [main:106] - GETTING Continuation<Unit> from Int
2021-03-12 08:22:01,755 [main:111] - Cant find and generate replacement for c type Continuation<Unit>
2021-03-12 08:22:01,755 [main:107] - replacing (prope8, Boolean)
2021-03-12 08:22:01,755 [main:50] - replacing prope8 Boolean
2021-03-12 08:22:01,755 [main:54] - Getting value of type Boolean
2021-03-12 08:22:01,911 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:22:01,913 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 08:22:01,913 [main:61] - GENERATED IS CALL =false
2021-03-12 08:22:02,062 [main:67] - randomType = UShort
2021-03-12 08:22:02,172 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 08:22:02,199 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@292cd0b9]
2021-03-12 08:22:02,306 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:22:02,307 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]
2021-03-12 08:22:02,413 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:22:02,414 [main:78] - Generated call from random type = (753.toUShort()).equals("sscud").equals("ltovx")
2021-03-12 08:22:02,414 [main:114] - replacement of prope8 of type Boolean is (753.toUShort()).equals("sscud").equals("ltovx")
2021-03-12 08:22:02,521 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:22:02,522 [main:66] - Compilation checking started
2021-03-12 08:22:03,031 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = fu0((P(1118931594).i).div(-1219242088742663598).toString(-809636528))
    val prope4 = prope3 + fu0(prope2)

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().lowercase() + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { (P(1118931594).i).toChar().isLowerCase() }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = false
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(P(1118931594).i).compareTo(-621537835).rem(-46)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != i) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:22:03,033 [main:107] - replacing (Kla0, Kla6)
2021-03-12 08:22:03,033 [main:50] - replacing Kla0 Kla6
2021-03-12 08:22:03,033 [main:54] - Getting value of type Kla6
2021-03-12 08:22:03,146 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 08:22:03,148 [main:112] - generating klass Kla6 text = companion object Kla6 : Kla0()
2021-03-12 08:22:03,148 [main:58] - GENERATED VALUE OF TYPE Kla6 = 
2021-03-12 08:22:03,284 [main:67] - randomType = Kla5
2021-03-12 08:22:03,392 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 08:22:03,394 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}
2021-03-12 08:22:03,412 [main:106] - GETTING Kla6 from Int
2021-03-12 08:22:03,440 [main:111] - Cant find and generate replacement for Kla0 type Kla6
2021-03-12 08:22:03,440 [main:107] - replacing (false, Boolean)
2021-03-12 08:22:03,440 [main:50] - replacing false Boolean
2021-03-12 08:22:03,440 [main:54] - Getting value of type Boolean
2021-03-12 08:22:03,549 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:22:03,551 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 08:22:03,551 [main:61] - GENERATED IS CALL =false
2021-03-12 08:22:03,555 [main:67] - randomType = Long
2021-03-12 08:22:03,665 [main:302] - generating value of type = Long true depth = 0
2021-03-12 08:22:03,695 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4d84f8a6]
2021-03-12 08:22:03,696 [main:149] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@5392abe7]
2021-03-12 08:22:03,696 [main:78] - Generated call from random type = (1736076807935707044).toFloat().isInfinite()
2021-03-12 08:22:03,697 [main:106] - GETTING Boolean from Int
2021-03-12 08:22:03,725 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]]
2021-03-12 08:22:03,725 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]
2021-03-12 08:22:03,834 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]
2021-03-12 08:22:03,944 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:22:03,946 [main:117] - GENERATED CALL = (P(1118931594).i).equals(null).or(true)
2021-03-12 08:22:03,946 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2457c30c]]
2021-03-12 08:22:03,946 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:22:03,946 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2457c30c]
2021-03-12 08:22:03,946 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().isDefined()
2021-03-12 08:22:03,947 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51157c88]]
2021-03-12 08:22:03,947 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:22:03,947 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51157c88]
2021-03-12 08:22:03,947 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().isDigit()
2021-03-12 08:22:03,947 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5562ac50]]
2021-03-12 08:22:03,947 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:22:03,947 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5562ac50]
2021-03-12 08:22:03,947 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().isLowerCase()
2021-03-12 08:22:03,947 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b6aa3e4]]
2021-03-12 08:22:03,947 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:22:03,947 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b6aa3e4]
2021-03-12 08:22:03,947 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().isLowSurrogate()
2021-03-12 08:22:03,947 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4d84f8a6], public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@5392abe7]]
2021-03-12 08:22:03,947 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4d84f8a6]
2021-03-12 08:22:03,948 [main:149] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@5392abe7]
2021-03-12 08:22:03,948 [main:117] - GENERATED CALL = (P(1118931594).i).toFloat().isInfinite()
2021-03-12 08:22:03,948 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]]
2021-03-12 08:22:03,948 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]
2021-03-12 08:22:04,057 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]
2021-03-12 08:22:04,166 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:22:04,168 [main:117] - GENERATED CALL = (P(1118931594).i).equals(null).xor(true)
2021-03-12 08:22:04,169 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b6a54c], public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@3799e7a8]]
2021-03-12 08:22:04,169 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b6a54c]
2021-03-12 08:22:04,278 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:22:04,280 [main:149] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@3799e7a8]
2021-03-12 08:22:04,280 [main:117] - GENERATED CALL = (P(1118931594).i).rangeTo(93).isEmpty()
2021-03-12 08:22:04,280 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]]
2021-03-12 08:22:04,280 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]
2021-03-12 08:22:04,431 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:22:04,432 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]
2021-03-12 08:22:04,557 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:22:04,558 [main:117] - GENERATED CALL = (P(1118931594).i).equals("veoqj").equals("fzjnx")
2021-03-12 08:22:04,558 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]]
2021-03-12 08:22:04,558 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]
2021-03-12 08:22:04,667 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:22:04,668 [main:117] - GENERATED CALL = (P(1118931594).i).equals("oejbj")
2021-03-12 08:22:04,668 [main:114] - replacement of false of type Boolean is (P(1118931594).i).toChar().isLowerCase()
2021-03-12 08:22:04,776 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:22:04,776 [main:66] - Compilation checking started
2021-03-12 08:22:05,303 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = fu0((P(1118931594).i).div(-1219242088742663598).toString(-809636528))
    val prope4 = prope3 + fu0(prope2)

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().lowercase() + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { (P(1118931594).i).toChar().isLowerCase() }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(P(1118931594).i).compareTo(-621537835).rem(-46)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != i) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:22:05,305 [main:107] - replacing ({
        fu7(it)
    }, Function1<Continuation<Unit>, Unit>)
2021-03-12 08:22:05,305 [main:50] - replacing {
        fu7(it)
    } Function1<Continuation<Unit>, Unit>
2021-03-12 08:22:05,305 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-12 08:22:05,419 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-12 08:22:05,421 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:22:05,535 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 08:22:05,538 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 08:22:05,934 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 08:22:05,936 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 08:22:05,938 [main:302] - generating value of type = Any false depth = 5
2021-03-12 08:22:05,938 [main:95] - GENERATED = require(false, { "dvfao"})
2021-03-12 08:22:05,939 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> require(false, { "dvfao"})}
2021-03-12 08:22:05,939 [main:61] - GENERATED IS CALL =false
2021-03-12 08:22:06,453 [main:67] - randomType = HashMap<Kla2<Kla4?>, HashSet<Int>>
2021-03-12 08:22:06,561 [main:302] - generating value of type = HashMap<Kla2<Kla4?>, HashSet<Int>> false depth = 0
2021-03-12 08:22:06,676 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): HashMap<Kla2<Kla4?>, HashSet<Int>> = TODO()
2021-03-12 08:22:06,679 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): HashMap<Kla2<Kla4?>, HashSet<Int>> = TODO()
2021-03-12 08:22:06,798 [main:95] - GENERATED = linkedMapOf<Kla2<Kla4?>, HashSet<Int>>()
2021-03-12 08:22:06,948 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-12 08:22:06,977 [main:114] - replacement of {
        fu7(it)
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> require(false, { "dvfao"})}
2021-03-12 08:22:07,086 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 08:22:07,086 [main:66] - Compilation checking started
2021-03-12 08:22:07,606 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = fu0((P(1118931594).i).div(-1219242088742663598).toString(-809636528))
    val prope4 = prope3 + fu0(prope2)

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().lowercase() + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { (P(1118931594).i).toChar().isLowerCase() }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(P(1118931594).i).compareTo(-621537835).rem(-46)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != i) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:22:07,608 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 08:22:07,608 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 08:22:07,608 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 08:22:07,723 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 08:22:07,728 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 08:22:08,001 [main:67] - randomType = Collection<HashSet<Kla1>>
2021-03-12 08:22:08,002 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 08:22:08,032 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 08:22:08,032 [main:107] - replacing (prope5.getOrThrow(), Ty0)
2021-03-12 08:22:08,032 [main:50] - replacing prope5.getOrThrow() Ty0
2021-03-12 08:22:08,032 [main:54] - Getting value of type Ty0
2021-03-12 08:22:08,143 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 08:22:08,147 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 08:22:08,271 [main:67] - randomType = ULong
2021-03-12 08:22:08,381 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 08:22:08,411 [main:106] - GETTING Ty0 from Int
2021-03-12 08:22:08,440 [main:111] - Cant find and generate replacement for prope5.getOrThrow() type Ty0
2021-03-12 08:22:08,440 [main:107] - replacing (getOrThrow(), Ty0)
2021-03-12 08:22:08,440 [main:50] - replacing getOrThrow() Ty0
2021-03-12 08:22:08,440 [main:54] - Getting value of type Ty0
2021-03-12 08:22:08,552 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 08:22:08,557 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 08:22:08,561 [main:67] - randomType = Long
2021-03-12 08:22:08,688 [main:302] - generating value of type = Long true depth = 0
2021-03-12 08:22:08,719 [main:106] - GETTING Ty0 from Int
2021-03-12 08:22:08,747 [main:111] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-12 08:22:08,747 [main:107] - replacing (fu0((P(1118931594).i).div(-1219242088742663598).toString(-809636528)), String)
2021-03-12 08:22:08,747 [main:50] - replacing fu0((P(1118931594).i).div(-1219242088742663598).toString(-809636528)) String
2021-03-12 08:22:08,747 [main:54] - Getting value of type String
2021-03-12 08:22:08,860 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:22:08,862 [main:58] - GENERATED VALUE OF TYPE String = "uovdv"
2021-03-12 08:22:08,862 [main:61] - GENERATED IS CALL =false
2021-03-12 08:22:09,129 [main:67] - randomType = Triple<Kla0, Float, String>
2021-03-12 08:22:09,239 [main:302] - generating value of type = Triple<Kla0, Float, String> false depth = 0
2021-03-12 08:22:09,356 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Kla0, second: Float, third: String): Triple<Kla0, Float, String> = TODO()
2021-03-12 08:22:09,359 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Kla0, second: Float, third: String): Triple<Kla0, Float, String> = TODO()
2021-03-12 08:22:09,476 [main:302] - generating value of type = Kla0 false depth = 3
2021-03-12 08:22:09,478 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}
2021-03-12 08:22:09,587 [main:194] - Type params = []
2021-03-12 08:22:09,696 [main:302] - generating value of type = CoroutineContext false depth = 5
2021-03-12 08:22:09,810 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:22:09,813 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:22:10,111 [main:302] - generating value of type = Key<*> false depth = 8
2021-03-12 08:22:10,247 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:22:10,250 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:22:10,625 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:22:10,625 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:22:10,625 [main:302] - generating value of type = Float true depth = 3
2021-03-12 08:22:10,627 [main:302] - generating value of type = String true depth = 3
2021-03-12 08:22:10,629 [main:95] - GENERATED = Triple<Kla0, Float, String>(Kla0(), 0.991597f, "ymzrp")
2021-03-12 08:22:10,644 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@254f5c1c]
2021-03-12 08:22:10,644 [main:78] - Generated call from random type = (Triple<Kla0, Float, String>(Kla0(), 0.991597f, "ymzrp")).third.trim()
2021-03-12 08:22:10,645 [main:106] - GETTING String from Int
2021-03-12 08:22:10,677 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]]
2021-03-12 08:22:10,677 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d]
2021-03-12 08:22:10,677 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]
2021-03-12 08:22:10,789 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:22:10,791 [main:117] - GENERATED CALL = (P(1118931594).i).toShort().toString(69629189)
2021-03-12 08:22:10,791 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:22:10,791 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:22:10,791 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:22:10,792 [main:117] - GENERATED CALL = (P(1118931594).i).toInt().toString(P(1118931594).i)
2021-03-12 08:22:10,792 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]]
2021-03-12 08:22:10,792 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:22:10,792 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]
2021-03-12 08:22:10,792 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().uppercase()
2021-03-12 08:22:10,792 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:22:10,792 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f]
2021-03-12 08:22:10,792 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:22:10,792 [main:117] - GENERATED CALL = (P(1118931594).i).toLong().toString(P(1118931594).i)
2021-03-12 08:22:10,792 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]]
2021-03-12 08:22:10,792 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:22:10,793 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]
2021-03-12 08:22:10,902 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:22:10,904 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().plus("wdchq")
2021-03-12 08:22:10,904 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:22:10,904 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:22:10,905 [main:117] - GENERATED CALL = (P(1118931594).i).toString(P(1118931594).i)
2021-03-12 08:22:10,905 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]]
2021-03-12 08:22:10,905 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b]
2021-03-12 08:22:10,905 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]
2021-03-12 08:22:11,014 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:22:11,016 [main:117] - GENERATED CALL = (P(1118931594).i).toByte().toString(-1866191858)
2021-03-12 08:22:11,016 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]]
2021-03-12 08:22:11,016 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:22:11,016 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]
2021-03-12 08:22:11,016 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().lowercase()
2021-03-12 08:22:11,016 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:22:11,016 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4]
2021-03-12 08:22:11,127 [main:302] - generating value of type = Long true depth = 0
2021-03-12 08:22:11,129 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:22:11,240 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:22:11,243 [main:117] - GENERATED CALL = (P(1118931594).i).div(-2813649956772751071).toString(-1006869602)
2021-03-12 08:22:11,243 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:22:11,243 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:22:11,243 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:22:11,354 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:22:11,357 [main:117] - GENERATED CALL = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
2021-03-12 08:22:11,357 [main:114] - replacement of fu0((P(1118931594).i).div(-1219242088742663598).toString(-809636528)) of type String is (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
2021-03-12 08:22:11,482 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:22:11,482 [main:66] - Compilation checking started
2021-03-12 08:22:11,968 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0(prope2)

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().lowercase() + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { (P(1118931594).i).toChar().isLowerCase() }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(P(1118931594).i).compareTo(-621537835).rem(-46)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != i) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:22:11,970 [main:107] - replacing ({ c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }, Function1<Continuation<Unit>, Unit>)
2021-03-12 08:22:11,970 [main:50] - replacing { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    } Function1<Continuation<Unit>, Unit>
2021-03-12 08:22:11,970 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-12 08:22:12,090 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-12 08:22:12,092 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:22:12,212 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:22:12,215 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:22:12,454 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 08:22:12,457 [main:95] - GENERATED = require(false)
2021-03-12 08:22:12,457 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> require(false)}
2021-03-12 08:22:12,457 [main:61] - GENERATED IS CALL =false
2021-03-12 08:22:12,465 [main:67] - randomType = P
2021-03-12 08:22:12,578 [main:302] - generating value of type = P false depth = 0
2021-03-12 08:22:12,580 [main:112] - generating klass P text = inline class P(val i: Int)
2021-03-12 08:22:12,693 [main:194] - Type params = []
2021-03-12 08:22:12,803 [main:302] - generating value of type = Int true depth = 2
2021-03-12 08:22:12,813 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-12 08:22:12,843 [main:114] - replacement of { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> require(false)}
2021-03-12 08:22:12,951 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 08:22:12,952 [main:66] - Compilation checking started
2021-03-12 08:22:13,461 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0(prope2)

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().lowercase() + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { (P(1118931594).i).toChar().isLowerCase() }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(P(1118931594).i).compareTo(-621537835).rem(-46)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != i) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:22:13,463 [main:107] - replacing (prope9, Function0<Unit>)
2021-03-12 08:22:13,463 [main:50] - replacing prope9 Function0<Unit>
2021-03-12 08:22:13,463 [main:54] - Getting value of type Function0<Unit>
2021-03-12 08:22:13,580 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 08:22:13,582 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:22:13,697 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:22:13,700 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:22:13,959 [main:302] - generating value of type = Any false depth = 4
2021-03-12 08:22:13,959 [main:95] - GENERATED = print("vdhcb")
2021-03-12 08:22:13,959 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { print("vdhcb")}
2021-03-12 08:22:13,959 [main:61] - GENERATED IS CALL =false
2021-03-12 08:22:14,082 [main:67] - randomType = Float
2021-03-12 08:22:14,196 [main:302] - generating value of type = Float true depth = 0
2021-03-12 08:22:14,226 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 08:22:14,254 [main:114] - replacement of prope9 of type Function0<Unit> is { print("vdhcb")}
2021-03-12 08:22:14,360 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 08:22:14,361 [main:66] - Compilation checking started
2021-03-12 08:22:14,701 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0(prope2)

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().lowercase() + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { (P(1118931594).i).toChar().isLowerCase() }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(P(1118931594).i).compareTo(-621537835).rem(-46)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != i) error((P(1118931594).i).toString(1979271849))
            { print("vdhcb")}()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:22:14,703 [main:107] - replacing (prope5.exceptionOrNull()!!, Throwable)
2021-03-12 08:22:14,703 [main:50] - replacing prope5.exceptionOrNull()!! Throwable
2021-03-12 08:22:14,703 [main:54] - Getting value of type Throwable
2021-03-12 08:22:14,811 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 08:22:14,818 [main:58] - GENERATED VALUE OF TYPE Throwable = IllegalArgumentException()
2021-03-12 08:22:14,818 [main:61] - GENERATED IS CALL =true
2021-03-12 08:22:14,947 [main:67] - randomType = Kla2<Short>
2021-03-12 08:22:15,055 [main:302] - generating value of type = Kla2<Short> false depth = 0
2021-03-12 08:22:15,057 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 08:22:15,659 [main:302] - generating value of type = Kla5 false depth = 2
2021-03-12 08:22:15,661 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}
2021-03-12 08:22:15,675 [main:106] - GETTING Throwable from Int
2021-03-12 08:22:15,703 [main:114] - replacement of prope5.exceptionOrNull()!! of type Throwable is IllegalArgumentException()
2021-03-12 08:22:15,810 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:22:15,812 [main:107] - replacing (prope9, Function0<Unit>)
2021-03-12 08:22:15,812 [main:50] - replacing prope9 Function0<Unit>
2021-03-12 08:22:15,812 [main:54] - Getting value of type Function0<Unit>
2021-03-12 08:22:15,919 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 08:22:15,921 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:22:16,033 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:22:16,036 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:22:16,319 [main:95] - GENERATED = print(null)
2021-03-12 08:22:16,319 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { print(null)}
2021-03-12 08:22:16,319 [main:61] - GENERATED IS CALL =false
2021-03-12 08:22:16,440 [main:67] - randomType = UInt
2021-03-12 08:22:16,549 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 08:22:16,588 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 08:22:16,630 [main:114] - replacement of prope9 of type Function0<Unit> is { print(null)}
2021-03-12 08:22:16,738 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 08:22:16,738 [main:66] - Compilation checking started
2021-03-12 08:22:17,066 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0(prope2)

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().lowercase() + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { (P(1118931594).i).toChar().isLowerCase() }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(P(1118931594).i).compareTo(-621537835).rem(-46)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != i) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        { print(null)}()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:22:17,068 [main:107] - replacing (prope2, String)
2021-03-12 08:22:17,068 [main:50] - replacing prope2 String
2021-03-12 08:22:17,068 [main:54] - Getting value of type String
2021-03-12 08:22:17,176 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:22:17,178 [main:58] - GENERATED VALUE OF TYPE String = "ncazi"
2021-03-12 08:22:17,178 [main:61] - GENERATED IS CALL =false
2021-03-12 08:22:17,186 [main:67] - randomType = P
2021-03-12 08:22:17,297 [main:302] - generating value of type = P false depth = 0
2021-03-12 08:22:17,299 [main:112] - generating klass P text = inline class P(val i: Int)
2021-03-12 08:22:17,407 [main:194] - Type params = []
2021-03-12 08:22:17,515 [main:302] - generating value of type = Int true depth = 2
2021-03-12 08:22:17,522 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:22:17,522 [main:78] - Generated call from random type = (P(-729306502)).i.toString(P(1118931594).i)
2021-03-12 08:22:17,523 [main:106] - GETTING String from Int
2021-03-12 08:22:17,552 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]]
2021-03-12 08:22:17,552 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:22:17,552 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]
2021-03-12 08:22:17,678 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:22:17,681 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().plus("xxphc")
2021-03-12 08:22:17,681 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]]
2021-03-12 08:22:17,681 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:22:17,681 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]
2021-03-12 08:22:17,681 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().uppercase()
2021-03-12 08:22:17,681 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:22:17,681 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f]
2021-03-12 08:22:17,681 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:22:17,789 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:22:17,791 [main:117] - GENERATED CALL = (P(1118931594).i).toLong().toString(2102718478)
2021-03-12 08:22:17,791 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]]
2021-03-12 08:22:17,791 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b]
2021-03-12 08:22:17,791 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]
2021-03-12 08:22:17,791 [main:117] - GENERATED CALL = (P(1118931594).i).toByte().toString(P(1118931594).i)
2021-03-12 08:22:17,791 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:22:17,792 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:22:17,792 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:22:17,899 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:22:17,901 [main:117] - GENERATED CALL = (P(1118931594).i).compareTo(P(1118931594).i).toString(1848968216)
2021-03-12 08:22:17,901 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]]
2021-03-12 08:22:17,902 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:22:17,902 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]
2021-03-12 08:22:17,902 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().lowercase()
2021-03-12 08:22:17,902 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:22:17,902 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4]
2021-03-12 08:22:18,010 [main:302] - generating value of type = Long true depth = 0
2021-03-12 08:22:18,013 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:22:18,122 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:22:18,124 [main:117] - GENERATED CALL = (P(1118931594).i).div(8841983427844138591).toString(-1861385686)
2021-03-12 08:22:18,124 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]]
2021-03-12 08:22:18,124 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d]
2021-03-12 08:22:18,124 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]
2021-03-12 08:22:18,231 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:22:18,233 [main:117] - GENERATED CALL = (P(1118931594).i).toShort().toString(644420572)
2021-03-12 08:22:18,234 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:22:18,234 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:22:18,234 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:22:18,234 [main:117] - GENERATED CALL = (P(1118931594).i).toInt().toString(P(1118931594).i)
2021-03-12 08:22:18,234 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]]
2021-03-12 08:22:18,234 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:22:18,234 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]
2021-03-12 08:22:18,234 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().titlecase()
2021-03-12 08:22:18,235 [main:114] - replacement of prope2 of type String is (P(1118931594).i).toInt().toString(P(1118931594).i)
2021-03-12 08:22:18,342 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:22:18,342 [main:66] - Compilation checking started
2021-03-12 08:22:18,856 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = prope5.getOrThrow()
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().lowercase() + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { (P(1118931594).i).toChar().isLowerCase() }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(P(1118931594).i).compareTo(-621537835).rem(-46)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != i) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:22:18,858 [main:107] - replacing (prope5.getOrThrow(), Any?)
2021-03-12 08:22:18,858 [main:50] - replacing prope5.getOrThrow() Any?
2021-03-12 08:22:18,858 [main:54] - Getting value of type Any?
2021-03-12 08:22:18,965 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:22:18,966 [main:58] - GENERATED VALUE OF TYPE Any? = "zqnrd"
2021-03-12 08:22:18,966 [main:61] - GENERATED IS CALL =false
2021-03-12 08:22:18,973 [main:67] - randomType = P
2021-03-12 08:22:19,082 [main:302] - generating value of type = P false depth = 0
2021-03-12 08:22:19,084 [main:112] - generating klass P text = inline class P(val i: Int)
2021-03-12 08:22:19,215 [main:194] - Type params = []
2021-03-12 08:22:19,326 [main:302] - generating value of type = Int true depth = 2
2021-03-12 08:22:19,334 [main:106] - GETTING Any? from Int
2021-03-12 08:22:19,365 [main:114] - replacement of prope5.getOrThrow() of type Any? is "zqnrd"
2021-03-12 08:22:19,474 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 08:22:19,475 [main:66] - Compilation checking started
2021-03-12 08:22:19,949 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        prope5.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().lowercase() + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { (P(1118931594).i).toChar().isLowerCase() }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(P(1118931594).i).compareTo(-621537835).rem(-46)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != i) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:22:19,950 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 08:22:19,950 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 08:22:19,950 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 08:22:20,059 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 08:22:20,064 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 08:22:20,068 [main:67] - randomType = Char
2021-03-12 08:22:20,177 [main:302] - generating value of type = Char true depth = 0
2021-03-12 08:22:20,197 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 08:22:20,225 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 08:22:20,225 [main:107] - replacing (prope5.getOrThrow(), Any?)
2021-03-12 08:22:20,225 [main:50] - replacing prope5.getOrThrow() Any?
2021-03-12 08:22:20,225 [main:54] - Getting value of type Any?
2021-03-12 08:22:20,335 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:22:20,336 [main:58] - GENERATED VALUE OF TYPE Any? = "wdttq"
2021-03-12 08:22:20,336 [main:61] - GENERATED IS CALL =false
2021-03-12 08:22:20,344 [main:67] - randomType = Kla3
2021-03-12 08:22:20,452 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 08:22:20,454 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().lowercase() + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { (P(1118931594).i).toChar().isLowerCase() }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}
2021-03-12 08:22:20,460 [main:106] - GETTING Any? from Int
2021-03-12 08:22:20,489 [main:114] - replacement of prope5.getOrThrow() of type Any? is "wdttq"
2021-03-12 08:22:20,597 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 08:22:20,597 [main:66] - Compilation checking started
2021-03-12 08:22:21,100 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().lowercase() + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { (P(1118931594).i).toChar().isLowerCase() }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(P(1118931594).i).compareTo(-621537835).rem(-46)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != i) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:22:21,103 [main:107] - replacing (prope9, Function0<Unit>)
2021-03-12 08:22:21,103 [main:50] - replacing prope9 Function0<Unit>
2021-03-12 08:22:21,103 [main:54] - Getting value of type Function0<Unit>
2021-03-12 08:22:21,217 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 08:22:21,220 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:22:21,226 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-12 08:22:21,226 [main:61] - GENERATED IS CALL =false
2021-03-12 08:22:21,230 [main:67] - randomType = UShort
2021-03-12 08:22:21,340 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 08:22:21,371 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 08:22:21,399 [main:114] - replacement of prope9 of type Function0<Unit> is { println()}
2021-03-12 08:22:21,512 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 08:22:21,513 [main:66] - Compilation checking started
2021-03-12 08:22:21,849 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = fu1()
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().lowercase() + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { (P(1118931594).i).toChar().isLowerCase() }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(P(1118931594).i).compareTo(-621537835).rem(-46)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != i) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        { println()}()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:22:21,852 [main:107] - replacing (c, Continuation<*>)
2021-03-12 08:22:21,852 [main:50] - replacing c Continuation<*>
2021-03-12 08:22:21,852 [main:54] - Getting value of type Continuation<*>
2021-03-12 08:22:21,961 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 08:22:22,077 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 08:22:22,080 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 08:22:22,465 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 08:22:22,576 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:22:22,579 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:22:22,819 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 08:22:22,937 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:22:22,940 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:22:23,305 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:22:23,305 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:22:23,305 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 08:22:23,305 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 08:22:23,313 [main:67] - randomType = Kla1
2021-03-12 08:22:23,426 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 08:22:23,428 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}
2021-03-12 08:22:23,443 [main:106] - GETTING Continuation<*> from Int
2021-03-12 08:22:23,472 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-12 08:22:23,473 [main:107] - replacing (fu1(), String)
2021-03-12 08:22:23,473 [main:50] - replacing fu1() String
2021-03-12 08:22:23,473 [main:54] - Getting value of type String
2021-03-12 08:22:23,580 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:22:23,582 [main:58] - GENERATED VALUE OF TYPE String = "rfvxx"
2021-03-12 08:22:23,582 [main:61] - GENERATED IS CALL =false
2021-03-12 08:22:23,590 [main:67] - randomType = Kla1
2021-03-12 08:22:23,697 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 08:22:23,699 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}
2021-03-12 08:22:23,712 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@76b34e5]
2021-03-12 08:22:23,712 [main:78] - Generated call from random type = (Kla1()).prope5?.toString()!!
2021-03-12 08:22:23,713 [main:106] - GETTING String from Int
2021-03-12 08:22:23,742 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]]
2021-03-12 08:22:23,742 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d]
2021-03-12 08:22:23,742 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]
2021-03-12 08:22:23,742 [main:117] - GENERATED CALL = (P(1118931594).i).toShort().toString(P(1118931594).i)
2021-03-12 08:22:23,742 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]]
2021-03-12 08:22:23,742 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b]
2021-03-12 08:22:23,742 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]
2021-03-12 08:22:23,742 [main:117] - GENERATED CALL = (P(1118931594).i).toByte().toString(P(1118931594).i)
2021-03-12 08:22:23,742 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:22:23,742 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:22:23,743 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:22:23,743 [main:117] - GENERATED CALL = (P(1118931594).i).toInt().toString(P(1118931594).i)
2021-03-12 08:22:23,743 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]]
2021-03-12 08:22:23,743 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:22:23,743 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]
2021-03-12 08:22:23,743 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().lowercase()
2021-03-12 08:22:23,743 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:22:23,743 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:22:23,743 [main:117] - GENERATED CALL = (P(1118931594).i).toString(P(1118931594).i)
2021-03-12 08:22:23,743 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]]
2021-03-12 08:22:23,743 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:22:23,743 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]
2021-03-12 08:22:23,743 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().uppercase()
2021-03-12 08:22:23,744 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:22:23,744 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:22:23,868 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:22:23,870 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:22:23,870 [main:117] - GENERATED CALL = (P(1118931594).i).compareTo(71939608).toString(P(1118931594).i)
2021-03-12 08:22:23,870 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]]
2021-03-12 08:22:23,870 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:22:23,870 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]
2021-03-12 08:22:23,978 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:22:23,980 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().plus("qptqf")
2021-03-12 08:22:23,980 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]]
2021-03-12 08:22:23,980 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:22:23,980 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]
2021-03-12 08:22:23,980 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().titlecase()
2021-03-12 08:22:23,980 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:22:23,980 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4]
2021-03-12 08:22:24,091 [main:302] - generating value of type = Long true depth = 0
2021-03-12 08:22:24,093 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:22:24,094 [main:117] - GENERATED CALL = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
2021-03-12 08:22:24,094 [main:114] - replacement of fu1() of type String is (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
2021-03-12 08:22:24,202 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:22:24,203 [main:66] - Compilation checking started
2021-03-12 08:22:24,699 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().lowercase() + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { (P(1118931594).i).toChar().isLowerCase() }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toChar().titlecase() + " has no state-machine " +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(P(1118931594).i).compareTo(-621537835).rem(-46)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != i) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:22:24,701 [main:107] - replacing ((P(1118931594).i).toChar().titlecase() + " has no state-machine ", String)
2021-03-12 08:22:24,701 [main:50] - replacing (P(1118931594).i).toChar().titlecase() + " has no state-machine " String
2021-03-12 08:22:24,701 [main:54] - Getting value of type String
2021-03-12 08:22:24,816 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:22:24,818 [main:58] - GENERATED VALUE OF TYPE String = "wgmwa"
2021-03-12 08:22:24,819 [main:61] - GENERATED IS CALL =false
2021-03-12 08:22:24,946 [main:67] - randomType = Kla5
2021-03-12 08:22:25,054 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 08:22:25,056 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}
2021-03-12 08:22:25,076 [main:106] - GETTING String from Int
2021-03-12 08:22:25,104 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]]
2021-03-12 08:22:25,105 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d]
2021-03-12 08:22:25,105 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]
2021-03-12 08:22:25,213 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:22:25,215 [main:117] - GENERATED CALL = (P(1118931594).i).toShort().toString(-1294284587)
2021-03-12 08:22:25,216 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:22:25,216 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:22:25,216 [main:117] - GENERATED CALL = (P(1118931594).i).toString(P(1118931594).i)
2021-03-12 08:22:25,216 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:22:25,216 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:22:25,216 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:22:25,216 [main:117] - GENERATED CALL = (P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i)
2021-03-12 08:22:25,216 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:22:25,216 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f]
2021-03-12 08:22:25,216 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:22:25,325 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:22:25,327 [main:117] - GENERATED CALL = (P(1118931594).i).toLong().toString(124934518)
2021-03-12 08:22:25,327 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]]
2021-03-12 08:22:25,327 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b]
2021-03-12 08:22:25,327 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]
2021-03-12 08:22:25,327 [main:117] - GENERATED CALL = (P(1118931594).i).toByte().toString(P(1118931594).i)
2021-03-12 08:22:25,327 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:22:25,327 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4]
2021-03-12 08:22:25,436 [main:302] - generating value of type = Long true depth = 0
2021-03-12 08:22:25,438 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:22:25,438 [main:117] - GENERATED CALL = (P(1118931594).i).div(-4876817846258590825).toString(P(1118931594).i)
2021-03-12 08:22:25,438 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]]
2021-03-12 08:22:25,438 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:22:25,438 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]
2021-03-12 08:22:25,438 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().titlecase()
2021-03-12 08:22:25,438 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:22:25,438 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:22:25,438 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:22:25,567 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:22:25,570 [main:117] - GENERATED CALL = (P(1118931594).i).toInt().toString(-225740610)
2021-03-12 08:22:25,570 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]]
2021-03-12 08:22:25,570 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:22:25,570 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]
2021-03-12 08:22:25,570 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().lowercase()
2021-03-12 08:22:25,570 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]]
2021-03-12 08:22:25,570 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:22:25,570 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]
2021-03-12 08:22:25,678 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:22:25,680 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().plus("cywka")
2021-03-12 08:22:25,680 [main:114] - replacement of (P(1118931594).i).toChar().titlecase() + " has no state-machine " of type String is (P(1118931594).i).toShort().toString(-1294284587)
2021-03-12 08:22:25,789 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:22:25,790 [main:66] - Compilation checking started
2021-03-12 08:22:26,292 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().lowercase() + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { (P(1118931594).i).toChar().isLowerCase() }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(P(1118931594).i).compareTo(-621537835).rem(-46)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != i) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:22:26,294 [main:107] - replacing (getOrThrow(), Ty0)
2021-03-12 08:22:26,294 [main:50] - replacing getOrThrow() Ty0
2021-03-12 08:22:26,294 [main:54] - Getting value of type Ty0
2021-03-12 08:22:26,405 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 08:22:26,410 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 08:22:26,803 [main:67] - randomType = Collection<Set<ArrayList<UShort>>>
2021-03-12 08:22:26,803 [main:106] - GETTING Ty0 from Int
2021-03-12 08:22:26,833 [main:111] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-12 08:22:26,833 [main:107] - replacing (prope7, Int)
2021-03-12 08:22:26,833 [main:50] - replacing prope7 Int
2021-03-12 08:22:26,833 [main:54] - Getting value of type Int
2021-03-12 08:22:26,942 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:22:26,944 [main:58] - GENERATED VALUE OF TYPE Int = -1752287052
2021-03-12 08:22:26,944 [main:61] - GENERATED IS CALL =false
2021-03-12 08:22:27,077 [main:67] - randomType = Kla2<Int>
2021-03-12 08:22:27,186 [main:302] - generating value of type = Kla2<Int> false depth = 0
2021-03-12 08:22:27,188 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 08:22:27,841 [main:302] - generating value of type = Kla5 false depth = 2
2021-03-12 08:22:27,844 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}
2021-03-12 08:22:27,862 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in a.Kla2[DeserializedSimpleFunctionDescriptor@177f0379]
2021-03-12 08:22:27,972 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:22:27,973 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:22:28,086 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:22:28,088 [main:78] - Generated call from random type = (Kla5).equals("znwdq").compareTo(true)
2021-03-12 08:22:28,088 [main:106] - GETTING Int from Int
2021-03-12 08:22:28,139 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1f07773e]]
2021-03-12 08:22:28,139 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1f07773e]
2021-03-12 08:22:28,247 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:22:28,250 [main:117] - GENERATED CALL = (P(1118931594).i).rotateRight(-1196722650)
2021-03-12 08:22:28,250 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e0d2566]]
2021-03-12 08:22:28,250 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:22:28,359 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:22:28,361 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e0d2566]
2021-03-12 08:22:28,469 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:22:28,471 [main:117] - GENERATED CALL = (P(1118931594).i).compareTo(-46805998).rem(25)
2021-03-12 08:22:28,472 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12f81d09]]
2021-03-12 08:22:28,472 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:22:28,472 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12f81d09]
2021-03-12 08:22:28,580 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:22:28,582 [main:117] - GENERATED CALL = (P(1118931594).i).toInt().compareTo(71)
2021-03-12 08:22:28,582 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@12909d67]]
2021-03-12 08:22:28,582 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:22:28,582 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@12909d67]
2021-03-12 08:22:28,582 [main:117] - GENERATED CALL = (P(1118931594).i).compareTo(P(1118931594).i).rotateLeft(P(1118931594).i)
2021-03-12 08:22:28,583 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2f024c1]]
2021-03-12 08:22:28,583 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2f024c1]
2021-03-12 08:22:28,583 [main:117] - GENERATED CALL = (P(1118931594).i).takeLowestOneBit()
2021-03-12 08:22:28,583 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@706b2ff0], public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@284e134c]]
2021-03-12 08:22:28,583 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@706b2ff0]
2021-03-12 08:22:28,583 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@284e134c]
2021-03-12 08:22:28,583 [main:117] - GENERATED CALL = (P(1118931594).i).toDouble().toInt()
2021-03-12 08:22:28,583 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43ac6084]]
2021-03-12 08:22:28,583 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:22:28,583 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43ac6084]
2021-03-12 08:22:28,583 [main:117] - GENERATED CALL = (P(1118931594).i).toInt().unaryPlus()
2021-03-12 08:22:28,583 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@1ae7c0a8]]
2021-03-12 08:22:28,583 [main:117] - GENERATED CALL = (P(1118931594).i).absoluteValue
2021-03-12 08:22:28,583 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@1c465f7d]]
2021-03-12 08:22:28,583 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:22:28,584 [main:117] - GENERATED CALL = (P(1118931594).i).compareTo(P(1118931594).i).sign
2021-03-12 08:22:28,584 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@77c8dd61]]
2021-03-12 08:22:28,584 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:22:28,584 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@77c8dd61]
2021-03-12 08:22:28,584 [main:117] - GENERATED CALL = (P(1118931594).i).toInt().shr(P(1118931594).i)
2021-03-12 08:22:28,584 [main:114] - replacement of prope7 of type Int is (P(1118931594).i).toInt().unaryPlus()
2021-03-12 08:22:28,696 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:22:28,696 [main:66] - Compilation checking started
2021-03-12 08:22:29,211 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().lowercase() + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { (P(1118931594).i).toChar().isLowerCase() }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(P(1118931594).i).compareTo(-621537835).rem(-46)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != i) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:22:29,213 [main:107] - replacing ((P(1118931594).i).toChar().lowercase() + c + " is not subtype of CoroutineStackFrame", String)
2021-03-12 08:22:29,213 [main:50] - replacing (P(1118931594).i).toChar().lowercase() + c + " is not subtype of CoroutineStackFrame" String
2021-03-12 08:22:29,213 [main:54] - Getting value of type String
2021-03-12 08:22:29,323 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:22:29,325 [main:58] - GENERATED VALUE OF TYPE String = "qagdd"
2021-03-12 08:22:29,326 [main:61] - GENERATED IS CALL =false
2021-03-12 08:22:29,573 [main:67] - randomType = Collection<ULong>
2021-03-12 08:22:29,573 [main:106] - GETTING String from Int
2021-03-12 08:22:29,603 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]]
2021-03-12 08:22:29,604 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b]
2021-03-12 08:22:29,604 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]
2021-03-12 08:22:29,604 [main:117] - GENERATED CALL = (P(1118931594).i).toByte().toString(P(1118931594).i)
2021-03-12 08:22:29,604 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:22:29,604 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:22:29,604 [main:117] - GENERATED CALL = (P(1118931594).i).toString(P(1118931594).i)
2021-03-12 08:22:29,604 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:22:29,604 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:22:29,604 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:22:29,605 [main:117] - GENERATED CALL = (P(1118931594).i).toInt().toString(P(1118931594).i)
2021-03-12 08:22:29,605 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]]
2021-03-12 08:22:29,605 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:22:29,605 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]
2021-03-12 08:22:29,713 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:22:29,715 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().plus("nzqql")
2021-03-12 08:22:29,715 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]]
2021-03-12 08:22:29,715 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:22:29,715 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]
2021-03-12 08:22:29,715 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().titlecase()
2021-03-12 08:22:29,716 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:22:29,716 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f]
2021-03-12 08:22:29,716 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:22:29,716 [main:117] - GENERATED CALL = (P(1118931594).i).toLong().toString(P(1118931594).i)
2021-03-12 08:22:29,716 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]]
2021-03-12 08:22:29,716 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d]
2021-03-12 08:22:29,716 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]
2021-03-12 08:22:29,716 [main:117] - GENERATED CALL = (P(1118931594).i).toShort().toString(P(1118931594).i)
2021-03-12 08:22:29,716 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:22:29,716 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:22:29,716 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:22:29,717 [main:117] - GENERATED CALL = (P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i)
2021-03-12 08:22:29,717 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]]
2021-03-12 08:22:29,717 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:22:29,717 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]
2021-03-12 08:22:29,717 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().uppercase()
2021-03-12 08:22:29,717 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:22:29,717 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4]
2021-03-12 08:22:29,827 [main:302] - generating value of type = Long true depth = 0
2021-03-12 08:22:29,829 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:22:29,937 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:22:29,940 [main:117] - GENERATED CALL = (P(1118931594).i).div(-3803826251481693070).toString(1327376394)
2021-03-12 08:22:29,940 [main:114] - replacement of (P(1118931594).i).toChar().lowercase() + c + " is not subtype of CoroutineStackFrame" of type String is (P(1118931594).i).toChar().titlecase()
2021-03-12 08:22:30,049 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:22:30,050 [main:66] - Compilation checking started
2021-03-12 08:22:30,553 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { (P(1118931594).i).toChar().isLowerCase() }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(P(1118931594).i).compareTo(-621537835).rem(-46)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != i) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != numberOfSuspensions)
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:22:30,554 [main:107] - replacing (numberOfSuspensions, Int)
2021-03-12 08:22:30,555 [main:50] - replacing numberOfSuspensions Int
2021-03-12 08:22:30,555 [main:54] - Getting value of type Int
2021-03-12 08:22:30,663 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:22:30,665 [main:58] - GENERATED VALUE OF TYPE Int = -946548523
2021-03-12 08:22:30,665 [main:61] - GENERATED IS CALL =false
2021-03-12 08:22:31,056 [main:67] - randomType = HashSet<Kla5?>
2021-03-12 08:22:31,165 [main:302] - generating value of type = HashSet<Kla5?> false depth = 0
2021-03-12 08:22:31,278 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Kla5?): HashSet<Kla5?> = TODO()
2021-03-12 08:22:31,281 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Kla5?): HashSet<Kla5?> = TODO()
2021-03-12 08:22:31,394 [main:302] - generating value of type = Kla5 false depth = 3
2021-03-12 08:22:31,396 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}
2021-03-12 08:22:31,396 [main:95] - GENERATED = linkedSetOf<Kla5?>(Kla5)
2021-03-12 08:22:31,493 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4f7e7ef8]
2021-03-12 08:22:31,494 [main:78] - Generated call from random type = (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i)
2021-03-12 08:22:31,494 [main:114] - replacement of numberOfSuspensions of type Int is (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i)
2021-03-12 08:22:31,601 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:22:31,602 [main:66] - Compilation checking started
2021-03-12 08:22:32,184 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { (P(1118931594).i).toChar().isLowerCase() }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(P(1118931594).i).compareTo(-621537835).rem(-46)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != i) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:22:32,186 [main:107] - replacing (prope5, Any?)
2021-03-12 08:22:32,186 [main:50] - replacing prope5 Any?
2021-03-12 08:22:32,186 [main:54] - Getting value of type Any?
2021-03-12 08:22:32,313 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:22:32,313 [main:58] - GENERATED VALUE OF TYPE Any? = "lzroq"
2021-03-12 08:22:32,314 [main:61] - GENERATED IS CALL =false
2021-03-12 08:22:32,463 [main:67] - randomType = Collection<Char>
2021-03-12 08:22:32,464 [main:106] - GETTING Any? from Int
2021-03-12 08:22:32,515 [main:114] - replacement of prope5 of type Any? is "lzroq"
2021-03-12 08:22:32,638 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 08:22:32,638 [main:66] - Compilation checking started
2021-03-12 08:22:32,980 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return prope4
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1()."lzroq" = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { (P(1118931594).i).toChar().isLowerCase() }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(P(1118931594).i).compareTo(-621537835).rem(-46)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != i) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:22:32,997 [main:107] - replacing (prope4, String)
2021-03-12 08:22:32,997 [main:50] - replacing prope4 String
2021-03-12 08:22:32,997 [main:54] - Getting value of type String
2021-03-12 08:22:33,115 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:22:33,117 [main:58] - GENERATED VALUE OF TYPE String = "voags"
2021-03-12 08:22:33,117 [main:61] - GENERATED IS CALL =false
2021-03-12 08:22:33,125 [main:67] - randomType = P
2021-03-12 08:22:33,237 [main:302] - generating value of type = P false depth = 0
2021-03-12 08:22:33,239 [main:112] - generating klass P text = inline class P(val i: Int)
2021-03-12 08:22:33,351 [main:194] - Type params = []
2021-03-12 08:22:33,464 [main:302] - generating value of type = Int true depth = 2
2021-03-12 08:22:33,472 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:22:33,473 [main:78] - Generated call from random type = (P(122685639)).i.toString(P(1118931594).i)
2021-03-12 08:22:33,473 [main:114] - replacement of prope4 of type String is (P(122685639)).i.toString(P(1118931594).i)
2021-03-12 08:22:33,591 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:22:33,591 [main:66] - Compilation checking started
2021-03-12 08:22:34,148 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return (P(122685639)).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { (P(1118931594).i).toChar().isLowerCase() }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(P(1118931594).i).compareTo(-621537835).rem(-46)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != i) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:22:34,150 [main:107] - replacing (prope9, Function0<Unit>)
2021-03-12 08:22:34,150 [main:50] - replacing prope9 Function0<Unit>
2021-03-12 08:22:34,150 [main:54] - Getting value of type Function0<Unit>
2021-03-12 08:22:34,272 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 08:22:34,274 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:22:34,392 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 08:22:34,395 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 08:22:34,766 [main:302] - generating value of type = Int true depth = 4
2021-03-12 08:22:34,769 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 08:22:34,771 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 08:22:34,776 [main:95] - GENERATED = repeat(935227057, {a: Int -> println()})
2021-03-12 08:22:34,776 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(935227057, {a: Int -> println()})}
2021-03-12 08:22:34,776 [main:61] - GENERATED IS CALL =false
2021-03-12 08:22:34,784 [main:67] - randomType = Kla5
2021-03-12 08:22:34,897 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 08:22:34,899 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}
2021-03-12 08:22:34,917 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 08:22:34,946 [main:114] - replacement of prope9 of type Function0<Unit> is { repeat(935227057, {a: Int -> println()})}
2021-03-12 08:22:35,080 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 08:22:35,080 [main:66] - Compilation checking started
2021-03-12 08:22:35,433 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return (P(122685639)).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { (P(1118931594).i).toChar().isLowerCase() }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        { repeat(935227057, {a: Int -> println()})} = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(P(1118931594).i).compareTo(-621537835).rem(-46)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != i) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:22:35,435 [main:107] - replacing (c, Continuation<*>)
2021-03-12 08:22:35,435 [main:50] - replacing c Continuation<*>
2021-03-12 08:22:35,435 [main:54] - Getting value of type Continuation<*>
2021-03-12 08:22:35,549 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 08:22:35,666 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 08:22:35,669 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 08:22:36,047 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 08:22:36,165 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:22:36,168 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:22:36,416 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 08:22:36,536 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:22:36,539 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:22:36,934 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-12 08:22:37,097 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:22:37,100 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:22:37,498 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 12
2021-03-12 08:22:37,623 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:22:37,626 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:22:38,005 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:22:38,006 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:22:38,006 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:22:38,006 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:22:38,006 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 08:22:38,006 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 08:22:38,654 [main:67] - randomType = Kla2<MutableMap<ULong?, Kla5>?>
2021-03-12 08:22:38,767 [main:302] - generating value of type = Kla2<MutableMap<ULong?, Kla5>?> false depth = 0
2021-03-12 08:22:38,770 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 08:22:39,428 [main:302] - generating value of type = Kla5 false depth = 2
2021-03-12 08:22:39,430 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}
2021-03-12 08:22:39,456 [main:106] - GETTING Continuation<*> from Int
2021-03-12 08:22:39,509 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-12 08:22:39,509 [main:107] - replacing (c, SuspendFunction0<Unit>)
2021-03-12 08:22:39,509 [main:50] - replacing c SuspendFunction0<Unit>
2021-03-12 08:22:39,510 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-12 08:22:39,621 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-12 08:22:39,624 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:22:39,739 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:22:39,742 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:22:39,983 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 08:22:39,986 [main:95] - GENERATED = check(true)
2021-03-12 08:22:39,986 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { check(true)}
2021-03-12 08:22:39,986 [main:61] - GENERATED IS CALL =false
2021-03-12 08:22:40,383 [main:67] - randomType = Function2<Double, Kla4, ArrayDeque<Short?>>
2021-03-12 08:22:40,385 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-12 08:22:40,414 [main:114] - replacement of c of type SuspendFunction0<Unit> is { check(true)}
2021-03-12 08:22:40,525 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 08:22:40,525 [main:66] - Compilation checking started
2021-03-12 08:22:40,897 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return (P(122685639)).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    { check(true)}.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { (P(1118931594).i).toChar().isLowerCase() }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(P(1118931594).i).compareTo(-621537835).rem(-46)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != i) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:22:40,899 [main:107] - replacing (1..(P(1118931594).i).compareTo(-621537835).rem(-46), IntRange)
2021-03-12 08:22:40,899 [main:50] - replacing 1..(P(1118931594).i).compareTo(-621537835).rem(-46) IntRange
2021-03-12 08:22:40,899 [main:54] - Getting value of type IntRange
2021-03-12 08:22:41,046 [main:302] - generating value of type = IntRange false depth = 0
2021-03-12 08:22:41,173 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 08:22:41,176 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 08:22:41,555 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:22:41,557 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:22:41,559 [main:95] - GENERATED = IntRange(1932468764, 652637780)
2021-03-12 08:22:41,559 [main:58] - GENERATED VALUE OF TYPE IntRange = IntRange(1932468764, 652637780)
2021-03-12 08:22:41,559 [main:61] - GENERATED IS CALL =true
2021-03-12 08:22:41,571 [main:67] - randomType = Kla5?
2021-03-12 08:22:41,684 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 08:22:41,686 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}
2021-03-12 08:22:41,706 [main:106] - GETTING IntRange from Int
2021-03-12 08:22:41,738 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b], public infix fun kotlin.Byte.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3df9100b]]
2021-03-12 08:22:41,738 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b]
2021-03-12 08:22:41,738 [main:149] - GENERATING call of type public infix fun kotlin.Byte.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3df9100b]
2021-03-12 08:22:41,853 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:22:41,855 [main:117] - GENERATED CALL = (P(1118931594).i).toByte().until(79)
2021-03-12 08:22:41,856 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b6a54c]]
2021-03-12 08:22:41,856 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b6a54c]
2021-03-12 08:22:41,971 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:22:41,974 [main:117] - GENERATED CALL = (P(1118931594).i).rangeTo(55)
2021-03-12 08:22:41,974 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7f8c7c3b]]
2021-03-12 08:22:41,974 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:22:41,974 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7f8c7c3b]
2021-03-12 08:22:42,088 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:22:42,091 [main:117] - GENERATED CALL = (P(1118931594).i).compareTo(P(1118931594).i).until(3)
2021-03-12 08:22:42,091 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b6a54c]]
2021-03-12 08:22:42,091 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:22:42,204 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:22:42,206 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b6a54c]
2021-03-12 08:22:42,323 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:22:42,325 [main:117] - GENERATED CALL = (P(1118931594).i).compareTo(-1288727818).rangeTo(-23)
2021-03-12 08:22:42,325 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@23c343e1]]
2021-03-12 08:22:42,325 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b]
2021-03-12 08:22:42,325 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@23c343e1]
2021-03-12 08:22:42,445 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:22:42,447 [main:117] - GENERATED CALL = (P(1118931594).i).toByte().rangeTo(34)
2021-03-12 08:22:42,448 [main:113] - Case = [public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7f8c7c3b]]
2021-03-12 08:22:42,448 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7f8c7c3b]
2021-03-12 08:22:42,559 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:22:42,561 [main:117] - GENERATED CALL = (P(1118931594).i).until(49)
2021-03-12 08:22:42,562 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@18d0c042]]
2021-03-12 08:22:42,562 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d]
2021-03-12 08:22:42,562 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@18d0c042]
2021-03-12 08:22:42,673 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:22:42,675 [main:117] - GENERATED CALL = (P(1118931594).i).toShort().rangeTo(70)
2021-03-12 08:22:42,675 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d], public infix fun kotlin.Short.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50fef73f]]
2021-03-12 08:22:42,675 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d]
2021-03-12 08:22:42,675 [main:149] - GENERATING call of type public infix fun kotlin.Short.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50fef73f]
2021-03-12 08:22:42,790 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:22:42,792 [main:117] - GENERATED CALL = (P(1118931594).i).toShort().until(-19)
2021-03-12 08:22:42,792 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b6a54c]]
2021-03-12 08:22:42,792 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:22:42,792 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b6a54c]
2021-03-12 08:22:42,904 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:22:42,906 [main:117] - GENERATED CALL = (P(1118931594).i).toInt().rangeTo(49)
2021-03-12 08:22:42,906 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7f8c7c3b]]
2021-03-12 08:22:42,906 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:22:42,906 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7f8c7c3b]
2021-03-12 08:22:43,034 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:22:43,036 [main:117] - GENERATED CALL = (P(1118931594).i).toInt().until(-72)
2021-03-12 08:22:43,036 [main:114] - replacement of 1..(P(1118931594).i).compareTo(-621537835).rem(-46) of type IntRange is (P(1118931594).i).toInt().until(-72)
2021-03-12 08:22:43,147 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:22:43,147 [main:66] - Compilation checking started
2021-03-12 08:22:43,713 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return (P(122685639)).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { (P(1118931594).i).toChar().isLowerCase() }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(-72)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != i) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:22:43,715 [main:107] - replacing (c, Continuation<*>)
2021-03-12 08:22:43,715 [main:50] - replacing c Continuation<*>
2021-03-12 08:22:43,715 [main:54] - Getting value of type Continuation<*>
2021-03-12 08:22:43,838 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 08:22:43,964 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 08:22:43,968 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 08:22:44,348 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 08:22:44,468 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:22:44,471 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:22:44,720 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 08:22:44,842 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:22:44,845 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:22:45,222 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-12 08:22:45,385 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:22:45,388 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:22:45,770 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 12
2021-03-12 08:22:45,890 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:22:45,893 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:22:46,271 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:22:46,272 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:22:46,272 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:22:46,272 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:22:46,272 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 08:22:46,272 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 08:22:46,782 [main:67] - randomType = ArrayDeque<Kla2<Byte>>
2021-03-12 08:22:46,894 [main:302] - generating value of type = ArrayDeque<Kla2<Byte>> false depth = 0
2021-03-12 08:22:47,011 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Kla2<Byte>> = TODO()
2021-03-12 08:22:47,014 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Kla2<Byte>> = TODO()
2021-03-12 08:22:47,255 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:22:47,257 [main:95] - GENERATED = ArrayDeque<Kla2<Byte>>(-1722782049)
2021-03-12 08:22:47,435 [main:106] - GETTING Continuation<*> from Int
2021-03-12 08:22:47,482 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-12 08:22:47,482 [main:107] - replacing ("Wrong state-machine generated: it is not finished yet", String)
2021-03-12 08:22:47,482 [main:50] - replacing "Wrong state-machine generated: it is not finished yet" String
2021-03-12 08:22:47,482 [main:54] - Getting value of type String
2021-03-12 08:22:47,614 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:22:47,616 [main:58] - GENERATED VALUE OF TYPE String = "rhusm"
2021-03-12 08:22:47,616 [main:61] - GENERATED IS CALL =false
2021-03-12 08:22:47,886 [main:67] - randomType = Triple<Boolean, Kla3, UByte>
2021-03-12 08:22:47,998 [main:302] - generating value of type = Triple<Boolean, Kla3, UByte> false depth = 0
2021-03-12 08:22:48,124 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Boolean, second: Kla3, third: UByte): Triple<Boolean, Kla3, UByte> = TODO()
2021-03-12 08:22:48,128 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Boolean, second: Kla3, third: UByte): Triple<Boolean, Kla3, UByte> = TODO()
2021-03-12 08:22:48,246 [main:302] - generating value of type = Boolean true depth = 3
2021-03-12 08:22:48,248 [main:302] - generating value of type = Kla3 false depth = 3
2021-03-12 08:22:48,250 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { (P(1118931594).i).toChar().isLowerCase() }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}
2021-03-12 08:22:48,250 [main:302] - generating value of type = UByte true depth = 3
2021-03-12 08:22:48,253 [main:95] - GENERATED = Triple<Boolean, Kla3, UByte>(true, Kla3(), 79.toUByte())
2021-03-12 08:22:48,265 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dece05d]
2021-03-12 08:22:48,377 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:22:48,380 [main:78] - Generated call from random type = (Triple<Boolean, Kla3, UByte>(true, Kla3(), 79.toUByte())).third.toString(527338246)
2021-03-12 08:22:48,381 [main:106] - GETTING String from Int
2021-03-12 08:22:48,410 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]]
2021-03-12 08:22:48,410 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d]
2021-03-12 08:22:48,410 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]
2021-03-12 08:22:48,522 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:22:48,524 [main:117] - GENERATED CALL = (P(1118931594).i).toShort().toString(176379322)
2021-03-12 08:22:48,524 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:22:48,524 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f]
2021-03-12 08:22:48,524 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:22:48,524 [main:117] - GENERATED CALL = (P(1118931594).i).toLong().toString(P(1118931594).i)
2021-03-12 08:22:48,524 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]]
2021-03-12 08:22:48,524 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:22:48,524 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]
2021-03-12 08:22:48,525 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().titlecase()
2021-03-12 08:22:48,525 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:22:48,525 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4]
2021-03-12 08:22:48,637 [main:302] - generating value of type = Long true depth = 0
2021-03-12 08:22:48,639 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:22:48,639 [main:117] - GENERATED CALL = (P(1118931594).i).div(1312924676160070044).toString(P(1118931594).i)
2021-03-12 08:22:48,639 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:22:48,639 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:22:48,639 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:22:48,753 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:22:48,755 [main:117] - GENERATED CALL = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1056692687)
2021-03-12 08:22:48,755 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]]
2021-03-12 08:22:48,755 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:22:48,755 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]
2021-03-12 08:22:48,867 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:22:48,869 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().plus("ozyki")
2021-03-12 08:22:48,869 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:22:48,869 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:22:48,869 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:22:48,869 [main:117] - GENERATED CALL = (P(1118931594).i).toInt().toString(P(1118931594).i)
2021-03-12 08:22:48,870 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]]
2021-03-12 08:22:48,870 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:22:48,870 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]
2021-03-12 08:22:48,870 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().uppercase()
2021-03-12 08:22:48,870 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]]
2021-03-12 08:22:48,870 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b]
2021-03-12 08:22:48,870 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]
2021-03-12 08:22:48,870 [main:117] - GENERATED CALL = (P(1118931594).i).toByte().toString(P(1118931594).i)
2021-03-12 08:22:48,870 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:22:48,870 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:22:48,870 [main:117] - GENERATED CALL = (P(1118931594).i).toString(P(1118931594).i)
2021-03-12 08:22:48,870 [main:114] - replacement of "Wrong state-machine generated: it is not finished yet" of type String is (P(1118931594).i).toChar().plus("ozyki")
2021-03-12 08:22:48,987 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:22:48,987 [main:66] - Compilation checking started
2021-03-12 08:22:49,539 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return (P(122685639)).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { (P(1118931594).i).toChar().isLowerCase() }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(-72)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != i) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:22:49,542 [main:107] - replacing (Kla1().prope5, Any?)
2021-03-12 08:22:49,542 [main:50] - replacing Kla1().prope5 Any?
2021-03-12 08:22:49,542 [main:54] - Getting value of type Any?
2021-03-12 08:22:49,685 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:22:49,685 [main:58] - GENERATED VALUE OF TYPE Any? = "rovxs"
2021-03-12 08:22:49,685 [main:61] - GENERATED IS CALL =false
2021-03-12 08:22:50,529 [main:67] - randomType = Function1<MutableMap<Kla0, Pair<Byte, Byte>>?, Boolean>
2021-03-12 08:22:50,530 [main:106] - GETTING Any? from Int
2021-03-12 08:22:50,559 [main:114] - replacement of Kla1().prope5 of type Any? is "rovxs"
2021-03-12 08:22:50,675 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 08:22:50,676 [main:66] - Compilation checking started
2021-03-12 08:22:51,045 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return (P(122685639)).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        "rovxs" = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { (P(1118931594).i).toChar().isLowerCase() }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(-72)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != i) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:22:51,047 [main:107] - replacing (prope9, Function0<Unit>)
2021-03-12 08:22:51,047 [main:50] - replacing prope9 Function0<Unit>
2021-03-12 08:22:51,047 [main:54] - Getting value of type Function0<Unit>
2021-03-12 08:22:51,167 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 08:22:51,169 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:22:51,290 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:22:51,293 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:22:51,543 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 08:22:51,545 [main:95] - GENERATED = check(false)
2021-03-12 08:22:51,545 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false)}
2021-03-12 08:22:51,545 [main:61] - GENERATED IS CALL =false
2021-03-12 08:22:51,681 [main:67] - randomType = Kla0?
2021-03-12 08:22:51,797 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 08:22:51,799 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}
2021-03-12 08:22:51,915 [main:194] - Type params = []
2021-03-12 08:22:52,031 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 08:22:52,151 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:22:52,154 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:22:52,411 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 08:22:52,559 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:22:52,562 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:22:52,949 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-12 08:22:53,072 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:22:53,075 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:22:53,466 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 11
2021-03-12 08:22:53,591 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:22:53,594 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:22:53,988 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:22:53,988 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:22:53,988 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:22:53,988 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:22:54,002 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 08:22:54,030 [main:114] - replacement of prope9 of type Function0<Unit> is { check(false)}
2021-03-12 08:22:54,147 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 08:22:54,148 [main:66] - Compilation checking started
2021-03-12 08:22:54,507 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return (P(122685639)).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { (P(1118931594).i).toChar().isLowerCase() }?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(-72)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != i) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().{ check(false)} = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:22:54,508 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 08:22:54,508 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 08:22:54,508 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 08:22:54,628 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 08:22:54,633 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 08:22:54,637 [main:67] - randomType = UShort
2021-03-12 08:22:54,759 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 08:22:54,793 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 08:22:54,821 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 08:22:54,821 [main:107] - replacing ({ (P(1118931594).i).toChar().isLowerCase() }, Function0<Boolean>)
2021-03-12 08:22:54,821 [main:50] - replacing { (P(1118931594).i).toChar().isLowerCase() } Function0<Boolean>
2021-03-12 08:22:54,821 [main:54] - Getting value of type Function0<Boolean>
2021-03-12 08:22:54,950 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-12 08:22:54,953 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 08:22:54,955 [main:58] - GENERATED VALUE OF TYPE Function0<Boolean> = { true}
2021-03-12 08:22:54,955 [main:61] - GENERATED IS CALL =false
2021-03-12 08:22:54,959 [main:67] - randomType = UShort
2021-03-12 08:22:55,075 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 08:22:55,100 [main:106] - GETTING Function0<Boolean> from Int
2021-03-12 08:22:55,128 [main:114] - replacement of { (P(1118931594).i).toChar().isLowerCase() } of type Function0<Boolean> is { true}
2021-03-12 08:22:55,246 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 08:22:55,246 [main:66] - Compilation checking started
2021-03-12 08:22:55,754 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return (P(122685639)).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(-72)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != i) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:22:55,756 [main:107] - replacing (i, Int)
2021-03-12 08:22:55,757 [main:50] - replacing i Int
2021-03-12 08:22:55,757 [main:54] - Getting value of type Int
2021-03-12 08:22:55,873 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:22:55,875 [main:58] - GENERATED VALUE OF TYPE Int = 2133577673
2021-03-12 08:22:55,875 [main:61] - GENERATED IS CALL =false
2021-03-12 08:22:56,013 [main:67] - randomType = Kla4?
2021-03-12 08:22:56,129 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 08:22:56,131 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(-72)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != i) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}
2021-03-12 08:22:56,138 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:22:56,253 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:22:56,255 [main:78] - Generated call from random type = (Kla4())?.prope8.compareTo(true)
2021-03-12 08:22:56,255 [main:106] - GETTING Int from Int
2021-03-12 08:22:56,286 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1f07773e]]
2021-03-12 08:22:56,286 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:22:56,286 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1f07773e]
2021-03-12 08:22:56,286 [main:117] - GENERATED CALL = (P(1118931594).i).toInt().rotateRight(P(1118931594).i)
2021-03-12 08:22:56,286 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55149f6d]]
2021-03-12 08:22:56,287 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:22:56,401 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:22:56,403 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55149f6d]
2021-03-12 08:22:56,403 [main:117] - GENERATED CALL = (P(1118931594).i).compareTo(20203694).unaryMinus()
2021-03-12 08:22:56,403 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3a02d567]]
2021-03-12 08:22:56,403 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b]
2021-03-12 08:22:56,403 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3a02d567]
2021-03-12 08:22:56,403 [main:117] - GENERATED CALL = (P(1118931594).i).toByte().countLeadingZeroBits()
2021-03-12 08:22:56,403 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5a7b8e3a]]
2021-03-12 08:22:56,404 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b]
2021-03-12 08:22:56,404 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@5a7b8e3a]
2021-03-12 08:22:56,521 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:22:56,524 [main:117] - GENERATED CALL = (P(1118931594).i).toByte().rem(-19)
2021-03-12 08:22:56,524 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@1ae7c0a8]]
2021-03-12 08:22:56,524 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:22:56,642 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:22:56,644 [main:117] - GENERATED CALL = (P(1118931594).i).compareTo(-1102528146).absoluteValue
2021-03-12 08:22:56,644 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45b67d0e]]
2021-03-12 08:22:56,644 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d]
2021-03-12 08:22:56,644 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45b67d0e]
2021-03-12 08:22:56,644 [main:117] - GENERATED CALL = (P(1118931594).i).toShort().countOneBits()
2021-03-12 08:22:56,645 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b6a54c], public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@1ec664bc]]
2021-03-12 08:22:56,645 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b6a54c]
2021-03-12 08:22:56,760 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:22:56,762 [main:117] - GENERATED CALL = (P(1118931594).i).rangeTo(-120).endInclusive
2021-03-12 08:22:56,762 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2fc2bb2f]]
2021-03-12 08:22:56,763 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:22:56,763 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2fc2bb2f]
2021-03-12 08:22:56,878 [main:302] - generating value of type = Char true depth = 0
2021-03-12 08:22:56,880 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().minus('Ôåí')
2021-03-12 08:22:56,880 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1e3928b4]]
2021-03-12 08:22:56,880 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:22:56,881 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1e3928b4]
2021-03-12 08:22:56,881 [main:117] - GENERATED CALL = (P(1118931594).i).compareTo(P(1118931594).i).toInt()
2021-03-12 08:22:56,881 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12f81d09]]
2021-03-12 08:22:56,881 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12f81d09]
2021-03-12 08:22:57,006 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:22:57,009 [main:117] - GENERATED CALL = (P(1118931594).i).compareTo(-28)
2021-03-12 08:22:57,010 [main:114] - replacement of i of type Int is (P(1118931594).i).compareTo(P(1118931594).i).toInt()
2021-03-12 08:22:57,132 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:22:57,132 [main:66] - Compilation checking started
2021-03-12 08:22:57,672 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return (P(122685639)).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(-72)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(1118931594).i).toInt()) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:22:57,674 [main:107] - replacing (prope9, Function0<Unit>)
2021-03-12 08:22:57,675 [main:50] - replacing prope9 Function0<Unit>
2021-03-12 08:22:57,675 [main:54] - Getting value of type Function0<Unit>
2021-03-12 08:22:57,792 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 08:22:57,794 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:22:57,914 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 08:22:57,917 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 08:22:58,170 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 08:22:58,172 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 08:22:58,293 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 08:22:58,296 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 08:22:58,549 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 8
2021-03-12 08:22:58,551 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 08:22:58,675 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:22:58,678 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:22:58,936 [main:302] - generating value of type = Any false depth = 12
2021-03-12 08:22:58,936 [main:95] - GENERATED = println("vepyy")
2021-03-12 08:22:58,937 [main:95] - GENERATED = contract({ println("vepyy")})
2021-03-12 08:22:58,937 [main:95] - GENERATED = contract({ contract({ println("vepyy")})})
2021-03-12 08:22:58,937 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ contract({ println("vepyy")})})}
2021-03-12 08:22:58,937 [main:61] - GENERATED IS CALL =false
2021-03-12 08:22:59,360 [main:67] - randomType = Map<Function2<Kla4, Double, Kla5>, Float>
2021-03-12 08:22:59,361 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 08:22:59,391 [main:114] - replacement of prope9 of type Function0<Unit> is { contract({ contract({ println("vepyy")})})}
2021-03-12 08:22:59,506 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 08:22:59,506 [main:66] - Compilation checking started
2021-03-12 08:22:59,869 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return (P(122685639)).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(-72)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(1118931594).i).toInt()) error((P(1118931594).i).toString(1979271849))
            { contract({ contract({ println("vepyy")})})}()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(1624648143))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:23:00,006 [main:141] - TRYING TO REPLACE CONSTANT 1624648143
2021-03-12 08:23:00,123 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:23:00,124 [main:66] - Compilation checking started
2021-03-12 08:23:00,641 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return (P(122685639)).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(-72)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(1118931594).i).toInt()) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:23:00,641 [main:141] - TRYING TO REPLACE CONSTANT 1118931594
2021-03-12 08:23:00,762 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:23:00,763 [main:66] - Compilation checking started
2021-03-12 08:23:01,111 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return (P(122685639)).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(-72)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(1118931594).i).toInt()) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(i).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:23:01,112 [main:141] - TRYING TO REPLACE CONSTANT 1118931594
2021-03-12 08:23:01,228 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:23:01,228 [main:66] - Compilation checking started
2021-03-12 08:23:01,589 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P(1118931594).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return (P(122685639)).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(-72)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(1118931594).i).toInt()) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(i).i).toString(P(1118931594).i))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:23:01,590 [main:141] - TRYING TO REPLACE CONSTANT 1118931594
2021-03-12 08:23:01,705 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:23:01,706 [main:66] - Compilation checking started
2021-03-12 08:23:02,221 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return (P(122685639)).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(1118931594).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(-72)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(1118931594).i).toInt()) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:23:02,222 [main:141] - TRYING TO REPLACE CONSTANT 1118931594
2021-03-12 08:23:02,340 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 08:23:02,341 [main:141] - TRYING TO REPLACE CONSTANT 1118931594
2021-03-12 08:23:02,459 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 08:23:02,459 [main:66] - Compilation checking started
2021-03-12 08:23:03,009 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return (P(122685639)).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(-72)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(1118931594).i).toInt()) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P(1118931594).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:23:03,009 [main:141] - TRYING TO REPLACE CONSTANT 1118931594
2021-03-12 08:23:03,127 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PARENTHESIZED)
2021-03-12 08:23:03,127 [main:66] - Compilation checking started
2021-03-12 08:23:03,659 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return (P(122685639)).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(-72)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(1118931594).i).toInt()) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:23:03,659 [main:141] - TRYING TO REPLACE CONSTANT 0.7710914626188926
2021-03-12 08:23:03,780 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(FLOAT_CONSTANT)
2021-03-12 08:23:03,780 [main:66] - Compilation checking started
2021-03-12 08:23:04,302 [main:141] - TRYING TO REPLACE CONSTANT 42
2021-03-12 08:23:04,422 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:23:04,422 [main:66] - Compilation checking started
2021-03-12 08:23:04,777 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return (P(122685639)).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(i)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(-72)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(1118931594).i).toInt()) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:23:04,777 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 08:23:04,899 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:23:04,899 [main:66] - Compilation checking started
2021-03-12 08:23:05,277 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return (P(122685639)).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(1118931594).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { checkFinished} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(-72)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(1118931594).i).toInt()) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:23:05,277 [main:141] - TRYING TO REPLACE CONSTANT null
2021-03-12 08:23:05,396 [main:33] - Trying to replace Element(NULL) on Element(NULL)
2021-03-12 08:23:05,396 [main:66] - Compilation checking started
2021-03-12 08:23:05,910 [main:141] - TRYING TO REPLACE CONSTANT 1118931594
2021-03-12 08:23:06,029 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:23:06,030 [main:66] - Compilation checking started
2021-03-12 08:23:06,538 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return (P(122685639)).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(-72)) {
            if ((P(1118931594).i).div(-6350246603923996636).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(1118931594).i).toInt()) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:23:06,538 [main:141] - TRYING TO REPLACE CONSTANT 6350246603923996636
2021-03-12 08:23:06,663 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 08:23:06,663 [main:66] - Compilation checking started
2021-03-12 08:23:07,213 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return (P(122685639)).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(-72)) {
            if ((P(1118931594).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(1118931594).i).toInt()) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:23:07,213 [main:141] - TRYING TO REPLACE CONSTANT 1118931594
2021-03-12 08:23:07,333 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PARENTHESIZED)
2021-03-12 08:23:07,333 [main:66] - Compilation checking started
2021-03-12 08:23:07,825 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return (P(122685639)).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(-72)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(1118931594).i).toInt()) error((P(1118931594).i).toString(1979271849))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:23:07,825 [main:141] - TRYING TO REPLACE CONSTANT 1979271849
2021-03-12 08:23:07,943 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:23:07,943 [main:66] - Compilation checking started
2021-03-12 08:23:08,462 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return (P(122685639)).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(-72)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(1118931594).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(false)}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:23:08,463 [main:141] - TRYING TO REPLACE CONSTANT 1118931594
2021-03-12 08:23:08,597 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 08:23:08,598 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-12 08:23:08,719 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 08:23:08,719 [main:66] - Compilation checking started
2021-03-12 08:23:09,232 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return (P(122685639)).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(-72)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(1118931594).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:23:09,233 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-12 08:23:09,350 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 08:23:09,350 [main:66] - Compilation checking started
2021-03-12 08:23:09,699 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return (P(122685639)).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(isLowerCase(), { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(-72)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(1118931594).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((753.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:23:09,699 [main:141] - TRYING TO REPLACE CONSTANT 753
2021-03-12 08:23:09,817 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 08:23:09,818 [main:66] - Compilation checking started
2021-03-12 08:23:10,330 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return (P(122685639)).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P(1118931594).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(-72)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(1118931594).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:23:10,330 [main:141] - TRYING TO REPLACE CONSTANT 1118931594
2021-03-12 08:23:10,448 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:23:10,448 [main:66] - Compilation checking started
2021-03-12 08:23:10,963 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return (P(122685639)).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false, { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(-72)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(1118931594).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:23:10,964 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-12 08:23:11,085 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:23:11,086 [main:66] - Compilation checking started
2021-03-12 08:23:11,602 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(-1342075770)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return (P(122685639)).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(-72)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(1118931594).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:23:11,603 [main:141] - TRYING TO REPLACE CONSTANT 1342075770
2021-03-12 08:23:11,723 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 08:23:11,724 [main:66] - Compilation checking started
2021-03-12 08:23:12,224 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(1118931594).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return (P(122685639)).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(-72)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(1118931594).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:23:12,224 [main:141] - TRYING TO REPLACE CONSTANT 1118931594
2021-03-12 08:23:12,347 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:23:12,347 [main:66] - Compilation checking started
2021-03-12 08:23:12,840 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return (P(122685639)).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(-72)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(1118931594).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:23:12,840 [main:141] - TRYING TO REPLACE CONSTANT 1118931594
2021-03-12 08:23:12,961 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 08:23:12,961 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-12 08:23:13,081 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:23:13,082 [main:66] - Compilation checking started
2021-03-12 08:23:13,615 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P(1118931594).i).toInt().toString(P(1118931594).i))

    return (P(122685639)).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(-72)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(1118931594).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:23:13,616 [main:141] - TRYING TO REPLACE CONSTANT 1118931594
2021-03-12 08:23:13,744 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:23:13,744 [main:66] - Compilation checking started
2021-03-12 08:23:14,260 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(1118931594).i))

    return (P(122685639)).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(-72)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(1118931594).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:23:14,260 [main:141] - TRYING TO REPLACE CONSTANT 1118931594
2021-03-12 08:23:14,380 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:23:14,381 [main:66] - Compilation checking started
2021-03-12 08:23:14,888 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P(122685639)).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6127939662873622062).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(-72)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(1118931594).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:23:14,888 [main:141] - TRYING TO REPLACE CONSTANT 6127939662873622062
2021-03-12 08:23:15,009 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 08:23:15,010 [main:66] - Compilation checking started
2021-03-12 08:23:15,508 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P(122685639)).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(1118931594).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(-72)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(1118931594).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:23:15,508 [main:141] - TRYING TO REPLACE CONSTANT 1118931594
2021-03-12 08:23:15,629 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 08:23:15,630 [main:141] - TRYING TO REPLACE CONSTANT 1118931594
2021-03-12 08:23:15,750 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:23:15,750 [main:66] - Compilation checking started
2021-03-12 08:23:16,298 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P(122685639)).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(-72)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(1118931594).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:23:16,299 [main:141] - TRYING TO REPLACE CONSTANT 1294284587
2021-03-12 08:23:16,419 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:23:16,420 [main:66] - Compilation checking started
2021-03-12 08:23:16,780 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P(122685639)).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P(1118931594).i).toShort().toString(i) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(-72)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(1118931594).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:23:16,781 [main:141] - TRYING TO REPLACE CONSTANT 1118931594
2021-03-12 08:23:16,902 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PARENTHESIZED)
2021-03-12 08:23:16,902 [main:66] - Compilation checking started
2021-03-12 08:23:17,412 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P(122685639)).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(-72)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(1118931594).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(1118931594).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:23:17,413 [main:141] - TRYING TO REPLACE CONSTANT 1118931594
2021-03-12 08:23:17,535 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:23:17,535 [main:66] - Compilation checking started
2021-03-12 08:23:18,043 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P(122685639)).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(1118931594).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(-72)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(1118931594).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:23:18,043 [main:141] - TRYING TO REPLACE CONSTANT 1118931594
2021-03-12 08:23:18,164 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:23:18,164 [main:66] - Compilation checking started
2021-03-12 08:23:18,685 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P(122685639)).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(-72)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(1118931594).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:23:18,685 [main:141] - TRYING TO REPLACE CONSTANT 1118931594
2021-03-12 08:23:18,813 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 08:23:18,814 [main:141] - TRYING TO REPLACE CONSTANT 122685639
2021-03-12 08:23:18,937 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PARENTHESIZED)
2021-03-12 08:23:18,937 [main:66] - Compilation checking started
2021-03-12 08:23:19,450 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(-72)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(1118931594).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:23:19,451 [main:141] - TRYING TO REPLACE CONSTANT 1118931594
2021-03-12 08:23:19,573 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:23:19,573 [main:66] - Compilation checking started
2021-03-12 08:23:19,935 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(i).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(-72)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(1118931594).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:23:19,935 [main:141] - TRYING TO REPLACE CONSTANT 72
2021-03-12 08:23:20,058 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:23:20,058 [main:66] - Compilation checking started
2021-03-12 08:23:20,580 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(1118931594).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(1118931594).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:23:20,580 [main:141] - TRYING TO REPLACE CONSTANT 1118931594
2021-03-12 08:23:20,707 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 08:23:20,707 [main:66] - Compilation checking started
2021-03-12 08:23:21,221 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(1118931594).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P(1118931594).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:23:21,221 [main:141] - TRYING TO REPLACE CONSTANT 1118931594
2021-03-12 08:23:21,362 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:23:21,363 [main:66] - Compilation checking started
2021-03-12 08:23:21,879 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(1118931594).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:23:21,880 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 08:23:22,010 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(IS_EXPRESSION)
2021-03-12 08:23:22,010 [main:66] - Compilation checking started
2021-03-12 08:23:22,373 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { c !is CoroutineStackFrame}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(1118931594).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:23:22,373 [main:141] - TRYING TO REPLACE CONSTANT 1118931594
2021-03-12 08:23:22,498 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 08:23:22,498 [main:141] - TRYING TO REPLACE CONSTANT 1118931594
2021-03-12 08:23:22,622 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:23:22,622 [main:66] - Compilation checking started
2021-03-12 08:23:23,125 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:23:23,125 [main:41] - AFTER TRY 1 res = package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}


2021-03-12 08:23:23,376 [main:112] - generating klass P text = inline class P(val i: Int)
2021-03-12 08:23:23,499 [main:194] - Type params = []
2021-03-12 08:23:23,623 [main:302] - generating value of type = Int true depth = 1
2021-03-12 08:23:23,626 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}
2021-03-12 08:23:23,749 [main:194] - Type params = []
2021-03-12 08:23:23,897 [main:302] - generating value of type = CoroutineContext false depth = 1
2021-03-12 08:23:24,025 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:23:24,029 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:23:24,313 [main:302] - generating value of type = Key<*> false depth = 4
2021-03-12 08:23:24,446 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:23:24,450 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:23:24,882 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:23:24,882 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:23:24,882 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}
2021-03-12 08:23:24,882 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 08:23:25,451 [main:302] - generating value of type = Kla5 false depth = 1
2021-03-12 08:23:25,454 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}
2021-03-12 08:23:25,455 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}
2021-03-12 08:23:25,455 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}
2021-03-12 08:23:25,455 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}
2021-03-12 08:23:25,455 [main:112] - generating klass null text = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}
2021-03-12 08:23:25,455 [main:112] - generating klass null text = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}
2021-03-12 08:23:25,455 [main:112] - generating klass Kla6 text = companion object Kla6 : Kla0()
2021-03-12 08:23:25,763 [main:43] - GENERATING CALL OF suspend fun foo(p: P = P(1)) {}
2021-03-12 08:23:25,766 [main:61] - WITHOUT TYPE PARAMS = suspend fun foo(p: P = P(1)) {}
2021-03-12 08:23:25,905 [main:302] - generating value of type = P false depth = 1
2021-03-12 08:23:25,908 [main:112] - generating klass P text = inline class P(val i: Int)
2021-03-12 08:23:26,037 [main:194] - Type params = []
2021-03-12 08:23:26,165 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:23:26,168 [main:95] - GENERATED = foo(P(-1453248636))
2021-03-12 08:23:26,295 [main:43] - GENERATING CALL OF suspend fun bar(p: P) {}
2021-03-12 08:23:26,298 [main:61] - WITHOUT TYPE PARAMS = suspend fun bar(p: P) {}
2021-03-12 08:23:26,465 [main:302] - generating value of type = P false depth = 1
2021-03-12 08:23:26,468 [main:112] - generating klass P text = inline class P(val i: Int)
2021-03-12 08:23:26,594 [main:194] - Type params = []
2021-03-12 08:23:26,724 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:23:26,727 [main:95] - GENERATED = bar(P(2072573280))
2021-03-12 08:23:26,857 [main:43] - GENERATING CALL OF suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}
2021-03-12 08:23:26,860 [main:61] - WITHOUT TYPE PARAMS = suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}
2021-03-12 08:23:26,999 [main:302] - generating value of type = String true depth = 1
2021-03-12 08:23:27,003 [main:95] - GENERATED = fu0("ttkqh")
2021-03-12 08:23:27,137 [main:43] - GENERATING CALL OF fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}
2021-03-12 08:23:27,140 [main:61] - WITHOUT TYPE PARAMS = fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}
2021-03-12 08:23:27,416 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 1
2021-03-12 08:23:27,419 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 08:23:27,551 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 08:23:27,555 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 08:23:27,979 [main:302] - generating value of type = Boolean true depth = 5
2021-03-12 08:23:27,982 [main:302] - generating value of type = Function0<Any> false depth = 5
2021-03-12 08:23:27,985 [main:302] - generating value of type = Any false depth = 6
2021-03-12 08:23:27,985 [main:95] - GENERATED = check(false, { "qjxhe"})
2021-03-12 08:23:27,985 [main:95] - GENERATED = fu2({ check(false, { "qjxhe"})})
2021-03-12 08:23:28,111 [main:43] - GENERATING CALL OF fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}
2021-03-12 08:23:28,127 [main:61] - WITHOUT TYPE PARAMS = fun <Ty0> fu3(prope3: (Kla4) -> Unit): Continuation<Kla4> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}
2021-03-12 08:23:28,419 [main:302] - generating value of type = Function1<Kla4, Unit> false depth = 1
2021-03-12 08:23:28,423 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 08:23:28,429 [main:95] - GENERATED = fu3<Kla4>({a: Kla4 -> println()})
2021-03-12 08:23:28,554 [main:43] - GENERATING CALL OF fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}
2021-03-12 08:23:28,557 [main:61] - WITHOUT TYPE PARAMS = fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}
2021-03-12 08:23:28,846 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 1
2021-03-12 08:23:28,849 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 08:23:28,856 [main:95] - GENERATED = fu4({a: Throwable -> println()})
2021-03-12 08:23:29,037 [main:43] - Try ‚Ññ1
2021-03-12 08:23:34,091 [main:48] - Already checked
2021-03-12 08:23:36,436 [main:69] - Trying to insert override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
2021-03-12 08:23:36,524 [main:66] - Compilation checking started
2021-03-12 08:23:37,585 [main:103] - Trying to change 147 nodes
2021-03-12 08:23:37,585 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 08:23:37,585 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 08:23:37,585 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 08:23:37,747 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 08:23:37,755 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 08:23:37,975 [main:67] - randomType = String?
2021-03-12 08:23:38,136 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:23:38,161 [main:106] - GETTING EmptyCoroutineContext from Continuation<Any?>
2021-03-12 08:23:38,169 [main:106] - GETTING EmptyCoroutineContext from Long
2021-03-12 08:23:38,196 [main:106] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-12 08:23:38,202 [main:106] - GETTING EmptyCoroutineContext from Any?
2021-03-12 08:23:38,206 [main:106] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-12 08:23:38,206 [main:106] - GETTING EmptyCoroutineContext from Continuation<Kla4>
2021-03-12 08:23:38,213 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 08:23:38,242 [main:106] - GETTING EmptyCoroutineContext from Boolean
2021-03-12 08:23:38,250 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 08:23:38,250 [main:106] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-12 08:23:38,251 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 08:23:38,252 [main:106] - GETTING EmptyCoroutineContext from P
2021-03-12 08:23:38,256 [main:106] - GETTING EmptyCoroutineContext from EmptyCoroutineContext
2021-03-12 08:23:38,269 [main:114] - replacement of EmptyCoroutineContext of type EmptyCoroutineContext is Kla1().context
2021-03-12 08:23:38,424 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:23:38,424 [main:66] - Compilation checking started
2021-03-12 08:23:39,101 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = s1 + s2

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = fn.invoke(arg)

fun box655(): String {
    var prope13 = "failed"
    fu12 {
        prope13 = fu14(::fu13, "O")
    }
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        prope15.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        prope15.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = false

    var prope18: () -> Unit = {}

    fun fu22() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> { c ->
        prope16++
        prope18 = { c.resume(Unit) }
    }

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope16)
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if (checkFinished && !prope17) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:23:39,102 [main:107] - replacing ("tail-call optimization hit: method " + method + " has no state-machine ", String)
2021-03-12 08:23:39,104 [main:50] - replacing "tail-call optimization hit: method " + method + " has no state-machine " String
2021-03-12 08:23:39,104 [main:54] - Getting value of type String
2021-03-12 08:23:39,272 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:23:39,277 [main:58] - GENERATED VALUE OF TYPE String = "tkzqz"
2021-03-12 08:23:39,278 [main:61] - GENERATED IS CALL =false
2021-03-12 08:23:39,478 [main:67] - randomType = UShort?
2021-03-12 08:23:39,635 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 08:23:39,668 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@46940e62]
2021-03-12 08:23:39,837 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 08:23:39,843 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33c15de5]
2021-03-12 08:23:39,843 [main:78] - Generated call from random type = (18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i)
2021-03-12 08:23:39,843 [main:114] - replacement of "tail-call optimization hit: method " + method + " has no state-machine " of type String is (18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i)
2021-03-12 08:23:40,000 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:23:40,000 [main:66] - Compilation checking started
2021-03-12 08:23:40,710 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = s1 + s2

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = fn.invoke(arg)

fun box655(): String {
    var prope13 = "failed"
    fu12 {
        prope13 = fu14(::fu13, "O")
    }
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        prope15.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = false

    var prope18: () -> Unit = {}

    fun fu22() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> { c ->
        prope16++
        prope18 = { c.resume(Unit) }
    }

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope16)
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if (checkFinished && !prope17) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:23:40,712 [main:107] - replacing (prope16, Int)
2021-03-12 08:23:40,713 [main:50] - replacing prope16 Int
2021-03-12 08:23:40,713 [main:54] - Getting value of type Int
2021-03-12 08:23:40,874 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:23:40,879 [main:58] - GENERATED VALUE OF TYPE Int = 1312306047
2021-03-12 08:23:40,879 [main:61] - GENERATED IS CALL =false
2021-03-12 08:23:40,899 [main:67] - randomType = Kla11
2021-03-12 08:23:41,088 [main:302] - generating value of type = Kla11 false depth = 0
2021-03-12 08:23:41,093 [main:112] - generating klass Kla11 text = class Kla11 {
    private var prope16 = 0
    var prope17 = false

    var prope18: () -> Unit = {}

    fun fu22() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> { c ->
        prope16++
        prope18 = { c.resume(Unit) }
    }

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope16)
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if (checkFinished && !prope17) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 08:23:41,103 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:23:41,264 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:23:41,269 [main:78] - Generated call from random type = (Kla11()).prope17.compareTo(true)
2021-03-12 08:23:41,269 [main:114] - replacement of prope16 of type Int is (Kla11()).prope17.compareTo(true)
2021-03-12 08:23:41,428 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:23:41,428 [main:66] - Compilation checking started
2021-03-12 08:23:42,145 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = s1 + s2

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = fn.invoke(arg)

fun box655(): String {
    var prope13 = "failed"
    fu12 {
        prope13 = fu14(::fu13, "O")
    }
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        prope15.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = false

    var prope18: () -> Unit = {}

    fun fu22() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> { c ->
        prope16++
        prope18 = { c.resume(Unit) }
    }

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if (prope16 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + (Kla11()).prope17.compareTo(true))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if (checkFinished && !prope17) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:23:42,146 [main:107] - replacing (c, Continuation<*>)
2021-03-12 08:23:42,147 [main:50] - replacing c Continuation<*>
2021-03-12 08:23:42,147 [main:54] - Getting value of type Continuation<*>
2021-03-12 08:23:42,313 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 08:23:42,486 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 08:23:42,493 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 08:23:43,067 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 08:23:43,234 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:23:43,241 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:23:43,617 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 08:23:43,791 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:23:43,797 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:23:44,425 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:23:44,426 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:23:44,426 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 08:23:44,426 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 08:23:44,446 [main:67] - randomType = Kla8
2021-03-12 08:23:44,605 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-12 08:23:44,610 [main:112] - generating klass Kla8 text = class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}
2021-03-12 08:23:44,626 [main:106] - GETTING Continuation<*> from Any?
2021-03-12 08:23:44,629 [main:106] - GETTING Continuation<*> from Continuation<Any?>
2021-03-12 08:23:44,636 [main:106] - GETTING Continuation<*> from P
2021-03-12 08:23:44,641 [main:106] - GETTING Continuation<*> from Int
2021-03-12 08:23:44,671 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-12 08:23:44,676 [main:106] - GETTING Continuation<*> from Function0<Unit>
2021-03-12 08:23:44,685 [main:106] - GETTING Continuation<*> from String
2021-03-12 08:23:44,701 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-12 08:23:44,702 [main:106] - GETTING Continuation<*> from Int
2021-03-12 08:23:44,703 [main:106] - GETTING Continuation<*> from Int
2021-03-12 08:23:44,704 [main:106] - GETTING Continuation<*> from P
2021-03-12 08:23:44,704 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-12 08:23:44,705 [main:106] - GETTING Continuation<*> from Continuation<Kla4>
2021-03-12 08:23:44,713 [main:106] - GETTING Continuation<*> from String
2021-03-12 08:23:44,713 [main:106] - GETTING Continuation<*> from EmptyCoroutineContext
2021-03-12 08:23:44,727 [main:106] - GETTING Continuation<*> from Long
2021-03-12 08:23:44,755 [main:106] - GETTING Continuation<*> from Boolean
2021-03-12 08:23:44,763 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-12 08:23:44,763 [main:107] - replacing (prope16, Int)
2021-03-12 08:23:44,763 [main:50] - replacing prope16 Int
2021-03-12 08:23:44,763 [main:54] - Getting value of type Int
2021-03-12 08:23:44,922 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:23:44,927 [main:58] - GENERATED VALUE OF TYPE Int = 1789682860
2021-03-12 08:23:44,927 [main:61] - GENERATED IS CALL =false
2021-03-12 08:23:44,938 [main:67] - randomType = Double
2021-03-12 08:23:45,098 [main:302] - generating value of type = Double true depth = 0
2021-03-12 08:23:45,135 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:23:45,135 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7118ba4d]
2021-03-12 08:23:45,135 [main:78] - Generated call from random type = (0.953552988903517).toInt().or((P(1118931594).i))
2021-03-12 08:23:45,136 [main:106] - GETTING Int from Boolean
2021-03-12 08:23:45,144 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@53acdc6e]]
2021-03-12 08:23:45,145 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:23:45,145 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@53acdc6e]
2021-03-12 08:23:45,145 [main:117] - GENERATED CALL = (Kla4().prope8).compareTo(Kla4().prope8).takeHighestOneBit()
2021-03-12 08:23:45,145 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]]
2021-03-12 08:23:45,145 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6]
2021-03-12 08:23:45,145 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:23:45,145 [main:117] - GENERATED CALL = (Kla4().prope8).equals(Kla1().prope5).compareTo(Kla4().prope8)
2021-03-12 08:23:45,145 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4836e093]]
2021-03-12 08:23:45,145 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:23:45,146 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4836e093]
2021-03-12 08:23:45,146 [main:117] - GENERATED CALL = (Kla4().prope8).compareTo(Kla4().prope8).coerceAtLeast(P(1982725439).i)
2021-03-12 08:23:45,146 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@1ae7c0a8]]
2021-03-12 08:23:45,146 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:23:45,309 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:23:45,315 [main:117] - GENERATED CALL = (Kla4().prope8).compareTo(false).absoluteValue
2021-03-12 08:23:45,315 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@77c8dd61]]
2021-03-12 08:23:45,315 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:23:45,315 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@77c8dd61]
2021-03-12 08:23:45,473 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:23:45,478 [main:117] - GENERATED CALL = (Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046)
2021-03-12 08:23:45,479 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@38ea499c]]
2021-03-12 08:23:45,479 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:23:45,637 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:23:45,643 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@38ea499c]
2021-03-12 08:23:45,643 [main:117] - GENERATED CALL = (Kla4().prope8).compareTo(false).inc()
2021-03-12 08:23:45,643 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d657a3a]]
2021-03-12 08:23:45,643 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:23:45,643 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d657a3a]
2021-03-12 08:23:45,643 [main:117] - GENERATED CALL = (Kla4().prope8).compareTo(Kla4().prope8).inv()
2021-03-12 08:23:45,643 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@425531c9]]
2021-03-12 08:23:45,643 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:23:45,643 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@425531c9]
2021-03-12 08:23:45,644 [main:117] - GENERATED CALL = (Kla4().prope8).compareTo(Kla4().prope8).countOneBits()
2021-03-12 08:23:45,644 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e4c85e1]]
2021-03-12 08:23:45,644 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:23:45,644 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e4c85e1]
2021-03-12 08:23:45,804 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:23:45,809 [main:117] - GENERATED CALL = (Kla4().prope8).compareTo(Kla4().prope8).minus(-44)
2021-03-12 08:23:45,809 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12f81d09]]
2021-03-12 08:23:45,809 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:23:45,969 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:23:45,974 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12f81d09]
2021-03-12 08:23:46,134 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:23:46,139 [main:117] - GENERATED CALL = (Kla4().prope8).compareTo(false).compareTo(-84)
2021-03-12 08:23:46,139 [main:114] - replacement of prope16 of type Int is (Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046)
2021-03-12 08:23:46,297 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:23:46,298 [main:66] - Compilation checking started
2021-03-12 08:23:47,037 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = s1 + s2

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = fn.invoke(arg)

fun box655(): String {
    var prope13 = "failed"
    fu12 {
        prope13 = fu14(::fu13, "O")
    }
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        prope15.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = false

    var prope18: () -> Unit = {}

    fun fu22() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> { c ->
        prope16++
        prope18 = { c.resume(Unit) }
    }

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + (Kla11()).prope17.compareTo(true))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if (checkFinished && !prope17) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:23:47,039 [main:107] - replacing (Kla10(), Kla10)
2021-03-12 08:23:47,039 [main:50] - replacing Kla10() Kla10
2021-03-12 08:23:47,039 [main:54] - Getting value of type Kla10
2021-03-12 08:23:47,230 [main:302] - generating value of type = Kla10 false depth = 0
2021-03-12 08:23:47,235 [main:112] - generating klass Kla10 text = class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        prope15.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}
2021-03-12 08:23:47,235 [main:58] - GENERATED VALUE OF TYPE Kla10 = Kla10()
2021-03-12 08:23:47,235 [main:61] - GENERATED IS CALL =true
2021-03-12 08:23:47,833 [main:67] - randomType = List<Double?>?
2021-03-12 08:23:47,834 [main:106] - GETTING Kla10 from CoroutineContext
2021-03-12 08:23:47,840 [main:106] - GETTING Kla10 from String
2021-03-12 08:23:47,857 [main:106] - GETTING Kla10 from P
2021-03-12 08:23:47,862 [main:106] - GETTING Kla10 from Boolean
2021-03-12 08:23:47,869 [main:106] - GETTING Kla10 from Int
2021-03-12 08:23:47,899 [main:106] - GETTING Kla10 from CoroutineContext
2021-03-12 08:23:47,899 [main:106] - GETTING Kla10 from String
2021-03-12 08:23:47,900 [main:106] - GETTING Kla10 from Any?
2021-03-12 08:23:47,903 [main:106] - GETTING Kla10 from Continuation<Any?>
2021-03-12 08:23:47,910 [main:106] - GETTING Kla10 from Long
2021-03-12 08:23:47,938 [main:106] - GETTING Kla10 from Continuation<Kla4>
2021-03-12 08:23:47,945 [main:106] - GETTING Kla10 from Int
2021-03-12 08:23:47,946 [main:106] - GETTING Kla10 from P
2021-03-12 08:23:47,946 [main:106] - GETTING Kla10 from EmptyCoroutineContext
2021-03-12 08:23:47,960 [main:106] - GETTING Kla10 from Function0<Unit>
2021-03-12 08:23:47,968 [main:106] - GETTING Kla10 from Int
2021-03-12 08:23:47,969 [main:106] - GETTING Kla10 from CoroutineContext
2021-03-12 08:23:47,969 [main:114] - replacement of Kla10() of type Kla10 is Kla10()
2021-03-12 08:23:48,132 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:23:48,133 [main:107] - replacing (prope14, Result<Any?>)
2021-03-12 08:23:48,134 [main:50] - replacing prope14 Result<Any?>
2021-03-12 08:23:48,134 [main:54] - Getting value of type Result<Any?>
2021-03-12 08:23:48,295 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-12 08:23:48,463 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 08:23:48,470 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 08:23:48,841 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-12 08:23:48,846 [main:302] - generating value of type = Any false depth = 4
2021-03-12 08:23:48,846 [main:95] - GENERATED = runCatching<Any?>({ "tvgny"})
2021-03-12 08:23:48,846 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "tvgny"})
2021-03-12 08:23:48,846 [main:61] - GENERATED IS CALL =true
2021-03-12 08:23:49,039 [main:67] - randomType = ULong
2021-03-12 08:23:49,202 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 08:23:49,238 [main:106] - GETTING Result<Any?> from Int
2021-03-12 08:23:49,269 [main:106] - GETTING Result<Any?> from Function0<Unit>
2021-03-12 08:23:49,278 [main:106] - GETTING Result<Any?> from CoroutineContext
2021-03-12 08:23:49,284 [main:106] - GETTING Result<Any?> from Continuation<Kla4>
2021-03-12 08:23:49,292 [main:106] - GETTING Result<Any?> from String
2021-03-12 08:23:49,310 [main:106] - GETTING Result<Any?> from CoroutineContext
2021-03-12 08:23:49,311 [main:106] - GETTING Result<Any?> from EmptyCoroutineContext
2021-03-12 08:23:49,325 [main:106] - GETTING Result<Any?> from Long
2021-03-12 08:23:49,354 [main:106] - GETTING Result<Any?> from Int
2021-03-12 08:23:49,355 [main:106] - GETTING Result<Any?> from Continuation<Any?>
2021-03-12 08:23:49,363 [main:106] - GETTING Result<Any?> from P
2021-03-12 08:23:49,368 [main:106] - GETTING Result<Any?> from CoroutineContext
2021-03-12 08:23:49,370 [main:106] - GETTING Result<Any?> from P
2021-03-12 08:23:49,371 [main:106] - GETTING Result<Any?> from String
2021-03-12 08:23:49,372 [main:106] - GETTING Result<Any?> from Int
2021-03-12 08:23:49,373 [main:106] - GETTING Result<Any?> from Boolean
2021-03-12 08:23:49,383 [main:106] - GETTING Result<Any?> from Any?
2021-03-12 08:23:49,385 [main:114] - replacement of prope14 of type Result<Any?> is runCatching<Any?>({ "tvgny"})
2021-03-12 08:23:49,547 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:23:49,547 [main:66] - Compilation checking started
2021-03-12 08:23:50,318 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = s1 + s2

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = fn.invoke(arg)

fun box655(): String {
    var prope13 = "failed"
    fu12 {
        prope13 = fu14(::fu13, "O")
    }
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        prope15.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = false

    var prope18: () -> Unit = {}

    fun fu22() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> { c ->
        prope16++
        prope18 = { c.resume(Unit) }
    }

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + (Kla11()).prope17.compareTo(true))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if (checkFinished && !prope17) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:23:50,320 [main:107] - replacing ({ it?.methodName?.startsWith(method) == true }, Function0<Boolean>)
2021-03-12 08:23:50,322 [main:50] - replacing { it?.methodName?.startsWith(method) == true } Function0<Boolean>
2021-03-12 08:23:50,322 [main:54] - Getting value of type Function0<Boolean>
2021-03-12 08:23:50,505 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-12 08:23:50,510 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 08:23:50,516 [main:58] - GENERATED VALUE OF TYPE Function0<Boolean> = { false}
2021-03-12 08:23:50,516 [main:61] - GENERATED IS CALL =false
2021-03-12 08:23:50,915 [main:67] - randomType = Kla12?
2021-03-12 08:23:51,088 [main:302] - generating value of type = Kla12 false depth = 0
2021-03-12 08:23:51,093 [main:112] - generating klass Kla12 text = object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}
2021-03-12 08:23:51,118 [main:106] - GETTING Function0<Boolean> from Int
2021-03-12 08:23:51,165 [main:106] - GETTING Function0<Boolean> from Boolean
2021-03-12 08:23:51,177 [main:106] - GETTING Function0<Boolean> from Function0<Unit>
2021-03-12 08:23:51,190 [main:106] - GETTING Function0<Boolean> from EmptyCoroutineContext
2021-03-12 08:23:51,213 [main:106] - GETTING Function0<Boolean> from Int
2021-03-12 08:23:51,214 [main:106] - GETTING Function0<Boolean> from Continuation<Any?>
2021-03-12 08:23:51,222 [main:106] - GETTING Function0<Boolean> from Continuation<Kla4>
2021-03-12 08:23:51,229 [main:106] - GETTING Function0<Boolean> from P
2021-03-12 08:23:51,234 [main:106] - GETTING Function0<Boolean> from String
2021-03-12 08:23:51,251 [main:106] - GETTING Function0<Boolean> from CoroutineContext
2021-03-12 08:23:51,256 [main:106] - GETTING Function0<Boolean> from Long
2021-03-12 08:23:51,284 [main:106] - GETTING Function0<Boolean> from CoroutineContext
2021-03-12 08:23:51,285 [main:106] - GETTING Function0<Boolean> from Int
2021-03-12 08:23:51,286 [main:106] - GETTING Function0<Boolean> from P
2021-03-12 08:23:51,287 [main:106] - GETTING Function0<Boolean> from Any?
2021-03-12 08:23:51,291 [main:106] - GETTING Function0<Boolean> from String
2021-03-12 08:23:51,292 [main:106] - GETTING Function0<Boolean> from CoroutineContext
2021-03-12 08:23:51,292 [main:114] - replacement of { it?.methodName?.startsWith(method) == true } of type Function0<Boolean> is { false}
2021-03-12 08:23:51,455 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 08:23:51,455 [main:66] - Compilation checking started
2021-03-12 08:23:52,195 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = s1 + s2

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = fn.invoke(arg)

fun box655(): String {
    var prope13 = "failed"
    fu12 {
        prope13 = fu14(::fu13, "O")
    }
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = false

    var prope18: () -> Unit = {}

    fun fu22() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> { c ->
        prope16++
        prope18 = { c.resume(Unit) }
    }

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + (Kla11()).prope17.compareTo(true))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if (checkFinished && !prope17) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:23:52,197 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 08:23:52,197 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 08:23:52,197 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 08:23:52,359 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 08:23:52,366 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 08:23:52,377 [main:67] - randomType = UShort
2021-03-12 08:23:52,546 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 08:23:52,577 [main:106] - GETTING EmptyCoroutineContext from Function0<Unit>
2021-03-12 08:23:52,586 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 08:23:52,615 [main:106] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-12 08:23:52,620 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 08:23:52,636 [main:106] - GETTING EmptyCoroutineContext from P
2021-03-12 08:23:52,641 [main:106] - GETTING EmptyCoroutineContext from P
2021-03-12 08:23:52,641 [main:106] - GETTING EmptyCoroutineContext from EmptyCoroutineContext
2021-03-12 08:23:52,653 [main:114] - replacement of EmptyCoroutineContext of type EmptyCoroutineContext is Kla1().context
2021-03-12 08:23:52,814 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:23:52,815 [main:66] - Compilation checking started
2021-03-12 08:23:53,542 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = s1 + s2

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = fn.invoke(arg)

fun box655(): String {
    var prope13 = "failed"
    fu12 {
        prope13 = fu14(::fu13, "O")
    }
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = false

    var prope18: () -> Unit = {}

    fun fu22() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> { c ->
        prope16++
        prope18 = { c.resume(Unit) }
    }

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + (Kla11()).prope17.compareTo(true))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if (checkFinished && !prope17) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:23:53,544 [main:107] - replacing ("Wrong state-machine generated: it is not finished yet", String)
2021-03-12 08:23:53,544 [main:50] - replacing "Wrong state-machine generated: it is not finished yet" String
2021-03-12 08:23:53,544 [main:54] - Getting value of type String
2021-03-12 08:23:53,726 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:23:53,732 [main:58] - GENERATED VALUE OF TYPE String = "bpazp"
2021-03-12 08:23:53,733 [main:61] - GENERATED IS CALL =false
2021-03-12 08:23:53,754 [main:67] - randomType = Kla3
2021-03-12 08:23:53,926 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 08:23:53,932 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}
2021-03-12 08:23:53,937 [main:106] - GETTING String from Int
2021-03-12 08:23:53,966 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]]
2021-03-12 08:23:53,966 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b]
2021-03-12 08:23:53,966 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]
2021-03-12 08:23:54,136 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:23:54,141 [main:117] - GENERATED CALL = (P(1982725439).i).toByte().toString(-900296701)
2021-03-12 08:23:54,141 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]]
2021-03-12 08:23:54,141 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:23:54,142 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]
2021-03-12 08:23:54,142 [main:117] - GENERATED CALL = (P(1982725439).i).toChar().titlecase()
2021-03-12 08:23:54,142 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]]
2021-03-12 08:23:54,142 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:23:54,142 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]
2021-03-12 08:23:54,303 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:23:54,309 [main:117] - GENERATED CALL = (P(1982725439).i).toChar().plus("tlvce")
2021-03-12 08:23:54,309 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]]
2021-03-12 08:23:54,309 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:23:54,309 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]
2021-03-12 08:23:54,309 [main:117] - GENERATED CALL = (P(1982725439).i).toChar().lowercase()
2021-03-12 08:23:54,309 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:23:54,309 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:23:54,309 [main:117] - GENERATED CALL = (P(1982725439).i).toString(P(1982725439).i)
2021-03-12 08:23:54,309 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]]
2021-03-12 08:23:54,309 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d]
2021-03-12 08:23:54,309 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]
2021-03-12 08:23:54,310 [main:117] - GENERATED CALL = (P(1982725439).i).toShort().toString(P(1982725439).i)
2021-03-12 08:23:54,310 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:23:54,310 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:23:54,310 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:23:54,471 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:23:54,477 [main:117] - GENERATED CALL = (P(1982725439).i).toInt().toString(-1050930699)
2021-03-12 08:23:54,477 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]]
2021-03-12 08:23:54,477 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:23:54,477 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]
2021-03-12 08:23:54,477 [main:117] - GENERATED CALL = (P(1982725439).i).toChar().uppercase()
2021-03-12 08:23:54,477 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:23:54,477 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4]
2021-03-12 08:23:54,477 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:23:54,478 [main:117] - GENERATED CALL = (P(1982725439).i).div((P(1118931594).i).div(-6350246603923996636)).toString(P(1118931594).i)
2021-03-12 08:23:54,478 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:23:54,478 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:23:54,478 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:23:54,478 [main:117] - GENERATED CALL = (P(1982725439).i).compareTo((P(1118931594).i)).toString(P(1982725439).i)
2021-03-12 08:23:54,478 [main:114] - replacement of "Wrong state-machine generated: it is not finished yet" of type String is "bpazp"
2021-03-12 08:23:54,639 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 08:23:54,639 [main:66] - Compilation checking started
2021-03-12 08:23:55,362 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = s1 + s2

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = fn.invoke(arg)

fun box655(): String {
    var prope13 = "failed"
    fu12 {
        prope13 = fu14(::fu13, "O")
    }
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = false

    var prope18: () -> Unit = {}

    fun fu22() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> { c ->
        prope16++
        prope18 = { c.resume(Unit) }
    }

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + (Kla11()).prope17.compareTo(true))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:23:55,363 [main:107] - replacing (getOrThrow(), Any?)
2021-03-12 08:23:55,364 [main:50] - replacing getOrThrow() Any?
2021-03-12 08:23:55,364 [main:54] - Getting value of type Any?
2021-03-12 08:23:55,529 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:23:55,530 [main:58] - GENERATED VALUE OF TYPE Any? = "dxicr"
2021-03-12 08:23:55,530 [main:61] - GENERATED IS CALL =false
2021-03-12 08:23:55,946 [main:67] - randomType = ArrayList<Kla7>
2021-03-12 08:23:56,108 [main:302] - generating value of type = ArrayList<Kla7> false depth = 0
2021-03-12 08:23:56,277 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Kla7): ArrayList<Kla7> = TODO()
2021-03-12 08:23:56,283 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Kla7): ArrayList<Kla7> = TODO()
2021-03-12 08:23:56,455 [main:302] - generating value of type = Kla7 false depth = 3
2021-03-12 08:23:56,460 [main:112] - generating klass Kla7 text = open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}
2021-03-12 08:23:56,654 [main:194] - Type params = []
2021-03-12 08:23:56,814 [main:302] - generating value of type = CoroutineContext false depth = 5
2021-03-12 08:23:56,983 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:23:56,990 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:23:57,372 [main:302] - generating value of type = Key<*> false depth = 8
2021-03-12 08:23:57,548 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:23:57,554 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:23:58,142 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 11
2021-03-12 08:23:58,317 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:23:58,323 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:23:58,928 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:23:58,928 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:23:58,928 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:23:58,928 [main:95] - GENERATED = arrayListOf<Kla7>(Kla7())
2021-03-12 08:23:59,048 [main:149] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@35a61041]
2021-03-12 08:23:59,049 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Any? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@5214226e]
2021-03-12 08:23:59,049 [main:78] - Generated call from random type = (arrayListOf<Kla7>(Kla7())).toArray().get(P(1118931594).i)
2021-03-12 08:23:59,050 [main:106] - GETTING Any? from String
2021-03-12 08:23:59,069 [main:106] - GETTING Any? from Any?
2021-03-12 08:23:59,073 [main:106] - GETTING Any? from Int
2021-03-12 08:23:59,103 [main:106] - GETTING Any? from Long
2021-03-12 08:23:59,132 [main:106] - GETTING Any? from Int
2021-03-12 08:23:59,133 [main:106] - GETTING Any? from EmptyCoroutineContext
2021-03-12 08:23:59,147 [main:106] - GETTING Any? from Continuation<Any?>
2021-03-12 08:23:59,154 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:23:59,160 [main:106] - GETTING Any? from Int
2021-03-12 08:23:59,161 [main:106] - GETTING Any? from P
2021-03-12 08:23:59,166 [main:106] - GETTING Any? from Boolean
2021-03-12 08:23:59,175 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:23:59,177 [main:106] - GETTING Any? from Function0<Unit>
2021-03-12 08:23:59,186 [main:106] - GETTING Any? from P
2021-03-12 08:23:59,187 [main:106] - GETTING Any? from String
2021-03-12 08:23:59,188 [main:106] - GETTING Any? from Continuation<Kla4>
2021-03-12 08:23:59,196 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:23:59,196 [main:114] - replacement of getOrThrow() of type Any? is "dxicr"
2021-03-12 08:23:59,358 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 08:23:59,359 [main:66] - Compilation checking started
2021-03-12 08:23:59,857 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = s1 + s2

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = fn.invoke(arg)

fun box655(): String {
    var prope13 = "failed"
    fu12 {
        prope13 = fu14(::fu13, "O")
    }
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = prope14."dxicr"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = false

    var prope18: () -> Unit = {}

    fun fu22() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> { c ->
        prope16++
        prope18 = { c.resume(Unit) }
    }

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + (Kla11()).prope17.compareTo(true))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:23:59,858 [main:107] - replacing (prope14, Any?)
2021-03-12 08:23:59,859 [main:50] - replacing prope14 Any?
2021-03-12 08:23:59,859 [main:54] - Getting value of type Any?
2021-03-12 08:24:00,022 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:24:00,022 [main:58] - GENERATED VALUE OF TYPE Any? = "izxln"
2021-03-12 08:24:00,022 [main:61] - GENERATED IS CALL =false
2021-03-12 08:24:00,243 [main:67] - randomType = HashSet<UInt>
2021-03-12 08:24:00,405 [main:302] - generating value of type = HashSet<UInt> false depth = 0
2021-03-12 08:24:00,575 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): HashSet<UInt> = TODO()
2021-03-12 08:24:00,582 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): HashSet<UInt> = TODO()
2021-03-12 08:24:00,755 [main:95] - GENERATED = linkedSetOf<UInt>()
2021-03-12 08:24:00,874 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@8f26240]
2021-03-12 08:24:00,874 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Any? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@6743f084]
2021-03-12 08:24:01,043 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:24:01,048 [main:78] - Generated call from random type = (linkedSetOf<UInt>()).toArray().get(1667309234)
2021-03-12 08:24:01,050 [main:106] - GETTING Any? from Boolean
2021-03-12 08:24:01,062 [main:106] - GETTING Any? from Int
2021-03-12 08:24:01,094 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:24:01,100 [main:106] - GETTING Any? from Function0<Unit>
2021-03-12 08:24:01,108 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:24:01,109 [main:106] - GETTING Any? from P
2021-03-12 08:24:01,114 [main:106] - GETTING Any? from EmptyCoroutineContext
2021-03-12 08:24:01,129 [main:106] - GETTING Any? from Int
2021-03-12 08:24:01,129 [main:106] - GETTING Any? from Long
2021-03-12 08:24:01,158 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:24:01,158 [main:106] - GETTING Any? from Int
2021-03-12 08:24:01,159 [main:106] - GETTING Any? from Any?
2021-03-12 08:24:01,163 [main:106] - GETTING Any? from Continuation<Kla4>
2021-03-12 08:24:01,170 [main:106] - GETTING Any? from String
2021-03-12 08:24:01,186 [main:106] - GETTING Any? from Continuation<Any?>
2021-03-12 08:24:01,192 [main:106] - GETTING Any? from String
2021-03-12 08:24:01,193 [main:106] - GETTING Any? from P
2021-03-12 08:24:01,193 [main:114] - replacement of prope14 of type Any? is (linkedSetOf<UInt>()).toArray().get(1667309234)
2021-03-12 08:24:01,355 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:24:01,355 [main:66] - Compilation checking started
2021-03-12 08:24:01,827 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = s1 + s2

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = fn.invoke(arg)

fun box655(): String {
    var prope13 = "failed"
    fu12 {
        prope13 = fu14(::fu13, "O")
    }
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.(linkedSetOf<UInt>()).toArray().get(1667309234) = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = false

    var prope18: () -> Unit = {}

    fun fu22() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> { c ->
        prope16++
        prope18 = { c.resume(Unit) }
    }

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + (Kla11()).prope17.compareTo(true))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:24:01,829 [main:107] - replacing (::fu13, KSuspendFunction1<String, String>)
2021-03-12 08:24:01,830 [main:50] - replacing ::fu13 KSuspendFunction1<String, String>
2021-03-12 08:24:01,830 [main:54] - Getting value of type KSuspendFunction1<String, String>
2021-03-12 08:24:02,000 [main:302] - generating value of type = KSuspendFunction1<String, String> false depth = 0
2021-03-12 08:24:02,009 [main:58] - GENERATED VALUE OF TYPE KSuspendFunction1<String, String> = 
2021-03-12 08:24:02,030 [main:67] - randomType = Kla8
2021-03-12 08:24:02,201 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-12 08:24:02,206 [main:112] - generating klass Kla8 text = class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}
2021-03-12 08:24:02,221 [main:106] - GETTING KSuspendFunction1<String, String> from P
2021-03-12 08:24:02,226 [main:106] - GETTING KSuspendFunction1<String, String> from Continuation<Kla4>
2021-03-12 08:24:02,233 [main:106] - GETTING KSuspendFunction1<String, String> from Long
2021-03-12 08:24:02,262 [main:106] - GETTING KSuspendFunction1<String, String> from CoroutineContext
2021-03-12 08:24:02,268 [main:106] - GETTING KSuspendFunction1<String, String> from Any?
2021-03-12 08:24:02,271 [main:106] - GETTING KSuspendFunction1<String, String> from Boolean
2021-03-12 08:24:02,280 [main:106] - GETTING KSuspendFunction1<String, String> from Continuation<Any?>
2021-03-12 08:24:02,287 [main:106] - GETTING KSuspendFunction1<String, String> from Int
2021-03-12 08:24:02,317 [main:106] - GETTING KSuspendFunction1<String, String> from Function0<Unit>
2021-03-12 08:24:02,326 [main:106] - GETTING KSuspendFunction1<String, String> from Int
2021-03-12 08:24:02,327 [main:106] - GETTING KSuspendFunction1<String, String> from Int
2021-03-12 08:24:02,328 [main:106] - GETTING KSuspendFunction1<String, String> from EmptyCoroutineContext
2021-03-12 08:24:02,342 [main:106] - GETTING KSuspendFunction1<String, String> from String
2021-03-12 08:24:02,360 [main:106] - GETTING KSuspendFunction1<String, String> from String
2021-03-12 08:24:02,361 [main:106] - GETTING KSuspendFunction1<String, String> from CoroutineContext
2021-03-12 08:24:02,362 [main:106] - GETTING KSuspendFunction1<String, String> from CoroutineContext
2021-03-12 08:24:02,363 [main:106] - GETTING KSuspendFunction1<String, String> from P
2021-03-12 08:24:02,363 [main:111] - Cant find and generate replacement for ::fu13 type KSuspendFunction1<String, String>
2021-03-12 08:24:02,363 [main:107] - replacing (invoke(arg), String)
2021-03-12 08:24:02,363 [main:50] - replacing invoke(arg) String
2021-03-12 08:24:02,363 [main:54] - Getting value of type String
2021-03-12 08:24:02,545 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:24:02,550 [main:58] - GENERATED VALUE OF TYPE String = "hftjd"
2021-03-12 08:24:02,550 [main:61] - GENERATED IS CALL =false
2021-03-12 08:24:02,561 [main:67] - randomType = UInt
2021-03-12 08:24:02,723 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 08:24:02,755 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@d11e4]
2021-03-12 08:24:02,925 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 08:24:02,931 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:24:02,931 [main:78] - Generated call from random type = (361215828.toUInt()).compareTo(29.toUByte()).toString(P(1118931594).i)
2021-03-12 08:24:02,932 [main:106] - GETTING String from Int
2021-03-12 08:24:02,961 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]]
2021-03-12 08:24:02,961 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:24:02,962 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]
2021-03-12 08:24:02,962 [main:117] - GENERATED CALL = (P(1982725439).i).toChar().lowercase()
2021-03-12 08:24:02,962 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]]
2021-03-12 08:24:02,962 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:24:02,962 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]
2021-03-12 08:24:02,962 [main:117] - GENERATED CALL = (P(1982725439).i).toChar().titlecase()
2021-03-12 08:24:02,962 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:24:02,962 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4]
2021-03-12 08:24:03,125 [main:302] - generating value of type = Long true depth = 0
2021-03-12 08:24:03,130 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:24:03,131 [main:117] - GENERATED CALL = (P(1982725439).i).div(4802887419450191830).toString(P(1118931594).i)
2021-03-12 08:24:03,131 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:24:03,131 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f]
2021-03-12 08:24:03,131 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:24:03,131 [main:117] - GENERATED CALL = (P(1982725439).i).toLong().toString(P(1118931594).i)
2021-03-12 08:24:03,131 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:24:03,131 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:24:03,131 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:24:03,294 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:24:03,300 [main:117] - GENERATED CALL = (P(1982725439).i).compareTo(P(1118931594).i).toString(-100477901)
2021-03-12 08:24:03,300 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]]
2021-03-12 08:24:03,300 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:24:03,300 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]
2021-03-12 08:24:03,300 [main:117] - GENERATED CALL = (P(1982725439).i).toChar().plus(fu1())
2021-03-12 08:24:03,300 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]]
2021-03-12 08:24:03,300 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:24:03,300 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]
2021-03-12 08:24:03,300 [main:117] - GENERATED CALL = (P(1982725439).i).toChar().uppercase()
2021-03-12 08:24:03,300 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]]
2021-03-12 08:24:03,300 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b]
2021-03-12 08:24:03,301 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]
2021-03-12 08:24:03,301 [main:117] - GENERATED CALL = (P(1982725439).i).toByte().toString(P(1118931594).i)
2021-03-12 08:24:03,301 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]]
2021-03-12 08:24:03,301 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d]
2021-03-12 08:24:03,301 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]
2021-03-12 08:24:03,462 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:24:03,468 [main:117] - GENERATED CALL = (P(1982725439).i).toShort().toString(-230453935)
2021-03-12 08:24:03,468 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:24:03,468 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:24:03,468 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:24:03,468 [main:117] - GENERATED CALL = (P(1982725439).i).toInt().toString((P(1118931594).i))
2021-03-12 08:24:03,468 [main:114] - replacement of invoke(arg) of type String is (P(1982725439).i).toChar().uppercase()
2021-03-12 08:24:03,631 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:24:03,631 [main:66] - Compilation checking started
2021-03-12 08:24:04,112 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = s1 + s2

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = fn.(P(1982725439).i).toChar().uppercase()

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 {
        prope13 = fu14(::fu13, "O")
    }
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = false

    var prope18: () -> Unit = {}

    fun fu22() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> { c ->
        prope16++
        prope18 = { c.resume(Unit) }
    }

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + (Kla11()).prope17.compareTo(true))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:24:04,113 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + (Kla11()).prope17.compareTo(true), String)
2021-03-12 08:24:04,114 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + (Kla11()).prope17.compareTo(true) String
2021-03-12 08:24:04,114 [main:54] - Getting value of type String
2021-03-12 08:24:04,287 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:24:04,292 [main:58] - GENERATED VALUE OF TYPE String = "zjurh"
2021-03-12 08:24:04,292 [main:61] - GENERATED IS CALL =false
2021-03-12 08:24:04,683 [main:67] - randomType = Float?
2021-03-12 08:24:04,845 [main:302] - generating value of type = Float true depth = 0
2021-03-12 08:24:04,879 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:24:04,879 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:24:04,879 [main:78] - Generated call from random type = (0.3096196f)?.toInt().toString((P(1118931594).i))
2021-03-12 08:24:04,880 [main:106] - GETTING String from Continuation<Any?>
2021-03-12 08:24:04,887 [main:106] - GETTING String from Long
2021-03-12 08:24:04,914 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@53131125], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]]
2021-03-12 08:24:04,914 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@53131125]
2021-03-12 08:24:04,914 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]
2021-03-12 08:24:05,077 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:24:05,082 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toByte().toString(-850633481)
2021-03-12 08:24:05,082 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]]
2021-03-12 08:24:05,082 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0]
2021-03-12 08:24:05,083 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]
2021-03-12 08:24:05,083 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toChar().lowercase()
2021-03-12 08:24:05,083 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]]
2021-03-12 08:24:05,083 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0]
2021-03-12 08:24:05,083 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]
2021-03-12 08:24:05,083 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toChar().plus(fu1())
2021-03-12 08:24:05,083 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@46c9e88a], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]]
2021-03-12 08:24:05,083 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@46c9e88a]
2021-03-12 08:24:05,083 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]
2021-03-12 08:24:05,083 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toShort().toString((P(1118931594).i))
2021-03-12 08:24:05,083 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:24:05,084 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f]
2021-03-12 08:24:05,084 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:24:05,084 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i)
2021-03-12 08:24:05,084 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]]
2021-03-12 08:24:05,084 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0]
2021-03-12 08:24:05,084 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]
2021-03-12 08:24:05,084 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toChar().uppercase()
2021-03-12 08:24:05,084 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@283d49e5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:24:05,084 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@283d49e5]
2021-03-12 08:24:05,247 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:24:05,252 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:24:05,252 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).compareTo(-10).toString(P(1982725439).i)
2021-03-12 08:24:05,252 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:24:05,252 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:24:05,252 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:24:05,253 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toInt().toString(P(1982725439).i)
2021-03-12 08:24:05,253 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]]
2021-03-12 08:24:05,253 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0]
2021-03-12 08:24:05,253 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]
2021-03-12 08:24:05,253 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toChar().titlecase()
2021-03-12 08:24:05,253 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:24:05,253 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:24:05,253 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toString((P(1118931594).i))
2021-03-12 08:24:05,253 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + (Kla11()).prope17.compareTo(true) of type String is ((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i)
2021-03-12 08:24:05,417 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:24:05,418 [main:66] - Compilation checking started
2021-03-12 08:24:06,150 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = s1 + s2

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = fn.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 {
        prope13 = fu14(::fu13, "O")
    }
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = prope14.getOrThrow()
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = false

    var prope18: () -> Unit = {}

    fun fu22() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> { c ->
        prope16++
        prope18 = { c.resume(Unit) }
    }

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:24:06,151 [main:107] - replacing (prope14.getOrThrow(), Any?)
2021-03-12 08:24:06,152 [main:50] - replacing prope14.getOrThrow() Any?
2021-03-12 08:24:06,152 [main:54] - Getting value of type Any?
2021-03-12 08:24:06,338 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:24:06,338 [main:58] - GENERATED VALUE OF TYPE Any? = "fcbze"
2021-03-12 08:24:06,339 [main:61] - GENERATED IS CALL =false
2021-03-12 08:24:06,360 [main:67] - randomType = Kla7
2021-03-12 08:24:06,525 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 08:24:06,530 [main:112] - generating klass Kla7 text = open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}
2021-03-12 08:24:06,698 [main:194] - Type params = []
2021-03-12 08:24:06,862 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 08:24:07,034 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:24:07,041 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:24:07,429 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 08:24:07,607 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:24:07,614 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:24:08,211 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 8
2021-03-12 08:24:08,390 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:24:08,397 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:24:09,044 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:24:09,044 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:24:09,044 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:24:09,056 [main:106] - GETTING Any? from String
2021-03-12 08:24:09,074 [main:106] - GETTING Any? from String
2021-03-12 08:24:09,075 [main:106] - GETTING Any? from Int
2021-03-12 08:24:09,105 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:24:09,111 [main:106] - GETTING Any? from Long
2021-03-12 08:24:09,139 [main:106] - GETTING Any? from Function0<Unit>
2021-03-12 08:24:09,148 [main:106] - GETTING Any? from Continuation<Any?>
2021-03-12 08:24:09,155 [main:106] - GETTING Any? from P
2021-03-12 08:24:09,159 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:24:09,160 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:24:09,161 [main:106] - GETTING Any? from EmptyCoroutineContext
2021-03-12 08:24:09,175 [main:106] - GETTING Any? from Any?
2021-03-12 08:24:09,179 [main:106] - GETTING Any? from Int
2021-03-12 08:24:09,180 [main:106] - GETTING Any? from Continuation<Kla4>
2021-03-12 08:24:09,187 [main:106] - GETTING Any? from P
2021-03-12 08:24:09,188 [main:106] - GETTING Any? from Int
2021-03-12 08:24:09,189 [main:106] - GETTING Any? from Boolean
2021-03-12 08:24:09,196 [main:114] - replacement of prope14.getOrThrow() of type Any? is "fcbze"
2021-03-12 08:24:09,359 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 08:24:09,360 [main:66] - Compilation checking started
2021-03-12 08:24:10,058 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = s1 + s2

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = fn.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 {
        prope13 = fu14(::fu13, "O")
    }
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = false

    var prope18: () -> Unit = {}

    fun fu22() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> { c ->
        prope16++
        prope18 = { c.resume(Unit) }
    }

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:24:10,060 [main:107] - replacing ("tail-call optimization miss: method at ", String)
2021-03-12 08:24:10,060 [main:50] - replacing "tail-call optimization miss: method at " String
2021-03-12 08:24:10,060 [main:54] - Getting value of type String
2021-03-12 08:24:10,235 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:24:10,240 [main:58] - GENERATED VALUE OF TYPE String = "pfqoa"
2021-03-12 08:24:10,241 [main:61] - GENERATED IS CALL =false
2021-03-12 08:24:10,262 [main:67] - randomType = Kla3
2021-03-12 08:24:10,426 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 08:24:10,431 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}
2021-03-12 08:24:10,437 [main:106] - GETTING String from EmptyCoroutineContext
2021-03-12 08:24:10,450 [main:106] - GETTING String from Continuation<Kla4>
2021-03-12 08:24:10,457 [main:106] - GETTING String from Long
2021-03-12 08:24:10,485 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@283d49e5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:24:10,485 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@283d49e5]
2021-03-12 08:24:10,650 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:24:10,655 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:24:10,656 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).compareTo(-22).toString(P(1118931594).i)
2021-03-12 08:24:10,656 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:24:10,656 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:24:10,656 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:24:10,826 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:24:10,832 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992)
2021-03-12 08:24:10,832 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]]
2021-03-12 08:24:10,832 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0]
2021-03-12 08:24:10,832 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]
2021-03-12 08:24:10,832 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toChar().uppercase()
2021-03-12 08:24:10,832 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]]
2021-03-12 08:24:10,832 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0]
2021-03-12 08:24:10,833 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]
2021-03-12 08:24:10,833 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toChar().plus(fu0("ttkqh"))
2021-03-12 08:24:10,833 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:24:10,833 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f]
2021-03-12 08:24:10,833 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:24:10,996 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:24:11,001 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toLong().toString(2070852470)
2021-03-12 08:24:11,002 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@53131125], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]]
2021-03-12 08:24:11,002 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@53131125]
2021-03-12 08:24:11,002 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]
2021-03-12 08:24:11,002 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toByte().toString(P(1118931594).i)
2021-03-12 08:24:11,002 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]]
2021-03-12 08:24:11,002 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0]
2021-03-12 08:24:11,002 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]
2021-03-12 08:24:11,002 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toChar().lowercase()
2021-03-12 08:24:11,002 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]]
2021-03-12 08:24:11,002 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0]
2021-03-12 08:24:11,002 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]
2021-03-12 08:24:11,002 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toChar().titlecase()
2021-03-12 08:24:11,002 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:24:11,003 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:24:11,003 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toString(P(1982725439).i)
2021-03-12 08:24:11,003 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@46c9e88a], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]]
2021-03-12 08:24:11,003 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@46c9e88a]
2021-03-12 08:24:11,003 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]
2021-03-12 08:24:11,003 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toShort().toString(P(1118931594).i)
2021-03-12 08:24:11,003 [main:114] - replacement of "tail-call optimization miss: method at " of type String is ((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992)
2021-03-12 08:24:11,165 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:24:11,165 [main:66] - Compilation checking started
2021-03-12 08:24:11,942 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = s1 + s2

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = fn.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 {
        prope13 = fu14(::fu13, "O")
    }
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + " has state-machine " +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = false

    var prope18: () -> Unit = {}

    fun fu22() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> { c ->
        prope16++
        prope18 = { c.resume(Unit) }
    }

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope16)
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:24:11,944 [main:107] - replacing (", got ", String)
2021-03-12 08:24:11,944 [main:50] - replacing ", got " String
2021-03-12 08:24:11,944 [main:54] - Getting value of type String
2021-03-12 08:24:12,124 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:24:12,129 [main:58] - GENERATED VALUE OF TYPE String = "scyqu"
2021-03-12 08:24:12,129 [main:61] - GENERATED IS CALL =false
2021-03-12 08:24:12,338 [main:67] - randomType = Int?
2021-03-12 08:24:12,502 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:24:12,539 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b68430d]
2021-03-12 08:24:12,703 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:24:12,709 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:24:12,709 [main:78] - Generated call from random type = (1413011436)?.and(-1362930881).toString(P(1982725439).i)
2021-03-12 08:24:12,710 [main:106] - GETTING String from Long
2021-03-12 08:24:12,738 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:24:12,738 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:24:12,739 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toString(P(1982725439).i)
2021-03-12 08:24:12,739 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]]
2021-03-12 08:24:12,739 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0]
2021-03-12 08:24:12,739 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]
2021-03-12 08:24:12,739 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toChar().lowercase()
2021-03-12 08:24:12,739 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]]
2021-03-12 08:24:12,739 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0]
2021-03-12 08:24:12,739 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]
2021-03-12 08:24:12,739 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toChar().uppercase()
2021-03-12 08:24:12,739 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@53131125], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]]
2021-03-12 08:24:12,740 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@53131125]
2021-03-12 08:24:12,740 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]
2021-03-12 08:24:12,904 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:24:12,910 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toByte().toString(-812194937)
2021-03-12 08:24:12,910 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:24:12,910 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f]
2021-03-12 08:24:12,910 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:24:12,910 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1982725439).i)
2021-03-12 08:24:12,910 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@46c9e88a], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]]
2021-03-12 08:24:12,910 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@46c9e88a]
2021-03-12 08:24:12,910 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]
2021-03-12 08:24:13,074 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:24:13,080 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toShort().toString(1997559327)
2021-03-12 08:24:13,080 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@283d49e5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:24:13,080 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@283d49e5]
2021-03-12 08:24:13,244 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:24:13,250 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:24:13,414 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:24:13,419 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).compareTo(21).toString(-1785218097)
2021-03-12 08:24:13,419 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]]
2021-03-12 08:24:13,419 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0]
2021-03-12 08:24:13,420 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]
2021-03-12 08:24:13,420 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toChar().plus(fu0("ttkqh"))
2021-03-12 08:24:13,420 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:24:13,420 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:24:13,420 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:24:13,420 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toInt().toString(P(1982725439).i)
2021-03-12 08:24:13,420 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]]
2021-03-12 08:24:13,420 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0]
2021-03-12 08:24:13,420 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]
2021-03-12 08:24:13,420 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toChar().titlecase()
2021-03-12 08:24:13,421 [main:114] - replacement of ", got " of type String is (1413011436)?.and(-1362930881).toString(P(1982725439).i)
2021-03-12 08:24:13,594 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:24:13,594 [main:66] - Compilation checking started
2021-03-12 08:24:14,312 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = s1 + s2

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = fn.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 {
        prope13 = fu14(::fu13, "O")
    }
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + " has state-machine " +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = false

    var prope18: () -> Unit = {}

    fun fu22() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> { c ->
        prope16++
        prope18 = { c.resume(Unit) }
    }

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (1413011436)?.and(-1362930881).toString(P(1982725439).i) + prope16)
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:24:14,314 [main:107] - replacing (c, Continuation<*>)
2021-03-12 08:24:14,314 [main:50] - replacing c Continuation<*>
2021-03-12 08:24:14,315 [main:54] - Getting value of type Continuation<*>
2021-03-12 08:24:14,480 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 08:24:14,654 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 08:24:14,661 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 08:24:15,275 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 08:24:15,448 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:24:15,455 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:24:15,844 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 08:24:16,023 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:24:16,030 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:24:16,627 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:24:16,627 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:24:16,627 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 08:24:16,628 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 08:24:16,843 [main:67] - randomType = LinkedHashSet<Char>
2021-03-12 08:24:17,008 [main:302] - generating value of type = LinkedHashSet<Char> false depth = 0
2021-03-12 08:24:17,181 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int): LinkedHashSet<Char> = TODO()
2021-03-12 08:24:17,188 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int): LinkedHashSet<Char> = TODO()
2021-03-12 08:24:17,559 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:24:17,565 [main:95] - GENERATED = LinkedHashSet<Char>(-1877500044)
2021-03-12 08:24:17,674 [main:106] - GETTING Continuation<*> from Continuation<Any?>
2021-03-12 08:24:17,681 [main:106] - GETTING Continuation<*> from String
2021-03-12 08:24:17,698 [main:106] - GETTING Continuation<*> from EmptyCoroutineContext
2021-03-12 08:24:17,711 [main:106] - GETTING Continuation<*> from Function0<Unit>
2021-03-12 08:24:17,719 [main:106] - GETTING Continuation<*> from Int
2021-03-12 08:24:17,748 [main:106] - GETTING Continuation<*> from Any?
2021-03-12 08:24:17,752 [main:106] - GETTING Continuation<*> from Int
2021-03-12 08:24:17,753 [main:106] - GETTING Continuation<*> from Int
2021-03-12 08:24:17,753 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-12 08:24:17,759 [main:106] - GETTING Continuation<*> from P
2021-03-12 08:24:17,764 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-12 08:24:17,765 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-12 08:24:17,766 [main:106] - GETTING Continuation<*> from Long
2021-03-12 08:24:17,795 [main:106] - GETTING Continuation<*> from P
2021-03-12 08:24:17,796 [main:106] - GETTING Continuation<*> from Continuation<Kla4>
2021-03-12 08:24:17,803 [main:106] - GETTING Continuation<*> from Boolean
2021-03-12 08:24:17,811 [main:106] - GETTING Continuation<*> from String
2021-03-12 08:24:17,811 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-12 08:24:17,811 [main:107] - replacing ({
        prope13 = fu14(::fu13, "O")
    }, SuspendFunction0<Unit>)
2021-03-12 08:24:17,811 [main:50] - replacing {
        prope13 = fu14(::fu13, "O")
    } SuspendFunction0<Unit>
2021-03-12 08:24:17,811 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-12 08:24:17,975 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-12 08:24:17,981 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:24:17,989 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { println()}
2021-03-12 08:24:17,989 [main:61] - GENERATED IS CALL =false
2021-03-12 08:24:18,614 [main:67] - randomType = Collection<Float>
2021-03-12 08:24:18,615 [main:106] - GETTING SuspendFunction0<Unit> from Continuation<Any?>
2021-03-12 08:24:18,623 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-12 08:24:18,652 [main:106] - GETTING SuspendFunction0<Unit> from P
2021-03-12 08:24:18,657 [main:106] - GETTING SuspendFunction0<Unit> from Any?
2021-03-12 08:24:18,661 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-12 08:24:18,662 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 08:24:18,679 [main:106] - GETTING SuspendFunction0<Unit> from Long
2021-03-12 08:24:18,707 [main:106] - GETTING SuspendFunction0<Unit> from CoroutineContext
2021-03-12 08:24:18,713 [main:106] - GETTING SuspendFunction0<Unit> from Continuation<Kla4>
2021-03-12 08:24:18,720 [main:106] - GETTING SuspendFunction0<Unit> from Boolean
2021-03-12 08:24:18,728 [main:106] - GETTING SuspendFunction0<Unit> from P
2021-03-12 08:24:18,729 [main:106] - GETTING SuspendFunction0<Unit> from CoroutineContext
2021-03-12 08:24:18,730 [main:106] - GETTING SuspendFunction0<Unit> from Function0<Unit>
2021-03-12 08:24:18,739 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-12 08:24:18,740 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 08:24:18,741 [main:106] - GETTING SuspendFunction0<Unit> from CoroutineContext
2021-03-12 08:24:18,742 [main:106] - GETTING SuspendFunction0<Unit> from EmptyCoroutineContext
2021-03-12 08:24:18,755 [main:114] - replacement of {
        prope13 = fu14(::fu13, "O")
    } of type SuspendFunction0<Unit> is { println()}
2021-03-12 08:24:18,921 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 08:24:18,921 [main:66] - Compilation checking started
2021-03-12 08:24:19,615 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = s1 + s2

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = fn.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + " has state-machine " +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = false

    var prope18: () -> Unit = {}

    fun fu22() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> { c ->
        prope16++
        prope18 = { c.resume(Unit) }
    }

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (1413011436)?.and(-1362930881).toString(P(1982725439).i) + prope16)
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:24:19,617 [main:107] - replacing (s2, String)
2021-03-12 08:24:19,617 [main:50] - replacing s2 String
2021-03-12 08:24:19,617 [main:54] - Getting value of type String
2021-03-12 08:24:19,788 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:24:19,793 [main:58] - GENERATED VALUE OF TYPE String = "fmcbg"
2021-03-12 08:24:19,793 [main:61] - GENERATED IS CALL =false
2021-03-12 08:24:19,815 [main:67] - randomType = Kla4
2021-03-12 08:24:19,979 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 08:24:19,985 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}
2021-03-12 08:24:19,992 [main:106] - GETTING String from Int
2021-03-12 08:24:20,021 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:24:20,021 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:24:20,022 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:24:20,186 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:24:20,191 [main:117] - GENERATED CALL = (P(1118931594).i).toInt().toString(-1725939103)
2021-03-12 08:24:20,191 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:24:20,192 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f]
2021-03-12 08:24:20,192 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:24:20,192 [main:117] - GENERATED CALL = (P(1118931594).i).toLong().toString(P(1118931594).i)
2021-03-12 08:24:20,192 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]]
2021-03-12 08:24:20,192 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d]
2021-03-12 08:24:20,192 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]
2021-03-12 08:24:20,192 [main:117] - GENERATED CALL = (P(1118931594).i).toShort().toString((P(1118931594).i))
2021-03-12 08:24:20,192 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:24:20,192 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:24:20,192 [main:117] - GENERATED CALL = (P(1118931594).i).toString(P(1982725439).i)
2021-03-12 08:24:20,192 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]]
2021-03-12 08:24:20,193 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:24:20,193 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]
2021-03-12 08:24:20,193 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().plus(var prope5 =
2021-03-12 08:24:20,193 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:24:20,193 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4]
2021-03-12 08:24:20,193 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:24:20,357 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:24:20,363 [main:117] - GENERATED CALL = (P(1118931594).i).div((P(1118931594).i).div(-6350246603923996636)).toString(-910978012)
2021-03-12 08:24:20,363 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:24:20,363 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:24:20,527 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:24:20,532 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:24:20,533 [main:117] - GENERATED CALL = (P(1118931594).i).compareTo(-1705782179).toString((P(1118931594).i))
2021-03-12 08:24:20,533 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]]
2021-03-12 08:24:20,533 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b]
2021-03-12 08:24:20,533 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]
2021-03-12 08:24:20,533 [main:117] - GENERATED CALL = (P(1118931594).i).toByte().toString(P(1118931594).i)
2021-03-12 08:24:20,533 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]]
2021-03-12 08:24:20,533 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:24:20,533 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]
2021-03-12 08:24:20,533 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().uppercase()
2021-03-12 08:24:20,533 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]]
2021-03-12 08:24:20,533 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:24:20,534 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]
2021-03-12 08:24:20,534 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().lowercase()
2021-03-12 08:24:20,534 [main:114] - replacement of s2 of type String is "fmcbg"
2021-03-12 08:24:20,698 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 08:24:20,699 [main:66] - Compilation checking started
2021-03-12 08:24:21,442 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = s1 + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = fn.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + " has state-machine " +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = false

    var prope18: () -> Unit = {}

    fun fu22() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> { c ->
        prope16++
        prope18 = { c.resume(Unit) }
    }

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (1413011436)?.and(-1362930881).toString(P(1982725439).i) + prope16)
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:24:21,444 [main:107] - replacing (" is not subtype of CoroutineStackFrame", String)
2021-03-12 08:24:21,444 [main:50] - replacing " is not subtype of CoroutineStackFrame" String
2021-03-12 08:24:21,444 [main:54] - Getting value of type String
2021-03-12 08:24:21,621 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:24:21,626 [main:58] - GENERATED VALUE OF TYPE String = "qrbwv"
2021-03-12 08:24:21,626 [main:61] - GENERATED IS CALL =false
2021-03-12 08:24:21,648 [main:67] - randomType = Kla3
2021-03-12 08:24:21,814 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 08:24:21,819 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}
2021-03-12 08:24:21,824 [main:106] - GETTING String from String
2021-03-12 08:24:21,840 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25d2d88f]]
2021-03-12 08:24:21,840 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25d2d88f]
2021-03-12 08:24:21,840 [main:117] - GENERATED CALL = (fu1()).toUpperCase()
2021-03-12 08:24:21,840 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1364c918]]
2021-03-12 08:24:21,840 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1364c918]
2021-03-12 08:24:22,006 [main:302] - generating value of type = Char true depth = 0
2021-03-12 08:24:22,177 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:24:22,183 [main:117] - GENERATED CALL = (fu1()).replaceBeforeLast('Îèè', fu1(), "zelsk")
2021-03-12 08:24:22,183 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@623eb3d6]]
2021-03-12 08:24:22,183 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@623eb3d6]
2021-03-12 08:24:22,348 [main:302] - generating value of type = Char true depth = 0
2021-03-12 08:24:22,354 [main:117] - GENERATED CALL = (fu1()).padEnd(P(1982725439).i, '„É§')
2021-03-12 08:24:22,354 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43ce3fba]]
2021-03-12 08:24:22,354 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43ce3fba]
2021-03-12 08:24:22,354 [main:117] - GENERATED CALL = (fu1()).toLowerCase()
2021-03-12 08:24:22,354 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bba6745]]
2021-03-12 08:24:22,354 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bba6745]
2021-03-12 08:24:22,355 [main:117] - GENERATED CALL = (fu1()).replaceIndentByMargin(var prope5 =
2021-03-12 08:24:22,355 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3028d347]]
2021-03-12 08:24:22,355 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3028d347]
2021-03-12 08:24:22,520 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:24:22,526 [main:117] - GENERATED CALL = (fu1()).prependIndent("nbucb")
2021-03-12 08:24:22,526 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e3c851f], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]]
2021-03-12 08:24:22,526 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e3c851f]
2021-03-12 08:24:22,526 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]
2021-03-12 08:24:22,698 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:24:22,703 [main:117] - GENERATED CALL = (fu1()).get(P(1118931594).i).plus("lcefz")
2021-03-12 08:24:22,704 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b8e0b89]]
2021-03-12 08:24:22,704 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b8e0b89]
2021-03-12 08:24:22,704 [main:117] - GENERATED CALL = (fu1()).lowercase()
2021-03-12 08:24:22,704 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d64491e]]
2021-03-12 08:24:22,704 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d64491e]
2021-03-12 08:24:22,704 [main:117] - GENERATED CALL = (fu1()).decapitalize()
2021-03-12 08:24:22,704 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3e028244], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62046f2d]]
2021-03-12 08:24:22,704 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3e028244]
2021-03-12 08:24:22,704 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62046f2d]
2021-03-12 08:24:22,869 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:24:23,043 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:24:23,049 [main:117] - GENERATED CALL = (fu1()).subSequence((P(1118931594).i), (P(1118931594).i)).commonPrefixWith("amdxu", true)
2021-03-12 08:24:23,049 [main:114] - replacement of " is not subtype of CoroutineStackFrame" of type String is (fu1()).replaceIndentByMargin(var prope5 =
2021-03-12 08:24:23,216 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(BINARY_EXPRESSION)
2021-03-12 08:24:23,216 [main:66] - Compilation checking started
2021-03-12 08:24:23,226 [main:71] - Wrong syntax or breaks conditions
2021-03-12 08:24:23,226 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = s1 + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = fn.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + (fu1()).replaceIndentByMargin(var prope5 =)
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + " has state-machine " +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = false

    var prope18: () -> Unit = {}

    fun fu22() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> { c ->
        prope16++
        prope18 = { c.resume(Unit) }
    }

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (1413011436)?.and(-1362930881).toString(P(1982725439).i) + prope16)
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:24:23,228 [main:107] - replacing ({ c ->
        prope16++
        prope18 = { c.resume(Unit) }
    }, Function1<Continuation<Unit>, Unit>)
2021-03-12 08:24:23,228 [main:50] - replacing { c ->
        prope16++
        prope18 = { c.resume(Unit) }
    } Function1<Continuation<Unit>, Unit>
2021-03-12 08:24:23,228 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-12 08:24:23,392 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-12 08:24:23,398 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:24:23,576 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:24:23,583 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:24:23,955 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 08:24:23,961 [main:95] - GENERATED = require(true)
2021-03-12 08:24:23,961 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> require(true)}
2021-03-12 08:24:23,961 [main:61] - GENERATED IS CALL =false
2021-03-12 08:24:25,107 [main:67] - randomType = Collection<ArrayDeque<Sequence<Function2<Kla5, Kla2<Kla8>, Int>>>>
2021-03-12 08:24:25,109 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Long
2021-03-12 08:24:25,139 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-12 08:24:25,169 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from P
2021-03-12 08:24:25,174 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from CoroutineContext
2021-03-12 08:24:25,181 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Any?
2021-03-12 08:24:25,185 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from CoroutineContext
2021-03-12 08:24:25,186 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-12 08:24:25,188 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Continuation<Kla4>
2021-03-12 08:24:25,196 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Continuation<Any?>
2021-03-12 08:24:25,204 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from EmptyCoroutineContext
2021-03-12 08:24:25,218 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 08:24:25,235 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from P
2021-03-12 08:24:25,236 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Boolean
2021-03-12 08:24:25,245 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from CoroutineContext
2021-03-12 08:24:25,247 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-12 08:24:25,248 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 08:24:25,250 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Function0<Unit>
2021-03-12 08:24:25,258 [main:114] - replacement of { c ->
        prope16++
        prope18 = { c.resume(Unit) }
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> require(true)}
2021-03-12 08:24:25,423 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 08:24:25,423 [main:66] - Compilation checking started
2021-03-12 08:24:26,123 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = s1 + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = fn.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + " has state-machine " +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = false

    var prope18: () -> Unit = {}

    fun fu22() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (1413011436)?.and(-1362930881).toString(P(1982725439).i) + prope16)
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:24:26,125 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 08:24:26,125 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 08:24:26,125 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 08:24:26,294 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 08:24:26,302 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 08:24:26,509 [main:67] - randomType = UInt?
2021-03-12 08:24:26,675 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 08:24:26,710 [main:106] - GETTING EmptyCoroutineContext from Continuation<Any?>
2021-03-12 08:24:26,717 [main:106] - GETTING EmptyCoroutineContext from Boolean
2021-03-12 08:24:26,725 [main:106] - GETTING EmptyCoroutineContext from Any?
2021-03-12 08:24:26,728 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 08:24:26,744 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 08:24:26,774 [main:106] - GETTING EmptyCoroutineContext from Continuation<Kla4>
2021-03-12 08:24:26,781 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 08:24:26,781 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 08:24:26,782 [main:106] - GETTING EmptyCoroutineContext from P
2021-03-12 08:24:26,787 [main:106] - GETTING EmptyCoroutineContext from Long
2021-03-12 08:24:26,815 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 08:24:26,816 [main:106] - GETTING EmptyCoroutineContext from Function0<Unit>
2021-03-12 08:24:26,824 [main:106] - GETTING EmptyCoroutineContext from P
2021-03-12 08:24:26,824 [main:106] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-12 08:24:26,830 [main:106] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-12 08:24:26,830 [main:106] - GETTING EmptyCoroutineContext from EmptyCoroutineContext
2021-03-12 08:24:26,843 [main:114] - replacement of EmptyCoroutineContext of type EmptyCoroutineContext is Kla1().context
2021-03-12 08:24:27,006 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:24:27,007 [main:66] - Compilation checking started
2021-03-12 08:24:27,728 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = s1 + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = fn.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + " has state-machine " +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = false

    var prope18: () -> Unit = {}

    fun fu22() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (1413011436)?.and(-1362930881).toString(P(1982725439).i) + prope16)
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        prope18()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:24:27,730 [main:107] - replacing (prope18, Function0<Unit>)
2021-03-12 08:24:27,730 [main:50] - replacing prope18 Function0<Unit>
2021-03-12 08:24:27,730 [main:54] - Getting value of type Function0<Unit>
2021-03-12 08:24:27,895 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 08:24:27,900 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:24:28,072 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 08:24:28,078 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 08:24:28,650 [main:302] - generating value of type = Int true depth = 4
2021-03-12 08:24:28,655 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 08:24:28,661 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 08:24:28,835 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:24:28,842 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:24:29,228 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 08:24:29,234 [main:95] - GENERATED = check(true)
2021-03-12 08:24:29,234 [main:95] - GENERATED = repeat(-1318626674, {a: Int -> check(true)})
2021-03-12 08:24:29,234 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(-1318626674, {a: Int -> check(true)})}
2021-03-12 08:24:29,234 [main:61] - GENERATED IS CALL =false
2021-03-12 08:24:29,857 [main:67] - randomType = Sequence<Set<UByte>>?
2021-03-12 08:24:29,859 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 08:24:29,889 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 08:24:29,890 [main:106] - GETTING Function0<Unit> from P
2021-03-12 08:24:29,895 [main:106] - GETTING Function0<Unit> from P
2021-03-12 08:24:29,896 [main:106] - GETTING Function0<Unit> from String
2021-03-12 08:24:29,913 [main:106] - GETTING Function0<Unit> from String
2021-03-12 08:24:29,913 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 08:24:29,921 [main:114] - replacement of prope18 of type Function0<Unit> is Kla4().prope9
2021-03-12 08:24:30,085 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:24:30,086 [main:66] - Compilation checking started
2021-03-12 08:24:30,793 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = s1 + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = fn.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + " has state-machine " +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = false

    var prope18: () -> Unit = {}

    fun fu22() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (1413011436)?.and(-1362930881).toString(P(1982725439).i) + prope16)
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:24:30,795 [main:107] - replacing (false, Boolean)
2021-03-12 08:24:30,795 [main:50] - replacing false Boolean
2021-03-12 08:24:30,795 [main:54] - Getting value of type Boolean
2021-03-12 08:24:30,968 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:24:30,974 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 08:24:30,974 [main:61] - GENERATED IS CALL =false
2021-03-12 08:24:30,996 [main:67] - randomType = Kla1
2021-03-12 08:24:31,175 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 08:24:31,180 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}
2021-03-12 08:24:31,194 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@580831d2]
2021-03-12 08:24:31,359 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:24:31,359 [main:78] - Generated call from random type = (Kla1()).context.equals("wygjw")
2021-03-12 08:24:31,360 [main:106] - GETTING Boolean from EmptyCoroutineContext
2021-03-12 08:24:31,374 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@36f98a76], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]]
2021-03-12 08:24:31,374 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@36f98a76]
2021-03-12 08:24:31,374 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]
2021-03-12 08:24:31,538 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:24:31,543 [main:117] - GENERATED CALL = (Kla1().context).equals(Kla1().prope5).or(false)
2021-03-12 08:24:31,544 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@36f98a76], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]]
2021-03-12 08:24:31,544 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@36f98a76]
2021-03-12 08:24:31,544 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]
2021-03-12 08:24:31,708 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:24:31,714 [main:117] - GENERATED CALL = (Kla1().context).equals(Kla1().prope5).and(true)
2021-03-12 08:24:31,714 [main:113] - Case = [public open fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@6b0a935a], public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@4ad177f3]]
2021-03-12 08:24:31,714 [main:149] - GENERATING call of type public open fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@6b0a935a]
2021-03-12 08:24:31,879 [main:302] - generating value of type = R false depth = 0
2021-03-12 08:24:32,298 [main:43] - GENERATING CALL OF fun <R> run(block: ()->LinkedHashMap<Boolean, Kla7>): R = TODO()
2021-03-12 08:24:32,305 [main:61] - WITHOUT TYPE PARAMS = fun <R> run(block: ()->LinkedHashMap<Boolean, Kla7>): R = TODO()
2021-03-12 08:24:32,704 [main:302] - generating value of type = Function0<LinkedHashMap<Boolean, Kla7>> false depth = 3
2021-03-12 08:24:32,710 [main:302] - generating value of type = LinkedHashMap<Boolean, Kla7> false depth = 4
2021-03-12 08:24:32,887 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Boolean, Kla7>): LkedHashMap<Boolean, Kla7> = TODO()
2021-03-12 08:24:32,894 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Boolean, Kla7>): LkedHashMap<Boolean, Kla7> = TODO()
2021-03-12 08:24:33,069 [main:302] - generating value of type = Pair<Boolean, Kla7> false depth = 7
2021-03-12 08:24:33,243 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Boolean, second: Kla7): Pair<Boolean, Kla7> = TODO()
2021-03-12 08:24:33,250 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Boolean, second: Kla7): Pair<Boolean, Kla7> = TODO()
2021-03-12 08:24:33,427 [main:302] - generating value of type = Boolean true depth = 10
2021-03-12 08:24:33,433 [main:302] - generating value of type = Kla7 false depth = 10
2021-03-12 08:24:33,439 [main:112] - generating klass Kla7 text = open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}
2021-03-12 08:24:33,602 [main:194] - Type params = []
2021-03-12 08:24:33,766 [main:302] - generating value of type = CoroutineContext false depth = 12
2021-03-12 08:24:33,937 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:24:33,944 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:24:34,376 [main:302] - generating value of type = Key<*> false depth = 15
2021-03-12 08:24:34,554 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:24:34,561 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:24:35,158 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:24:35,158 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:24:35,159 [main:95] - GENERATED = Pair<Boolean, Kla7>(true, Kla7())
2021-03-12 08:24:35,159 [main:95] - GENERATED = linkedMapOf<Boolean, Kla7>(Pair<Boolean, Kla7>(true, Kla7()))
2021-03-12 08:24:35,159 [main:95] - GENERATED = run<LinkedHashMap<Boolean, Kla7>>({ linkedMapOf<Boolean, Kla7>(Pair<Boolean, Kla7>(true, Kla7()))})
2021-03-12 08:24:35,324 [main:302] - generating value of type = Function2<R, Element, R> false depth = 0
2021-03-12 08:24:35,330 [main:302] - generating value of type = R false depth = 1
2021-03-12 08:24:35,524 [main:43] - GENERATING CALL OF fun <R> synchronized(lock: kotlin.Any, block: ()->Kla8): R = TODO()
2021-03-12 08:24:35,530 [main:61] - WITHOUT TYPE PARAMS = fun <R> synchronized(lock: kotlin.Any, block: ()->Kla8): R = TODO()
2021-03-12 08:24:36,108 [main:302] - generating value of type = Any false depth = 4
2021-03-12 08:24:36,108 [main:302] - generating value of type = Function0<Kla8> false depth = 4
2021-03-12 08:24:36,114 [main:302] - generating value of type = Kla8 false depth = 5
2021-03-12 08:24:36,119 [main:112] - generating klass Kla8 text = class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}
2021-03-12 08:24:36,119 [main:95] - GENERATED = synchronized<Kla8>("aokny", { Kla8()})
2021-03-12 08:24:36,120 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@4ad177f3]
2021-03-12 08:24:36,120 [main:117] - GENERATED CALL = (Kla1().context).fold(run<LinkedHashMap<Boolean, Kla7>>({ linkedMapOf<Boolean, Kla7>(Pair<Boolean, Kla7>(true, Kla7()))}), {a: R, b: Element -> synchronized<Kla8>("aokny", { Kla8()})})?.equals(Kla1().prope5)
2021-03-12 08:24:36,120 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@36f98a76], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]]
2021-03-12 08:24:36,120 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@36f98a76]
2021-03-12 08:24:36,120 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]
2021-03-12 08:24:36,121 [main:117] - GENERATED CALL = (Kla1().context).equals(Kla1().prope5).equals(Kla1().prope5)
2021-03-12 08:24:36,121 [main:113] - Case = [public open fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@6b0a935a], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun <T : kotlin.Any, R : kotlin.collections.Iterable<T>> R.contains(element: T?): kotlin.Boolean where R : kotlin.ranges.ClosedRange<T> defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@e78f01e]]
2021-03-12 08:24:36,121 [main:149] - GENERATING call of type public open fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@6b0a935a]
2021-03-12 08:24:36,285 [main:302] - generating value of type = R false depth = 0
2021-03-12 08:24:36,675 [main:43] - GENERATING CALL OF fun <R> synchronized(lock: kotlin.Any, block: ()->Kla7?): R = TODO()
2021-03-12 08:24:36,682 [main:61] - WITHOUT TYPE PARAMS = fun <R> synchronized(lock: kotlin.Any, block: ()->Kla7?): R = TODO()
2021-03-12 08:24:37,258 [main:302] - generating value of type = Any false depth = 3
2021-03-12 08:24:37,258 [main:302] - generating value of type = Function0<Kla7?> false depth = 3
2021-03-12 08:24:37,264 [main:302] - generating value of type = Kla7 false depth = 4
2021-03-12 08:24:37,269 [main:112] - generating klass Kla7 text = open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}
2021-03-12 08:24:37,432 [main:194] - Type params = []
2021-03-12 08:24:37,632 [main:302] - generating value of type = CoroutineContext false depth = 6
2021-03-12 08:24:37,804 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:24:37,811 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:24:38,200 [main:302] - generating value of type = Key<*> false depth = 9
2021-03-12 08:24:38,380 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:24:38,388 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:24:38,982 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 12
2021-03-12 08:24:39,161 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:24:39,168 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:24:39,764 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 15
2021-03-12 08:24:39,944 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:24:39,951 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:24:40,551 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:24:40,551 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:24:40,551 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:24:40,551 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:24:40,551 [main:95] - GENERATED = synchronized<Kla7?>("ktgnb", { Kla7()})
2021-03-12 08:24:40,715 [main:302] - generating value of type = Function2<R, Element, R> false depth = 0
2021-03-12 08:24:40,721 [main:302] - generating value of type = R false depth = 1
2021-03-12 08:24:41,140 [main:43] - GENERATING CALL OF fun <R> synchronized(lock: kotlin.Any, block: ()->Kla3?): R = TODO()
2021-03-12 08:24:41,147 [main:61] - WITHOUT TYPE PARAMS = fun <R> synchronized(lock: kotlin.Any, block: ()->Kla3?): R = TODO()
2021-03-12 08:24:41,717 [main:302] - generating value of type = Any false depth = 4
2021-03-12 08:24:41,717 [main:302] - generating value of type = Function0<Kla3?> false depth = 4
2021-03-12 08:24:41,723 [main:302] - generating value of type = Kla3 false depth = 5
2021-03-12 08:24:41,729 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}
2021-03-12 08:24:41,729 [main:95] - GENERATED = synchronized<Kla3?>("yulqm", { Kla3()})
2021-03-12 08:24:41,729 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun <T : kotlin.Any, R : kotlin.collections.Iterable<T>> R.contains(element: T?): kotlin.Boolean where R : kotlin.ranges.ClosedRange<T> defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@e78f01e]
2021-03-12 08:24:41,892 [main:302] - generating value of type = T false depth = 0
2021-03-12 08:24:42,471 [main:43] - GENERATING CALL OF fun <T> minOf(a: Kla12?, b: Kla12?, comparator: kotlin.Comparator<Kla12?>): T = TODO()
2021-03-12 08:24:42,478 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: Kla12?, b: Kla12?, comparator: kotlin.Comparator<Kla12?>): T = TODO()
2021-03-12 08:24:42,860 [main:302] - generating value of type = Kla12 false depth = 3
2021-03-12 08:24:42,865 [main:112] - generating klass Kla12 text = object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}
2021-03-12 08:24:42,866 [main:302] - generating value of type = Kla12 false depth = 3
2021-03-12 08:24:42,871 [main:112] - generating klass Kla12 text = object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}
2021-03-12 08:24:42,871 [main:302] - generating value of type = Comparator<Kla12?> false depth = 3
2021-03-12 08:24:43,043 [main:43] - GENERATING CALL OF fun <T> compareBy(selectors: Function1<Kla12?, Comparable<*>?>): Comparator<Kla12?> = TODO()
2021-03-12 08:24:43,050 [main:61] - WITHOUT TYPE PARAMS = fun <T> compareBy(selectors: Function1<Kla12?, Comparable<*>?>): Comparator<Kla12?> = TODO()
2021-03-12 08:24:43,225 [main:302] - generating value of type = Function1<Kla12?, Comparable<*>?> false depth = 6
2021-03-12 08:24:43,231 [main:302] - generating value of type = Comparable<*> false depth = 7
2021-03-12 08:24:43,411 [main:43] - GENERATING CALL OF fun <E> Enum(name: kotlin.String, ordinal: kotlin.Int): Comparable<*> = TODO()
2021-03-12 08:24:43,418 [main:61] - WITHOUT TYPE PARAMS = fun <E> Enum(name: kotlin.String, ordinal: kotlin.Int): Comparable<*> = TODO()
2021-03-12 08:24:43,993 [main:302] - generating value of type = String true depth = 10
2021-03-12 08:24:43,999 [main:302] - generating value of type = Int true depth = 10
2021-03-12 08:24:44,004 [main:95] - GENERATED = Enum<Enum<E>>("cszzn", -859876874)
2021-03-12 08:24:44,005 [main:95] - GENERATED = compareBy<Kla12?>({a: Kla12? -> Enum<Enum<E>>("cszzn", -859876874)})
2021-03-12 08:24:44,005 [main:95] - GENERATED = minOf<Kla12?>(Kla12, Kla12, compareBy<Kla12?>({a: Kla12? -> Enum<Enum<E>>("cszzn", -859876874)}))
2021-03-12 08:24:44,005 [main:117] - GENERATED CALL = (Kla1().context).fold(synchronized<Kla7?>("ktgnb", { Kla7()}), {a: R, b: Element -> synchronized<Kla3?>("yulqm", { Kla3()})})?.contains(minOf<Kla12?>(Kla12, Kla12, compareBy<Kla12?>({a: Kla12? -> Enum<Enum<E>>("cszzn", -859876874)})))
2021-03-12 08:24:44,006 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@36f98a76]]
2021-03-12 08:24:44,006 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@36f98a76]
2021-03-12 08:24:44,006 [main:117] - GENERATED CALL = (Kla1().context).equals(Kla1().prope5)
2021-03-12 08:24:44,006 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@36f98a76], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]]
2021-03-12 08:24:44,006 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@36f98a76]
2021-03-12 08:24:44,170 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:24:44,171 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]
2021-03-12 08:24:44,334 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:24:44,340 [main:117] - GENERATED CALL = (Kla1().context).equals("dlsde").xor(false)
2021-03-12 08:24:44,340 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@36f98a76], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]]
2021-03-12 08:24:44,340 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@36f98a76]
2021-03-12 08:24:44,504 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:24:44,505 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]
2021-03-12 08:24:44,505 [main:117] - GENERATED CALL = (Kla1().context).equals("unqpt").not()
2021-03-12 08:24:44,505 [main:113] - Case = [public open fun minusKey(key: kotlin.coroutines.CoroutineContext.Key<*>): kotlin.coroutines.CoroutineContext defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@5a440f9d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3fc58f8e]]
2021-03-12 08:24:44,505 [main:149] - GENERATING call of type public open fun minusKey(key: kotlin.coroutines.CoroutineContext.Key<*>): kotlin.coroutines.CoroutineContext defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@5a440f9d]
2021-03-12 08:24:44,697 [main:302] - generating value of type = Key<*> false depth = 0
2021-03-12 08:24:44,876 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:24:44,883 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:24:45,479 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 3
2021-03-12 08:24:45,657 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:24:45,664 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:24:46,259 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:24:46,259 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:24:46,260 [main:158] - CANT GENERATE PARAMS FOR public open fun minusKey(key: kotlin.coroutines.CoroutineContext.Key<*>): kotlin.coroutines.CoroutineContext defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@5a440f9d]
2021-03-12 08:24:46,260 [main:113] - Case = [public open fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@599871ab], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext.Element[DeserializedSimpleFunctionDescriptor@3da70381]]
2021-03-12 08:24:46,260 [main:149] - GENERATING call of type public open fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@599871ab]
2021-03-12 08:24:46,424 [main:302] - generating value of type = Key<E> false depth = 0
2021-03-12 08:24:46,602 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-12 08:24:46,609 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-12 08:24:47,205 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-12 08:24:47,206 [main:158] - CANT GENERATE PARAMS FOR public open fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@599871ab]
2021-03-12 08:24:47,206 [main:114] - replacement of false of type Boolean is (Kla1().context).equals("dlsde").xor(false)
2021-03-12 08:24:47,370 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:24:47,370 [main:66] - Compilation checking started
2021-03-12 08:24:48,061 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = s1 + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = fn.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + " has state-machine " +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (1413011436)?.and(-1362930881).toString(P(1982725439).i) + prope16)
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:24:48,063 [main:107] - replacing (fn, SuspendFunction1<String, String>)
2021-03-12 08:24:48,063 [main:50] - replacing fn SuspendFunction1<String, String>
2021-03-12 08:24:48,063 [main:54] - Getting value of type SuspendFunction1<String, String>
2021-03-12 08:24:48,241 [main:302] - generating value of type = SuspendFunction1<String, String> false depth = 0
2021-03-12 08:24:48,248 [main:302] - generating value of type = String true depth = 1
2021-03-12 08:24:48,253 [main:58] - GENERATED VALUE OF TYPE SuspendFunction1<String, String> = {a: String -> "jzrjx"}
2021-03-12 08:24:48,254 [main:61] - GENERATED IS CALL =false
2021-03-12 08:24:48,776 [main:67] - randomType = Triple<Kla3, Kla3, UByte>
2021-03-12 08:24:48,940 [main:302] - generating value of type = Triple<Kla3, Kla3, UByte> false depth = 0
2021-03-12 08:24:49,113 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Kla3, second: Kla3, third: UByte): Triple<Kla3, Kla3, UByte> = TODO()
2021-03-12 08:24:49,120 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Kla3, second: Kla3, third: UByte): Triple<Kla3, Kla3, UByte> = TODO()
2021-03-12 08:24:49,296 [main:302] - generating value of type = Kla3 false depth = 3
2021-03-12 08:24:49,301 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}
2021-03-12 08:24:49,301 [main:302] - generating value of type = Kla3 false depth = 3
2021-03-12 08:24:49,307 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}
2021-03-12 08:24:49,307 [main:302] - generating value of type = UByte true depth = 3
2021-03-12 08:24:49,313 [main:95] - GENERATED = Triple<Kla3, Kla3, UByte>(Kla3(), Kla3(), 101.toUByte())
2021-03-12 08:24:49,326 [main:106] - GETTING SuspendFunction1<String, String> from CoroutineContext
2021-03-12 08:24:49,332 [main:106] - GETTING SuspendFunction1<String, String> from Int
2021-03-12 08:24:49,362 [main:106] - GETTING SuspendFunction1<String, String> from Function0<Unit>
2021-03-12 08:24:49,370 [main:106] - GETTING SuspendFunction1<String, String> from Int
2021-03-12 08:24:49,371 [main:106] - GETTING SuspendFunction1<String, String> from Continuation<Kla4>
2021-03-12 08:24:49,379 [main:106] - GETTING SuspendFunction1<String, String> from CoroutineContext
2021-03-12 08:24:49,380 [main:106] - GETTING SuspendFunction1<String, String> from P
2021-03-12 08:24:49,385 [main:106] - GETTING SuspendFunction1<String, String> from P
2021-03-12 08:24:49,386 [main:106] - GETTING SuspendFunction1<String, String> from CoroutineContext
2021-03-12 08:24:49,387 [main:106] - GETTING SuspendFunction1<String, String> from EmptyCoroutineContext
2021-03-12 08:24:49,401 [main:106] - GETTING SuspendFunction1<String, String> from Any?
2021-03-12 08:24:49,405 [main:106] - GETTING SuspendFunction1<String, String> from Long
2021-03-12 08:24:49,434 [main:106] - GETTING SuspendFunction1<String, String> from Int
2021-03-12 08:24:49,435 [main:106] - GETTING SuspendFunction1<String, String> from String
2021-03-12 08:24:49,452 [main:106] - GETTING SuspendFunction1<String, String> from Boolean
2021-03-12 08:24:49,460 [main:106] - GETTING SuspendFunction1<String, String> from String
2021-03-12 08:24:49,461 [main:106] - GETTING SuspendFunction1<String, String> from Continuation<Any?>
2021-03-12 08:24:49,467 [main:114] - replacement of fn of type SuspendFunction1<String, String> is {a: String -> "jzrjx"}
2021-03-12 08:24:49,631 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 08:24:49,631 [main:66] - Compilation checking started
2021-03-12 08:24:50,338 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = s1 + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + " has state-machine " +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (1413011436)?.and(-1362930881).toString(P(1982725439).i) + prope16)
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:24:50,340 [main:107] - replacing (isSuccess, Boolean)
2021-03-12 08:24:50,341 [main:50] - replacing isSuccess Boolean
2021-03-12 08:24:50,341 [main:54] - Getting value of type Boolean
2021-03-12 08:24:50,509 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:24:50,514 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 08:24:50,514 [main:61] - GENERATED IS CALL =false
2021-03-12 08:24:51,000 [main:67] - randomType = Function1<LinkedHashMap<Kla10, UInt>, P>
2021-03-12 08:24:51,001 [main:106] - GETTING Boolean from CoroutineContext
2021-03-12 08:24:51,007 [main:113] - Case = [public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@2acbd3f], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun <T : kotlin.Any, R : kotlin.collections.Iterable<T>> R.contains(element: T?): kotlin.Boolean where R : kotlin.ranges.ClosedRange<T> defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@e78f01e]]
2021-03-12 08:24:51,008 [main:149] - GENERATING call of type public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@2acbd3f]
2021-03-12 08:24:51,173 [main:302] - generating value of type = R false depth = 0
2021-03-12 08:24:52,926 [main:43] - GENERATING CALL OF fun <T, R> with(receiver: Set<Function2<Kla2<UInt>, Kla1?, Kla4>>?, block: T.()->Kla3?): R = TODO()
2021-03-12 08:24:52,933 [main:61] - WITHOUT TYPE PARAMS = fun <T, R> with(receiver: Set<Function2<Kla2<UInt>, Kla1?, Kla4>>?, block: T.()->Kla3?): R = TODO()
2021-03-12 08:24:53,319 [main:302] - generating value of type = Set<Function2<Kla2<UInt>, Kla1?, Kla4>> false depth = 3
2021-03-12 08:24:53,496 [main:43] - GENERATING CALL OF fun <E> buildSet(capacity: kotlin.Int, builderAction: kotlin.collections.MutableSet<Function2<Kla2<UInt>, Kla1?, Kla4>>.()->kotlin.Unit): Set<Function2<Kla2<UInt>, Kla1?, Kla4>> = TODO()
2021-03-12 08:24:53,503 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildSet(capacity: kotlin.Int, builderAction: kotlin.collections.MutableSet<Function2<Kla2<UInt>, Kla1?, Kla4>>.()->kotlin.Unit): Set<Function2<Kla2<UInt>, Kla1?, Kla4>> = TODO()
2021-03-12 08:24:54,124 [main:302] - generating value of type = Int true depth = 6
2021-03-12 08:24:54,130 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableSet<Function2<Kla2<UInt>, Kla1?, Kla4>>, Unit> false depth = 6
2021-03-12 08:24:54,136 [main:302] - generating value of type = Unit false depth = 7
2021-03-12 08:24:54,309 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 08:24:54,317 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 08:24:54,894 [main:302] - generating value of type = Boolean true depth = 10
2021-03-12 08:24:54,899 [main:302] - generating value of type = Function0<Any> false depth = 10
2021-03-12 08:24:54,905 [main:302] - generating value of type = Any false depth = 11
2021-03-12 08:24:54,905 [main:95] - GENERATED = require(false, { "nzmco"})
2021-03-12 08:24:54,905 [main:95] - GENERATED = buildSet<Function2<Kla2<UInt>, Kla1?, Kla4>>(-2084341842, { require(false, { "nzmco"})})
2021-03-12 08:24:54,905 [main:385] - Cant generate call of fun <T, R> with(receiver: Set<Function2<Kla2<UInt>, Kla1?, Kla4>>?, block: T.()->Kla3?): R = TODO()
2021-03-12 08:24:55,069 [main:302] - generating value of type = Function2<R, Element, R> false depth = 0
2021-03-12 08:24:55,075 [main:302] - generating value of type = R false depth = 1
2021-03-12 08:24:57,027 [main:43] - GENERATING CALL OF fun <T, R> with(receiver: Kla3, block: T.()->List<Function2<Kla9<Kla7?>, MutableMap<Byte, Byte>, Int>>?): R = TODO()
2021-03-12 08:24:57,034 [main:61] - WITHOUT TYPE PARAMS = fun <T, R> with(receiver: Kla3, block: T.()->List<Function2<Kla9<Kla7?>, MutableMap<Byte, Byte>, Int>>?): R = TODO()
2021-03-12 08:24:57,463 [main:302] - generating value of type = Kla3 false depth = 4
2021-03-12 08:24:57,469 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}
2021-03-12 08:24:57,469 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<T, List<Function2<Kla9<Kla7?>, MutableMap<Byte, Byte>, Int>>?> false depth = 4
2021-03-12 08:24:57,475 [main:302] - generating value of type = List<Function2<Kla9<Kla7?>, MutableMap<Byte, Byte>, Int>> false depth = 5
2021-03-12 08:24:57,652 [main:43] - GENERATING CALL OF fun <E> buildList(builderAction: kotlin.collections.MutableList<Function2<Kla9<Kla7?>, MutableMap<Byte, Byte>, Int>>.()->kotlin.Unit): List<Function2<Kla9<Kla7?>, MutableMap<Byte, Byte>, Int>> = TODO()
2021-03-12 08:24:57,659 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildList(builderAction: kotlin.collections.MutableList<Function2<Kla9<Kla7?>, MutableMap<Byte, Byte>, Int>>.()->kotlin.Unit): List<Function2<Kla9<Kla7?>, MutableMap<Byte, Byte>, Int>> = TODO()
2021-03-12 08:24:58,077 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableList<Function2<Kla9<Kla7?>, MutableMap<Byte, Byte>, Int>>, Unit> false depth = 8
2021-03-12 08:24:58,085 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 08:24:58,258 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:24:58,265 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:24:58,638 [main:302] - generating value of type = Boolean true depth = 12
2021-03-12 08:24:58,643 [main:95] - GENERATED = check(false)
2021-03-12 08:24:58,644 [main:95] - GENERATED = buildList<Function2<Kla9<Kla7?>, MutableMap<Byte, Byte>, Int>>({ check(false)})
2021-03-12 08:24:58,644 [main:95] - GENERATED = with<Kla3, List<Function2<Kla9<Kla7?>, MutableMap<Byte, Byte>, Int>>?>(Kla3(), { buildList<Function2<Kla9<Kla7?>, MutableMap<Byte, Byte>, Int>>({ check(false)})})
2021-03-12 08:24:58,644 [main:158] - CANT GENERATE PARAMS FOR public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@2acbd3f]
2021-03-12 08:24:58,644 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3fc58f8e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]]
2021-03-12 08:24:58,644 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3fc58f8e]
2021-03-12 08:24:58,644 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]
2021-03-12 08:24:58,809 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:24:58,809 [main:117] - GENERATED CALL = (Kla5.context).equals(Kla1().prope5).equals("xviqr")
2021-03-12 08:24:58,809 [main:113] - Case = [public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@50cdd8cf], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext.Element[DeserializedSimpleFunctionDescriptor@3da70381]]
2021-03-12 08:24:58,809 [main:149] - GENERATING call of type public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@50cdd8cf]
2021-03-12 08:24:58,977 [main:302] - generating value of type = Key<E> false depth = 0
2021-03-12 08:24:59,157 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-12 08:24:59,165 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-12 08:24:59,800 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 3
2021-03-12 08:24:59,981 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:24:59,988 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:25:00,587 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:25:00,587 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-12 08:25:00,587 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@50cdd8cf]
2021-03-12 08:25:00,588 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3fc58f8e], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]]
2021-03-12 08:25:00,588 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3fc58f8e]
2021-03-12 08:25:00,588 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]
2021-03-12 08:25:00,753 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:25:00,759 [main:117] - GENERATED CALL = (Kla5.context).equals(Kla1().prope5).and(true)
2021-03-12 08:25:00,759 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3fc58f8e], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]]
2021-03-12 08:25:00,759 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3fc58f8e]
2021-03-12 08:25:00,759 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]
2021-03-12 08:25:00,759 [main:117] - GENERATED CALL = (Kla5.context).equals(Kla1().prope5).not()
2021-03-12 08:25:00,759 [main:113] - Case = [public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@2acbd3f], public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@4ad177f3]]
2021-03-12 08:25:00,759 [main:149] - GENERATING call of type public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@2acbd3f]
2021-03-12 08:25:00,924 [main:302] - generating value of type = R false depth = 0
2021-03-12 08:25:01,317 [main:43] - GENERATING CALL OF fun <T, R> with(receiver: Short?, block: T.()->Char): R = TODO()
2021-03-12 08:25:01,324 [main:61] - WITHOUT TYPE PARAMS = fun <T, R> with(receiver: Short?, block: T.()->Char): R = TODO()
2021-03-12 08:25:01,707 [main:302] - generating value of type = Short true depth = 3
2021-03-12 08:25:01,713 [main:385] - Cant generate call of fun <T, R> with(receiver: Short?, block: T.()->Char): R = TODO()
2021-03-12 08:25:01,878 [main:302] - generating value of type = Function2<R, Element, R> false depth = 0
2021-03-12 08:25:01,884 [main:302] - generating value of type = R false depth = 1
2021-03-12 08:25:02,265 [main:43] - GENERATING CALL OF fun <R> synchronized(lock: kotlin.Any, block: ()->UByte?): R = TODO()
2021-03-12 08:25:02,272 [main:61] - WITHOUT TYPE PARAMS = fun <R> synchronized(lock: kotlin.Any, block: ()->UByte?): R = TODO()
2021-03-12 08:25:02,847 [main:302] - generating value of type = Any false depth = 4
2021-03-12 08:25:02,847 [main:302] - generating value of type = Function0<UByte?> false depth = 4
2021-03-12 08:25:02,853 [main:302] - generating value of type = UByte true depth = 5
2021-03-12 08:25:02,859 [main:95] - GENERATED = synchronized<UByte?>("efdzr", { 121.toUByte()})
2021-03-12 08:25:02,859 [main:158] - CANT GENERATE PARAMS FOR public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@2acbd3f]
2021-03-12 08:25:02,859 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3fc58f8e]]
2021-03-12 08:25:02,859 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3fc58f8e]
2021-03-12 08:25:02,859 [main:117] - GENERATED CALL = (Kla5.context).equals(Kla1().prope5)
2021-03-12 08:25:02,859 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3fc58f8e], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]]
2021-03-12 08:25:02,859 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3fc58f8e]
2021-03-12 08:25:03,027 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:25:03,027 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]
2021-03-12 08:25:03,027 [main:117] - GENERATED CALL = (Kla5.context).equals("hfxzz").xor(Kla4().prope8)
2021-03-12 08:25:03,027 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3fc58f8e], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]]
2021-03-12 08:25:03,027 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3fc58f8e]
2021-03-12 08:25:03,027 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]
2021-03-12 08:25:03,028 [main:117] - GENERATED CALL = (Kla5.context).equals(Kla1().prope5).or(Kla4().prope8)
2021-03-12 08:25:03,028 [main:114] - replacement of isSuccess of type Boolean is (Kla5.context).equals(Kla1().prope5).and(true)
2021-03-12 08:25:03,230 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:25:03,231 [main:66] - Compilation checking started
2021-03-12 08:25:03,719 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = s1 + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.(Kla5.context).equals(Kla1().prope5).and(true)) {
            resume(prope14.getOrThrow())
        } else {
            fu17(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu19(it)
    }

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + " has state-machine " +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (1413011436)?.and(-1362930881).toString(P(1982725439).i) + prope16)
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:25:03,721 [main:107] - replacing ({
        fu19(it)
    }, Function1<Continuation<Unit>, Unit>)
2021-03-12 08:25:03,721 [main:50] - replacing {
        fu19(it)
    } Function1<Continuation<Unit>, Unit>
2021-03-12 08:25:03,721 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-12 08:25:03,891 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-12 08:25:03,897 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:25:04,074 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:25:04,081 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:25:04,455 [main:302] - generating value of type = Any false depth = 4
2021-03-12 08:25:04,455 [main:95] - GENERATED = print("pszri")
2021-03-12 08:25:04,455 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> print("pszri")}
2021-03-12 08:25:04,455 [main:61] - GENERATED IS CALL =false
2021-03-12 08:25:04,658 [main:67] - randomType = Float
2021-03-12 08:25:04,823 [main:302] - generating value of type = Float true depth = 0
2021-03-12 08:25:04,858 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Boolean
2021-03-12 08:25:04,867 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from EmptyCoroutineContext
2021-03-12 08:25:04,881 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Any?
2021-03-12 08:25:04,886 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-12 08:25:04,916 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 08:25:04,934 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from CoroutineContext
2021-03-12 08:25:04,940 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Continuation<Kla4>
2021-03-12 08:25:04,948 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-12 08:25:04,949 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-12 08:25:04,951 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from CoroutineContext
2021-03-12 08:25:04,952 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from P
2021-03-12 08:25:04,959 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from CoroutineContext
2021-03-12 08:25:04,960 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from P
2021-03-12 08:25:04,962 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 08:25:04,963 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Function0<Unit>
2021-03-12 08:25:04,973 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Long
2021-03-12 08:25:05,007 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Continuation<Any?>
2021-03-12 08:25:05,015 [main:114] - replacement of {
        fu19(it)
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> print("pszri")}
2021-03-12 08:25:05,181 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 08:25:05,181 [main:66] - Compilation checking started
2021-03-12 08:25:05,897 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = s1 + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + " has state-machine " +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (1413011436)?.and(-1362930881).toString(P(1982725439).i) + prope16)
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:25:05,900 [main:107] - replacing (i, Int)
2021-03-12 08:25:05,900 [main:50] - replacing i Int
2021-03-12 08:25:05,900 [main:54] - Getting value of type Int
2021-03-12 08:25:06,070 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:25:06,076 [main:58] - GENERATED VALUE OF TYPE Int = -83009495
2021-03-12 08:25:06,076 [main:61] - GENERATED IS CALL =false
2021-03-12 08:25:06,088 [main:67] - randomType = Long
2021-03-12 08:25:06,252 [main:302] - generating value of type = Long true depth = 0
2021-03-12 08:25:06,286 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:25:06,287 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12f81d09]
2021-03-12 08:25:06,451 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:25:06,457 [main:78] - Generated call from random type = (6404370666438918469).toInt().compareTo(37)
2021-03-12 08:25:06,458 [main:106] - GETTING Int from Any?
2021-03-12 08:25:06,461 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Any?.hashCode(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@338e0952]]
2021-03-12 08:25:06,461 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Any?.hashCode(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@338e0952]
2021-03-12 08:25:06,462 [main:117] - GENERATED CALL = (Kla1().prope5).hashCode()
2021-03-12 08:25:06,462 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@4ad177f3], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]]
2021-03-12 08:25:06,462 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@4ad177f3]
2021-03-12 08:25:06,462 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:25:06,462 [main:117] - GENERATED CALL = (Kla1().prope5).equals(Kla1().prope5).compareTo(Kla4().prope8)
2021-03-12 08:25:06,462 [main:114] - replacement of i of type Int is (Kla1().prope5).equals(Kla1().prope5).compareTo(Kla4().prope8)
2021-03-12 08:25:06,626 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:25:06,627 [main:66] - Compilation checking started
2021-03-12 08:25:07,149 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = s1 + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + " has state-machine " +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + (Kla1().prope5).equals(Kla1().prope5).compareTo(Kla4().prope8) + (1413011436)?.and(-1362930881).toString(P(1982725439).i) + prope16)
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:25:07,151 [main:107] - replacing (getOrThrow(), Ty1)
2021-03-12 08:25:07,151 [main:50] - replacing getOrThrow() Ty1
2021-03-12 08:25:07,152 [main:54] - Getting value of type Ty1
2021-03-12 08:25:07,321 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-12 08:25:07,329 [main:58] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-12 08:25:07,363 [main:67] - randomType = Kla5?
2021-03-12 08:25:07,530 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 08:25:07,535 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}
2021-03-12 08:25:07,554 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 08:25:07,559 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 08:25:07,560 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 08:25:07,561 [main:106] - GETTING Ty1 from Int
2021-03-12 08:25:07,590 [main:106] - GETTING Ty1 from Any?
2021-03-12 08:25:07,593 [main:106] - GETTING Ty1 from Continuation<Kla4>
2021-03-12 08:25:07,600 [main:106] - GETTING Ty1 from String
2021-03-12 08:25:07,618 [main:106] - GETTING Ty1 from Long
2021-03-12 08:25:07,657 [main:106] - GETTING Ty1 from Int
2021-03-12 08:25:07,658 [main:106] - GETTING Ty1 from EmptyCoroutineContext
2021-03-12 08:25:07,679 [main:106] - GETTING Ty1 from String
2021-03-12 08:25:07,680 [main:106] - GETTING Ty1 from P
2021-03-12 08:25:07,685 [main:106] - GETTING Ty1 from Function0<Unit>
2021-03-12 08:25:07,694 [main:106] - GETTING Ty1 from Boolean
2021-03-12 08:25:07,701 [main:106] - GETTING Ty1 from P
2021-03-12 08:25:07,702 [main:106] - GETTING Ty1 from Continuation<Any?>
2021-03-12 08:25:07,709 [main:106] - GETTING Ty1 from Int
2021-03-12 08:25:07,709 [main:111] - Cant find and generate replacement for getOrThrow() type Ty1
2021-03-12 08:25:07,709 [main:107] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i, String)
2021-03-12 08:25:07,709 [main:50] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i String
2021-03-12 08:25:07,709 [main:54] - Getting value of type String
2021-03-12 08:25:07,875 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:25:07,881 [main:58] - GENERATED VALUE OF TYPE String = "wdrbx"
2021-03-12 08:25:07,881 [main:61] - GENERATED IS CALL =false
2021-03-12 08:25:08,102 [main:67] - randomType = P?
2021-03-12 08:25:08,272 [main:302] - generating value of type = P false depth = 0
2021-03-12 08:25:08,278 [main:112] - generating klass P text = inline class P(val i: Int)
2021-03-12 08:25:08,443 [main:194] - Type params = []
2021-03-12 08:25:08,607 [main:302] - generating value of type = Int true depth = 2
2021-03-12 08:25:08,618 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:25:08,618 [main:78] - Generated call from random type = (P(-1678046396))?.i.toString(P(1982725439).i)
2021-03-12 08:25:08,619 [main:106] - GETTING String from EmptyCoroutineContext
2021-03-12 08:25:08,632 [main:106] - GETTING String from P
2021-03-12 08:25:08,636 [main:113] - Case = [public final val i: kotlin.Int defined in a.P[PropertyDescriptorImpl@29bbec59], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:25:08,636 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:25:08,801 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:25:08,807 [main:117] - GENERATED CALL = (P(1118931594)).i.toString(-2122734678)
2021-03-12 08:25:08,807 [main:114] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i of type String is (P(-1678046396))?.i.toString(P(1982725439).i)
2021-03-12 08:25:08,971 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:25:08,971 [main:66] - Compilation checking started
2021-03-12 08:25:09,673 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = s1 + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + " has state-machine " +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope16 != i) error((P(-1678046396))?.i.toString(P(1982725439).i) + (1413011436)?.and(-1362930881).toString(P(1982725439).i) + prope16)
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:25:09,675 [main:107] - replacing (numberOfSuspensions, Int)
2021-03-12 08:25:09,676 [main:50] - replacing numberOfSuspensions Int
2021-03-12 08:25:09,676 [main:54] - Getting value of type Int
2021-03-12 08:25:09,843 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:25:09,848 [main:58] - GENERATED VALUE OF TYPE Int = -111935996
2021-03-12 08:25:09,848 [main:61] - GENERATED IS CALL =false
2021-03-12 08:25:09,860 [main:67] - randomType = UShort
2021-03-12 08:25:10,026 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 08:25:10,057 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@73a348cc]
2021-03-12 08:25:10,223 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 08:25:10,228 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7118ba4d]
2021-03-12 08:25:10,393 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:25:10,399 [main:78] - Generated call from random type = (8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)
2021-03-12 08:25:10,399 [main:114] - replacement of numberOfSuspensions of type Int is (8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)
2021-03-12 08:25:10,564 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:25:10,564 [main:66] - Compilation checking started
2021-03-12 08:25:11,302 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = s1 + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + " has state-machine " +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if (prope16 != i) error((P(-1678046396))?.i.toString(P(1982725439).i) + (1413011436)?.and(-1362930881).toString(P(1982725439).i) + prope16)
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:25:11,304 [main:107] - replacing (s1, String)
2021-03-12 08:25:11,304 [main:50] - replacing s1 String
2021-03-12 08:25:11,304 [main:54] - Getting value of type String
2021-03-12 08:25:11,473 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:25:11,479 [main:58] - GENERATED VALUE OF TYPE String = "ktphu"
2021-03-12 08:25:11,480 [main:61] - GENERATED IS CALL =false
2021-03-12 08:25:11,503 [main:67] - randomType = Kla1
2021-03-12 08:25:11,671 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 08:25:11,677 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}
2021-03-12 08:25:11,690 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@76b34e5]
2021-03-12 08:25:11,691 [main:78] - Generated call from random type = (Kla1()).prope5?.toString()!!
2021-03-12 08:25:11,692 [main:106] - GETTING String from CoroutineContext
2021-03-12 08:25:11,697 [main:106] - GETTING String from Int
2021-03-12 08:25:11,726 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:25:11,726 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:25:11,726 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:25:11,895 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:25:11,901 [main:117] - GENERATED CALL = ((P(1118931594).i)).toInt().toString(-118984644)
2021-03-12 08:25:11,901 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]]
2021-03-12 08:25:11,901 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b]
2021-03-12 08:25:11,901 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]
2021-03-12 08:25:11,901 [main:117] - GENERATED CALL = ((P(1118931594).i)).toByte().toString(P(1982725439).i)
2021-03-12 08:25:11,901 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:25:11,902 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f]
2021-03-12 08:25:11,902 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:25:12,070 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:25:12,075 [main:117] - GENERATED CALL = ((P(1118931594).i)).toLong().toString(504164982)
2021-03-12 08:25:12,076 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]]
2021-03-12 08:25:12,076 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d]
2021-03-12 08:25:12,076 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]
2021-03-12 08:25:12,076 [main:117] - GENERATED CALL = ((P(1118931594).i)).toShort().toString(P(1118931594).i)
2021-03-12 08:25:12,076 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]]
2021-03-12 08:25:12,076 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:25:12,076 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]
2021-03-12 08:25:12,245 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:25:12,251 [main:117] - GENERATED CALL = ((P(1118931594).i)).toChar().plus("vxarh")
2021-03-12 08:25:12,251 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]]
2021-03-12 08:25:12,251 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:25:12,251 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]
2021-03-12 08:25:12,251 [main:117] - GENERATED CALL = ((P(1118931594).i)).toChar().lowercase()
2021-03-12 08:25:12,251 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]]
2021-03-12 08:25:12,251 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:25:12,251 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]
2021-03-12 08:25:12,251 [main:117] - GENERATED CALL = ((P(1118931594).i)).toChar().titlecase()
2021-03-12 08:25:12,251 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:25:12,251 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4]
2021-03-12 08:25:12,252 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:25:12,252 [main:117] - GENERATED CALL = ((P(1118931594).i)).div((P(1118931594).i).div(-6350246603923996636)).toString((P(1118931594).i))
2021-03-12 08:25:12,252 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]]
2021-03-12 08:25:12,252 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:25:12,252 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]
2021-03-12 08:25:12,252 [main:117] - GENERATED CALL = ((P(1118931594).i)).toChar().uppercase()
2021-03-12 08:25:12,252 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:25:12,252 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:25:12,252 [main:117] - GENERATED CALL = ((P(1118931594).i)).toString(P(1118931594).i)
2021-03-12 08:25:12,252 [main:114] - replacement of s1 of type String is ((P(1118931594).i)).toInt().toString(-118984644)
2021-03-12 08:25:12,420 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:25:12,420 [main:66] - Compilation checking started
2021-03-12 08:25:13,152 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + " has state-machine " +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if (prope16 != i) error((P(-1678046396))?.i.toString(P(1982725439).i) + (1413011436)?.and(-1362930881).toString(P(1982725439).i) + prope16)
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:25:13,154 [main:107] - replacing ("Continuation " + c + " is not subtype of CoroutineStackFrame", String)
2021-03-12 08:25:13,154 [main:50] - replacing "Continuation " + c + " is not subtype of CoroutineStackFrame" String
2021-03-12 08:25:13,154 [main:54] - Getting value of type String
2021-03-12 08:25:13,330 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:25:13,335 [main:58] - GENERATED VALUE OF TYPE String = "nucoi"
2021-03-12 08:25:13,336 [main:61] - GENERATED IS CALL =false
2021-03-12 08:25:13,770 [main:67] - randomType = HashSet<Collection<Boolean>>
2021-03-12 08:25:13,939 [main:302] - generating value of type = HashSet<Collection<Boolean>> false depth = 0
2021-03-12 08:25:14,123 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): HashSet<Collection<Boolean>> = TODO()
2021-03-12 08:25:14,130 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): HashSet<Collection<Boolean>> = TODO()
2021-03-12 08:25:14,752 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:25:14,758 [main:302] - generating value of type = Float true depth = 3
2021-03-12 08:25:14,764 [main:95] - GENERATED = LinkedHashSet<Collection<Boolean>>(94400354, 0.7291455f)
2021-03-12 08:25:14,882 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@7c0ea1fe]
2021-03-12 08:25:14,882 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5783939e]
2021-03-12 08:25:14,882 [main:78] - Generated call from random type = (LinkedHashSet<Collection<Boolean>>(94400354, 0.7291455f)).toArray().contentDeepToString()
2021-03-12 08:25:14,883 [main:106] - GETTING String from Continuation<Kla4>
2021-03-12 08:25:14,890 [main:106] - GETTING String from Long
2021-03-12 08:25:14,917 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]]
2021-03-12 08:25:14,917 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0]
2021-03-12 08:25:14,917 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]
2021-03-12 08:25:14,918 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toChar().titlecase()
2021-03-12 08:25:14,918 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:25:14,918 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:25:14,918 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:25:15,085 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:25:15,091 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730)
2021-03-12 08:25:15,091 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@283d49e5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:25:15,091 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@283d49e5]
2021-03-12 08:25:15,260 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:25:15,266 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:25:15,266 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).compareTo(-108).toString(P(1118931594).i)
2021-03-12 08:25:15,266 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@46c9e88a], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]]
2021-03-12 08:25:15,266 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@46c9e88a]
2021-03-12 08:25:15,266 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]
2021-03-12 08:25:15,266 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toShort().toString(P(1118931594).i)
2021-03-12 08:25:15,266 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]]
2021-03-12 08:25:15,266 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0]
2021-03-12 08:25:15,266 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]
2021-03-12 08:25:15,433 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:25:15,439 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toChar().plus("nzykp")
2021-03-12 08:25:15,439 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:25:15,439 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:25:15,440 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toString(P(1118931594).i)
2021-03-12 08:25:15,440 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@53131125], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]]
2021-03-12 08:25:15,440 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@53131125]
2021-03-12 08:25:15,440 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]
2021-03-12 08:25:15,440 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toByte().toString(P(1118931594).i)
2021-03-12 08:25:15,440 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:25:15,440 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f]
2021-03-12 08:25:15,440 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:25:15,440 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i))
2021-03-12 08:25:15,440 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]]
2021-03-12 08:25:15,440 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0]
2021-03-12 08:25:15,440 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]
2021-03-12 08:25:15,441 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toChar().uppercase()
2021-03-12 08:25:15,441 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]]
2021-03-12 08:25:15,441 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0]
2021-03-12 08:25:15,441 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]
2021-03-12 08:25:15,441 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toChar().lowercase()
2021-03-12 08:25:15,441 [main:114] - replacement of "Continuation " + c + " is not subtype of CoroutineStackFrame" of type String is ((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730)
2021-03-12 08:25:15,607 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:25:15,608 [main:66] - Compilation checking started
2021-03-12 08:25:16,315 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + " has state-machine " +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if (prope16 != i) error((P(-1678046396))?.i.toString(P(1982725439).i) + (1413011436)?.and(-1362930881).toString(P(1982725439).i) + prope16)
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:25:16,317 [main:107] - replacing ((P(-1678046396))?.i.toString(P(1982725439).i) + (1413011436)?.and(-1362930881).toString(P(1982725439).i) + prope16, String)
2021-03-12 08:25:16,318 [main:50] - replacing (P(-1678046396))?.i.toString(P(1982725439).i) + (1413011436)?.and(-1362930881).toString(P(1982725439).i) + prope16 String
2021-03-12 08:25:16,318 [main:54] - Getting value of type String
2021-03-12 08:25:16,489 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:25:16,495 [main:58] - GENERATED VALUE OF TYPE String = "whkxg"
2021-03-12 08:25:16,495 [main:61] - GENERATED IS CALL =false
2021-03-12 08:25:16,507 [main:67] - randomType = String
2021-03-12 08:25:16,676 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:25:16,699 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a66aef2]
2021-03-12 08:25:16,699 [main:78] - Generated call from random type = ("gfncz").take(P(1982725439).i)
2021-03-12 08:25:16,700 [main:106] - GETTING String from CoroutineContext
2021-03-12 08:25:16,705 [main:106] - GETTING String from Continuation<Kla4>
2021-03-12 08:25:16,712 [main:106] - GETTING String from Function0<Unit>
2021-03-12 08:25:16,720 [main:106] - GETTING String from Continuation<Any?>
2021-03-12 08:25:16,727 [main:106] - GETTING String from Long
2021-03-12 08:25:16,754 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]]
2021-03-12 08:25:16,754 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0]
2021-03-12 08:25:16,754 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]
2021-03-12 08:25:16,754 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toChar().lowercase()
2021-03-12 08:25:16,754 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:25:16,754 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:25:16,755 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toString((P(1118931594).i))
2021-03-12 08:25:16,755 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@283d49e5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:25:16,755 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@283d49e5]
2021-03-12 08:25:16,923 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:25:16,929 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:25:16,929 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).compareTo(-32).toString((P(1118931594).i))
2021-03-12 08:25:16,929 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]]
2021-03-12 08:25:16,929 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0]
2021-03-12 08:25:16,929 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]
2021-03-12 08:25:17,097 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:25:17,103 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toChar().plus("nejwv")
2021-03-12 08:25:17,103 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]]
2021-03-12 08:25:17,103 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0]
2021-03-12 08:25:17,103 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]
2021-03-12 08:25:17,103 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toChar().titlecase()
2021-03-12 08:25:17,103 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:25:17,103 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:25:17,103 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:25:17,271 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:25:17,277 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toInt().toString(729904495)
2021-03-12 08:25:17,277 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]]
2021-03-12 08:25:17,277 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0]
2021-03-12 08:25:17,277 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]
2021-03-12 08:25:17,277 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toChar().uppercase()
2021-03-12 08:25:17,277 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:25:17,277 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f]
2021-03-12 08:25:17,278 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:25:17,278 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i))
2021-03-12 08:25:17,278 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@53131125], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]]
2021-03-12 08:25:17,278 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@53131125]
2021-03-12 08:25:17,278 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]
2021-03-12 08:25:17,446 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:25:17,452 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toByte().toString(57554238)
2021-03-12 08:25:17,452 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@46c9e88a], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]]
2021-03-12 08:25:17,452 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@46c9e88a]
2021-03-12 08:25:17,452 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]
2021-03-12 08:25:17,452 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toShort().toString(P(1982725439).i)
2021-03-12 08:25:17,452 [main:114] - replacement of (P(-1678046396))?.i.toString(P(1982725439).i) + (1413011436)?.and(-1362930881).toString(P(1982725439).i) + prope16 of type String is ((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i))
2021-03-12 08:25:17,621 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:25:17,622 [main:66] - Compilation checking started
2021-03-12 08:25:18,325 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + " has state-machine " +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if (prope16 != i) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:25:18,327 [main:107] - replacing (prope12.prope17, Boolean)
2021-03-12 08:25:18,328 [main:50] - replacing prope12.prope17 Boolean
2021-03-12 08:25:18,328 [main:54] - Getting value of type Boolean
2021-03-12 08:25:18,520 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:25:18,526 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 08:25:18,526 [main:61] - GENERATED IS CALL =false
2021-03-12 08:25:18,549 [main:67] - randomType = Kla5
2021-03-12 08:25:18,716 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 08:25:18,721 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}
2021-03-12 08:25:18,739 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in a.Kla5[DeserializedSimpleFunctionDescriptor@5022a76f]
2021-03-12 08:25:18,739 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]
2021-03-12 08:25:18,739 [main:78] - Generated call from random type = (Kla5).equals(Kla1().prope5).and(Kla4().prope8)
2021-03-12 08:25:18,739 [main:114] - replacement of prope12.prope17 of type Boolean is (Kla5).equals(Kla1().prope5).and(Kla4().prope8)
2021-03-12 08:25:18,907 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:25:18,907 [main:66] - Compilation checking started
2021-03-12 08:25:19,398 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + " has state-machine " +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if (prope16 != i) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope12.prope18 = {
            (Kla5).equals(Kla1().prope5).and(Kla4().prope8) = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:25:19,400 [main:107] - replacing (prope16, Int)
2021-03-12 08:25:19,400 [main:50] - replacing prope16 Int
2021-03-12 08:25:19,400 [main:54] - Getting value of type Int
2021-03-12 08:25:19,569 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:25:19,574 [main:58] - GENERATED VALUE OF TYPE Int = -512400054
2021-03-12 08:25:19,574 [main:61] - GENERATED IS CALL =false
2021-03-12 08:25:19,586 [main:67] - randomType = UShort
2021-03-12 08:25:19,755 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 08:25:19,787 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@1e459e6d]
2021-03-12 08:25:19,787 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2c5f3b12]
2021-03-12 08:25:19,788 [main:78] - Generated call from random type = (26604.toUShort()).toFloat().toRawBits()
2021-03-12 08:25:19,788 [main:106] - GETTING Int from CoroutineContext
2021-03-12 08:25:19,793 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3fc58f8e], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]]
2021-03-12 08:25:19,793 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3fc58f8e]
2021-03-12 08:25:19,961 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:25:19,962 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:25:19,962 [main:117] - GENERATED CALL = (Kla0().context).equals("nedaj").compareTo(Kla4().prope8)
2021-03-12 08:25:19,962 [main:114] - replacement of prope16 of type Int is -512400054
2021-03-12 08:25:20,130 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 08:25:20,131 [main:66] - Compilation checking started
2021-03-12 08:25:20,837 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + " has state-machine " +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if (-512400054 != i) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope12.prope18 = {
            prope12.prope17 = true
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:25:20,839 [main:107] - replacing (true, Boolean)
2021-03-12 08:25:20,839 [main:50] - replacing true Boolean
2021-03-12 08:25:20,839 [main:54] - Getting value of type Boolean
2021-03-12 08:25:21,007 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:25:21,013 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 08:25:21,013 [main:61] - GENERATED IS CALL =false
2021-03-12 08:25:21,036 [main:67] - randomType = Kla7
2021-03-12 08:25:21,203 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 08:25:21,209 [main:112] - generating klass Kla7 text = open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}
2021-03-12 08:25:21,384 [main:194] - Type params = []
2021-03-12 08:25:21,552 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 08:25:21,727 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:25:21,734 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:25:22,133 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 08:25:22,353 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:25:22,360 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:25:22,971 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:25:22,971 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:25:22,982 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in a.Kla7[DeserializedSimpleFunctionDescriptor@1f49fb60]
2021-03-12 08:25:22,983 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]
2021-03-12 08:25:22,983 [main:78] - Generated call from random type = (Kla7()).equals(Kla1().prope5).xor(Kla4().prope8)
2021-03-12 08:25:22,984 [main:106] - GETTING Boolean from Long
2021-03-12 08:25:23,011 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51157c88]]
2021-03-12 08:25:23,011 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0]
2021-03-12 08:25:23,011 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51157c88]
2021-03-12 08:25:23,012 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toChar().isDigit()
2021-03-12 08:25:23,012 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@418eed39], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]]
2021-03-12 08:25:23,012 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@418eed39]
2021-03-12 08:25:23,012 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]
2021-03-12 08:25:23,012 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).equals(Kla1().prope5).not()
2021-03-12 08:25:23,012 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.LongRange defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@546adc8f], public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.LongRange[DeserializedSimpleFunctionDescriptor@4069f369]]
2021-03-12 08:25:23,012 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.LongRange defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@546adc8f]
2021-03-12 08:25:23,181 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:25:23,187 [main:149] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.LongRange[DeserializedSimpleFunctionDescriptor@4069f369]
2021-03-12 08:25:23,187 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).rangeTo(-2).isEmpty()
2021-03-12 08:25:23,187 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@418eed39]]
2021-03-12 08:25:23,187 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@418eed39]
2021-03-12 08:25:23,187 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).equals(Kla1().prope5)
2021-03-12 08:25:23,187 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@706b2ff0], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@20dc6cfe]]
2021-03-12 08:25:23,187 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@706b2ff0]
2021-03-12 08:25:23,187 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@20dc6cfe]
2021-03-12 08:25:23,187 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toDouble().isNaN()
2021-03-12 08:25:23,187 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@489f7c16]]
2021-03-12 08:25:23,187 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0]
2021-03-12 08:25:23,188 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@489f7c16]
2021-03-12 08:25:23,188 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toChar().isLetterOrDigit()
2021-03-12 08:25:23,188 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@706b2ff0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@31fdc6f6]]
2021-03-12 08:25:23,188 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@706b2ff0]
2021-03-12 08:25:23,188 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@31fdc6f6]
2021-03-12 08:25:23,188 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toDouble().equals(Kla1().prope5)
2021-03-12 08:25:23,188 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.LongRange defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@546adc8f], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.LongRange.contains(element: kotlin.Long?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@ad194d1]]
2021-03-12 08:25:23,188 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.LongRange defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@546adc8f]
2021-03-12 08:25:23,356 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:25:23,361 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.LongRange.contains(element: kotlin.Long?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@ad194d1]
2021-03-12 08:25:23,530 [main:302] - generating value of type = Long true depth = 0
2021-03-12 08:25:23,536 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).rangeTo(-58).contains(-590713701211105927)
2021-03-12 08:25:23,536 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.LongRange defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@546adc8f], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.LongRange[DeserializedSimpleFunctionDescriptor@94e72e6]]
2021-03-12 08:25:23,536 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.LongRange defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@546adc8f]
2021-03-12 08:25:23,705 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:25:23,710 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.LongRange[DeserializedSimpleFunctionDescriptor@94e72e6]
2021-03-12 08:25:23,711 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).rangeTo(87).equals(Kla1().prope5)
2021-03-12 08:25:23,711 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e0ee1d2]]
2021-03-12 08:25:23,711 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0]
2021-03-12 08:25:23,711 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e0ee1d2]
2021-03-12 08:25:23,711 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toChar().isWhitespace()
2021-03-12 08:25:23,711 [main:114] - replacement of true of type Boolean is ((P(1118931594).i).div(-6350246603923996636)).toChar().isDigit()
2021-03-12 08:25:23,879 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:25:23,879 [main:66] - Compilation checking started
2021-03-12 08:25:24,581 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + " has state-machine " +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if (-512400054 != i) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope12.prope18 = {
            prope12.prope17 = ((P(1118931594).i).div(-6350246603923996636)).toChar().isDigit()
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:25:24,584 [main:107] - replacing (" has state-machine ", String)
2021-03-12 08:25:24,584 [main:50] - replacing " has state-machine " String
2021-03-12 08:25:24,584 [main:54] - Getting value of type String
2021-03-12 08:25:24,755 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:25:24,761 [main:58] - GENERATED VALUE OF TYPE String = "kfsqa"
2021-03-12 08:25:24,761 [main:61] - GENERATED IS CALL =false
2021-03-12 08:25:24,966 [main:67] - randomType = Byte
2021-03-12 08:25:25,137 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:25:25,173 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@194d90ea]
2021-03-12 08:25:25,343 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:25:25,349 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:25:25,349 [main:78] - Generated call from random type = (18).compareTo(55).toString((P(1118931594).i))
2021-03-12 08:25:25,349 [main:114] - replacement of " has state-machine " of type String is (18).compareTo(55).toString((P(1118931594).i))
2021-03-12 08:25:25,518 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:25:25,519 [main:66] - Compilation checking started
2021-03-12 08:25:26,250 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if (-512400054 != i) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope12.prope18 = {
            prope12.prope17 = ((P(1118931594).i).div(-6350246603923996636)).toChar().isDigit()
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:25:26,252 [main:107] - replacing (Kla7, Kla13)
2021-03-12 08:25:26,253 [main:50] - replacing Kla7 Kla13
2021-03-12 08:25:26,253 [main:54] - Getting value of type Kla13
2021-03-12 08:25:26,424 [main:302] - generating value of type = Kla13 false depth = 0
2021-03-12 08:25:26,430 [main:112] - generating klass Kla13 text = companion object Kla13 : Kla7()
2021-03-12 08:25:26,430 [main:58] - GENERATED VALUE OF TYPE Kla13 = 
2021-03-12 08:25:27,312 [main:67] - randomType = LinkedHashMap<Char, LinkedHashSet<String?>?>
2021-03-12 08:25:27,483 [main:302] - generating value of type = LinkedHashMap<Char, LinkedHashSet<String?>?> false depth = 0
2021-03-12 08:25:27,664 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Char, LkedHashSet<Strg?>?> = TODO()
2021-03-12 08:25:27,672 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Char, LkedHashSet<Strg?>?> = TODO()
2021-03-12 08:25:27,855 [main:95] - GENERATED = linkedMapOf<Char, LinkedHashSet<String?>?>()
2021-03-12 08:25:28,007 [main:106] - GETTING Kla13 from Long
2021-03-12 08:25:28,035 [main:106] - GETTING Kla13 from Continuation<Any?>
2021-03-12 08:25:28,042 [main:106] - GETTING Kla13 from CoroutineContext
2021-03-12 08:25:28,047 [main:106] - GETTING Kla13 from Boolean
2021-03-12 08:25:28,055 [main:106] - GETTING Kla13 from CoroutineContext
2021-03-12 08:25:28,056 [main:106] - GETTING Kla13 from P
2021-03-12 08:25:28,060 [main:106] - GETTING Kla13 from EmptyCoroutineContext
2021-03-12 08:25:28,073 [main:106] - GETTING Kla13 from CoroutineContext
2021-03-12 08:25:28,074 [main:106] - GETTING Kla13 from Any?
2021-03-12 08:25:28,077 [main:106] - GETTING Kla13 from Int
2021-03-12 08:25:28,109 [main:106] - GETTING Kla13 from Continuation<Kla4>
2021-03-12 08:25:28,116 [main:106] - GETTING Kla13 from Int
2021-03-12 08:25:28,116 [main:106] - GETTING Kla13 from String
2021-03-12 08:25:28,133 [main:106] - GETTING Kla13 from P
2021-03-12 08:25:28,133 [main:106] - GETTING Kla13 from Function0<Unit>
2021-03-12 08:25:28,142 [main:106] - GETTING Kla13 from Int
2021-03-12 08:25:28,142 [main:106] - GETTING Kla13 from String
2021-03-12 08:25:28,142 [main:111] - Cant find and generate replacement for Kla7 type Kla13
2021-03-12 08:25:28,142 [main:107] - replacing (prope17, Boolean)
2021-03-12 08:25:28,143 [main:50] - replacing prope17 Boolean
2021-03-12 08:25:28,143 [main:54] - Getting value of type Boolean
2021-03-12 08:25:28,315 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:25:28,321 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 08:25:28,321 [main:61] - GENERATED IS CALL =false
2021-03-12 08:25:29,182 [main:67] - randomType = Collection<Function1<Kla12, Float>>
2021-03-12 08:25:29,182 [main:106] - GETTING Boolean from Boolean
2021-03-12 08:25:29,194 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]]
2021-03-12 08:25:29,194 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]
2021-03-12 08:25:29,195 [main:117] - GENERATED CALL = (Kla4().prope8).equals(Kla1().prope5)
2021-03-12 08:25:29,195 [main:113] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]]
2021-03-12 08:25:29,195 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]
2021-03-12 08:25:29,195 [main:117] - GENERATED CALL = (Kla4().prope8).xor(Kla4().prope8)
2021-03-12 08:25:29,195 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]]
2021-03-12 08:25:29,195 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6]
2021-03-12 08:25:29,371 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:25:29,371 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]
2021-03-12 08:25:29,371 [main:117] - GENERATED CALL = (Kla4().prope8).equals("gciji").xor(Kla4().prope8)
2021-03-12 08:25:29,371 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]]
2021-03-12 08:25:29,371 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6]
2021-03-12 08:25:29,372 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]
2021-03-12 08:25:29,372 [main:117] - GENERATED CALL = (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5)
2021-03-12 08:25:29,372 [main:113] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]]
2021-03-12 08:25:29,372 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]
2021-03-12 08:25:29,372 [main:117] - GENERATED CALL = (Kla4().prope8).or(Kla4().prope8)
2021-03-12 08:25:29,372 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]]
2021-03-12 08:25:29,372 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:25:29,372 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]
2021-03-12 08:25:29,547 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:25:29,547 [main:117] - GENERATED CALL = (Kla4().prope8).compareTo(Kla4().prope8).equals("tscsi")
2021-03-12 08:25:29,547 [main:113] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]]
2021-03-12 08:25:29,547 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]
2021-03-12 08:25:29,547 [main:117] - GENERATED CALL = (Kla4().prope8).not()
2021-03-12 08:25:29,548 [main:113] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]]
2021-03-12 08:25:29,548 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]
2021-03-12 08:25:29,548 [main:117] - GENERATED CALL = (Kla4().prope8).and(Kla4().prope8)
2021-03-12 08:25:29,548 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]]
2021-03-12 08:25:29,548 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6]
2021-03-12 08:25:29,548 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]
2021-03-12 08:25:29,548 [main:117] - GENERATED CALL = (Kla4().prope8).equals(Kla1().prope5).not()
2021-03-12 08:25:29,548 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]]
2021-03-12 08:25:29,548 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6]
2021-03-12 08:25:29,548 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]
2021-03-12 08:25:29,549 [main:117] - GENERATED CALL = (Kla4().prope8).equals(Kla1().prope5).or(Kla4().prope8)
2021-03-12 08:25:29,549 [main:114] - replacement of prope17 of type Boolean is (Kla4().prope8).equals(Kla1().prope5)
2021-03-12 08:25:29,720 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:25:29,720 [main:66] - Compilation checking started
2021-03-12 08:25:30,246 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = 0
        (Kla4().prope8).equals(Kla1().prope5) = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if (-512400054 != i) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope12.prope18 = {
            prope12.prope17 = ((P(1118931594).i).div(-6350246603923996636)).toChar().isDigit()
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:25:30,248 [main:107] - replacing (prope12.prope17, Boolean)
2021-03-12 08:25:30,248 [main:50] - replacing prope12.prope17 Boolean
2021-03-12 08:25:30,248 [main:54] - Getting value of type Boolean
2021-03-12 08:25:30,421 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:25:30,427 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 08:25:30,427 [main:61] - GENERATED IS CALL =false
2021-03-12 08:25:30,659 [main:67] - randomType = LinkedHashSet<Kla1>
2021-03-12 08:25:30,831 [main:302] - generating value of type = LinkedHashSet<Kla1> false depth = 0
2021-03-12 08:25:31,012 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Kla1): LkedHashSet<Kla1> = TODO()
2021-03-12 08:25:31,019 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Kla1): LkedHashSet<Kla1> = TODO()
2021-03-12 08:25:31,203 [main:302] - generating value of type = Kla1 false depth = 3
2021-03-12 08:25:31,210 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}
2021-03-12 08:25:31,210 [main:95] - GENERATED = linkedSetOf<Kla1>(Kla1())
2021-03-12 08:25:31,320 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@23c34597]
2021-03-12 08:25:31,320 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public infix fun <T> kotlin.Array<out T>.contentDeepEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@261052ac]
2021-03-12 08:25:31,493 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-12 08:25:31,674 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-12 08:25:31,681 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-12 08:25:31,866 [main:302] - generating value of type = T false depth = 3
2021-03-12 08:25:32,058 [main:43] - GENERATING CALL OF fun <T> suspendCoroutine(block: (kotlin.coroutines.Continuation<Char>)->kotlin.Unit): T = TODO()
2021-03-12 08:25:32,065 [main:61] - WITHOUT TYPE PARAMS = fun <T> suspendCoroutine(block: (kotlin.coroutines.Continuation<Char>)->kotlin.Unit): T = TODO()
2021-03-12 08:25:32,483 [main:302] - generating value of type = Function1<Continuation<Char>, Unit> false depth = 6
2021-03-12 08:25:32,489 [main:302] - generating value of type = Unit false depth = 7
2021-03-12 08:25:32,667 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:25:32,675 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:25:33,063 [main:302] - generating value of type = Any false depth = 10
2021-03-12 08:25:33,064 [main:95] - GENERATED = print("yibmz")
2021-03-12 08:25:33,064 [main:95] - GENERATED = suspendCoroutine<Char>({a: Continuation<Char> -> print("yibmz")})
2021-03-12 08:25:33,064 [main:95] - GENERATED = arrayOf<T>(suspendCoroutine<Char>({a: Continuation<Char> -> print("yibmz")}))
2021-03-12 08:25:33,064 [main:78] - Generated call from random type = (linkedSetOf<Kla1>(Kla1())).toArray().contentDeepEquals(arrayOf<T>(suspendCoroutine<Char>({a: Continuation<Char> -> print("yibmz")})))
2021-03-12 08:25:33,065 [main:106] - GETTING Boolean from P
2021-03-12 08:25:33,070 [main:113] - Case = [public final val i: kotlin.Int defined in a.P[PropertyDescriptorImpl@29bbec59], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]]
2021-03-12 08:25:33,070 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]
2021-03-12 08:25:33,242 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:25:33,242 [main:117] - GENERATED CALL = (P(P(1118931594).i)).i.equals("zvjdo")
2021-03-12 08:25:33,242 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in a.P[SimpleFunctionDescriptorImpl@47c95e52], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]]
2021-03-12 08:25:33,242 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in a.P[SimpleFunctionDescriptorImpl@47c95e52]
2021-03-12 08:25:33,413 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:25:33,413 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]
2021-03-12 08:25:33,413 [main:117] - GENERATED CALL = (P(P(1118931594).i)).equals("ubzxq").equals(Kla1().prope5)
2021-03-12 08:25:33,413 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in a.P[SimpleFunctionDescriptorImpl@47c95e52], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]]
2021-03-12 08:25:33,413 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in a.P[SimpleFunctionDescriptorImpl@47c95e52]
2021-03-12 08:25:33,413 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]
2021-03-12 08:25:33,585 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:25:33,591 [main:117] - GENERATED CALL = (P(P(1118931594).i)).equals(Kla1().prope5).xor(true)
2021-03-12 08:25:33,592 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in a.P[SimpleFunctionDescriptorImpl@47c95e52], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]]
2021-03-12 08:25:33,592 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in a.P[SimpleFunctionDescriptorImpl@47c95e52]
2021-03-12 08:25:33,789 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:25:33,789 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]
2021-03-12 08:25:33,789 [main:117] - GENERATED CALL = (P(P(1118931594).i)).equals("wncco").not()
2021-03-12 08:25:33,790 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in a.P[SimpleFunctionDescriptorImpl@47c95e52]]
2021-03-12 08:25:33,790 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in a.P[SimpleFunctionDescriptorImpl@47c95e52]
2021-03-12 08:25:33,790 [main:117] - GENERATED CALL = (P(P(1118931594).i)).equals(Kla1().prope5)
2021-03-12 08:25:33,790 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in a.P[SimpleFunctionDescriptorImpl@47c95e52], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]]
2021-03-12 08:25:33,790 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in a.P[SimpleFunctionDescriptorImpl@47c95e52]
2021-03-12 08:25:33,790 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]
2021-03-12 08:25:33,790 [main:117] - GENERATED CALL = (P(P(1118931594).i)).equals(Kla1().prope5).or(Kla4().prope8)
2021-03-12 08:25:33,790 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in a.P[SimpleFunctionDescriptorImpl@47c95e52], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]]
2021-03-12 08:25:33,790 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in a.P[SimpleFunctionDescriptorImpl@47c95e52]
2021-03-12 08:25:33,790 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]
2021-03-12 08:25:33,963 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:25:33,969 [main:117] - GENERATED CALL = (P(P(1118931594).i)).equals(Kla1().prope5).and(true)
2021-03-12 08:25:33,969 [main:114] - replacement of prope12.prope17 of type Boolean is (P(P(1118931594).i)).equals(Kla1().prope5).or(Kla4().prope8)
2021-03-12 08:25:34,141 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:25:34,142 [main:66] - Compilation checking started
2021-03-12 08:25:34,644 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(prope14.exceptionOrNull()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if (-512400054 != i) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope12.prope18 = {
            (P(P(1118931594).i)).equals(Kla1().prope5).or(Kla4().prope8) = ((P(1118931594).i).div(-6350246603923996636)).toChar().isDigit()
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:25:34,647 [main:107] - replacing (prope14.exceptionOrNull(), Throwable?)
2021-03-12 08:25:34,648 [main:50] - replacing prope14.exceptionOrNull() Throwable?
2021-03-12 08:25:34,648 [main:54] - Getting value of type Throwable?
2021-03-12 08:25:34,857 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 08:25:34,866 [main:58] - GENERATED VALUE OF TYPE Throwable? = IllegalStateException()
2021-03-12 08:25:34,866 [main:61] - GENERATED IS CALL =true
2021-03-12 08:25:35,282 [main:67] - randomType = ULong?
2021-03-12 08:25:35,453 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 08:25:35,488 [main:106] - GETTING Throwable? from String
2021-03-12 08:25:35,505 [main:106] - GETTING Throwable? from CoroutineContext
2021-03-12 08:25:35,510 [main:106] - GETTING Throwable? from String
2021-03-12 08:25:35,511 [main:106] - GETTING Throwable? from CoroutineContext
2021-03-12 08:25:35,511 [main:106] - GETTING Throwable? from Int
2021-03-12 08:25:35,541 [main:106] - GETTING Throwable? from Continuation<Kla4>
2021-03-12 08:25:35,547 [main:106] - GETTING Throwable? from EmptyCoroutineContext
2021-03-12 08:25:35,560 [main:106] - GETTING Throwable? from P
2021-03-12 08:25:35,565 [main:106] - GETTING Throwable? from Boolean
2021-03-12 08:25:35,573 [main:106] - GETTING Throwable? from Continuation<Any?>
2021-03-12 08:25:35,580 [main:106] - GETTING Throwable? from Long
2021-03-12 08:25:35,613 [main:106] - GETTING Throwable? from Function0<Unit>
2021-03-12 08:25:35,623 [main:106] - GETTING Throwable? from Any?
2021-03-12 08:25:35,627 [main:106] - GETTING Throwable? from Int
2021-03-12 08:25:35,628 [main:106] - GETTING Throwable? from Int
2021-03-12 08:25:35,628 [main:106] - GETTING Throwable? from CoroutineContext
2021-03-12 08:25:35,629 [main:106] - GETTING Throwable? from P
2021-03-12 08:25:35,629 [main:114] - replacement of prope14.exceptionOrNull() of type Throwable? is IllegalStateException()
2021-03-12 08:25:35,802 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:25:35,802 [main:66] - Compilation checking started
2021-03-12 08:25:36,543 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(IllegalStateException()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if (-512400054 != i) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope12.prope18 = {
            prope12.prope17 = ((P(1118931594).i).div(-6350246603923996636)).toChar().isDigit()
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:25:36,546 [main:107] - replacing (getOrThrow(), Any?)
2021-03-12 08:25:36,547 [main:50] - replacing getOrThrow() Any?
2021-03-12 08:25:36,547 [main:54] - Getting value of type Any?
2021-03-12 08:25:36,720 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:25:36,721 [main:58] - GENERATED VALUE OF TYPE Any? = "ztnjg"
2021-03-12 08:25:36,721 [main:61] - GENERATED IS CALL =false
2021-03-12 08:25:36,733 [main:67] - randomType = Long
2021-03-12 08:25:36,907 [main:302] - generating value of type = Long true depth = 0
2021-03-12 08:25:36,943 [main:106] - GETTING Any? from P
2021-03-12 08:25:36,948 [main:106] - GETTING Any? from Continuation<Any?>
2021-03-12 08:25:36,955 [main:106] - GETTING Any? from P
2021-03-12 08:25:36,956 [main:106] - GETTING Any? from Any?
2021-03-12 08:25:36,960 [main:106] - GETTING Any? from Int
2021-03-12 08:25:36,991 [main:106] - GETTING Any? from String
2021-03-12 08:25:37,009 [main:106] - GETTING Any? from String
2021-03-12 08:25:37,010 [main:106] - GETTING Any? from EmptyCoroutineContext
2021-03-12 08:25:37,023 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:25:37,030 [main:106] - GETTING Any? from Continuation<Kla4>
2021-03-12 08:25:37,037 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:25:37,038 [main:106] - GETTING Any? from Boolean
2021-03-12 08:25:37,046 [main:106] - GETTING Any? from Int
2021-03-12 08:25:37,047 [main:106] - GETTING Any? from Int
2021-03-12 08:25:37,048 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:25:37,049 [main:106] - GETTING Any? from Function0<Unit>
2021-03-12 08:25:37,059 [main:106] - GETTING Any? from Long
2021-03-12 08:25:37,087 [main:114] - replacement of getOrThrow() of type Any? is "ztnjg"
2021-03-12 08:25:37,262 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 08:25:37,262 [main:66] - Compilation checking started
2021-03-12 08:25:37,817 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope14."ztnjg"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(IllegalStateException()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if (-512400054 != i) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope12.prope18 = {
            prope12.prope17 = ((P(1118931594).i).div(-6350246603923996636)).toChar().isDigit()
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:25:37,819 [main:107] - replacing (prope17, Boolean)
2021-03-12 08:25:37,819 [main:50] - replacing prope17 Boolean
2021-03-12 08:25:37,819 [main:54] - Getting value of type Boolean
2021-03-12 08:25:37,992 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:25:37,998 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 08:25:37,998 [main:61] - GENERATED IS CALL =false
2021-03-12 08:25:38,010 [main:67] - randomType = Long
2021-03-12 08:25:38,184 [main:302] - generating value of type = Long true depth = 0
2021-03-12 08:25:38,219 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0]
2021-03-12 08:25:38,220 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21d5d759]
2021-03-12 08:25:38,220 [main:78] - Generated call from random type = (7551617836116072071).toChar().isLetter()
2021-03-12 08:25:38,221 [main:106] - GETTING Boolean from Any?
2021-03-12 08:25:38,223 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@4ad177f3], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]]
2021-03-12 08:25:38,223 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@4ad177f3]
2021-03-12 08:25:38,223 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]
2021-03-12 08:25:38,223 [main:117] - GENERATED CALL = (Kla1().prope5).equals(Kla1().prope5).xor(Kla4().prope8)
2021-03-12 08:25:38,223 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@4ad177f3], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]]
2021-03-12 08:25:38,223 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@4ad177f3]
2021-03-12 08:25:38,224 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]
2021-03-12 08:25:38,395 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:25:38,401 [main:117] - GENERATED CALL = (Kla1().prope5).equals(Kla1().prope5).and(true)
2021-03-12 08:25:38,402 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@4ad177f3], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]]
2021-03-12 08:25:38,402 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@4ad177f3]
2021-03-12 08:25:38,402 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]
2021-03-12 08:25:38,574 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:25:38,580 [main:117] - GENERATED CALL = (Kla1().prope5).equals(Kla1().prope5).or(true)
2021-03-12 08:25:38,580 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@4ad177f3]]
2021-03-12 08:25:38,580 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@4ad177f3]
2021-03-12 08:25:38,580 [main:117] - GENERATED CALL = (Kla1().prope5).equals(Kla1().prope5)
2021-03-12 08:25:38,580 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@4ad177f3], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]]
2021-03-12 08:25:38,580 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@4ad177f3]
2021-03-12 08:25:38,580 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]
2021-03-12 08:25:38,581 [main:117] - GENERATED CALL = (Kla1().prope5).equals(Kla1().prope5).equals(Kla1().prope5)
2021-03-12 08:25:38,581 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@4ad177f3], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]]
2021-03-12 08:25:38,581 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@4ad177f3]
2021-03-12 08:25:38,581 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]
2021-03-12 08:25:38,581 [main:117] - GENERATED CALL = (Kla1().prope5).equals(Kla1().prope5).not()
2021-03-12 08:25:38,581 [main:114] - replacement of prope17 of type Boolean is (Kla1().prope5).equals(Kla1().prope5).or(true)
2021-03-12 08:25:38,752 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:25:38,752 [main:66] - Compilation checking started
2021-03-12 08:25:39,257 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(IllegalStateException()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if (-512400054 != i) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope12.prope18 = {
            prope12.(Kla1().prope5).equals(Kla1().prope5).or(true) = ((P(1118931594).i).div(-6350246603923996636)).toChar().isDigit()
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:25:39,260 [main:107] - replacing (this.prope14, Any?)
2021-03-12 08:25:39,260 [main:50] - replacing this.prope14 Any?
2021-03-12 08:25:39,260 [main:54] - Getting value of type Any?
2021-03-12 08:25:39,433 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:25:39,433 [main:58] - GENERATED VALUE OF TYPE Any? = "rscxa"
2021-03-12 08:25:39,433 [main:61] - GENERATED IS CALL =false
2021-03-12 08:25:39,457 [main:67] - randomType = Kla5
2021-03-12 08:25:39,630 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 08:25:39,636 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}
2021-03-12 08:25:39,654 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:25:39,660 [main:106] - GETTING Any? from P
2021-03-12 08:25:39,664 [main:106] - GETTING Any? from Int
2021-03-12 08:25:39,693 [main:106] - GETTING Any? from Continuation<Kla4>
2021-03-12 08:25:39,700 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:25:39,701 [main:106] - GETTING Any? from Function0<Unit>
2021-03-12 08:25:39,709 [main:106] - GETTING Any? from Boolean
2021-03-12 08:25:39,717 [main:106] - GETTING Any? from P
2021-03-12 08:25:39,718 [main:106] - GETTING Any? from EmptyCoroutineContext
2021-03-12 08:25:39,731 [main:106] - GETTING Any? from Int
2021-03-12 08:25:39,732 [main:106] - GETTING Any? from Continuation<Any?>
2021-03-12 08:25:39,741 [main:106] - GETTING Any? from Long
2021-03-12 08:25:39,783 [main:106] - GETTING Any? from Int
2021-03-12 08:25:39,784 [main:106] - GETTING Any? from String
2021-03-12 08:25:39,801 [main:106] - GETTING Any? from Any?
2021-03-12 08:25:39,804 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:25:39,804 [main:106] - GETTING Any? from String
2021-03-12 08:25:39,804 [main:114] - replacement of this.prope14 of type Any? is "rscxa"
2021-03-12 08:25:39,976 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 08:25:39,977 [main:66] - Compilation checking started
2021-03-12 08:25:40,478 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"rscxa" = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(IllegalStateException()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if (-512400054 != i) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope12.prope18 = {
            prope12.prope17 = ((P(1118931594).i).div(-6350246603923996636)).toChar().isDigit()
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:25:40,480 [main:107] - replacing (prope14.getOrThrow(), Ty1)
2021-03-12 08:25:40,481 [main:50] - replacing prope14.getOrThrow() Ty1
2021-03-12 08:25:40,481 [main:54] - Getting value of type Ty1
2021-03-12 08:25:40,654 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-12 08:25:40,662 [main:58] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-12 08:25:41,157 [main:67] - randomType = Triple<Kla4, Long?, Double>
2021-03-12 08:25:41,358 [main:302] - generating value of type = Triple<Kla4, Long?, Double> false depth = 0
2021-03-12 08:25:41,540 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Kla4, second: Long?, third: Double): Triple<Kla4, Long?, Double> = TODO()
2021-03-12 08:25:41,548 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Kla4, second: Long?, third: Double): Triple<Kla4, Long?, Double> = TODO()
2021-03-12 08:25:41,731 [main:302] - generating value of type = Kla4 false depth = 3
2021-03-12 08:25:41,737 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}
2021-03-12 08:25:41,738 [main:302] - generating value of type = Long true depth = 3
2021-03-12 08:25:41,743 [main:302] - generating value of type = Double true depth = 3
2021-03-12 08:25:41,749 [main:95] - GENERATED = Triple<Kla4, Long?, Double>(Kla4(), -8167591225488072379, 0.032178334571788536)
2021-03-12 08:25:41,763 [main:106] - GETTING Ty1 from Boolean
2021-03-12 08:25:41,771 [main:106] - GETTING Ty1 from Int
2021-03-12 08:25:41,803 [main:106] - GETTING Ty1 from String
2021-03-12 08:25:41,819 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 08:25:41,825 [main:106] - GETTING Ty1 from Any?
2021-03-12 08:25:41,828 [main:106] - GETTING Ty1 from Continuation<Kla4>
2021-03-12 08:25:41,834 [main:106] - GETTING Ty1 from String
2021-03-12 08:25:41,835 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 08:25:41,836 [main:106] - GETTING Ty1 from Continuation<Any?>
2021-03-12 08:25:41,843 [main:106] - GETTING Ty1 from Function0<Unit>
2021-03-12 08:25:41,851 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 08:25:41,852 [main:106] - GETTING Ty1 from P
2021-03-12 08:25:41,857 [main:106] - GETTING Ty1 from Int
2021-03-12 08:25:41,857 [main:106] - GETTING Ty1 from Long
2021-03-12 08:25:41,885 [main:106] - GETTING Ty1 from EmptyCoroutineContext
2021-03-12 08:25:41,898 [main:106] - GETTING Ty1 from Int
2021-03-12 08:25:41,899 [main:106] - GETTING Ty1 from P
2021-03-12 08:25:41,899 [main:111] - Cant find and generate replacement for prope14.getOrThrow() type Ty1
2021-03-12 08:25:41,899 [main:107] - replacing (prope16, Int)
2021-03-12 08:25:41,899 [main:50] - replacing prope16 Int
2021-03-12 08:25:41,899 [main:54] - Getting value of type Int
2021-03-12 08:25:42,071 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:25:42,077 [main:58] - GENERATED VALUE OF TYPE Int = -1073715314
2021-03-12 08:25:42,077 [main:61] - GENERATED IS CALL =false
2021-03-12 08:25:42,827 [main:67] - randomType = Triple<Kla0, Double, MutableMap<Double, Kla1?>>
2021-03-12 08:25:42,999 [main:302] - generating value of type = Triple<Kla0, Double, MutableMap<Double, Kla1?>> false depth = 0
2021-03-12 08:25:43,181 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Kla0, second: Double, third: MutableMap<Double, Kla1?>): Triple<Kla0, Double, MutableMap<Double, Kla1?>> = TODO()
2021-03-12 08:25:43,188 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Kla0, second: Double, third: MutableMap<Double, Kla1?>): Triple<Kla0, Double, MutableMap<Double, Kla1?>> = TODO()
2021-03-12 08:25:43,371 [main:302] - generating value of type = Kla0 false depth = 3
2021-03-12 08:25:43,377 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}
2021-03-12 08:25:43,549 [main:194] - Type params = []
2021-03-12 08:25:43,720 [main:302] - generating value of type = CoroutineContext false depth = 5
2021-03-12 08:25:43,899 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:25:43,907 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:25:44,316 [main:302] - generating value of type = Key<*> false depth = 8
2021-03-12 08:25:44,504 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:25:44,511 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:25:45,196 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:25:45,196 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:25:45,196 [main:302] - generating value of type = Double true depth = 3
2021-03-12 08:25:45,203 [main:302] - generating value of type = MutableMap<Double, Kla1?> false depth = 3
2021-03-12 08:25:45,386 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(pairs: Pair<Double, Kla1?>): MutableMap<Double, Kla1?> = TODO()
2021-03-12 08:25:45,393 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(pairs: Pair<Double, Kla1?>): MutableMap<Double, Kla1?> = TODO()
2021-03-12 08:25:45,576 [main:302] - generating value of type = Pair<Double, Kla1?> false depth = 6
2021-03-12 08:25:45,757 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Double, second: Kla1?): Pair<Double, Kla1?> = TODO()
2021-03-12 08:25:45,764 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Double, second: Kla1?): Pair<Double, Kla1?> = TODO()
2021-03-12 08:25:45,947 [main:302] - generating value of type = Double true depth = 9
2021-03-12 08:25:45,953 [main:302] - generating value of type = Kla1 false depth = 9
2021-03-12 08:25:45,959 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}
2021-03-12 08:25:45,959 [main:95] - GENERATED = Pair<Double, Kla1?>(0.4769736180159446, Kla1())
2021-03-12 08:25:45,959 [main:95] - GENERATED = hashMapOf<Double, Kla1?>(Pair<Double, Kla1?>(0.4769736180159446, Kla1()))
2021-03-12 08:25:45,960 [main:95] - GENERATED = Triple<Kla0, Double, MutableMap<Double, Kla1?>>(Kla0(), 0.12234111535535241, hashMapOf<Double, Kla1?>(Pair<Double, Kla1?>(0.4769736180159446, Kla1())))
2021-03-12 08:25:45,976 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@73464602]
2021-03-12 08:25:45,976 [main:78] - Generated call from random type = (Triple<Kla0, Double, MutableMap<Double, Kla1?>>(Kla0(), 0.12234111535535241, hashMapOf<Double, Kla1?>(Pair<Double, Kla1?>(0.4769736180159446, Kla1())))).second.roundToInt()
2021-03-12 08:25:45,977 [main:106] - GETTING Int from String
2021-03-12 08:25:45,993 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@1b3c341c], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@19e015b2]]
2021-03-12 08:25:45,993 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@19e015b2]
2021-03-12 08:25:45,993 [main:117] - GENERATED CALL = (fu1()).length.coerceIn(P(1982725439).i, (P(1118931594).i))
2021-03-12 08:25:45,993 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@1b3c341c], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@38ea499c]]
2021-03-12 08:25:45,993 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@38ea499c]
2021-03-12 08:25:45,994 [main:117] - GENERATED CALL = (fu1()).length.inc()
2021-03-12 08:25:45,994 [main:113] - Case = [public val kotlin.CharSequence.lastIndex: kotlin.Int defined in kotlin.text[DeserializedPropertyDescriptor@49bfe257]]
2021-03-12 08:25:45,994 [main:117] - GENERATED CALL = (fu1()).lastIndex
2021-03-12 08:25:45,994 [main:113] - Case = [public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f0713e4]]
2021-03-12 08:25:45,994 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f0713e4]
2021-03-12 08:25:46,167 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 08:25:46,347 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 08:25:46,354 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 08:25:46,536 [main:302] - generating value of type = Char true depth = 3
2021-03-12 08:25:46,542 [main:95] - GENERATED = charArrayOf('Âèô')
2021-03-12 08:25:46,715 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:25:46,721 [main:117] - GENERATED CALL = (fu1()).indexOfAny(charArrayOf('Âèô'), P(1982725439).i, true)
2021-03-12 08:25:46,721 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@51835189], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@39487f70]]
2021-03-12 08:25:46,721 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@51835189]
2021-03-12 08:25:46,721 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@39487f70]
2021-03-12 08:25:46,894 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:25:46,900 [main:117] - GENERATED CALL = (fu1()).compareTo(fu1()).coerceAtMost(299525333)
2021-03-12 08:25:46,900 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@51835189], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12f81d09]]
2021-03-12 08:25:46,900 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@51835189]
2021-03-12 08:25:46,900 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12f81d09]
2021-03-12 08:25:47,071 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:25:47,078 [main:117] - GENERATED CALL = (fu1()).compareTo(fu0("ttkqh")).compareTo(41)
2021-03-12 08:25:47,078 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@51835189], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@175c25dd]]
2021-03-12 08:25:47,078 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@51835189]
2021-03-12 08:25:47,078 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@175c25dd]
2021-03-12 08:25:47,250 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:25:47,256 [main:117] - GENERATED CALL = (fu1()).compareTo(fu0("ttkqh")).div(-87)
2021-03-12 08:25:47,256 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@1b3c341c], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76b2a99c]]
2021-03-12 08:25:47,257 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76b2a99c]
2021-03-12 08:25:47,257 [main:117] - GENERATED CALL = (fu1()).length.countTrailingZeroBits()
2021-03-12 08:25:47,257 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@51835189], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76b2a99c]]
2021-03-12 08:25:47,257 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@51835189]
2021-03-12 08:25:47,257 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76b2a99c]
2021-03-12 08:25:47,257 [main:117] - GENERATED CALL = (fu1()).compareTo(fu1()).countTrailingZeroBits()
2021-03-12 08:25:47,257 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@1b3c341c], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@90001f0]]
2021-03-12 08:25:47,257 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@90001f0]
2021-03-12 08:25:47,257 [main:117] - GENERATED CALL = (fu1()).length.dec()
2021-03-12 08:25:47,257 [main:114] - replacement of prope16 of type Int is (fu1()).lastIndex
2021-03-12 08:25:47,430 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:25:47,430 [main:66] - Compilation checking started
2021-03-12 08:25:47,952 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(IllegalStateException()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(fu1()).lastIndex = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if (-512400054 != i) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope12.prope18 = {
            prope12.prope17 = ((P(1118931594).i).div(-6350246603923996636)).toChar().isDigit()
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:25:47,955 [main:107] - replacing (prope18, Function0<Unit>)
2021-03-12 08:25:47,955 [main:50] - replacing prope18 Function0<Unit>
2021-03-12 08:25:47,955 [main:54] - Getting value of type Function0<Unit>
2021-03-12 08:25:48,130 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 08:25:48,136 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:25:48,318 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 08:25:48,325 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 08:25:48,930 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 08:25:48,936 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 08:25:48,942 [main:302] - generating value of type = Any false depth = 5
2021-03-12 08:25:48,942 [main:95] - GENERATED = check(true, { "vcbyz"})
2021-03-12 08:25:48,942 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true, { "vcbyz"})}
2021-03-12 08:25:48,942 [main:61] - GENERATED IS CALL =false
2021-03-12 08:25:48,955 [main:67] - randomType = UInt
2021-03-12 08:25:49,153 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 08:25:49,186 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 08:25:49,191 [main:106] - GETTING Function0<Unit> from Continuation<Any?>
2021-03-12 08:25:49,198 [main:106] - GETTING Function0<Unit> from String
2021-03-12 08:25:49,215 [main:106] - GETTING Function0<Unit> from Any?
2021-03-12 08:25:49,218 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 08:25:49,219 [main:106] - GETTING Function0<Unit> from EmptyCoroutineContext
2021-03-12 08:25:49,233 [main:106] - GETTING Function0<Unit> from Boolean
2021-03-12 08:25:49,241 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 08:25:49,271 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 08:25:49,272 [main:106] - GETTING Function0<Unit> from P
2021-03-12 08:25:49,276 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 08:25:49,283 [main:114] - replacement of prope18 of type Function0<Unit> is { check(true, { "vcbyz"})}
2021-03-12 08:25:49,454 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 08:25:49,455 [main:66] - Compilation checking started
2021-03-12 08:25:49,959 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(IllegalStateException()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if (-512400054 != i) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope12.{ check(true, { "vcbyz"})} = {
            prope12.prope17 = ((P(1118931594).i).div(-6350246603923996636)).toChar().isDigit()
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:25:49,961 [main:107] - replacing (Kla7, Kla13)
2021-03-12 08:25:49,962 [main:50] - replacing Kla7 Kla13
2021-03-12 08:25:49,962 [main:54] - Getting value of type Kla13
2021-03-12 08:25:50,140 [main:302] - generating value of type = Kla13 false depth = 0
2021-03-12 08:25:50,146 [main:112] - generating klass Kla13 text = companion object Kla13 : Kla7()
2021-03-12 08:25:50,146 [main:58] - GENERATED VALUE OF TYPE Kla13 = 
2021-03-12 08:25:50,389 [main:67] - randomType = Kla8?
2021-03-12 08:25:50,561 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-12 08:25:50,567 [main:112] - generating klass Kla8 text = class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}
2021-03-12 08:25:50,582 [main:106] - GETTING Kla13 from EmptyCoroutineContext
2021-03-12 08:25:50,595 [main:106] - GETTING Kla13 from Continuation<Any?>
2021-03-12 08:25:50,601 [main:106] - GETTING Kla13 from Int
2021-03-12 08:25:50,630 [main:106] - GETTING Kla13 from Long
2021-03-12 08:25:50,667 [main:106] - GETTING Kla13 from Any?
2021-03-12 08:25:50,670 [main:106] - GETTING Kla13 from CoroutineContext
2021-03-12 08:25:50,676 [main:106] - GETTING Kla13 from Int
2021-03-12 08:25:50,676 [main:106] - GETTING Kla13 from String
2021-03-12 08:25:50,693 [main:106] - GETTING Kla13 from Continuation<Kla4>
2021-03-12 08:25:50,699 [main:106] - GETTING Kla13 from CoroutineContext
2021-03-12 08:25:50,700 [main:106] - GETTING Kla13 from CoroutineContext
2021-03-12 08:25:50,700 [main:106] - GETTING Kla13 from Function0<Unit>
2021-03-12 08:25:50,709 [main:106] - GETTING Kla13 from P
2021-03-12 08:25:50,713 [main:106] - GETTING Kla13 from Int
2021-03-12 08:25:50,714 [main:106] - GETTING Kla13 from String
2021-03-12 08:25:50,715 [main:106] - GETTING Kla13 from Boolean
2021-03-12 08:25:50,723 [main:106] - GETTING Kla13 from P
2021-03-12 08:25:50,723 [main:111] - Cant find and generate replacement for Kla7 type Kla13
2021-03-12 08:25:50,723 [main:107] - replacing (c !is CoroutineStackFrame, Boolean)
2021-03-12 08:25:50,723 [main:50] - replacing c !is CoroutineStackFrame Boolean
2021-03-12 08:25:50,723 [main:54] - Getting value of type Boolean
2021-03-12 08:25:50,900 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:25:50,908 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 08:25:50,908 [main:61] - GENERATED IS CALL =false
2021-03-12 08:25:50,920 [main:67] - randomType = UInt
2021-03-12 08:25:51,092 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 08:25:51,120 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@3e23e932]
2021-03-12 08:25:51,120 [main:78] - Generated call from random type = (1054586092.toUInt()).equals(Kla1().prope5)
2021-03-12 08:25:51,121 [main:106] - GETTING Boolean from Function0<Unit>
2021-03-12 08:25:51,129 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]]
2021-03-12 08:25:51,129 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602]
2021-03-12 08:25:51,129 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]
2021-03-12 08:25:51,129 [main:117] - GENERATED CALL = (Kla4().prope9).equals(Kla1().prope5).or(Kla4().prope8)
2021-03-12 08:25:51,129 [main:113] - Case = [public abstract operator fun invoke(): kotlin.Unit defined in kotlin.Function0[FunctionInvokeDescriptor@3a7c50f0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@71a9d74]]
2021-03-12 08:25:51,129 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.Unit defined in kotlin.Function0[FunctionInvokeDescriptor@3a7c50f0]
2021-03-12 08:25:51,129 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@71a9d74]
2021-03-12 08:25:51,302 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:25:51,302 [main:117] - GENERATED CALL = (Kla4().prope9).invoke().equals("mjlrp")
2021-03-12 08:25:51,302 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602]]
2021-03-12 08:25:51,302 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602]
2021-03-12 08:25:51,302 [main:117] - GENERATED CALL = (Kla4().prope9).equals(Kla1().prope5)
2021-03-12 08:25:51,302 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]]
2021-03-12 08:25:51,302 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602]
2021-03-12 08:25:51,302 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]
2021-03-12 08:25:51,302 [main:117] - GENERATED CALL = (Kla4().prope9).equals(Kla1().prope5).xor(Kla4().prope8)
2021-03-12 08:25:51,303 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]]
2021-03-12 08:25:51,303 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602]
2021-03-12 08:25:51,303 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]
2021-03-12 08:25:51,303 [main:117] - GENERATED CALL = (Kla4().prope9).equals(Kla1().prope5).equals(Kla1().prope5)
2021-03-12 08:25:51,303 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]]
2021-03-12 08:25:51,303 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602]
2021-03-12 08:25:51,303 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]
2021-03-12 08:25:51,303 [main:117] - GENERATED CALL = (Kla4().prope9).equals(Kla1().prope5).not()
2021-03-12 08:25:51,303 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]]
2021-03-12 08:25:51,303 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602]
2021-03-12 08:25:51,474 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:25:51,475 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]
2021-03-12 08:25:51,475 [main:117] - GENERATED CALL = (Kla4().prope9).equals("mfzfe").and(Kla4().prope8)
2021-03-12 08:25:51,475 [main:114] - replacement of c !is CoroutineStackFrame of type Boolean is (Kla4().prope9).equals(Kla1().prope5).or(Kla4().prope8)
2021-03-12 08:25:51,646 [main:33] - Trying to replace Element(IS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:25:51,647 [main:66] - Compilation checking started
2021-03-12 08:25:52,146 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(IllegalStateException()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if ((Kla4().prope9).equals(Kla1().prope5).or(Kla4().prope8)) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if (-512400054 != i) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope12.prope18 = {
            prope12.prope17 = ((P(1118931594).i).div(-6350246603923996636)).toChar().isDigit()
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:25:52,148 [main:107] - replacing (prope14, Any?)
2021-03-12 08:25:52,148 [main:50] - replacing prope14 Any?
2021-03-12 08:25:52,149 [main:54] - Getting value of type Any?
2021-03-12 08:25:52,320 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:25:52,320 [main:58] - GENERATED VALUE OF TYPE Any? = "poorz"
2021-03-12 08:25:52,320 [main:61] - GENERATED IS CALL =false
2021-03-12 08:25:52,332 [main:67] - randomType = Boolean
2021-03-12 08:25:52,510 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:25:52,525 [main:106] - GETTING Any? from Function0<Unit>
2021-03-12 08:25:52,533 [main:106] - GETTING Any? from Continuation<Any?>
2021-03-12 08:25:52,541 [main:106] - GETTING Any? from Int
2021-03-12 08:25:52,576 [main:106] - GETTING Any? from Boolean
2021-03-12 08:25:52,584 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:25:52,589 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:25:52,590 [main:106] - GETTING Any? from Any?
2021-03-12 08:25:52,594 [main:106] - GETTING Any? from P
2021-03-12 08:25:52,598 [main:106] - GETTING Any? from Int
2021-03-12 08:25:52,599 [main:106] - GETTING Any? from Continuation<Kla4>
2021-03-12 08:25:52,605 [main:106] - GETTING Any? from String
2021-03-12 08:25:52,622 [main:106] - GETTING Any? from Int
2021-03-12 08:25:52,622 [main:106] - GETTING Any? from EmptyCoroutineContext
2021-03-12 08:25:52,636 [main:106] - GETTING Any? from Long
2021-03-12 08:25:52,663 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:25:52,664 [main:106] - GETTING Any? from String
2021-03-12 08:25:52,665 [main:106] - GETTING Any? from P
2021-03-12 08:25:52,665 [main:114] - replacement of prope14 of type Any? is "poorz"
2021-03-12 08:25:52,857 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 08:25:52,858 [main:66] - Compilation checking started
2021-03-12 08:25:53,356 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
runCatching<Any?>({ "tvgny"}).exceptionOrNull()?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this."poorz" = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(IllegalStateException()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if (-512400054 != i) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope12.prope18 = {
            prope12.prope17 = ((P(1118931594).i).div(-6350246603923996636)).toChar().isDigit()
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:25:53,358 [main:107] - replacing (getOrThrow(), Ty1)
2021-03-12 08:25:53,358 [main:50] - replacing getOrThrow() Ty1
2021-03-12 08:25:53,358 [main:54] - Getting value of type Ty1
2021-03-12 08:25:53,531 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-12 08:25:53,539 [main:58] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-12 08:25:53,552 [main:67] - randomType = Boolean
2021-03-12 08:25:53,724 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:25:53,739 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 08:25:53,744 [main:106] - GETTING Ty1 from P
2021-03-12 08:25:53,748 [main:106] - GETTING Ty1 from Int
2021-03-12 08:25:53,779 [main:106] - GETTING Ty1 from Function0<Unit>
2021-03-12 08:25:53,787 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 08:25:53,788 [main:106] - GETTING Ty1 from Int
2021-03-12 08:25:53,789 [main:106] - GETTING Ty1 from Long
2021-03-12 08:25:53,817 [main:106] - GETTING Ty1 from Continuation<Any?>
2021-03-12 08:25:53,824 [main:106] - GETTING Ty1 from EmptyCoroutineContext
2021-03-12 08:25:53,837 [main:106] - GETTING Ty1 from Any?
2021-03-12 08:25:53,840 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 08:25:53,840 [main:106] - GETTING Ty1 from Continuation<Kla4>
2021-03-12 08:25:53,847 [main:106] - GETTING Ty1 from String
2021-03-12 08:25:53,863 [main:106] - GETTING Ty1 from P
2021-03-12 08:25:53,864 [main:106] - GETTING Ty1 from Boolean
2021-03-12 08:25:53,872 [main:106] - GETTING Ty1 from String
2021-03-12 08:25:53,872 [main:106] - GETTING Ty1 from Int
2021-03-12 08:25:53,873 [main:111] - Cant find and generate replacement for getOrThrow() type Ty1
2021-03-12 08:25:53,873 [main:107] - replacing (runCatching<Any?>({ "tvgny"}).exceptionOrNull(), Throwable?)
2021-03-12 08:25:53,873 [main:50] - replacing runCatching<Any?>({ "tvgny"}).exceptionOrNull() Throwable?
2021-03-12 08:25:53,873 [main:54] - Getting value of type Throwable?
2021-03-12 08:25:54,052 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 08:25:54,232 [main:43] - GENERATING CALL OF fun IndexOutOfBoundsException(message: kotlin.String?): Throwable = TODO()
2021-03-12 08:25:54,239 [main:61] - WITHOUT TYPE PARAMS = fun IndexOutOfBoundsException(message: kotlin.String?): Throwable = TODO()
2021-03-12 08:25:54,627 [main:302] - generating value of type = String true depth = 3
2021-03-12 08:25:54,634 [main:95] - GENERATED = IndexOutOfBoundsException("vmmri")
2021-03-12 08:25:54,634 [main:58] - GENERATED VALUE OF TYPE Throwable? = IndexOutOfBoundsException("vmmri")
2021-03-12 08:25:54,634 [main:61] - GENERATED IS CALL =true
2021-03-12 08:25:54,646 [main:67] - randomType = Int
2021-03-12 08:25:54,818 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:25:54,854 [main:106] - GETTING Throwable? from Continuation<Any?>
2021-03-12 08:25:54,861 [main:106] - GETTING Throwable? from Boolean
2021-03-12 08:25:54,869 [main:106] - GETTING Throwable? from EmptyCoroutineContext
2021-03-12 08:25:54,882 [main:106] - GETTING Throwable? from CoroutineContext
2021-03-12 08:25:54,887 [main:106] - GETTING Throwable? from Int
2021-03-12 08:25:54,916 [main:106] - GETTING Throwable? from CoroutineContext
2021-03-12 08:25:54,917 [main:106] - GETTING Throwable? from Long
2021-03-12 08:25:54,949 [main:106] - GETTING Throwable? from Function0<Unit>
2021-03-12 08:25:54,959 [main:106] - GETTING Throwable? from Int
2021-03-12 08:25:54,960 [main:106] - GETTING Throwable? from P
2021-03-12 08:25:54,966 [main:106] - GETTING Throwable? from Any?
2021-03-12 08:25:54,971 [main:106] - GETTING Throwable? from Continuation<Kla4>
2021-03-12 08:25:54,981 [main:106] - GETTING Throwable? from String
2021-03-12 08:25:55,006 [main:106] - GETTING Throwable? from String
2021-03-12 08:25:55,007 [main:106] - GETTING Throwable? from P
2021-03-12 08:25:55,007 [main:106] - GETTING Throwable? from Int
2021-03-12 08:25:55,008 [main:106] - GETTING Throwable? from CoroutineContext
2021-03-12 08:25:55,008 [main:114] - replacement of runCatching<Any?>({ "tvgny"}).exceptionOrNull() of type Throwable? is IndexOutOfBoundsException("vmmri")
2021-03-12 08:25:55,178 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:25:55,179 [main:66] - Compilation checking started
2021-03-12 08:25:55,912 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
IndexOutOfBoundsException("vmmri")?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(IllegalStateException()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if (-512400054 != i) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope12.prope18 = {
            prope12.prope17 = ((P(1118931594).i).div(-6350246603923996636)).toChar().isDigit()
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:25:55,914 [main:107] - replacing (getOrThrow(), Any?)
2021-03-12 08:25:55,915 [main:50] - replacing getOrThrow() Any?
2021-03-12 08:25:55,915 [main:54] - Getting value of type Any?
2021-03-12 08:25:56,087 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:25:56,087 [main:58] - GENERATED VALUE OF TYPE Any? = "kxspn"
2021-03-12 08:25:56,087 [main:61] - GENERATED IS CALL =false
2021-03-12 08:25:59,116 [main:67] - randomType = MutableMap<Sequence<ULong?>, Function2<Function2<ArrayDeque<Short>, Int, Kla12>, Kla5, ArrayList<Function1<Kla10, ULong>>>>?
2021-03-12 08:25:59,117 [main:106] - GETTING Any? from P
2021-03-12 08:25:59,123 [main:106] - GETTING Any? from Continuation<Any?>
2021-03-12 08:25:59,130 [main:106] - GETTING Any? from String
2021-03-12 08:25:59,146 [main:106] - GETTING Any? from Int
2021-03-12 08:25:59,176 [main:106] - GETTING Any? from String
2021-03-12 08:25:59,177 [main:106] - GETTING Any? from Any?
2021-03-12 08:25:59,180 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:25:59,186 [main:106] - GETTING Any? from Int
2021-03-12 08:25:59,187 [main:106] - GETTING Any? from Function0<Unit>
2021-03-12 08:25:59,196 [main:106] - GETTING Any? from Continuation<Kla4>
2021-03-12 08:25:59,203 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:25:59,204 [main:106] - GETTING Any? from EmptyCoroutineContext
2021-03-12 08:25:59,217 [main:106] - GETTING Any? from P
2021-03-12 08:25:59,218 [main:106] - GETTING Any? from Int
2021-03-12 08:25:59,219 [main:106] - GETTING Any? from Long
2021-03-12 08:25:59,248 [main:106] - GETTING Any? from Boolean
2021-03-12 08:25:59,256 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:25:59,256 [main:114] - replacement of getOrThrow() of type Any? is "kxspn"
2021-03-12 08:25:59,426 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 08:25:59,427 [main:66] - Compilation checking started
2021-03-12 08:26:00,100 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
IndexOutOfBoundsException("vmmri")?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope14."kxspn"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(IllegalStateException()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { it?.methodName?.startsWith(method) == true } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if (-512400054 != i) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope12.prope18 = {
            prope12.prope17 = ((P(1118931594).i).div(-6350246603923996636)).toChar().isDigit()
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:26:00,104 [main:107] - replacing (it?.methodName?.startsWith(method) == true, Boolean)
2021-03-12 08:26:00,104 [main:50] - replacing it?.methodName?.startsWith(method) == true Boolean
2021-03-12 08:26:00,104 [main:54] - Getting value of type Boolean
2021-03-12 08:26:00,280 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:26:00,286 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 08:26:00,286 [main:61] - GENERATED IS CALL =false
2021-03-12 08:26:00,310 [main:67] - randomType = P
2021-03-12 08:26:00,480 [main:302] - generating value of type = P false depth = 0
2021-03-12 08:26:00,486 [main:112] - generating klass P text = inline class P(val i: Int)
2021-03-12 08:26:00,684 [main:194] - Type params = []
2021-03-12 08:26:00,856 [main:302] - generating value of type = Int true depth = 2
2021-03-12 08:26:00,867 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in a.P[SimpleFunctionDescriptorImpl@627da6ee]
2021-03-12 08:26:00,867 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]
2021-03-12 08:26:01,037 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:26:01,043 [main:78] - Generated call from random type = (P(145137282)).equals(Kla1().prope5).xor(true)
2021-03-12 08:26:01,043 [main:106] - GETTING Boolean from Boolean
2021-03-12 08:26:01,051 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]]
2021-03-12 08:26:01,052 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6]
2021-03-12 08:26:01,052 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]
2021-03-12 08:26:01,052 [main:117] - GENERATED CALL = (Kla4().prope8).equals(Kla1().prope5).and(Kla4().prope8)
2021-03-12 08:26:01,052 [main:113] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]]
2021-03-12 08:26:01,052 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]
2021-03-12 08:26:01,052 [main:117] - GENERATED CALL = (Kla4().prope8).or(Kla4().prope8)
2021-03-12 08:26:01,052 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]]
2021-03-12 08:26:01,052 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6]
2021-03-12 08:26:01,223 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:26:01,223 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]
2021-03-12 08:26:01,223 [main:117] - GENERATED CALL = (Kla4().prope8).equals("ceglu").xor(Kla4().prope8)
2021-03-12 08:26:01,224 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]]
2021-03-12 08:26:01,224 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6]
2021-03-12 08:26:01,224 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]
2021-03-12 08:26:01,224 [main:117] - GENERATED CALL = (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5)
2021-03-12 08:26:01,224 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]]
2021-03-12 08:26:01,224 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:26:01,394 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:26:01,400 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]
2021-03-12 08:26:01,401 [main:117] - GENERATED CALL = (Kla4().prope8).compareTo(true).equals(Kla1().prope5)
2021-03-12 08:26:01,401 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]]
2021-03-12 08:26:01,401 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]
2021-03-12 08:26:01,401 [main:117] - GENERATED CALL = (Kla4().prope8).equals(Kla1().prope5)
2021-03-12 08:26:01,401 [main:113] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]]
2021-03-12 08:26:01,401 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]
2021-03-12 08:26:01,401 [main:117] - GENERATED CALL = (Kla4().prope8).and(Kla4().prope8)
2021-03-12 08:26:01,401 [main:113] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]]
2021-03-12 08:26:01,401 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]
2021-03-12 08:26:01,401 [main:117] - GENERATED CALL = (Kla4().prope8).not()
2021-03-12 08:26:01,401 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]]
2021-03-12 08:26:01,401 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6]
2021-03-12 08:26:01,401 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]
2021-03-12 08:26:01,402 [main:117] - GENERATED CALL = (Kla4().prope8).equals(Kla1().prope5).not()
2021-03-12 08:26:01,402 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]]
2021-03-12 08:26:01,402 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6]
2021-03-12 08:26:01,579 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:26:01,580 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]
2021-03-12 08:26:01,751 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:26:01,758 [main:117] - GENERATED CALL = (Kla4().prope8).equals("rebfj").or(true)
2021-03-12 08:26:01,758 [main:114] - replacement of it?.methodName?.startsWith(method) == true of type Boolean is (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5)
2021-03-12 08:26:01,928 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:26:01,929 [main:66] - Compilation checking started
2021-03-12 08:26:02,650 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
IndexOutOfBoundsException("vmmri")?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(IllegalStateException()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in 1..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if (-512400054 != i) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope12.prope18 = {
            prope12.prope17 = ((P(1118931594).i).div(-6350246603923996636)).toChar().isDigit()
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:26:02,652 [main:107] - replacing (1, Int)
2021-03-12 08:26:02,653 [main:50] - replacing 1 Int
2021-03-12 08:26:02,653 [main:54] - Getting value of type Int
2021-03-12 08:26:02,827 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:26:02,833 [main:58] - GENERATED VALUE OF TYPE Int = 1590530580
2021-03-12 08:26:02,833 [main:61] - GENERATED IS CALL =false
2021-03-12 08:26:02,857 [main:67] - randomType = Kla5
2021-03-12 08:26:03,029 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 08:26:03,035 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}
2021-03-12 08:26:03,052 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in a.Kla5[DeserializedSimpleFunctionDescriptor@51b652a8]
2021-03-12 08:26:03,052 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:26:03,232 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:26:03,238 [main:78] - Generated call from random type = (Kla5).equals(Kla1().prope5).compareTo(true)
2021-03-12 08:26:03,239 [main:106] - GETTING Int from Function0<Unit>
2021-03-12 08:26:03,247 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]]
2021-03-12 08:26:03,247 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602]
2021-03-12 08:26:03,418 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:26:03,419 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:26:03,419 [main:117] - GENERATED CALL = (Kla4().prope9).equals("fporc").compareTo(Kla4().prope8)
2021-03-12 08:26:03,419 [main:114] - replacement of 1 of type Int is (Kla5).equals(Kla1().prope5).compareTo(true)
2021-03-12 08:26:03,589 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:26:03,590 [main:66] - Compilation checking started
2021-03-12 08:26:04,306 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
IndexOutOfBoundsException("vmmri")?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(IllegalStateException()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if (-512400054 != i) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope12.prope18 = {
            prope12.prope17 = ((P(1118931594).i).div(-6350246603923996636)).toChar().isDigit()
        }
    }

    override fun fu17(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:26:04,309 [main:107] - replacing (exception, Throwable)
2021-03-12 08:26:04,309 [main:50] - replacing exception Throwable
2021-03-12 08:26:04,309 [main:54] - Getting value of type Throwable
2021-03-12 08:26:04,486 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 08:26:04,674 [main:43] - GENERATING CALL OF fun Throwable(message: kotlin.String?): Throwable = TODO()
2021-03-12 08:26:04,682 [main:61] - WITHOUT TYPE PARAMS = fun Throwable(message: kotlin.String?): Throwable = TODO()
2021-03-12 08:26:05,098 [main:302] - generating value of type = String true depth = 3
2021-03-12 08:26:05,105 [main:95] - GENERATED = Throwable("nqddv")
2021-03-12 08:26:05,105 [main:58] - GENERATED VALUE OF TYPE Throwable = Throwable("nqddv")
2021-03-12 08:26:05,105 [main:61] - GENERATED IS CALL =true
2021-03-12 08:26:05,336 [main:67] - randomType = Kla3?
2021-03-12 08:26:05,509 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 08:26:05,515 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}
2021-03-12 08:26:05,521 [main:106] - GETTING Throwable from P
2021-03-12 08:26:05,526 [main:106] - GETTING Throwable from CoroutineContext
2021-03-12 08:26:05,532 [main:106] - GETTING Throwable from Int
2021-03-12 08:26:05,561 [main:106] - GETTING Throwable from EmptyCoroutineContext
2021-03-12 08:26:05,575 [main:106] - GETTING Throwable from Function0<Unit>
2021-03-12 08:26:05,583 [main:106] - GETTING Throwable from P
2021-03-12 08:26:05,584 [main:106] - GETTING Throwable from Continuation<Any?>
2021-03-12 08:26:05,590 [main:106] - GETTING Throwable from String
2021-03-12 08:26:05,606 [main:106] - GETTING Throwable from CoroutineContext
2021-03-12 08:26:05,607 [main:106] - GETTING Throwable from String
2021-03-12 08:26:05,608 [main:106] - GETTING Throwable from CoroutineContext
2021-03-12 08:26:05,608 [main:106] - GETTING Throwable from Int
2021-03-12 08:26:05,609 [main:106] - GETTING Throwable from Int
2021-03-12 08:26:05,610 [main:106] - GETTING Throwable from Any?
2021-03-12 08:26:05,613 [main:106] - GETTING Throwable from Continuation<Kla4>
2021-03-12 08:26:05,620 [main:106] - GETTING Throwable from Boolean
2021-03-12 08:26:05,628 [main:106] - GETTING Throwable from Long
2021-03-12 08:26:05,655 [main:114] - replacement of exception of type Throwable is Throwable("nqddv")
2021-03-12 08:26:05,827 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:26:05,828 [main:66] - Compilation checking started
2021-03-12 08:26:06,541 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
IndexOutOfBoundsException("vmmri")?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(IllegalStateException()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if (-512400054 != i) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope12.prope18 = {
            prope12.prope17 = ((P(1118931594).i).div(-6350246603923996636)).toChar().isDigit()
        }
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:26:06,543 [main:107] - replacing (true, Boolean)
2021-03-12 08:26:06,544 [main:50] - replacing true Boolean
2021-03-12 08:26:06,544 [main:54] - Getting value of type Boolean
2021-03-12 08:26:06,719 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:26:06,725 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 08:26:06,725 [main:61] - GENERATED IS CALL =false
2021-03-12 08:26:07,360 [main:67] - randomType = Sequence<ULong?>
2021-03-12 08:26:07,361 [main:106] - GETTING Boolean from Function0<Unit>
2021-03-12 08:26:07,369 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602]]
2021-03-12 08:26:07,369 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602]
2021-03-12 08:26:07,370 [main:117] - GENERATED CALL = (Kla4().prope9).equals(Kla1().prope5)
2021-03-12 08:26:07,370 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]]
2021-03-12 08:26:07,370 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602]
2021-03-12 08:26:07,370 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]
2021-03-12 08:26:07,370 [main:117] - GENERATED CALL = (Kla4().prope9).equals(Kla1().prope5).and(Kla4().prope8)
2021-03-12 08:26:07,370 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]]
2021-03-12 08:26:07,370 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602]
2021-03-12 08:26:07,543 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:26:07,543 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]
2021-03-12 08:26:07,543 [main:117] - GENERATED CALL = (Kla4().prope9).equals("turas").equals(Kla1().prope5)
2021-03-12 08:26:07,544 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]]
2021-03-12 08:26:07,544 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602]
2021-03-12 08:26:07,544 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]
2021-03-12 08:26:07,544 [main:117] - GENERATED CALL = (Kla4().prope9).equals(Kla1().prope5).not()
2021-03-12 08:26:07,544 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]]
2021-03-12 08:26:07,544 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602]
2021-03-12 08:26:07,544 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]
2021-03-12 08:26:07,724 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:26:07,730 [main:117] - GENERATED CALL = (Kla4().prope9).equals(Kla1().prope5).xor(true)
2021-03-12 08:26:07,730 [main:113] - Case = [public abstract operator fun invoke(): kotlin.Unit defined in kotlin.Function0[FunctionInvokeDescriptor@3a7c50f0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@71a9d74]]
2021-03-12 08:26:07,730 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.Unit defined in kotlin.Function0[FunctionInvokeDescriptor@3a7c50f0]
2021-03-12 08:26:07,730 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@71a9d74]
2021-03-12 08:26:07,903 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:26:07,903 [main:117] - GENERATED CALL = (Kla4().prope9).invoke().equals("exoyh")
2021-03-12 08:26:07,903 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]]
2021-03-12 08:26:07,903 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602]
2021-03-12 08:26:08,075 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:26:08,075 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]
2021-03-12 08:26:08,075 [main:117] - GENERATED CALL = (Kla4().prope9).equals("emdjs").or(Kla4().prope8)
2021-03-12 08:26:08,075 [main:114] - replacement of true of type Boolean is (Kla4().prope9).equals(Kla1().prope5)
2021-03-12 08:26:08,247 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:26:08,247 [main:66] - Compilation checking started
2021-03-12 08:26:09,014 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
IndexOutOfBoundsException("vmmri")?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(IllegalStateException()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = 0
        prope17 = false
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if (-512400054 != i) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope12.prope18 = {
            prope12.prope17 = ((P(1118931594).i).div(-6350246603923996636)).toChar().isDigit()
        }
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:26:09,017 [main:107] - replacing (false, Boolean)
2021-03-12 08:26:09,017 [main:50] - replacing false Boolean
2021-03-12 08:26:09,017 [main:54] - Getting value of type Boolean
2021-03-12 08:26:09,200 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:26:09,206 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 08:26:09,206 [main:61] - GENERATED IS CALL =false
2021-03-12 08:26:09,636 [main:67] - randomType = ULong?
2021-03-12 08:26:09,811 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 08:26:09,844 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@34322a3e]
2021-03-12 08:26:09,844 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@4908b74d]
2021-03-12 08:26:10,019 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:26:10,020 [main:78] - Generated call from random type = (2788535572181569169.toULong())?.toUByte().equals("cakjq")
2021-03-12 08:26:10,021 [main:106] - GETTING Boolean from Int
2021-03-12 08:26:10,050 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51157c88]]
2021-03-12 08:26:10,051 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:26:10,051 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51157c88]
2021-03-12 08:26:10,051 [main:117] - GENERATED CALL = ((P(1118931594).i)).toChar().isDigit()
2021-03-12 08:26:10,051 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]]
2021-03-12 08:26:10,051 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:26:10,051 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]
2021-03-12 08:26:10,051 [main:117] - GENERATED CALL = ((P(1118931594).i)).toInt().equals(Kla1().prope5)
2021-03-12 08:26:10,051 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49fbfecf], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@31fdc6f6]]
2021-03-12 08:26:10,051 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49fbfecf]
2021-03-12 08:26:10,225 [main:302] - generating value of type = Double true depth = 0
2021-03-12 08:26:10,231 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@31fdc6f6]
2021-03-12 08:26:10,406 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:26:10,406 [main:117] - GENERATED CALL = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
2021-03-12 08:26:10,406 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]]
2021-03-12 08:26:10,406 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]
2021-03-12 08:26:10,406 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]
2021-03-12 08:26:10,406 [main:117] - GENERATED CALL = ((P(1118931594).i)).equals(Kla1().prope5).not()
2021-03-12 08:26:10,406 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4d84f8a6], public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@5392abe7]]
2021-03-12 08:26:10,406 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4d84f8a6]
2021-03-12 08:26:10,407 [main:149] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@5392abe7]
2021-03-12 08:26:10,407 [main:117] - GENERATED CALL = ((P(1118931594).i)).toFloat().isInfinite()
2021-03-12 08:26:10,407 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4d84f8a6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@539f603f]]
2021-03-12 08:26:10,407 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4d84f8a6]
2021-03-12 08:26:10,407 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@539f603f]
2021-03-12 08:26:10,581 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:26:10,582 [main:117] - GENERATED CALL = ((P(1118931594).i)).toFloat().equals("pobyl")
2021-03-12 08:26:10,582 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]]
2021-03-12 08:26:10,582 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]
2021-03-12 08:26:10,582 [main:117] - GENERATED CALL = ((P(1118931594).i)).equals(Kla1().prope5)
2021-03-12 08:26:10,582 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@706b2ff0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@31fdc6f6]]
2021-03-12 08:26:10,582 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@706b2ff0]
2021-03-12 08:26:10,582 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@31fdc6f6]
2021-03-12 08:26:10,757 [main:117] - GENERATED CALL = ((P(1118931594).i)).toDouble().equals(null)
2021-03-12 08:26:10,757 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b6a54c], public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@3799e7a8]]
2021-03-12 08:26:10,757 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b6a54c]
2021-03-12 08:26:10,931 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:26:10,937 [main:149] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@3799e7a8]
2021-03-12 08:26:10,937 [main:117] - GENERATED CALL = ((P(1118931594).i)).rangeTo(-95).isEmpty()
2021-03-12 08:26:10,937 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67136415]]
2021-03-12 08:26:10,937 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:26:10,938 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67136415]
2021-03-12 08:26:11,111 [main:302] - generating value of type = Char true depth = 0
2021-03-12 08:26:11,118 [main:117] - GENERATED CALL = ((P(1118931594).i)).toChar().equals('?', Kla4().prope8)
2021-03-12 08:26:11,118 [main:114] - replacement of false of type Boolean is ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
2021-03-12 08:26:11,293 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:26:11,293 [main:66] - Compilation checking started
2021-03-12 08:26:12,035 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
IndexOutOfBoundsException("vmmri")?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(IllegalStateException()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = 0
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if (-512400054 != i) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope12.prope18 = {
            prope12.prope17 = ((P(1118931594).i).div(-6350246603923996636)).toChar().isDigit()
        }
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:26:12,038 [main:107] - replacing (prope16, Int)
2021-03-12 08:26:12,038 [main:50] - replacing prope16 Int
2021-03-12 08:26:12,038 [main:54] - Getting value of type Int
2021-03-12 08:26:12,216 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:26:12,222 [main:58] - GENERATED VALUE OF TYPE Int = 109115668
2021-03-12 08:26:12,222 [main:61] - GENERATED IS CALL =false
2021-03-12 08:26:12,899 [main:67] - randomType = ArrayList<Byte>
2021-03-12 08:26:13,074 [main:302] - generating value of type = ArrayList<Byte> false depth = 0
2021-03-12 08:26:13,257 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Byte): ArrayList<Byte> = TODO()
2021-03-12 08:26:13,264 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Byte): ArrayList<Byte> = TODO()
2021-03-12 08:26:13,451 [main:302] - generating value of type = Byte true depth = 3
2021-03-12 08:26:13,457 [main:95] - GENERATED = arrayListOf<Byte>(54)
2021-03-12 08:26:13,574 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2c55842c]
2021-03-12 08:26:13,749 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:26:13,756 [main:78] - Generated call from random type = (arrayListOf<Byte>(54)).size.times(99)
2021-03-12 08:26:13,756 [main:114] - replacement of prope16 of type Int is (arrayListOf<Byte>(54)).size.times(99)
2021-03-12 08:26:13,929 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:26:13,930 [main:66] - Compilation checking started
2021-03-12 08:26:14,438 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
IndexOutOfBoundsException("vmmri")?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(IllegalStateException()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(arrayListOf<Byte>(54)).size.times(99) = 0
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if (-512400054 != i) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope12.prope18 = {
            prope12.prope17 = ((P(1118931594).i).div(-6350246603923996636)).toChar().isDigit()
        }
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:26:14,441 [main:107] - replacing (isSuccess, Boolean)
2021-03-12 08:26:14,441 [main:50] - replacing isSuccess Boolean
2021-03-12 08:26:14,441 [main:54] - Getting value of type Boolean
2021-03-12 08:26:14,622 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:26:14,628 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 08:26:14,628 [main:61] - GENERATED IS CALL =false
2021-03-12 08:26:14,641 [main:67] - randomType = UShort
2021-03-12 08:26:14,819 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 08:26:14,851 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@19272df8]
2021-03-12 08:26:14,852 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]
2021-03-12 08:26:14,852 [main:78] - Generated call from random type = (15454.toUShort()).equals(Kla1().prope5).or(Kla4().prope8)
2021-03-12 08:26:14,852 [main:114] - replacement of isSuccess of type Boolean is (15454.toUShort()).equals(Kla1().prope5).or(Kla4().prope8)
2021-03-12 08:26:15,030 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:26:15,030 [main:66] - Compilation checking started
2021-03-12 08:26:15,542 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
IndexOutOfBoundsException("vmmri")?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.(15454.toUShort()).equals(Kla1().prope5).or(Kla4().prope8)) {
            resume(prope14.getOrThrow())
        } else {
            fu17(IllegalStateException()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = 0
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if (-512400054 != i) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope12.prope18 = {
            prope12.prope17 = ((P(1118931594).i).div(-6350246603923996636)).toChar().isDigit()
        }
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:26:15,544 [main:107] - replacing (this.prope14, Any?)
2021-03-12 08:26:15,544 [main:50] - replacing this.prope14 Any?
2021-03-12 08:26:15,544 [main:54] - Getting value of type Any?
2021-03-12 08:26:15,720 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:26:15,720 [main:58] - GENERATED VALUE OF TYPE Any? = "nycvp"
2021-03-12 08:26:15,720 [main:61] - GENERATED IS CALL =false
2021-03-12 08:26:15,931 [main:67] - randomType = ULong
2021-03-12 08:26:16,106 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 08:26:16,139 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:26:16,144 [main:106] - GETTING Any? from Function0<Unit>
2021-03-12 08:26:16,153 [main:106] - GETTING Any? from P
2021-03-12 08:26:16,157 [main:106] - GETTING Any? from Long
2021-03-12 08:26:16,186 [main:106] - GETTING Any? from Continuation<Kla4>
2021-03-12 08:26:16,192 [main:106] - GETTING Any? from Int
2021-03-12 08:26:16,221 [main:106] - GETTING Any? from P
2021-03-12 08:26:16,222 [main:106] - GETTING Any? from Int
2021-03-12 08:26:16,222 [main:106] - GETTING Any? from Any?
2021-03-12 08:26:16,225 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:26:16,226 [main:106] - GETTING Any? from String
2021-03-12 08:26:16,243 [main:106] - GETTING Any? from Int
2021-03-12 08:26:16,243 [main:106] - GETTING Any? from Boolean
2021-03-12 08:26:16,253 [main:106] - GETTING Any? from EmptyCoroutineContext
2021-03-12 08:26:16,268 [main:106] - GETTING Any? from Continuation<Any?>
2021-03-12 08:26:16,275 [main:106] - GETTING Any? from String
2021-03-12 08:26:16,276 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:26:16,276 [main:114] - replacement of this.prope14 of type Any? is "nycvp"
2021-03-12 08:26:16,453 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 08:26:16,454 [main:66] - Compilation checking started
2021-03-12 08:26:17,000 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
IndexOutOfBoundsException("vmmri")?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"nycvp" = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(IllegalStateException()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = 0
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if (-512400054 != i) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope12.prope18 = {
            prope12.prope17 = ((P(1118931594).i).div(-6350246603923996636)).toChar().isDigit()
        }
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:26:17,003 [main:107] - replacing (-512400054 != i, Boolean)
2021-03-12 08:26:17,003 [main:50] - replacing -512400054 != i Boolean
2021-03-12 08:26:17,003 [main:54] - Getting value of type Boolean
2021-03-12 08:26:17,181 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:26:17,187 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 08:26:17,187 [main:61] - GENERATED IS CALL =false
2021-03-12 08:26:17,881 [main:67] - randomType = Map<Array<Char?>, Char>
2021-03-12 08:26:17,882 [main:106] - GETTING Boolean from Function0<Unit>
2021-03-12 08:26:17,890 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]]
2021-03-12 08:26:17,891 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602]
2021-03-12 08:26:18,067 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:26:18,068 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]
2021-03-12 08:26:18,244 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:26:18,251 [main:117] - GENERATED CALL = (Kla4().prope9).equals("dzumd").and(false)
2021-03-12 08:26:18,251 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]]
2021-03-12 08:26:18,251 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602]
2021-03-12 08:26:18,251 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]
2021-03-12 08:26:18,251 [main:117] - GENERATED CALL = (Kla4().prope9).equals(Kla1().prope5).xor(Kla4().prope8)
2021-03-12 08:26:18,251 [main:113] - Case = [public abstract operator fun invoke(): kotlin.Unit defined in kotlin.Function0[FunctionInvokeDescriptor@3a7c50f0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@71a9d74]]
2021-03-12 08:26:18,251 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.Unit defined in kotlin.Function0[FunctionInvokeDescriptor@3a7c50f0]
2021-03-12 08:26:18,251 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@71a9d74]
2021-03-12 08:26:18,425 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:26:18,425 [main:117] - GENERATED CALL = (Kla4().prope9).invoke().equals("qqtpu")
2021-03-12 08:26:18,425 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]]
2021-03-12 08:26:18,425 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602]
2021-03-12 08:26:18,601 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:26:18,601 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]
2021-03-12 08:26:18,776 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:26:18,776 [main:117] - GENERATED CALL = (Kla4().prope9).equals("arwos").equals("apbel")
2021-03-12 08:26:18,776 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]]
2021-03-12 08:26:18,776 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602]
2021-03-12 08:26:18,776 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]
2021-03-12 08:26:18,777 [main:117] - GENERATED CALL = (Kla4().prope9).equals(Kla1().prope5).or(Kla4().prope8)
2021-03-12 08:26:18,777 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602]]
2021-03-12 08:26:18,777 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602]
2021-03-12 08:26:18,951 [main:117] - GENERATED CALL = (Kla4().prope9).equals(null)
2021-03-12 08:26:18,951 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]]
2021-03-12 08:26:18,951 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602]
2021-03-12 08:26:19,126 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:26:19,127 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]
2021-03-12 08:26:19,127 [main:117] - GENERATED CALL = (Kla4().prope9).equals("hwwwb").not()
2021-03-12 08:26:19,127 [main:114] - replacement of -512400054 != i of type Boolean is (Kla4().prope9).equals("arwos").equals("apbel")
2021-03-12 08:26:19,300 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:26:19,300 [main:66] - Compilation checking started
2021-03-12 08:26:20,028 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
IndexOutOfBoundsException("vmmri")?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(IllegalStateException()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = 0
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope12.prope18 = {
            prope12.prope17 = ((P(1118931594).i).div(-6350246603923996636)).toChar().isDigit()
        }
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:26:20,031 [main:107] - replacing (0, Int)
2021-03-12 08:26:20,031 [main:50] - replacing 0 Int
2021-03-12 08:26:20,031 [main:54] - Getting value of type Int
2021-03-12 08:26:20,209 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:26:20,215 [main:58] - GENERATED VALUE OF TYPE Int = -914224632
2021-03-12 08:26:20,215 [main:61] - GENERATED IS CALL =false
2021-03-12 08:26:20,428 [main:67] - randomType = ULong
2021-03-12 08:26:20,606 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 08:26:20,638 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@ca60b4f]
2021-03-12 08:26:20,837 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 08:26:20,844 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e4c85e1]
2021-03-12 08:26:21,019 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:26:21,025 [main:78] - Generated call from random type = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
2021-03-12 08:26:21,025 [main:114] - replacement of 0 of type Int is (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
2021-03-12 08:26:21,200 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:26:21,200 [main:66] - Compilation checking started
2021-03-12 08:26:21,950 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
IndexOutOfBoundsException("vmmri")?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(IllegalStateException()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope12.prope18 = {
            prope12.prope17 = ((P(1118931594).i).div(-6350246603923996636)).toChar().isDigit()
        }
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:26:21,953 [main:107] - replacing (prope16, Int)
2021-03-12 08:26:21,953 [main:50] - replacing prope16 Int
2021-03-12 08:26:21,953 [main:54] - Getting value of type Int
2021-03-12 08:26:22,131 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:26:22,137 [main:58] - GENERATED VALUE OF TYPE Int = 953970299
2021-03-12 08:26:22,137 [main:61] - GENERATED IS CALL =false
2021-03-12 08:26:22,150 [main:67] - randomType = UInt
2021-03-12 08:26:22,328 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 08:26:22,356 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@7221947f]
2021-03-12 08:26:22,356 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@24ba5996]
2021-03-12 08:26:22,533 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:26:22,539 [main:78] - Generated call from random type = (1794075137.toUInt()).toByte().plus(73)
2021-03-12 08:26:22,540 [main:106] - GETTING Int from Boolean
2021-03-12 08:26:22,549 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@19e015b2]]
2021-03-12 08:26:22,549 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:26:22,549 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@19e015b2]
2021-03-12 08:26:22,728 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:26:22,734 [main:117] - GENERATED CALL = (Kla4().prope8).compareTo(Kla4().prope8).coerceIn(-608304486, (P(1118931594).i))
2021-03-12 08:26:22,734 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6280d214]]
2021-03-12 08:26:22,734 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:26:22,734 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6280d214]
2021-03-12 08:26:22,914 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:26:22,920 [main:117] - GENERATED CALL = (Kla4().prope8).compareTo(Kla4().prope8).shl(-2085436961)
2021-03-12 08:26:22,920 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43ac6084]]
2021-03-12 08:26:22,920 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:26:23,096 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:26:23,102 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43ac6084]
2021-03-12 08:26:23,103 [main:117] - GENERATED CALL = (Kla4().prope8).compareTo(false).unaryPlus()
2021-03-12 08:26:23,103 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]]
2021-03-12 08:26:23,103 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6]
2021-03-12 08:26:23,103 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:26:23,103 [main:117] - GENERATED CALL = (Kla4().prope8).equals(Kla1().prope5).compareTo(Kla4().prope8)
2021-03-12 08:26:23,103 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36e054f9]]
2021-03-12 08:26:23,103 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:26:23,103 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36e054f9]
2021-03-12 08:26:23,281 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:26:23,287 [main:117] - GENERATED CALL = (Kla4().prope8).compareTo(Kla4().prope8).ushr(180446866)
2021-03-12 08:26:23,287 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55149f6d]]
2021-03-12 08:26:23,287 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:26:23,287 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55149f6d]
2021-03-12 08:26:23,287 [main:117] - GENERATED CALL = (Kla4().prope8).compareTo(Kla4().prope8).unaryMinus()
2021-03-12 08:26:23,287 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@12909d67]]
2021-03-12 08:26:23,287 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:26:23,288 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@12909d67]
2021-03-12 08:26:23,465 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:26:23,472 [main:117] - GENERATED CALL = (Kla4().prope8).compareTo(Kla4().prope8).rotateLeft(353564949)
2021-03-12 08:26:23,472 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d574310]]
2021-03-12 08:26:23,472 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:26:23,649 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:26:23,655 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d574310]
2021-03-12 08:26:23,831 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:26:23,837 [main:117] - GENERATED CALL = (Kla4().prope8).compareTo(true).plus(10)
2021-03-12 08:26:23,838 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@1ae7c0a8]]
2021-03-12 08:26:23,838 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:26:24,014 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:26:24,020 [main:117] - GENERATED CALL = (Kla4().prope8).compareTo(true).absoluteValue
2021-03-12 08:26:24,020 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@90001f0]]
2021-03-12 08:26:24,020 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:26:24,020 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@90001f0]
2021-03-12 08:26:24,021 [main:117] - GENERATED CALL = (Kla4().prope8).compareTo(Kla4().prope8).dec()
2021-03-12 08:26:24,021 [main:114] - replacement of prope16 of type Int is 953970299
2021-03-12 08:26:24,196 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 08:26:24,196 [main:66] - Compilation checking started
2021-03-12 08:26:24,716 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
IndexOutOfBoundsException("vmmri")?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(IllegalStateException()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = "\n"))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
953970299 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope12.prope18 = {
            prope12.prope17 = ((P(1118931594).i).div(-6350246603923996636)).toChar().isDigit()
        }
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:26:24,719 [main:107] - replacing ("\n", String)
2021-03-12 08:26:24,719 [main:50] - replacing "\n" String
2021-03-12 08:26:24,719 [main:54] - Getting value of type String
2021-03-12 08:26:24,922 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:26:24,929 [main:58] - GENERATED VALUE OF TYPE String = "zwmfm"
2021-03-12 08:26:24,929 [main:61] - GENERATED IS CALL =false
2021-03-12 08:26:24,941 [main:67] - randomType = Char
2021-03-12 08:26:25,120 [main:302] - generating value of type = Char true depth = 0
2021-03-12 08:26:25,144 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@52351801]
2021-03-12 08:26:25,320 [main:302] - generating value of type = Char true depth = 0
2021-03-12 08:26:25,326 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:26:25,503 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:26:25,509 [main:78] - Generated call from random type = ('È•Ø').compareTo('Í™¶').toString(773421333)
2021-03-12 08:26:25,510 [main:106] - GETTING String from CoroutineContext
2021-03-12 08:26:25,517 [main:106] - GETTING String from Int
2021-03-12 08:26:25,546 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:26:25,546 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:26:25,546 [main:117] - GENERATED CALL = ((P(1118931594).i)).toString((P(1118931594).i))
2021-03-12 08:26:25,546 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]]
2021-03-12 08:26:25,546 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d]
2021-03-12 08:26:25,546 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]
2021-03-12 08:26:25,547 [main:117] - GENERATED CALL = ((P(1118931594).i)).toShort().toString(P(1118931594).i)
2021-03-12 08:26:25,547 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:26:25,547 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4]
2021-03-12 08:26:25,547 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:26:25,547 [main:117] - GENERATED CALL = ((P(1118931594).i)).div((P(1118931594).i).div(-6350246603923996636)).toString(P(1982725439).i)
2021-03-12 08:26:25,547 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]]
2021-03-12 08:26:25,547 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:26:25,547 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]
2021-03-12 08:26:25,547 [main:117] - GENERATED CALL = ((P(1118931594).i)).toChar().lowercase()
2021-03-12 08:26:25,547 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]]
2021-03-12 08:26:25,547 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b]
2021-03-12 08:26:25,547 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]
2021-03-12 08:26:25,548 [main:117] - GENERATED CALL = ((P(1118931594).i)).toByte().toString(P(1118931594).i)
2021-03-12 08:26:25,548 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]]
2021-03-12 08:26:25,548 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:26:25,548 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]
2021-03-12 08:26:25,548 [main:117] - GENERATED CALL = ((P(1118931594).i)).toChar().uppercase()
2021-03-12 08:26:25,548 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]]
2021-03-12 08:26:25,548 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:26:25,548 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]
2021-03-12 08:26:25,725 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:26:25,731 [main:117] - GENERATED CALL = ((P(1118931594).i)).toChar().plus("zyrep")
2021-03-12 08:26:25,731 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:26:25,731 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f]
2021-03-12 08:26:25,731 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:26:25,732 [main:117] - GENERATED CALL = ((P(1118931594).i)).toLong().toString(P(1982725439).i)
2021-03-12 08:26:25,732 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:26:25,732 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:26:25,732 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:26:25,917 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:26:25,924 [main:117] - GENERATED CALL = ((P(1118931594).i)).toInt().toString(1569455504)
2021-03-12 08:26:25,924 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:26:25,924 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:26:25,924 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:26:26,105 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:26:26,111 [main:117] - GENERATED CALL = ((P(1118931594).i)).compareTo(P(1118931594).i).toString(-1045355426)
2021-03-12 08:26:26,111 [main:114] - replacement of "\n" of type String is ((P(1118931594).i)).toChar().lowercase()
2021-03-12 08:26:26,289 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:26:26,290 [main:66] - Compilation checking started
2021-03-12 08:26:27,028 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
IndexOutOfBoundsException("vmmri")?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(IllegalStateException()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope12.prope18 = {
            prope12.prope17 = ((P(1118931594).i).div(-6350246603923996636)).toChar().isDigit()
        }
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:26:27,030 [main:107] - replacing ({
            prope12.prope17 = ((P(1118931594).i).div(-6350246603923996636)).toChar().isDigit()
        }, Function0<Unit>)
2021-03-12 08:26:27,031 [main:50] - replacing {
            prope12.prope17 = ((P(1118931594).i).div(-6350246603923996636)).toChar().isDigit()
        } Function0<Unit>
2021-03-12 08:26:27,031 [main:54] - Getting value of type Function0<Unit>
2021-03-12 08:26:27,222 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 08:26:27,228 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:26:27,422 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 08:26:27,429 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 08:26:28,051 [main:302] - generating value of type = Int true depth = 4
2021-03-12 08:26:28,058 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 08:26:28,064 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 08:26:28,249 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:26:28,257 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:26:28,658 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 08:26:28,665 [main:95] - GENERATED = require(true)
2021-03-12 08:26:28,665 [main:95] - GENERATED = repeat(-1800823591, {a: Int -> require(true)})
2021-03-12 08:26:28,665 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(-1800823591, {a: Int -> require(true)})}
2021-03-12 08:26:28,665 [main:61] - GENERATED IS CALL =false
2021-03-12 08:26:28,678 [main:67] - randomType = Char
2021-03-12 08:26:28,858 [main:302] - generating value of type = Char true depth = 0
2021-03-12 08:26:28,884 [main:106] - GETTING Function0<Unit> from Long
2021-03-12 08:26:28,940 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 08:26:28,946 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 08:26:28,977 [main:106] - GETTING Function0<Unit> from P
2021-03-12 08:26:28,983 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 08:26:28,984 [main:106] - GETTING Function0<Unit> from Boolean
2021-03-12 08:26:28,992 [main:106] - GETTING Function0<Unit> from Continuation<Kla4>
2021-03-12 08:26:28,999 [main:106] - GETTING Function0<Unit> from String
2021-03-12 08:26:29,015 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 08:26:29,022 [main:114] - replacement of {
            prope12.prope17 = ((P(1118931594).i).div(-6350246603923996636)).toChar().isDigit()
        } of type Function0<Unit> is Kla4().prope9
2021-03-12 08:26:29,198 [main:33] - Trying to replace LAMBDA_EXPRESSION on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:26:29,199 [main:66] - Compilation checking started
2021-03-12 08:26:29,925 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
IndexOutOfBoundsException("vmmri")?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(IllegalStateException()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope12.prope18 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:26:29,927 [main:107] - replacing (getOrThrow(), Any?)
2021-03-12 08:26:29,927 [main:50] - replacing getOrThrow() Any?
2021-03-12 08:26:29,927 [main:54] - Getting value of type Any?
2021-03-12 08:26:30,112 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:26:30,112 [main:58] - GENERATED VALUE OF TYPE Any? = "pbgfh"
2021-03-12 08:26:30,112 [main:61] - GENERATED IS CALL =false
2021-03-12 08:26:30,137 [main:67] - randomType = Kla3
2021-03-12 08:26:30,313 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 08:26:30,319 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}
2021-03-12 08:26:30,325 [main:106] - GETTING Any? from Int
2021-03-12 08:26:30,355 [main:106] - GETTING Any? from Long
2021-03-12 08:26:30,384 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:26:30,389 [main:106] - GETTING Any? from String
2021-03-12 08:26:30,407 [main:106] - GETTING Any? from P
2021-03-12 08:26:30,412 [main:106] - GETTING Any? from Continuation<Kla4>
2021-03-12 08:26:30,421 [main:106] - GETTING Any? from P
2021-03-12 08:26:30,423 [main:106] - GETTING Any? from Int
2021-03-12 08:26:30,425 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:26:30,426 [main:106] - GETTING Any? from EmptyCoroutineContext
2021-03-12 08:26:30,442 [main:106] - GETTING Any? from Boolean
2021-03-12 08:26:30,450 [main:106] - GETTING Any? from String
2021-03-12 08:26:30,451 [main:106] - GETTING Any? from Function0<Unit>
2021-03-12 08:26:30,460 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:26:30,461 [main:106] - GETTING Any? from Any?
2021-03-12 08:26:30,464 [main:106] - GETTING Any? from Continuation<Any?>
2021-03-12 08:26:30,471 [main:106] - GETTING Any? from Int
2021-03-12 08:26:30,471 [main:114] - replacement of getOrThrow() of type Any? is "pbgfh"
2021-03-12 08:26:30,646 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 08:26:30,646 [main:66] - Compilation checking started
2021-03-12 08:26:31,157 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
IndexOutOfBoundsException("vmmri")?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope14."pbgfh"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(IllegalStateException()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        prope18 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope12.prope18 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:26:31,159 [main:107] - replacing (getOrThrow(), Ty1)
2021-03-12 08:26:31,159 [main:50] - replacing getOrThrow() Ty1
2021-03-12 08:26:31,159 [main:54] - Getting value of type Ty1
2021-03-12 08:26:31,334 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-12 08:26:31,343 [main:58] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-12 08:26:31,368 [main:67] - randomType = Kla0
2021-03-12 08:26:31,560 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 08:26:31,566 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}
2021-03-12 08:26:31,747 [main:194] - Type params = []
2021-03-12 08:26:31,926 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 08:26:32,113 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:26:32,121 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:26:32,540 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 08:26:32,733 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:26:32,741 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:26:33,427 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:26:33,427 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:26:33,441 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 08:26:33,446 [main:106] - GETTING Ty1 from Function0<Unit>
2021-03-12 08:26:33,455 [main:106] - GETTING Ty1 from Int
2021-03-12 08:26:33,486 [main:106] - GETTING Ty1 from Any?
2021-03-12 08:26:33,489 [main:106] - GETTING Ty1 from Boolean
2021-03-12 08:26:33,496 [main:106] - GETTING Ty1 from EmptyCoroutineContext
2021-03-12 08:26:33,510 [main:106] - GETTING Ty1 from P
2021-03-12 08:26:33,514 [main:106] - GETTING Ty1 from String
2021-03-12 08:26:33,530 [main:106] - GETTING Ty1 from P
2021-03-12 08:26:33,531 [main:106] - GETTING Ty1 from String
2021-03-12 08:26:33,532 [main:106] - GETTING Ty1 from Int
2021-03-12 08:26:33,532 [main:106] - GETTING Ty1 from Long
2021-03-12 08:26:33,561 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 08:26:33,561 [main:106] - GETTING Ty1 from Int
2021-03-12 08:26:33,562 [main:106] - GETTING Ty1 from Continuation<Kla4>
2021-03-12 08:26:33,569 [main:106] - GETTING Ty1 from Continuation<Any?>
2021-03-12 08:26:33,575 [main:106] - GETTING Ty1 from CoroutineContext
2021-03-12 08:26:33,575 [main:111] - Cant find and generate replacement for getOrThrow() type Ty1
2021-03-12 08:26:33,575 [main:107] - replacing (prope18, Function0<Unit>)
2021-03-12 08:26:33,575 [main:50] - replacing prope18 Function0<Unit>
2021-03-12 08:26:33,575 [main:54] - Getting value of type Function0<Unit>
2021-03-12 08:26:33,752 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 08:26:33,758 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:26:33,943 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 08:26:33,951 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 08:26:34,572 [main:302] - generating value of type = Int true depth = 4
2021-03-12 08:26:34,578 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 08:26:34,584 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 08:26:34,770 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 08:26:34,777 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 08:26:35,397 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 08:26:35,403 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-12 08:26:35,410 [main:302] - generating value of type = Any false depth = 9
2021-03-12 08:26:35,410 [main:95] - GENERATED = check(true, { "dooxs"})
2021-03-12 08:26:35,410 [main:95] - GENERATED = repeat(1706156122, {a: Int -> check(true, { "dooxs"})})
2021-03-12 08:26:35,410 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(1706156122, {a: Int -> check(true, { "dooxs"})})}
2021-03-12 08:26:35,410 [main:61] - GENERATED IS CALL =false
2021-03-12 08:26:35,435 [main:67] - randomType = Kla3
2021-03-12 08:26:35,612 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 08:26:35,618 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}
2021-03-12 08:26:35,624 [main:106] - GETTING Function0<Unit> from Long
2021-03-12 08:26:35,652 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 08:26:35,682 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 08:26:35,683 [main:106] - GETTING Function0<Unit> from P
2021-03-12 08:26:35,688 [main:106] - GETTING Function0<Unit> from String
2021-03-12 08:26:35,704 [main:106] - GETTING Function0<Unit> from Boolean
2021-03-12 08:26:35,713 [main:106] - GETTING Function0<Unit> from String
2021-03-12 08:26:35,714 [main:106] - GETTING Function0<Unit> from Continuation<Kla4>
2021-03-12 08:26:35,721 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 08:26:35,725 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 08:26:35,733 [main:114] - replacement of prope18 of type Function0<Unit> is Kla4().prope9
2021-03-12 08:26:35,907 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:26:35,908 [main:66] - Compilation checking started
2021-03-12 08:26:36,670 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
IndexOutOfBoundsException("vmmri")?.let(x)
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(IllegalStateException()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        Kla4().prope9 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope12.prope18 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:26:36,673 [main:107] - replacing (x, Function1<Throwable, Unit>)
2021-03-12 08:26:36,673 [main:50] - replacing x Function1<Throwable, Unit>
2021-03-12 08:26:36,673 [main:54] - Getting value of type Function1<Throwable, Unit>
2021-03-12 08:26:36,852 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 0
2021-03-12 08:26:36,859 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:26:36,868 [main:58] - GENERATED VALUE OF TYPE Function1<Throwable, Unit> = {a: Throwable -> println()}
2021-03-12 08:26:36,868 [main:61] - GENERATED IS CALL =false
2021-03-12 08:26:36,881 [main:67] - randomType = Double
2021-03-12 08:26:37,060 [main:302] - generating value of type = Double true depth = 0
2021-03-12 08:26:37,095 [main:106] - GETTING Function1<Throwable, Unit> from P
2021-03-12 08:26:37,100 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 08:26:37,117 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 08:26:37,118 [main:106] - GETTING Function1<Throwable, Unit> from P
2021-03-12 08:26:37,119 [main:106] - GETTING Function1<Throwable, Unit> from Continuation<Any?>
2021-03-12 08:26:37,127 [main:106] - GETTING Function1<Throwable, Unit> from Any?
2021-03-12 08:26:37,131 [main:106] - GETTING Function1<Throwable, Unit> from Function0<Unit>
2021-03-12 08:26:37,139 [main:106] - GETTING Function1<Throwable, Unit> from CoroutineContext
2021-03-12 08:26:37,145 [main:106] - GETTING Function1<Throwable, Unit> from Int
2021-03-12 08:26:37,175 [main:106] - GETTING Function1<Throwable, Unit> from Boolean
2021-03-12 08:26:37,184 [main:106] - GETTING Function1<Throwable, Unit> from Int
2021-03-12 08:26:37,185 [main:106] - GETTING Function1<Throwable, Unit> from Long
2021-03-12 08:26:37,214 [main:106] - GETTING Function1<Throwable, Unit> from Continuation<Kla4>
2021-03-12 08:26:37,221 [main:106] - GETTING Function1<Throwable, Unit> from Int
2021-03-12 08:26:37,222 [main:106] - GETTING Function1<Throwable, Unit> from CoroutineContext
2021-03-12 08:26:37,223 [main:106] - GETTING Function1<Throwable, Unit> from CoroutineContext
2021-03-12 08:26:37,224 [main:106] - GETTING Function1<Throwable, Unit> from EmptyCoroutineContext
2021-03-12 08:26:37,237 [main:114] - replacement of x of type Function1<Throwable, Unit> is {a: Throwable -> println()}
2021-03-12 08:26:37,412 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 08:26:37,413 [main:66] - Compilation checking started
2021-03-12 08:26:38,146 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
IndexOutOfBoundsException("vmmri")?.let({a: Throwable -> println()})
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(IllegalStateException()!!)
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        Kla4().prope9 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope12.prope18 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:26:38,149 [main:107] - replacing (IllegalStateException()!!, Throwable)
2021-03-12 08:26:38,149 [main:50] - replacing IllegalStateException()!! Throwable
2021-03-12 08:26:38,149 [main:54] - Getting value of type Throwable
2021-03-12 08:26:38,335 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 08:26:38,520 [main:43] - GENERATING CALL OF fun Throwable(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 08:26:38,528 [main:61] - WITHOUT TYPE PARAMS = fun Throwable(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 08:26:39,148 [main:302] - generating value of type = String true depth = 3
2021-03-12 08:26:39,154 [main:302] - generating value of type = Throwable false depth = 3
2021-03-12 08:26:39,163 [main:95] - GENERATED = Throwable("bizgp", NumberFormatException())
2021-03-12 08:26:39,163 [main:58] - GENERATED VALUE OF TYPE Throwable = Throwable("bizgp", NumberFormatException())
2021-03-12 08:26:39,163 [main:61] - GENERATED IS CALL =true
2021-03-12 08:26:39,191 [main:67] - randomType = Kla11
2021-03-12 08:26:39,375 [main:302] - generating value of type = Kla11 false depth = 0
2021-03-12 08:26:39,381 [main:112] - generating klass Kla11 text = class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        Kla4().prope9 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}
2021-03-12 08:26:39,389 [main:106] - GETTING Throwable from P
2021-03-12 08:26:39,394 [main:106] - GETTING Throwable from Long
2021-03-12 08:26:39,423 [main:106] - GETTING Throwable from EmptyCoroutineContext
2021-03-12 08:26:39,436 [main:106] - GETTING Throwable from CoroutineContext
2021-03-12 08:26:39,442 [main:106] - GETTING Throwable from Int
2021-03-12 08:26:39,472 [main:106] - GETTING Throwable from CoroutineContext
2021-03-12 08:26:39,473 [main:106] - GETTING Throwable from Continuation<Kla4>
2021-03-12 08:26:39,480 [main:106] - GETTING Throwable from Int
2021-03-12 08:26:39,481 [main:106] - GETTING Throwable from Int
2021-03-12 08:26:39,482 [main:106] - GETTING Throwable from Function0<Unit>
2021-03-12 08:26:39,491 [main:106] - GETTING Throwable from Boolean
2021-03-12 08:26:39,500 [main:106] - GETTING Throwable from String
2021-03-12 08:26:39,517 [main:106] - GETTING Throwable from Any?
2021-03-12 08:26:39,520 [main:106] - GETTING Throwable from CoroutineContext
2021-03-12 08:26:39,521 [main:106] - GETTING Throwable from Continuation<Any?>
2021-03-12 08:26:39,528 [main:106] - GETTING Throwable from P
2021-03-12 08:26:39,529 [main:106] - GETTING Throwable from String
2021-03-12 08:26:39,529 [main:114] - replacement of IllegalStateException()!! of type Throwable is Throwable("bizgp", NumberFormatException())
2021-03-12 08:26:39,710 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:26:39,710 [main:66] - Compilation checking started
2021-03-12 08:26:40,468 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
IndexOutOfBoundsException("vmmri")?.let({a: Throwable -> println()})
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope14.getOrThrow()
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        Kla4().prope9 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope12.prope18 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:26:40,471 [main:107] - replacing (prope14.getOrThrow(), Any?)
2021-03-12 08:26:40,471 [main:50] - replacing prope14.getOrThrow() Any?
2021-03-12 08:26:40,471 [main:54] - Getting value of type Any?
2021-03-12 08:26:40,648 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:26:40,648 [main:58] - GENERATED VALUE OF TYPE Any? = "lmmno"
2021-03-12 08:26:40,648 [main:61] - GENERATED IS CALL =false
2021-03-12 08:26:40,673 [main:67] - randomType = Kla0
2021-03-12 08:26:40,853 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 08:26:40,859 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}
2021-03-12 08:26:41,035 [main:194] - Type params = []
2021-03-12 08:26:41,217 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 08:26:41,402 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:26:41,410 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:26:41,832 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 08:26:42,026 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:26:42,034 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:26:42,684 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-12 08:26:42,878 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:26:42,886 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:26:43,533 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:26:43,534 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:26:43,534 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:26:43,546 [main:106] - GETTING Any? from P
2021-03-12 08:26:43,551 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:26:43,558 [main:106] - GETTING Any? from Int
2021-03-12 08:26:43,588 [main:106] - GETTING Any? from Long
2021-03-12 08:26:43,617 [main:106] - GETTING Any? from String
2021-03-12 08:26:43,634 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:26:43,635 [main:106] - GETTING Any? from String
2021-03-12 08:26:43,636 [main:106] - GETTING Any? from Int
2021-03-12 08:26:43,637 [main:106] - GETTING Any? from P
2021-03-12 08:26:43,638 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:26:43,638 [main:106] - GETTING Any? from Function0<Unit>
2021-03-12 08:26:43,648 [main:106] - GETTING Any? from Continuation<Kla4>
2021-03-12 08:26:43,655 [main:106] - GETTING Any? from Int
2021-03-12 08:26:43,656 [main:106] - GETTING Any? from EmptyCoroutineContext
2021-03-12 08:26:43,670 [main:106] - GETTING Any? from Continuation<Any?>
2021-03-12 08:26:43,677 [main:106] - GETTING Any? from Boolean
2021-03-12 08:26:43,685 [main:106] - GETTING Any? from Any?
2021-03-12 08:26:43,688 [main:114] - replacement of prope14.getOrThrow() of type Any? is "lmmno"
2021-03-12 08:26:43,865 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 08:26:43,865 [main:66] - Compilation checking started
2021-03-12 08:26:44,624 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
IndexOutOfBoundsException("vmmri")?.let({a: Throwable -> println()})
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        Kla4().prope9 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope12.prope18 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:26:44,626 [main:107] - replacing (prope16, Int)
2021-03-12 08:26:44,626 [main:50] - replacing prope16 Int
2021-03-12 08:26:44,626 [main:54] - Getting value of type Int
2021-03-12 08:26:44,807 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:26:44,813 [main:58] - GENERATED VALUE OF TYPE Int = 1272396627
2021-03-12 08:26:44,813 [main:61] - GENERATED IS CALL =false
2021-03-12 08:26:44,826 [main:67] - randomType = Int
2021-03-12 08:26:45,006 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:26:45,043 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:26:45,043 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3c108134]
2021-03-12 08:26:45,043 [main:78] - Generated call from random type = (864922275).compareTo(P(1118931594).i).countLeadingZeroBits()
2021-03-12 08:26:45,044 [main:106] - GETTING Int from String
2021-03-12 08:26:45,060 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@51835189], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e4c85e1]]
2021-03-12 08:26:45,060 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@51835189]
2021-03-12 08:26:45,060 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e4c85e1]
2021-03-12 08:26:45,239 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:26:45,246 [main:117] - GENERATED CALL = (fu1()).compareTo(fu0("ttkqh")).minus(-122)
2021-03-12 08:26:45,246 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c39c0d0]]
2021-03-12 08:26:45,246 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c39c0d0]
2021-03-12 08:26:45,246 [main:117] - GENERATED CALL = (fu1()).compareTo(fu0("ttkqh"), Kla4().prope8)
2021-03-12 08:26:45,246 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@1b3c341c], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@425531c9]]
2021-03-12 08:26:45,246 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@425531c9]
2021-03-12 08:26:45,246 [main:117] - GENERATED CALL = (fu1()).length.countOneBits()
2021-03-12 08:26:45,246 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@51835189], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@90001f0]]
2021-03-12 08:26:45,246 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@51835189]
2021-03-12 08:26:45,246 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@90001f0]
2021-03-12 08:26:45,246 [main:117] - GENERATED CALL = (fu1()).compareTo(fu1()).dec()
2021-03-12 08:26:45,246 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@1b3c341c], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3c108134]]
2021-03-12 08:26:45,247 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3c108134]
2021-03-12 08:26:45,247 [main:117] - GENERATED CALL = (fu1()).length.countLeadingZeroBits()
2021-03-12 08:26:45,247 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@1b3c341c], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7118ba4d]]
2021-03-12 08:26:45,247 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7118ba4d]
2021-03-12 08:26:45,426 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:26:45,432 [main:117] - GENERATED CALL = (fu1()).length.or(2021025242)
2021-03-12 08:26:45,432 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@51835189], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d574310]]
2021-03-12 08:26:45,432 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@51835189]
2021-03-12 08:26:45,432 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d574310]
2021-03-12 08:26:45,611 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:26:45,617 [main:117] - GENERATED CALL = (fu1()).compareTo(fu0("ttkqh")).plus(73)
2021-03-12 08:26:45,617 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@51835189], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@12909d67]]
2021-03-12 08:26:45,617 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@51835189]
2021-03-12 08:26:45,796 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:26:45,803 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@12909d67]
2021-03-12 08:26:45,803 [main:117] - GENERATED CALL = (fu1()).compareTo("kutan").rotateLeft(P(1118931594).i)
2021-03-12 08:26:45,803 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@1b3c341c], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e4c85e1]]
2021-03-12 08:26:45,803 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e4c85e1]
2021-03-12 08:26:45,982 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:26:45,988 [main:117] - GENERATED CALL = (fu1()).length.minus(96)
2021-03-12 08:26:45,988 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@1b3c341c], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6280d214]]
2021-03-12 08:26:45,988 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6280d214]
2021-03-12 08:26:45,988 [main:117] - GENERATED CALL = (fu1()).length.shl(P(1118931594).i)
2021-03-12 08:26:45,989 [main:114] - replacement of prope16 of type Int is (fu1()).length.countLeadingZeroBits()
2021-03-12 08:26:46,167 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:26:46,168 [main:66] - Compilation checking started
2021-03-12 08:26:46,683 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
IndexOutOfBoundsException("vmmri")?.let({a: Throwable -> println()})
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(fu1()).length.countLeadingZeroBits() = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        Kla4().prope9 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope12.prope18 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:26:46,686 [main:107] - replacing (x, Function1<Ty1, Unit>)
2021-03-12 08:26:46,686 [main:50] - replacing x Function1<Ty1, Unit>
2021-03-12 08:26:46,686 [main:54] - Getting value of type Function1<Ty1, Unit>
2021-03-12 08:26:46,879 [main:302] - generating value of type = Function1<Ty1, Unit> false depth = 0
2021-03-12 08:26:46,885 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:26:47,071 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:26:47,079 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:26:47,480 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 08:26:47,487 [main:95] - GENERATED = require(true)
2021-03-12 08:26:47,487 [main:58] - GENERATED VALUE OF TYPE Function1<Ty1, Unit> = {a: Ty1 -> require(true)}
2021-03-12 08:26:47,487 [main:61] - GENERATED IS CALL =false
2021-03-12 08:26:48,171 [main:67] - randomType = Kla2<Collection<Char>>?
2021-03-12 08:26:48,348 [main:302] - generating value of type = Kla2<Collection<Char>> false depth = 0
2021-03-12 08:26:48,354 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 08:26:49,527 [main:302] - generating value of type = Kla5 false depth = 2
2021-03-12 08:26:49,533 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}
2021-03-12 08:26:49,549 [main:106] - GETTING Function1<Ty1, Unit> from Boolean
2021-03-12 08:26:49,558 [main:106] - GETTING Function1<Ty1, Unit> from CoroutineContext
2021-03-12 08:26:49,564 [main:106] - GETTING Function1<Ty1, Unit> from EmptyCoroutineContext
2021-03-12 08:26:49,578 [main:106] - GETTING Function1<Ty1, Unit> from Long
2021-03-12 08:26:49,607 [main:106] - GETTING Function1<Ty1, Unit> from CoroutineContext
2021-03-12 08:26:49,608 [main:106] - GETTING Function1<Ty1, Unit> from Int
2021-03-12 08:26:49,639 [main:106] - GETTING Function1<Ty1, Unit> from String
2021-03-12 08:26:49,655 [main:106] - GETTING Function1<Ty1, Unit> from Int
2021-03-12 08:26:49,657 [main:106] - GETTING Function1<Ty1, Unit> from P
2021-03-12 08:26:49,662 [main:106] - GETTING Function1<Ty1, Unit> from CoroutineContext
2021-03-12 08:26:49,663 [main:106] - GETTING Function1<Ty1, Unit> from String
2021-03-12 08:26:49,664 [main:106] - GETTING Function1<Ty1, Unit> from Continuation<Kla4>
2021-03-12 08:26:49,672 [main:106] - GETTING Function1<Ty1, Unit> from Int
2021-03-12 08:26:49,673 [main:106] - GETTING Function1<Ty1, Unit> from Function0<Unit>
2021-03-12 08:26:49,682 [main:106] - GETTING Function1<Ty1, Unit> from P
2021-03-12 08:26:49,683 [main:106] - GETTING Function1<Ty1, Unit> from Any?
2021-03-12 08:26:49,687 [main:106] - GETTING Function1<Ty1, Unit> from Continuation<Any?>
2021-03-12 08:26:49,693 [main:114] - replacement of x of type Function1<Ty1, Unit> is {a: Ty1 -> require(true)}
2021-03-12 08:26:49,871 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 08:26:49,872 [main:66] - Compilation checking started
2021-03-12 08:26:50,391 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
{a: Ty1 -> require(true)}(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
IndexOutOfBoundsException("vmmri")?.let({a: Throwable -> println()})
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        Kla4().prope9 = {}
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope12.prope18 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:26:50,394 [main:107] - replacing ({}, Function0<Unit>)
2021-03-12 08:26:50,394 [main:50] - replacing {} Function0<Unit>
2021-03-12 08:26:50,394 [main:54] - Getting value of type Function0<Unit>
2021-03-12 08:26:50,575 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 08:26:50,581 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:26:50,767 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 08:26:50,775 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 08:26:51,395 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 08:26:51,402 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 08:26:51,408 [main:302] - generating value of type = Any false depth = 5
2021-03-12 08:26:51,408 [main:95] - GENERATED = check(true, { "riqcd"})
2021-03-12 08:26:51,408 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true, { "riqcd"})}
2021-03-12 08:26:51,408 [main:61] - GENERATED IS CALL =false
2021-03-12 08:26:51,421 [main:67] - randomType = Boolean
2021-03-12 08:26:51,596 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:26:51,612 [main:106] - GETTING Function0<Unit> from Continuation<Kla4>
2021-03-12 08:26:51,618 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 08:26:51,626 [main:114] - replacement of {} of type Function0<Unit> is Kla4().prope9
2021-03-12 08:26:51,809 [main:33] - Trying to replace LAMBDA_EXPRESSION on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:26:51,809 [main:66] - Compilation checking started
2021-03-12 08:26:52,563 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
IndexOutOfBoundsException("vmmri")?.let({a: Throwable -> println()})
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope12.prope18 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:26:52,566 [main:107] - replacing (prope12.prope18, Function0<Unit>)
2021-03-12 08:26:52,566 [main:50] - replacing prope12.prope18 Function0<Unit>
2021-03-12 08:26:52,566 [main:54] - Getting value of type Function0<Unit>
2021-03-12 08:26:52,745 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 08:26:52,751 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:26:52,937 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 08:26:52,945 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 08:26:53,353 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 08:26:53,360 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 08:26:53,546 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 08:26:53,554 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 08:26:53,961 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 8
2021-03-12 08:26:53,968 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 08:26:54,155 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:26:54,163 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:26:54,565 [main:302] - generating value of type = Boolean true depth = 12
2021-03-12 08:26:54,571 [main:95] - GENERATED = require(false)
2021-03-12 08:26:54,572 [main:95] - GENERATED = contract({ require(false)})
2021-03-12 08:26:54,572 [main:95] - GENERATED = contract({ contract({ require(false)})})
2021-03-12 08:26:54,572 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ contract({ require(false)})})}
2021-03-12 08:26:54,572 [main:61] - GENERATED IS CALL =false
2021-03-12 08:26:54,597 [main:67] - randomType = P
2021-03-12 08:26:54,774 [main:302] - generating value of type = P false depth = 0
2021-03-12 08:26:54,780 [main:112] - generating klass P text = inline class P(val i: Int)
2021-03-12 08:26:54,955 [main:194] - Type params = []
2021-03-12 08:26:55,131 [main:302] - generating value of type = Int true depth = 2
2021-03-12 08:26:55,143 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 08:26:55,150 [main:114] - replacement of prope12.prope18 of type Function0<Unit> is Kla4().prope9
2021-03-12 08:26:55,326 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:26:55,327 [main:66] - Compilation checking started
2021-03-12 08:26:56,051 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
IndexOutOfBoundsException("vmmri")?.let({a: Throwable -> println()})
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:26:56,054 [main:107] - replacing (let({a: Throwable -> println()}), Unit?)
2021-03-12 08:26:56,054 [main:50] - replacing let({a: Throwable -> println()}) Unit?
2021-03-12 08:26:56,054 [main:54] - Getting value of type Unit?
2021-03-12 08:26:56,235 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 08:26:56,420 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 08:26:56,428 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 08:26:56,859 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 3
2021-03-12 08:26:56,865 [main:302] - generating value of type = Unit false depth = 4
2021-03-12 08:26:57,055 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 08:26:57,063 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 08:26:57,696 [main:302] - generating value of type = Int true depth = 7
2021-03-12 08:26:57,703 [main:302] - generating value of type = Function1<Int, Unit> false depth = 7
2021-03-12 08:26:57,709 [main:302] - generating value of type = Unit false depth = 8
2021-03-12 08:26:57,894 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 08:26:57,901 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 08:26:58,521 [main:302] - generating value of type = Boolean true depth = 11
2021-03-12 08:26:58,528 [main:302] - generating value of type = Function0<Any> false depth = 11
2021-03-12 08:26:58,534 [main:302] - generating value of type = Any false depth = 12
2021-03-12 08:26:58,534 [main:95] - GENERATED = check(true, { "znozu"})
2021-03-12 08:26:58,534 [main:95] - GENERATED = repeat(-101293658, {a: Int -> check(true, { "znozu"})})
2021-03-12 08:26:58,534 [main:95] - GENERATED = contract({ repeat(-101293658, {a: Int -> check(true, { "znozu"})})})
2021-03-12 08:26:58,534 [main:58] - GENERATED VALUE OF TYPE Unit? = contract({ repeat(-101293658, {a: Int -> check(true, { "znozu"})})})
2021-03-12 08:26:58,534 [main:61] - GENERATED IS CALL =true
2021-03-12 08:26:58,559 [main:67] - randomType = Kla3
2021-03-12 08:26:58,736 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 08:26:58,742 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}
2021-03-12 08:26:58,747 [main:149] - GENERATING call of type public final suspend fun fu7(): kotlin.Unit defined in a.Kla3[SimpleFunctionDescriptorImpl@606c7758]
2021-03-12 08:26:58,747 [main:78] - Generated call from random type = (Kla3()).fu7()
2021-03-12 08:26:58,747 [main:114] - replacement of let({a: Throwable -> println()}) of type Unit? is (Kla3()).fu7()
2021-03-12 08:26:58,925 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:26:58,925 [main:66] - Compilation checking started
2021-03-12 08:26:59,438 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
IndexOutOfBoundsException("vmmri")?.(Kla3()).fu7()
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:26:59,440 [main:107] - replacing (IndexOutOfBoundsException("vmmri")?.let({a: Throwable -> println()}), Unit?)
2021-03-12 08:26:59,440 [main:50] - replacing IndexOutOfBoundsException("vmmri")?.let({a: Throwable -> println()}) Unit?
2021-03-12 08:26:59,440 [main:54] - Getting value of type Unit?
2021-03-12 08:26:59,618 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 08:26:59,806 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 08:26:59,813 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 08:27:00,221 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 3
2021-03-12 08:27:00,227 [main:302] - generating value of type = Unit false depth = 4
2021-03-12 08:27:00,411 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 08:27:00,419 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 08:27:01,074 [main:302] - generating value of type = Boolean true depth = 7
2021-03-12 08:27:01,081 [main:302] - generating value of type = Function0<Any> false depth = 7
2021-03-12 08:27:01,087 [main:302] - generating value of type = Any false depth = 8
2021-03-12 08:27:01,087 [main:95] - GENERATED = check(true, { "mjebz"})
2021-03-12 08:27:01,087 [main:95] - GENERATED = contract({ check(true, { "mjebz"})})
2021-03-12 08:27:01,087 [main:58] - GENERATED VALUE OF TYPE Unit? = contract({ check(true, { "mjebz"})})
2021-03-12 08:27:01,087 [main:61] - GENERATED IS CALL =true
2021-03-12 08:27:01,565 [main:67] - randomType = Kla2<Kla9<Kla4>>
2021-03-12 08:27:01,741 [main:302] - generating value of type = Kla2<Kla9<Kla4>> false depth = 0
2021-03-12 08:27:01,747 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 08:27:03,758 [main:302] - generating value of type = Kla5 false depth = 2
2021-03-12 08:27:03,764 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}
2021-03-12 08:27:03,780 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.coroutines.Continuation<T>.resumeWithException(exception: kotlin.Throwable): kotlin.Unit defined in kotlin.coroutines[DeserializedSimpleFunctionDescriptor@1269cebf]
2021-03-12 08:27:03,957 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 08:27:03,966 [main:78] - Generated call from random type = (Kla5).resumeWithException(Error())
2021-03-12 08:27:03,966 [main:114] - replacement of IndexOutOfBoundsException("vmmri")?.let({a: Throwable -> println()}) of type Unit? is (Kla5).resumeWithException(Error())
2021-03-12 08:27:04,142 [main:33] - Trying to replace Element(SAFE_ACCESS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:27:04,143 [main:66] - Compilation checking started
2021-03-12 08:27:04,892 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return prope13
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:27:04,895 [main:107] - replacing (prope13, String)
2021-03-12 08:27:04,895 [main:50] - replacing prope13 String
2021-03-12 08:27:04,895 [main:54] - Getting value of type String
2021-03-12 08:27:05,071 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:27:05,077 [main:58] - GENERATED VALUE OF TYPE String = "flxyu"
2021-03-12 08:27:05,077 [main:61] - GENERATED IS CALL =false
2021-03-12 08:27:05,090 [main:67] - randomType = Boolean
2021-03-12 08:27:05,264 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:27:05,279 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:27:05,279 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:27:05,279 [main:78] - Generated call from random type = (true).compareTo(Kla4().prope8).toString(P(1982725439).i)
2021-03-12 08:27:05,279 [main:114] - replacement of prope13 of type String is (true).compareTo(Kla4().prope8).toString(P(1982725439).i)
2021-03-12 08:27:05,462 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:27:05,462 [main:66] - Compilation checking started
2021-03-12 08:27:06,190 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(1982725439).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && !prope17) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:27:06,193 [main:107] - replacing (!prope17, Boolean)
2021-03-12 08:27:06,193 [main:50] - replacing !prope17 Boolean
2021-03-12 08:27:06,193 [main:54] - Getting value of type Boolean
2021-03-12 08:27:06,370 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:27:06,376 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 08:27:06,376 [main:61] - GENERATED IS CALL =false
2021-03-12 08:27:06,388 [main:67] - randomType = Double
2021-03-12 08:27:06,566 [main:302] - generating value of type = Double true depth = 0
2021-03-12 08:27:06,602 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@685f7fd9]
2021-03-12 08:27:06,602 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cc89c78]
2021-03-12 08:27:06,602 [main:78] - Generated call from random type = (0.7361305470863276).toChar().isSurrogate()
2021-03-12 08:27:06,603 [main:106] - GETTING Boolean from Continuation<Any?>
2021-03-12 08:27:06,609 [main:113] - Case = [public abstract val context: kotlin.coroutines.CoroutineContext defined in kotlin.coroutines.Continuation[DeserializedPropertyDescriptor@50c04e73], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3fc58f8e]]
2021-03-12 08:27:06,609 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@3fc58f8e]
2021-03-12 08:27:06,609 [main:117] - GENERATED CALL = (fu4({a: Throwable -> println()})).context.equals(Kla1().prope5)
2021-03-12 08:27:06,609 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@1f43ac27], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]]
2021-03-12 08:27:06,609 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@1f43ac27]
2021-03-12 08:27:06,610 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]
2021-03-12 08:27:06,610 [main:117] - GENERATED CALL = (fu4({a: Throwable -> println()})).equals(Kla1().prope5).not()
2021-03-12 08:27:06,610 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@1f43ac27], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]]
2021-03-12 08:27:06,610 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@1f43ac27]
2021-03-12 08:27:06,788 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:27:06,788 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]
2021-03-12 08:27:06,788 [main:117] - GENERATED CALL = (fu4({a: Throwable -> println()})).equals("lxkxv").xor(Kla4().prope8)
2021-03-12 08:27:06,788 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@1f43ac27], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]]
2021-03-12 08:27:06,788 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@1f43ac27]
2021-03-12 08:27:06,788 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]
2021-03-12 08:27:06,789 [main:117] - GENERATED CALL = (fu4({a: Throwable -> println()})).equals(Kla1().prope5).and(Kla4().prope8)
2021-03-12 08:27:06,789 [main:113] - Case = [public abstract fun resumeWith(result: kotlin.Result<kotlin.Any?>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@78dbdb37], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@71a9d74]]
2021-03-12 08:27:06,789 [main:149] - GENERATING call of type public abstract fun resumeWith(result: kotlin.Result<kotlin.Any?>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@78dbdb37]
2021-03-12 08:27:06,973 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-12 08:27:07,158 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 08:27:07,165 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 08:27:07,572 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-12 08:27:07,578 [main:302] - generating value of type = Any false depth = 4
2021-03-12 08:27:07,579 [main:95] - GENERATED = runCatching<Any?>({ "lvhhg"})
2021-03-12 08:27:07,579 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@71a9d74]
2021-03-12 08:27:07,579 [main:117] - GENERATED CALL = (fu4({a: Throwable -> println()})).resumeWith(runCatching<Any?>({ "lvhhg"})).equals(Kla1().prope5)
2021-03-12 08:27:07,579 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@1f43ac27], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]]
2021-03-12 08:27:07,579 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@1f43ac27]
2021-03-12 08:27:07,579 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]
2021-03-12 08:27:07,579 [main:117] - GENERATED CALL = (fu4({a: Throwable -> println()})).equals(Kla1().prope5).or(Kla4().prope8)
2021-03-12 08:27:07,579 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@1f43ac27]]
2021-03-12 08:27:07,579 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@1f43ac27]
2021-03-12 08:27:07,757 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:27:07,758 [main:117] - GENERATED CALL = (fu4({a: Throwable -> println()})).equals("zamhl")
2021-03-12 08:27:07,758 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@1f43ac27], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]]
2021-03-12 08:27:07,758 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@1f43ac27]
2021-03-12 08:27:07,758 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]
2021-03-12 08:27:07,936 [main:117] - GENERATED CALL = (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)
2021-03-12 08:27:07,936 [main:114] - replacement of !prope17 of type Boolean is (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)
2021-03-12 08:27:08,114 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:27:08,115 [main:66] - Compilation checking started
2021-03-12 08:27:08,890 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(1982725439).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((18190.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:27:09,081 [main:141] - TRYING TO REPLACE CONSTANT 18190
2021-03-12 08:27:09,261 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:27:09,261 [main:66] - Compilation checking started
2021-03-12 08:27:09,989 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(1982725439).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:27:09,990 [main:141] - TRYING TO REPLACE CONSTANT 116
2021-03-12 08:27:10,169 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 08:27:10,169 [main:66] - Compilation checking started
2021-03-12 08:27:10,688 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(1982725439).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(shr(-1885106046).toUByte()).toString(P(1118931594).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:27:10,689 [main:141] - TRYING TO REPLACE CONSTANT 1118931594
2021-03-12 08:27:10,869 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 08:27:10,870 [main:66] - Compilation checking started
2021-03-12 08:27:11,611 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(1982725439).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:27:11,612 [main:141] - TRYING TO REPLACE CONSTANT 1885106046
2021-03-12 08:27:11,795 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:27:11,796 [main:66] - Compilation checking started
2021-03-12 08:27:12,312 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(1982725439).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { false}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(i) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:27:12,313 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-12 08:27:12,492 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 08:27:12,493 [main:66] - Compilation checking started
2021-03-12 08:27:13,249 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(1982725439).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:27:13,250 [main:141] - TRYING TO REPLACE CONSTANT 6350246603923996636
2021-03-12 08:27:13,431 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 08:27:13,432 [main:66] - Compilation checking started
2021-03-12 08:27:14,177 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(1982725439).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(6350246603923996636)).toLong().toString(P(1118931594).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:27:14,178 [main:141] - TRYING TO REPLACE CONSTANT 1118931594
2021-03-12 08:27:14,370 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PARENTHESIZED)
2021-03-12 08:27:14,370 [main:66] - Compilation checking started
2021-03-12 08:27:15,108 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(1982725439).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(1118931594).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:27:15,109 [main:141] - TRYING TO REPLACE CONSTANT 1118931594
2021-03-12 08:27:15,297 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:27:15,298 [main:66] - Compilation checking started
2021-03-12 08:27:16,035 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(1982725439).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:27:16,035 [main:141] - TRYING TO REPLACE CONSTANT 777972992
2021-03-12 08:27:16,219 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:27:16,220 [main:66] - Compilation checking started
2021-03-12 08:27:16,755 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(1982725439).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(toInt()) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:27:16,756 [main:141] - TRYING TO REPLACE CONSTANT 6350246603923996636
2021-03-12 08:27:16,936 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 08:27:16,938 [main:141] - TRYING TO REPLACE CONSTANT 1118931594
2021-03-12 08:27:17,116 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:27:17,116 [main:66] - Compilation checking started
2021-03-12 08:27:17,660 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(1982725439).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(i).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:27:17,660 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 08:27:17,839 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 08:27:17,839 [main:66] - Compilation checking started
2021-03-12 08:27:18,566 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(1982725439).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:27:18,567 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-12 08:27:18,755 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:27:18,755 [main:66] - Compilation checking started
2021-03-12 08:27:19,278 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(1982725439).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(checkFinished)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..(8629.toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:27:19,279 [main:141] - TRYING TO REPLACE CONSTANT 8629
2021-03-12 08:27:19,459 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:27:19,460 [main:66] - Compilation checking started
2021-03-12 08:27:20,193 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(1982725439).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(9.toUByte()).or(-1847121539)) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:27:20,194 [main:141] - TRYING TO REPLACE CONSTANT 1847121539
2021-03-12 08:27:20,380 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PARENTHESIZED)
2021-03-12 08:27:20,381 [main:66] - Compilation checking started
2021-03-12 08:27:21,117 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(1982725439).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(9.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:27:21,118 [main:141] - TRYING TO REPLACE CONSTANT 9
2021-03-12 08:27:21,299 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:27:21,300 [main:66] - Compilation checking started
2021-03-12 08:27:22,098 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(1982725439).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:27:22,098 [main:141] - TRYING TO REPLACE CONSTANT 118984644
2021-03-12 08:27:22,279 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:27:22,279 [main:66] - Compilation checking started
2021-03-12 08:27:22,802 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(i) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(1982725439).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:27:22,802 [main:141] - TRYING TO REPLACE CONSTANT 1118931594
2021-03-12 08:27:22,983 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:27:22,984 [main:66] - Compilation checking started
2021-03-12 08:27:23,506 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(i).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(1982725439).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:27:23,507 [main:141] - TRYING TO REPLACE CONSTANT 922266730
2021-03-12 08:27:23,693 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:27:23,693 [main:66] - Compilation checking started
2021-03-12 08:27:24,213 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(1982725439).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(i))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:27:24,214 [main:141] - TRYING TO REPLACE CONSTANT 6350246603923996636
2021-03-12 08:27:24,396 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PARENTHESIZED)
2021-03-12 08:27:24,397 [main:66] - Compilation checking started
2021-03-12 08:27:25,131 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(1982725439).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:27:25,132 [main:141] - TRYING TO REPLACE CONSTANT 1118931594
2021-03-12 08:27:25,312 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 08:27:25,313 [main:141] - TRYING TO REPLACE CONSTANT 6350246603923996636
2021-03-12 08:27:25,494 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:27:25,494 [main:66] - Compilation checking started
2021-03-12 08:27:26,267 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(1982725439).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(1118931594).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:27:26,268 [main:141] - TRYING TO REPLACE CONSTANT 1118931594
2021-03-12 08:27:26,452 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:27:26,453 [main:66] - Compilation checking started
2021-03-12 08:27:27,214 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(1982725439).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:27:27,215 [main:141] - TRYING TO REPLACE CONSTANT 1118931594
2021-03-12 08:27:27,400 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 08:27:27,400 [main:66] - Compilation checking started
2021-03-12 08:27:27,940 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(1982725439).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (18).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(xor(P(1118931594).i)).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:27:27,940 [main:141] - TRYING TO REPLACE CONSTANT 18
2021-03-12 08:27:28,126 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:27:28,126 [main:66] - Compilation checking started
2021-03-12 08:27:28,875 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(1982725439).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(55).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:27:28,876 [main:141] - TRYING TO REPLACE CONSTANT 55
2021-03-12 08:27:29,071 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 08:27:29,071 [main:66] - Compilation checking started
2021-03-12 08:27:29,846 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(1982725439).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(1118931594).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:27:29,847 [main:141] - TRYING TO REPLACE CONSTANT 1118931594
2021-03-12 08:27:30,037 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:27:30,038 [main:66] - Compilation checking started
2021-03-12 08:27:30,803 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(1982725439).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div(0.834078119101236).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:27:30,804 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 08:27:30,988 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 08:27:30,989 [main:141] - TRYING TO REPLACE CONSTANT 0.834078119101236
2021-03-12 08:27:31,173 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(PARENTHESIZED)
2021-03-12 08:27:31,173 [main:66] - Compilation checking started
2021-03-12 08:27:31,913 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(1982725439).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P(1118931594).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:27:31,913 [main:141] - TRYING TO REPLACE CONSTANT 1118931594
2021-03-12 08:27:32,098 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PARENTHESIZED)
2021-03-12 08:27:32,098 [main:66] - Compilation checking started
2021-03-12 08:27:32,843 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(1982725439).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = (3222777465511432319.toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:27:32,844 [main:141] - TRYING TO REPLACE CONSTANT 3222777465511432319
2021-03-12 08:27:33,029 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:27:33,029 [main:66] - Compilation checking started
2021-03-12 08:27:33,770 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(1982725439).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo(7.toUByte()).minus(-7)
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:27:33,770 [main:141] - TRYING TO REPLACE CONSTANT 7
2021-03-12 08:27:33,956 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PARENTHESIZED)
2021-03-12 08:27:33,957 [main:66] - Compilation checking started
2021-03-12 08:27:34,727 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(1982725439).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo(7.toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:27:34,728 [main:141] - TRYING TO REPLACE CONSTANT 7
2021-03-12 08:27:34,917 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PARENTHESIZED)
2021-03-12 08:27:34,918 [main:66] - Compilation checking started
2021-03-12 08:27:35,678 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(1982725439).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:27:35,678 [main:141] - TRYING TO REPLACE CONSTANT 1118931594
2021-03-12 08:27:35,868 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:27:35,868 [main:66] - Compilation checking started
2021-03-12 08:27:36,402 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(1982725439).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(i).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:27:36,403 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 08:27:36,587 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 08:27:36,588 [main:66] - Compilation checking started
2021-03-12 08:27:37,124 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (equals("arwos")).compareTo(Kla4().prope8).toString(P(1982725439).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:27:37,124 [main:141] - TRYING TO REPLACE CONSTANT 1982725439
2021-03-12 08:27:37,311 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:27:37,311 [main:66] - Compilation checking started
2021-03-12 08:27:38,064 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:27:38,064 [main:141] - TRYING TO REPLACE CONSTANT null
2021-03-12 08:27:38,256 [main:33] - Trying to replace Element(NULL) on Element(NULL)
2021-03-12 08:27:38,256 [main:41] - AFTER TRY 2 res = package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}


2021-03-12 08:27:38,637 [main:112] - generating klass P text = inline class P(val i: Int)
2021-03-12 08:27:38,850 [main:194] - Type params = []
2021-03-12 08:27:39,035 [main:302] - generating value of type = Int true depth = 1
2021-03-12 08:27:39,043 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}
2021-03-12 08:27:39,229 [main:194] - Type params = []
2021-03-12 08:27:39,415 [main:302] - generating value of type = CoroutineContext false depth = 1
2021-03-12 08:27:39,612 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:27:39,622 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:27:40,085 [main:302] - generating value of type = Key<*> false depth = 4
2021-03-12 08:27:40,291 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:27:40,300 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:27:41,005 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 7
2021-03-12 08:27:41,226 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:27:41,235 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:27:41,942 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:27:41,942 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:27:41,942 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:27:41,942 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}
2021-03-12 08:27:41,942 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 08:27:42,862 [main:302] - generating value of type = Kla5 false depth = 1
2021-03-12 08:27:42,870 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}
2021-03-12 08:27:42,870 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}
2021-03-12 08:27:42,871 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}
2021-03-12 08:27:42,871 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}
2021-03-12 08:27:42,871 [main:112] - generating klass Kla7 text = open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}
2021-03-12 08:27:43,084 [main:194] - Type params = []
2021-03-12 08:27:43,270 [main:302] - generating value of type = CoroutineContext false depth = 1
2021-03-12 08:27:43,466 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:27:43,477 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:27:43,933 [main:302] - generating value of type = Key<*> false depth = 4
2021-03-12 08:27:44,139 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:27:44,149 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:27:44,854 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:27:44,855 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:27:44,855 [main:112] - generating klass Kla8 text = class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}
2021-03-12 08:27:44,855 [main:112] - generating klass Kla9 text = abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-12 08:27:46,307 [main:302] - generating value of type = Kla12 false depth = 1
2021-03-12 08:27:46,315 [main:112] - generating klass Kla12 text = object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}
2021-03-12 08:27:46,467 [main:112] - generating klass Kla10 text = class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}
2021-03-12 08:27:46,468 [main:112] - generating klass Kla11 text = class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}
2021-03-12 08:27:46,468 [main:112] - generating klass Kla12 text = object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}
2021-03-12 08:27:46,468 [main:112] - generating klass null text = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}
2021-03-12 08:27:46,468 [main:112] - generating klass null text = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}
2021-03-12 08:27:46,468 [main:112] - generating klass Kla6 text = companion object Kla6 : Kla0()
2021-03-12 08:27:46,468 [main:112] - generating klass null text = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}
2021-03-12 08:27:46,469 [main:112] - generating klass null text = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}
2021-03-12 08:27:46,469 [main:112] - generating klass Kla13 text = companion object Kla13 : Kla7()
2021-03-12 08:27:46,876 [main:43] - GENERATING CALL OF suspend fun foo(p: P = P(1)) {}
2021-03-12 08:27:46,884 [main:61] - WITHOUT TYPE PARAMS = suspend fun foo(p: P = P(1)) {}
2021-03-12 08:27:47,082 [main:302] - generating value of type = P false depth = 1
2021-03-12 08:27:47,091 [main:112] - generating klass P text = inline class P(val i: Int)
2021-03-12 08:27:47,275 [main:194] - Type params = []
2021-03-12 08:27:47,504 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:27:47,513 [main:95] - GENERATED = foo(P(-747240537))
2021-03-12 08:27:47,698 [main:43] - GENERATING CALL OF suspend fun bar(p: P) {}
2021-03-12 08:27:47,706 [main:61] - WITHOUT TYPE PARAMS = suspend fun bar(p: P) {}
2021-03-12 08:27:47,906 [main:302] - generating value of type = P false depth = 1
2021-03-12 08:27:47,914 [main:112] - generating klass P text = inline class P(val i: Int)
2021-03-12 08:27:48,100 [main:194] - Type params = []
2021-03-12 08:27:48,285 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:27:48,293 [main:95] - GENERATED = bar(P(1101107293))
2021-03-12 08:27:48,478 [main:43] - GENERATING CALL OF suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}
2021-03-12 08:27:48,486 [main:61] - WITHOUT TYPE PARAMS = suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}
2021-03-12 08:27:48,684 [main:302] - generating value of type = String true depth = 1
2021-03-12 08:27:48,692 [main:95] - GENERATED = fu0("kfmlb")
2021-03-12 08:27:48,877 [main:43] - GENERATING CALL OF fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}
2021-03-12 08:27:48,885 [main:61] - WITHOUT TYPE PARAMS = fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}
2021-03-12 08:27:49,325 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 1
2021-03-12 08:27:49,333 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 08:27:49,530 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:27:49,540 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:27:49,971 [main:302] - generating value of type = Boolean true depth = 5
2021-03-12 08:27:49,979 [main:95] - GENERATED = check(false)
2021-03-12 08:27:49,980 [main:95] - GENERATED = fu2({ check(false)})
2021-03-12 08:27:50,165 [main:43] - GENERATING CALL OF fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}
2021-03-12 08:27:50,682 [main:61] - WITHOUT TYPE PARAMS = fun <Ty0> fu3(prope3: (MutableMap<Float, Long>) -> Unit): Continuation<MutableMap<Float, Long>> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}
2021-03-12 08:27:51,147 [main:302] - generating value of type = Function1<MutableMap<Float, Long>, Unit> false depth = 1
2021-03-12 08:27:51,155 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 08:27:51,352 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:27:51,362 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:27:51,842 [main:302] - generating value of type = Boolean true depth = 5
2021-03-12 08:27:51,851 [main:95] - GENERATED = check(true)
2021-03-12 08:27:51,851 [main:95] - GENERATED = fu3<MutableMap<Float, Long>>({a: MutableMap<Float, Long> -> check(true)})
2021-03-12 08:27:52,038 [main:43] - GENERATING CALL OF fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}
2021-03-12 08:27:52,047 [main:61] - WITHOUT TYPE PARAMS = fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}
2021-03-12 08:27:52,487 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 1
2021-03-12 08:27:52,495 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 08:27:52,692 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 08:27:52,702 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 08:27:53,143 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 5
2021-03-12 08:27:53,151 [main:302] - generating value of type = Unit false depth = 6
2021-03-12 08:27:53,348 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:27:53,357 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:27:53,789 [main:302] - generating value of type = Boolean true depth = 9
2021-03-12 08:27:53,798 [main:95] - GENERATED = require(true)
2021-03-12 08:27:53,798 [main:95] - GENERATED = contract({ require(true)})
2021-03-12 08:27:53,798 [main:95] - GENERATED = fu4({a: Throwable -> contract({ require(true)})})
2021-03-12 08:27:53,984 [main:43] - GENERATING CALL OF fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}
2021-03-12 08:27:53,992 [main:61] - WITHOUT TYPE PARAMS = fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}
2021-03-12 08:27:54,433 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 1
2021-03-12 08:27:54,441 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 08:27:54,638 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:27:54,648 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:27:55,081 [main:302] - generating value of type = Any false depth = 5
2021-03-12 08:27:55,082 [main:95] - GENERATED = println("vwmbc")
2021-03-12 08:27:55,082 [main:95] - GENERATED = fu12({ println("vwmbc")})
2021-03-12 08:27:55,268 [main:43] - GENERATING CALL OF fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"
2021-03-12 08:27:55,276 [main:61] - WITHOUT TYPE PARAMS = fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"
2021-03-12 08:27:55,476 [main:302] - generating value of type = String true depth = 1
2021-03-12 08:27:55,484 [main:302] - generating value of type = String true depth = 1
2021-03-12 08:27:55,493 [main:95] - GENERATED = fu13("ekfhd", "ldnpv")
2021-03-12 08:27:55,678 [main:43] - GENERATING CALL OF inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)
2021-03-12 08:27:55,686 [main:61] - WITHOUT TYPE PARAMS = inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)
2021-03-12 08:27:56,130 [main:302] - generating value of type = SuspendFunction1<String, String> false depth = 1
2021-03-12 08:27:56,138 [main:302] - generating value of type = String true depth = 2
2021-03-12 08:27:56,146 [main:302] - generating value of type = String true depth = 1
2021-03-12 08:27:56,155 [main:95] - GENERATED = fu14({a: String -> "jxsfr"}, "faslp")
2021-03-12 08:27:56,379 [main:43] - GENERATING CALL OF fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}
2021-03-12 08:27:56,926 [main:61] - WITHOUT TYPE PARAMS = fun <Ty1> fu15(x: (MutableMap<Array<UInt>, String>) -> Unit): Continuation<MutableMap<Array<UInt>, String>> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}
2021-03-12 08:27:57,397 [main:302] - generating value of type = Function1<MutableMap<Array<UInt>, String>, Unit> false depth = 1
2021-03-12 08:27:57,405 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 08:27:57,603 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:27:57,613 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:27:58,048 [main:302] - generating value of type = Boolean true depth = 5
2021-03-12 08:27:58,056 [main:95] - GENERATED = check(false)
2021-03-12 08:27:58,057 [main:95] - GENERATED = fu15<MutableMap<Array<UInt>, String>>({a: MutableMap<Array<UInt>, String> -> check(false)})
2021-03-12 08:27:58,244 [main:43] - GENERATING CALL OF fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}
2021-03-12 08:27:58,252 [main:61] - WITHOUT TYPE PARAMS = fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}
2021-03-12 08:27:58,695 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 1
2021-03-12 08:27:58,703 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 08:27:58,902 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:27:58,912 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:27:59,347 [main:302] - generating value of type = Boolean true depth = 5
2021-03-12 08:27:59,356 [main:95] - GENERATED = require(false)
2021-03-12 08:27:59,356 [main:95] - GENERATED = fu16({a: Throwable -> require(false)})
2021-03-12 08:27:59,593 [main:43] - Try ‚Ññ2
2021-03-12 08:28:04,921 [main:48] - Already checked
2021-03-12 08:28:07,730 [main:69] - Trying to insert override fun resumeWith(prope25: Result<Any?>) {
        prope25.getOrThrow()
    }
2021-03-12 08:28:07,840 [main:66] - Compilation checking started
2021-03-12 08:28:09,453 [main:103] - Trying to change 182 nodes
2021-03-12 08:28:09,453 [main:107] - replacing (prope31, Int)
2021-03-12 08:28:09,455 [main:50] - replacing prope31 Int
2021-03-12 08:28:09,455 [main:54] - Getting value of type Int
2021-03-12 08:28:09,687 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:28:09,697 [main:58] - GENERATED VALUE OF TYPE Int = -2144262120
2021-03-12 08:28:09,698 [main:61] - GENERATED IS CALL =false
2021-03-12 08:28:09,741 [main:67] - randomType = Kla3
2021-03-12 08:28:09,975 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 08:28:09,985 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}
2021-03-12 08:28:09,990 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in a.Kla3[DeserializedSimpleFunctionDescriptor@4fa2a90e]
2021-03-12 08:28:09,990 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:28:10,222 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:28:10,233 [main:78] - Generated call from random type = (Kla3()).equals(Kla1().prope5).compareTo(false)
2021-03-12 08:28:10,233 [main:106] - GETTING Int from P
2021-03-12 08:28:10,238 [main:113] - Case = [public final val i: kotlin.Int defined in a.P[PropertyDescriptorImpl@4f6dd914], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4836e093]]
2021-03-12 08:28:10,238 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4836e093]
2021-03-12 08:28:10,239 [main:117] - GENERATED CALL = (P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i)
2021-03-12 08:28:10,239 [main:113] - Case = [public final val i: kotlin.Int defined in a.P[PropertyDescriptorImpl@4f6dd914], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@12909d67]]
2021-03-12 08:28:10,239 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@12909d67]
2021-03-12 08:28:10,239 [main:117] - GENERATED CALL = (P(P(1118931594).i)).i.rotateLeft((P(1118931594).i))
2021-03-12 08:28:10,239 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in a.P[SimpleFunctionDescriptorImpl@7b4d7861], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]]
2021-03-12 08:28:10,239 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in a.P[SimpleFunctionDescriptorImpl@7b4d7861]
2021-03-12 08:28:10,470 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:28:10,470 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:28:10,471 [main:117] - GENERATED CALL = (P(P(1118931594).i)).equals("dzzma").compareTo(Kla4().prope8)
2021-03-12 08:28:10,471 [main:113] - Case = [public final val i: kotlin.Int defined in a.P[PropertyDescriptorImpl@4f6dd914], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43ac6084]]
2021-03-12 08:28:10,471 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43ac6084]
2021-03-12 08:28:10,471 [main:117] - GENERATED CALL = (P(P(1118931594).i)).i.unaryPlus()
2021-03-12 08:28:10,471 [main:113] - Case = [public final val i: kotlin.Int defined in a.P[PropertyDescriptorImpl@4f6dd914], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@19e015b2]]
2021-03-12 08:28:10,471 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@19e015b2]
2021-03-12 08:28:10,471 [main:117] - GENERATED CALL = (P(P(1118931594).i)).i.coerceIn((true).compareTo(Kla4().prope8), (P(1118931594).i))
2021-03-12 08:28:10,471 [main:113] - Case = [public final val i: kotlin.Int defined in a.P[PropertyDescriptorImpl@4f6dd914], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@1ae7c0a8]]
2021-03-12 08:28:10,471 [main:117] - GENERATED CALL = (P(P(1118931594).i)).i.absoluteValue
2021-03-12 08:28:10,471 [main:113] - Case = [public final val i: kotlin.Int defined in a.P[PropertyDescriptorImpl@4f6dd914], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55149f6d]]
2021-03-12 08:28:10,471 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@55149f6d]
2021-03-12 08:28:10,471 [main:117] - GENERATED CALL = (P(P(1118931594).i)).i.unaryMinus()
2021-03-12 08:28:10,472 [main:113] - Case = [public final val i: kotlin.Int defined in a.P[PropertyDescriptorImpl@4f6dd914], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4f7e7ef8]]
2021-03-12 08:28:10,472 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4f7e7ef8]
2021-03-12 08:28:10,472 [main:117] - GENERATED CALL = (P(P(1118931594).i)).i.xor(P(1118931594).i)
2021-03-12 08:28:10,472 [main:113] - Case = [public final val i: kotlin.Int defined in a.P[PropertyDescriptorImpl@4f6dd914], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1f07773e]]
2021-03-12 08:28:10,472 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1f07773e]
2021-03-12 08:28:10,472 [main:117] - GENERATED CALL = (P(P(1118931594).i)).i.rotateRight((true).compareTo(Kla4().prope8))
2021-03-12 08:28:10,472 [main:113] - Case = [public final val i: kotlin.Int defined in a.P[PropertyDescriptorImpl@4f6dd914], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@53acdc6e]]
2021-03-12 08:28:10,472 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@53acdc6e]
2021-03-12 08:28:10,472 [main:117] - GENERATED CALL = (P(P(1118931594).i)).i.takeHighestOneBit()
2021-03-12 08:28:10,472 [main:114] - replacement of prope31 of type Int is (P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i)
2021-03-12 08:28:10,705 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:28:10,706 [main:66] - Compilation checking started
2021-03-12 08:28:11,692 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = 0
        outer@while (prope30 < 10) {
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) {
                if (prope30 + prope31 > 3) break@outer
                prope22 += "$prope30,$prope31;"
                fu26()
                prope31++
            }
            prope22 += "i++;"
            prope30++
        }
        prope22 += "done;"
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        if (prope25.isSuccess) {
            resume(prope25.getOrThrow())
        } else {
            fu29(prope25.exceptionOrNull()!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        prope26.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        prope26.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = 0
    var prope21 = false

    var prope28: () -> Unit = {}

    fun fu34() {
        prope27 = 0
        prope21 = false
        prope28 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> { c ->
        prope27++
        prope28 = { c.resume(Unit) }
    }

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (prope30 in 1..numberOfSuspensions) {
            if (prope27 != prope30) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + prope30 + ", got " + prope27)
            prope28()
        }
        if (prope27 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error("Wrong state-machine generated: it is finished early")
        prope28()
        if (checkFinished && !prope21) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope24.prope28 = {
            prope24.prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:28:11,693 [main:107] - replacing ("tail-call optimization miss: method at " + it, String)
2021-03-12 08:28:11,695 [main:50] - replacing "tail-call optimization miss: method at " + it String
2021-03-12 08:28:11,695 [main:54] - Getting value of type String
2021-03-12 08:28:11,941 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:28:11,952 [main:58] - GENERATED VALUE OF TYPE String = "iiooo"
2021-03-12 08:28:11,952 [main:61] - GENERATED IS CALL =false
2021-03-12 08:28:11,975 [main:67] - randomType = Char
2021-03-12 08:28:12,216 [main:302] - generating value of type = Char true depth = 0
2021-03-12 08:28:12,250 [main:149] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6105522c]
2021-03-12 08:28:12,250 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]
2021-03-12 08:28:12,491 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:28:12,503 [main:78] - Generated call from random type = ('Íú§').toShort().toString(-697508940)
2021-03-12 08:28:12,503 [main:106] - GETTING String from Continuation<MutableMap<Array<UInt>, String>>
2021-03-12 08:28:12,513 [main:106] - GETTING String from Int
2021-03-12 08:28:12,542 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]]
2021-03-12 08:28:12,542 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:28:12,542 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]
2021-03-12 08:28:12,542 [main:117] - GENERATED CALL = (P(931472561).i).toChar().uppercase()
2021-03-12 08:28:12,542 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]]
2021-03-12 08:28:12,542 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b]
2021-03-12 08:28:12,543 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]
2021-03-12 08:28:12,543 [main:117] - GENERATED CALL = (P(931472561).i).toByte().toString(P(931472561).i)
2021-03-12 08:28:12,543 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]]
2021-03-12 08:28:12,543 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:28:12,543 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]
2021-03-12 08:28:12,543 [main:117] - GENERATED CALL = (P(931472561).i).toChar().titlecase()
2021-03-12 08:28:12,543 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]]
2021-03-12 08:28:12,543 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:28:12,543 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]
2021-03-12 08:28:12,543 [main:117] - GENERATED CALL = (P(931472561).i).toChar().lowercase()
2021-03-12 08:28:12,543 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]]
2021-03-12 08:28:12,543 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d]
2021-03-12 08:28:12,543 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]
2021-03-12 08:28:12,544 [main:117] - GENERATED CALL = (P(931472561).i).toShort().toString(P(1118931594).i)
2021-03-12 08:28:12,544 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:28:12,544 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f]
2021-03-12 08:28:12,544 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:28:12,544 [main:117] - GENERATED CALL = (P(931472561).i).toLong().toString((true).compareTo(Kla4().prope8))
2021-03-12 08:28:12,544 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:28:12,544 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4]
2021-03-12 08:28:12,544 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:28:12,544 [main:117] - GENERATED CALL = (P(931472561).i).div((P(1118931594).i).div(-6350246603923996636)).toString((P(1118931594).i))
2021-03-12 08:28:12,544 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:28:12,544 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:28:12,545 [main:117] - GENERATED CALL = (P(931472561).i).toString((P(1118931594).i))
2021-03-12 08:28:12,545 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:28:12,545 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:28:12,545 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:28:12,545 [main:117] - GENERATED CALL = (P(931472561).i).compareTo((P(1118931594).i)).toString((true).compareTo(Kla4().prope8))
2021-03-12 08:28:12,545 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]]
2021-03-12 08:28:12,545 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:28:12,545 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]
2021-03-12 08:28:12,545 [main:117] - GENERATED CALL = (P(931472561).i).toChar().plus(var prope5 =
2021-03-12 08:28:12,545 [main:114] - replacement of "tail-call optimization miss: method at " + it of type String is (P(931472561).i).toChar().titlecase()
2021-03-12 08:28:12,781 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:28:12,782 [main:66] - Compilation checking started
2021-03-12 08:28:13,745 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = 0
        outer@while (prope30 < 10) {
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) {
                if (prope30 + prope31 > 3) break@outer
                prope22 += "$prope30,$prope31;"
                fu26()
                prope31++
            }
            prope22 += "i++;"
            prope30++
        }
        prope22 += "done;"
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        if (prope25.isSuccess) {
            resume(prope25.getOrThrow())
        } else {
            fu29(prope25.exceptionOrNull()!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith(method) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        prope26.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = 0
    var prope21 = false

    var prope28: () -> Unit = {}

    fun fu34() {
        prope27 = 0
        prope21 = false
        prope28 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> { c ->
        prope27++
        prope28 = { c.resume(Unit) }
    }

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (prope30 in 1..numberOfSuspensions) {
            if (prope27 != prope30) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + prope30 + ", got " + prope27)
            prope28()
        }
        if (prope27 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error("Wrong state-machine generated: it is finished early")
        prope28()
        if (checkFinished && !prope21) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope24.prope28 = {
            prope24.prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:28:13,748 [main:107] - replacing (prope25.exceptionOrNull(), Throwable?)
2021-03-12 08:28:13,749 [main:50] - replacing prope25.exceptionOrNull() Throwable?
2021-03-12 08:28:13,749 [main:54] - Getting value of type Throwable?
2021-03-12 08:28:13,993 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 08:28:14,245 [main:43] - GENERATING CALL OF fun ConcurrentModificationException(message: kotlin.String?): Throwable = TODO()
2021-03-12 08:28:14,258 [main:61] - WITHOUT TYPE PARAMS = fun ConcurrentModificationException(message: kotlin.String?): Throwable = TODO()
2021-03-12 08:28:14,855 [main:302] - generating value of type = String true depth = 3
2021-03-12 08:28:14,867 [main:95] - GENERATED = ConcurrentModificationException("mnobx")
2021-03-12 08:28:14,867 [main:58] - GENERATED VALUE OF TYPE Throwable? = ConcurrentModificationException("mnobx")
2021-03-12 08:28:14,867 [main:61] - GENERATED IS CALL =true
2021-03-12 08:28:15,190 [main:67] - randomType = UInt?
2021-03-12 08:28:15,430 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 08:28:15,468 [main:106] - GETTING Throwable? from Int
2021-03-12 08:28:15,498 [main:106] - GETTING Throwable? from Function0<Unit>
2021-03-12 08:28:15,506 [main:106] - GETTING Throwable? from EmptyCoroutineContext
2021-03-12 08:28:15,520 [main:106] - GETTING Throwable? from Function0<Unit>
2021-03-12 08:28:15,521 [main:106] - GETTING Throwable? from Boolean
2021-03-12 08:28:15,529 [main:106] - GETTING Throwable? from String
2021-03-12 08:28:15,545 [main:106] - GETTING Throwable? from P
2021-03-12 08:28:15,549 [main:106] - GETTING Throwable? from String
2021-03-12 08:28:15,550 [main:106] - GETTING Throwable? from Int
2021-03-12 08:28:15,551 [main:106] - GETTING Throwable? from P
2021-03-12 08:28:15,551 [main:106] - GETTING Throwable? from Continuation<MutableMap<Array<UInt>, String>>
2021-03-12 08:28:15,561 [main:106] - GETTING Throwable? from Boolean
2021-03-12 08:28:15,562 [main:106] - GETTING Throwable? from Continuation<MutableMap<Float, Long>>
2021-03-12 08:28:15,570 [main:106] - GETTING Throwable? from Continuation<Any?>
2021-03-12 08:28:15,577 [main:106] - GETTING Throwable? from String
2021-03-12 08:28:15,578 [main:106] - GETTING Throwable? from CoroutineContext
2021-03-12 08:28:15,583 [main:106] - GETTING Throwable? from Any?
2021-03-12 08:28:15,586 [main:106] - GETTING Throwable? from String
2021-03-12 08:28:15,587 [main:106] - GETTING Throwable? from CoroutineContext
2021-03-12 08:28:15,588 [main:106] - GETTING Throwable? from Continuation<Any?>
2021-03-12 08:28:15,588 [main:106] - GETTING Throwable? from Boolean
2021-03-12 08:28:15,589 [main:106] - GETTING Throwable? from Int
2021-03-12 08:28:15,589 [main:106] - GETTING Throwable? from Int
2021-03-12 08:28:15,590 [main:106] - GETTING Throwable? from CoroutineContext
2021-03-12 08:28:15,591 [main:106] - GETTING Throwable? from EmptyCoroutineContext
2021-03-12 08:28:15,591 [main:106] - GETTING Throwable? from CoroutineContext
2021-03-12 08:28:15,592 [main:106] - GETTING Throwable? from ULong
2021-03-12 08:28:15,618 [main:106] - GETTING Throwable? from Long
2021-03-12 08:28:15,647 [main:106] - GETTING Throwable? from CoroutineContext
2021-03-12 08:28:15,647 [main:106] - GETTING Throwable? from P
2021-03-12 08:28:15,648 [main:106] - GETTING Throwable? from CoroutineContext
2021-03-12 08:28:15,648 [main:106] - GETTING Throwable? from ULong
2021-03-12 08:28:15,649 [main:106] - GETTING Throwable? from Any?
2021-03-12 08:28:15,649 [main:114] - replacement of prope25.exceptionOrNull() of type Throwable? is ConcurrentModificationException("mnobx")
2021-03-12 08:28:15,886 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:28:15,886 [main:66] - Compilation checking started
2021-03-12 08:28:16,855 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = 0
        outer@while (prope30 < 10) {
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) {
                if (prope30 + prope31 > 3) break@outer
                prope22 += "$prope30,$prope31;"
                fu26()
                prope31++
            }
            prope22 += "i++;"
            prope30++
        }
        prope22 += "done;"
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if (prope25.isSuccess) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith(method) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        prope26.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = 0
    var prope21 = false

    var prope28: () -> Unit = {}

    fun fu34() {
        prope27 = 0
        prope21 = false
        prope28 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> { c ->
        prope27++
        prope28 = { c.resume(Unit) }
    }

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (prope30 in 1..numberOfSuspensions) {
            if (prope27 != prope30) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + prope30 + ", got " + prope27)
            prope28()
        }
        if (prope27 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error("Wrong state-machine generated: it is finished early")
        prope28()
        if (checkFinished && !prope21) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope24.prope28 = {
            prope24.prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:28:16,858 [main:107] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + prope30, String)
2021-03-12 08:28:16,859 [main:50] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + prope30 String
2021-03-12 08:28:16,859 [main:54] - Getting value of type String
2021-03-12 08:28:17,098 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:28:17,109 [main:58] - GENERATED VALUE OF TYPE String = "guhzs"
2021-03-12 08:28:17,109 [main:61] - GENERATED IS CALL =false
2021-03-12 08:28:17,768 [main:67] - randomType = ArrayList<Int>
2021-03-12 08:28:18,009 [main:302] - generating value of type = ArrayList<Int> false depth = 0
2021-03-12 08:28:18,261 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Int): ArrayList<Int> = TODO()
2021-03-12 08:28:18,274 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Int): ArrayList<Int> = TODO()
2021-03-12 08:28:18,531 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:28:18,542 [main:95] - GENERATED = arrayListOf<Int>(1584515088)
2021-03-12 08:28:18,653 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:28:18,653 [main:78] - Generated call from random type = (arrayListOf<Int>(1584515088)).size.toString(P(931472561).i)
2021-03-12 08:28:18,654 [main:106] - GETTING String from P
2021-03-12 08:28:18,658 [main:113] - Case = [public final val i: kotlin.Int defined in a.P[PropertyDescriptorImpl@4f6dd914], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:28:18,659 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:28:18,914 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:28:18,926 [main:117] - GENERATED CALL = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).i.toString(751331836)
2021-03-12 08:28:18,926 [main:114] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + prope30 of type String is "guhzs"
2021-03-12 08:28:19,203 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 08:28:19,203 [main:66] - Compilation checking started
2021-03-12 08:28:20,175 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = 0
        outer@while (prope30 < 10) {
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) {
                if (prope30 + prope31 > 3) break@outer
                prope22 += "$prope30,$prope31;"
                fu26()
                prope31++
            }
            prope22 += "i++;"
            prope30++
        }
        prope22 += "done;"
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if (prope25.isSuccess) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith(method) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        prope26.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = 0
    var prope21 = false

    var prope28: () -> Unit = {}

    fun fu34() {
        prope27 = 0
        prope21 = false
        prope28 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> { c ->
        prope27++
        prope28 = { c.resume(Unit) }
    }

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in 1..numberOfSuspensions) {
            if (prope27 != prope30) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (prope27 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error("Wrong state-machine generated: it is finished early")
        prope28()
        if (checkFinished && !prope21) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope24.prope28 = {
            prope24.prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:28:20,177 [main:107] - replacing (!prope21, Boolean)
2021-03-12 08:28:20,177 [main:50] - replacing !prope21 Boolean
2021-03-12 08:28:20,177 [main:54] - Getting value of type Boolean
2021-03-12 08:28:20,417 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:28:20,428 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 08:28:20,428 [main:61] - GENERATED IS CALL =false
2021-03-12 08:28:20,778 [main:67] - randomType = HashSet<Kla1>
2021-03-12 08:28:21,018 [main:302] - generating value of type = HashSet<Kla1> false depth = 0
2021-03-12 08:28:21,269 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: Kla1): HashSet<Kla1> = TODO()
2021-03-12 08:28:21,282 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: Kla1): HashSet<Kla1> = TODO()
2021-03-12 08:28:21,536 [main:302] - generating value of type = Kla1 false depth = 3
2021-03-12 08:28:21,548 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}
2021-03-12 08:28:21,548 [main:95] - GENERATED = hashSetOf<Kla1>(Kla1())
2021-03-12 08:28:21,642 [main:149] - GENERATING call of type public open fun add(element: a.Kla1): kotlin.Boolean defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@242497dd]
2021-03-12 08:28:21,883 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 08:28:21,894 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}
2021-03-12 08:28:21,895 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]
2021-03-12 08:28:21,895 [main:78] - Generated call from random type = (hashSetOf<Kla1>(Kla1())).add(Kla1()).xor(Kla4().prope8)
2021-03-12 08:28:21,896 [main:106] - GETTING Boolean from CoroutineContext
2021-03-12 08:28:21,901 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4e0a1e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]]
2021-03-12 08:28:21,901 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4e0a1e]
2021-03-12 08:28:21,902 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]
2021-03-12 08:28:21,902 [main:117] - GENERATED CALL = (Kla7().context).equals(Kla1().prope5).equals(Kla1().prope5)
2021-03-12 08:28:21,902 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4e0a1e], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]]
2021-03-12 08:28:21,902 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4e0a1e]
2021-03-12 08:28:21,902 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]
2021-03-12 08:28:21,902 [main:117] - GENERATED CALL = (Kla7().context).equals(Kla8().prope14).not()
2021-03-12 08:28:21,902 [main:113] - Case = [public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@a04926c], public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@4ad177f3]]
2021-03-12 08:28:21,902 [main:149] - GENERATING call of type public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@a04926c]
2021-03-12 08:28:22,139 [main:302] - generating value of type = R false depth = 0
2021-03-12 08:28:22,416 [main:43] - GENERATING CALL OF fun <R> synchronized(lock: kotlin.Any, block: ()->ULong): R = TODO()
2021-03-12 08:28:22,429 [main:61] - WITHOUT TYPE PARAMS = fun <R> synchronized(lock: kotlin.Any, block: ()->ULong): R = TODO()
2021-03-12 08:28:23,305 [main:302] - generating value of type = Any false depth = 3
2021-03-12 08:28:23,305 [main:302] - generating value of type = Function0<ULong> false depth = 3
2021-03-12 08:28:23,316 [main:302] - generating value of type = ULong true depth = 4
2021-03-12 08:28:23,328 [main:95] - GENERATED = synchronized<ULong>("ojrju", { 767766082107316413.toULong()})
2021-03-12 08:28:23,567 [main:302] - generating value of type = Function2<R, Element, R> false depth = 0
2021-03-12 08:28:23,578 [main:302] - generating value of type = R false depth = 1
2021-03-12 08:28:24,791 [main:43] - GENERATING CALL OF fun <R> run(block: ()->HashSet<Float?>): R = TODO()
2021-03-12 08:28:24,804 [main:61] - WITHOUT TYPE PARAMS = fun <R> run(block: ()->HashSet<Float?>): R = TODO()
2021-03-12 08:28:25,385 [main:302] - generating value of type = Function0<HashSet<Float?>> false depth = 4
2021-03-12 08:28:25,397 [main:302] - generating value of type = HashSet<Float?> false depth = 5
2021-03-12 08:28:25,646 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): HashSet<Float?> = TODO()
2021-03-12 08:28:25,659 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): HashSet<Float?> = TODO()
2021-03-12 08:28:25,914 [main:95] - GENERATED = linkedSetOf<Float?>()
2021-03-12 08:28:25,914 [main:95] - GENERATED = run<HashSet<Float?>>({ linkedSetOf<Float?>()})
2021-03-12 08:28:25,914 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@4ad177f3]
2021-03-12 08:28:25,915 [main:117] - GENERATED CALL = (Kla7().context).fold(synchronized<ULong>("ojrju", { 767766082107316413.toULong()}), {a: R, b: Element -> run<HashSet<Float?>>({ linkedSetOf<Float?>()})})?.equals(Kla1().prope5)
2021-03-12 08:28:25,915 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4e0a1e], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]]
2021-03-12 08:28:25,915 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4e0a1e]
2021-03-12 08:28:26,152 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:28:26,153 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]
2021-03-12 08:28:26,390 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:28:26,401 [main:117] - GENERATED CALL = (Kla7().context).equals("eiolf").or(true)
2021-03-12 08:28:26,401 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4e0a1e], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]]
2021-03-12 08:28:26,401 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4e0a1e]
2021-03-12 08:28:26,402 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]
2021-03-12 08:28:26,640 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:28:26,651 [main:117] - GENERATED CALL = (Kla7().context).equals(Kla8().prope14).xor(true)
2021-03-12 08:28:26,651 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4e0a1e]]
2021-03-12 08:28:26,651 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4e0a1e]
2021-03-12 08:28:26,888 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:28:26,888 [main:117] - GENERATED CALL = (Kla7().context).equals("mywad")
2021-03-12 08:28:26,892 [main:113] - Case = [public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4e37fc9b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext.Element[DeserializedSimpleFunctionDescriptor@2b508d10]]
2021-03-12 08:28:26,892 [main:149] - GENERATING call of type public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4e37fc9b]
2021-03-12 08:28:27,129 [main:302] - generating value of type = Key<E> false depth = 0
2021-03-12 08:28:27,391 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-12 08:28:27,404 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-12 08:28:28,318 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-12 08:28:28,319 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4e37fc9b]
2021-03-12 08:28:28,319 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4e0a1e], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]]
2021-03-12 08:28:28,319 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4e0a1e]
2021-03-12 08:28:28,319 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]
2021-03-12 08:28:28,319 [main:117] - GENERATED CALL = (Kla7().context).equals(Kla1().prope5).and(Kla4().prope8)
2021-03-12 08:28:28,319 [main:113] - Case = [public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@a04926c], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun <T : kotlin.Any, R : kotlin.collections.Iterable<T>> R.contains(element: T?): kotlin.Boolean where R : kotlin.ranges.ClosedRange<T> defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@e78f01e]]
2021-03-12 08:28:28,319 [main:149] - GENERATING call of type public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@a04926c]
2021-03-12 08:28:28,556 [main:302] - generating value of type = R false depth = 0
2021-03-12 08:28:29,504 [main:43] - GENERATING CALL OF fun <R> run(block: ()->Kla9<Kla8>): R = TODO()
2021-03-12 08:28:29,517 [main:61] - WITHOUT TYPE PARAMS = fun <R> run(block: ()->Kla9<Kla8>): R = TODO()
2021-03-12 08:28:30,083 [main:302] - generating value of type = Function0<Kla9<Kla8>> false depth = 3
2021-03-12 08:28:30,094 [main:302] - generating value of type = Kla9<Kla8> false depth = 4
2021-03-12 08:28:30,105 [main:112] - generating klass Kla9 text = abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-12 08:28:30,972 [main:302] - generating value of type = Kla12 false depth = 6
2021-03-12 08:28:30,983 [main:112] - generating klass Kla12 text = object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}
2021-03-12 08:28:30,984 [main:95] - GENERATED = run<Kla9<Kla8>>({ Kla12})
2021-03-12 08:28:31,220 [main:302] - generating value of type = Function2<R, Element, R> false depth = 0
2021-03-12 08:28:31,231 [main:302] - generating value of type = R false depth = 1
2021-03-12 08:28:31,569 [main:43] - GENERATING CALL OF fun <T, R> with(receiver: Kla5, block: T.()->Kla15): R = TODO()
2021-03-12 08:28:31,583 [main:61] - WITHOUT TYPE PARAMS = fun <T, R> with(receiver: Kla5, block: T.()->Kla15): R = TODO()
2021-03-12 08:28:32,147 [main:302] - generating value of type = Kla5 false depth = 4
2021-03-12 08:28:32,160 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}
2021-03-12 08:28:32,160 [main:385] - Cant generate call of fun <T, R> with(receiver: Kla5, block: T.()->Kla15): R = TODO()
2021-03-12 08:28:32,160 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun <T : kotlin.Any, R : kotlin.collections.Iterable<T>> R.contains(element: T?): kotlin.Boolean where R : kotlin.ranges.ClosedRange<T> defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@e78f01e]
2021-03-12 08:28:32,397 [main:302] - generating value of type = T false depth = 0
2021-03-12 08:28:33,245 [main:43] - GENERATING CALL OF fun <T> maxOf(a: Byte?, b: Byte?, c: Byte?, comparator: kotlin.Comparator<Byte?>): T = TODO()
2021-03-12 08:28:33,258 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: Byte?, b: Byte?, c: Byte?, comparator: kotlin.Comparator<Byte?>): T = TODO()
2021-03-12 08:28:33,842 [main:302] - generating value of type = Byte true depth = 3
2021-03-12 08:28:33,853 [main:302] - generating value of type = Byte true depth = 3
2021-03-12 08:28:33,864 [main:302] - generating value of type = Byte true depth = 3
2021-03-12 08:28:33,876 [main:302] - generating value of type = Comparator<Byte?> false depth = 3
2021-03-12 08:28:34,127 [main:43] - GENERATING CALL OF fun <T> nullsFirst(): Comparator<Byte?> = TODO()
2021-03-12 08:28:34,140 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsFirst(): Comparator<Byte?> = TODO()
2021-03-12 08:28:34,442 [main:95] - GENERATED = nullsFirst<Byte?>()
2021-03-12 08:28:34,442 [main:95] - GENERATED = maxOf<Byte?>(120, 34, 82, nullsFirst<Byte?>())
2021-03-12 08:28:34,443 [main:117] - GENERATED CALL = (Kla7().context).fold(run<Kla9<Kla8>>({ Kla12}), {a: R, b: Element -> })?.contains(maxOf<Byte?>(120, 34, 82, nullsFirst<Byte?>()))
2021-03-12 08:28:34,443 [main:114] - replacement of !prope21 of type Boolean is (Kla7().context).equals(Kla8().prope14).not()
2021-03-12 08:28:34,681 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:28:34,681 [main:66] - Compilation checking started
2021-03-12 08:28:35,642 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = 0
        outer@while (prope30 < 10) {
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) {
                if (prope30 + prope31 > 3) break@outer
                prope22 += "$prope30,$prope31;"
                fu26()
                prope31++
            }
            prope22 += "i++;"
            prope30++
        }
        prope22 += "done;"
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if (prope25.isSuccess) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith(method) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        prope26.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = 0
    var prope21 = false

    var prope28: () -> Unit = {}

    fun fu34() {
        prope27 = 0
        prope21 = false
        prope28 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> { c ->
        prope27++
        prope28 = { c.resume(Unit) }
    }

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in 1..numberOfSuspensions) {
            if (prope27 != prope30) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (prope27 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error("Wrong state-machine generated: it is finished early")
        prope28()
        if (checkFinished && (Kla7().context).equals(Kla8().prope14).not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope24.prope28 = {
            prope24.prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:28:35,645 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 08:28:35,645 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 08:28:35,645 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 08:28:35,905 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 08:28:35,921 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 08:28:35,945 [main:67] - randomType = Int
2021-03-12 08:28:36,182 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:28:36,224 [main:106] - GETTING EmptyCoroutineContext from ULong
2021-03-12 08:28:36,245 [main:106] - GETTING EmptyCoroutineContext from Boolean
2021-03-12 08:28:36,253 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 08:28:36,270 [main:106] - GETTING EmptyCoroutineContext from Boolean
2021-03-12 08:28:36,270 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 08:28:36,271 [main:106] - GETTING EmptyCoroutineContext from P
2021-03-12 08:28:36,275 [main:106] - GETTING EmptyCoroutineContext from Function0<Unit>
2021-03-12 08:28:36,284 [main:106] - GETTING EmptyCoroutineContext from Continuation<MutableMap<Float, Long>>
2021-03-12 08:28:36,292 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 08:28:36,292 [main:106] - GETTING EmptyCoroutineContext from P
2021-03-12 08:28:36,293 [main:106] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-12 08:28:36,299 [main:106] - GETTING EmptyCoroutineContext from Boolean
2021-03-12 08:28:36,299 [main:106] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-12 08:28:36,300 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 08:28:36,329 [main:106] - GETTING EmptyCoroutineContext from Any?
2021-03-12 08:28:36,332 [main:106] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-12 08:28:36,333 [main:106] - GETTING EmptyCoroutineContext from P
2021-03-12 08:28:36,334 [main:106] - GETTING EmptyCoroutineContext from Continuation<Any?>
2021-03-12 08:28:36,340 [main:106] - GETTING EmptyCoroutineContext from EmptyCoroutineContext
2021-03-12 08:28:36,352 [main:114] - replacement of EmptyCoroutineContext of type EmptyCoroutineContext is Kla1().context
2021-03-12 08:28:36,588 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:28:36,588 [main:66] - Compilation checking started
2021-03-12 08:28:37,568 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = 0
        outer@while (prope30 < 10) {
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) {
                if (prope30 + prope31 > 3) break@outer
                prope22 += "$prope30,$prope31;"
                fu26()
                prope31++
            }
            prope22 += "i++;"
            prope30++
        }
        prope22 += "done;"
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if (prope25.isSuccess) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith(method) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        prope26.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = 0
    var prope21 = false

    var prope28: () -> Unit = {}

    fun fu34() {
        prope27 = 0
        prope21 = false
        prope28 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> { c ->
        prope27++
        prope28 = { c.resume(Unit) }
    }

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in 1..numberOfSuspensions) {
            if (prope27 != prope30) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (prope27 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error("Wrong state-machine generated: it is finished early")
        prope28()
        if (checkFinished && (Kla7().context).equals(Kla8().prope14).not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope24.prope28 = {
            prope24.prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:28:37,570 [main:107] - replacing (numberOfSuspensions, Int)
2021-03-12 08:28:37,570 [main:50] - replacing numberOfSuspensions Int
2021-03-12 08:28:37,570 [main:54] - Getting value of type Int
2021-03-12 08:28:37,814 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:28:37,826 [main:58] - GENERATED VALUE OF TYPE Int = -618250050
2021-03-12 08:28:37,826 [main:61] - GENERATED IS CALL =false
2021-03-12 08:28:38,165 [main:67] - randomType = Set<ULong>
2021-03-12 08:28:38,166 [main:106] - GETTING Int from Function0<Unit>
2021-03-12 08:28:38,174 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]]
2021-03-12 08:28:38,174 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@14032602]
2021-03-12 08:28:38,175 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:28:38,175 [main:117] - GENERATED CALL = (Kla4().prope9).equals(Kla1().prope5).compareTo(Kla11().prope17)
2021-03-12 08:28:38,175 [main:114] - replacement of numberOfSuspensions of type Int is (Kla4().prope9).equals(Kla1().prope5).compareTo(Kla11().prope17)
2021-03-12 08:28:38,410 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:28:38,410 [main:66] - Compilation checking started
2021-03-12 08:28:39,429 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = 0
        outer@while (prope30 < 10) {
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) {
                if (prope30 + prope31 > 3) break@outer
                prope22 += "$prope30,$prope31;"
                fu26()
                prope31++
            }
            prope22 += "i++;"
            prope30++
        }
        prope22 += "done;"
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if (prope25.isSuccess) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith(method) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        prope26.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = 0
    var prope21 = false

    var prope28: () -> Unit = {}

    fun fu34() {
        prope27 = 0
        prope21 = false
        prope28 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> { c ->
        prope27++
        prope28 = { c.resume(Unit) }
    }

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in 1..(Kla4().prope9).equals(Kla1().prope5).compareTo(Kla11().prope17)) {
            if (prope27 != prope30) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (prope27 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error("Wrong state-machine generated: it is finished early")
        prope28()
        if (checkFinished && (Kla7().context).equals(Kla8().prope14).not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope24.prope28 = {
            prope24.prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:28:39,431 [main:107] - replacing (prope25, Result<Ty2>)
2021-03-12 08:28:39,432 [main:50] - replacing prope25 Result<Ty2>
2021-03-12 08:28:39,432 [main:54] - Getting value of type Result<Ty2>
2021-03-12 08:28:39,671 [main:302] - generating value of type = Result<Ty2> false depth = 0
2021-03-12 08:28:39,925 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty2): Result<Ty2> = TODO()
2021-03-12 08:28:39,938 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty2): Result<Ty2> = TODO()
2021-03-12 08:28:40,508 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty2): Result<Ty2> = TODO()
2021-03-12 08:28:40,509 [main:58] - GENERATED VALUE OF TYPE Result<Ty2> = 
2021-03-12 08:28:41,546 [main:67] - randomType = LinkedHashMap<LinkedHashSet<UByte>, Short>
2021-03-12 08:28:41,788 [main:302] - generating value of type = LinkedHashMap<LinkedHashSet<UByte>, Short> false depth = 0
2021-03-12 08:28:42,044 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<LinkedHashSet<UByte>, Short>): LkedHashMap<LkedHashSet<UByte>, Short> = TODO()
2021-03-12 08:28:42,057 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<LinkedHashSet<UByte>, Short>): LkedHashMap<LkedHashSet<UByte>, Short> = TODO()
2021-03-12 08:28:42,319 [main:302] - generating value of type = Pair<LinkedHashSet<UByte>, Short> false depth = 3
2021-03-12 08:28:42,575 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: LinkedHashSet<UByte>, second: Short): Pair<LinkedHashSet<UByte>, Short> = TODO()
2021-03-12 08:28:42,589 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: LinkedHashSet<UByte>, second: Short): Pair<LinkedHashSet<UByte>, Short> = TODO()
2021-03-12 08:28:42,849 [main:302] - generating value of type = LinkedHashSet<UByte> false depth = 6
2021-03-12 08:28:43,105 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: UByte): LkedHashSet<UByte> = TODO()
2021-03-12 08:28:43,119 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: UByte): LkedHashSet<UByte> = TODO()
2021-03-12 08:28:43,382 [main:302] - generating value of type = UByte true depth = 9
2021-03-12 08:28:43,394 [main:95] - GENERATED = linkedSetOf<UByte>(0.toUByte())
2021-03-12 08:28:43,394 [main:302] - generating value of type = Short true depth = 6
2021-03-12 08:28:43,405 [main:95] - GENERATED = Pair<LinkedHashSet<UByte>, Short>(linkedSetOf<UByte>(0.toUByte()), 23448)
2021-03-12 08:28:43,405 [main:95] - GENERATED = linkedMapOf<LinkedHashSet<UByte>, Short>(Pair<LinkedHashSet<UByte>, Short>(linkedSetOf<UByte>(0.toUByte()), 23448))
2021-03-12 08:28:43,541 [main:106] - GETTING Result<Ty2> from CoroutineContext
2021-03-12 08:28:43,547 [main:106] - GETTING Result<Ty2> from Long
2021-03-12 08:28:43,576 [main:106] - GETTING Result<Ty2> from Continuation<MutableMap<Array<UInt>, String>>
2021-03-12 08:28:43,586 [main:106] - GETTING Result<Ty2> from CoroutineContext
2021-03-12 08:28:43,587 [main:106] - GETTING Result<Ty2> from Int
2021-03-12 08:28:43,617 [main:106] - GETTING Result<Ty2> from Function0<Unit>
2021-03-12 08:28:43,627 [main:106] - GETTING Result<Ty2> from Continuation<Any?>
2021-03-12 08:28:43,634 [main:106] - GETTING Result<Ty2> from EmptyCoroutineContext
2021-03-12 08:28:43,648 [main:106] - GETTING Result<Ty2> from String
2021-03-12 08:28:43,665 [main:106] - GETTING Result<Ty2> from Int
2021-03-12 08:28:43,666 [main:106] - GETTING Result<Ty2> from EmptyCoroutineContext
2021-03-12 08:28:43,667 [main:106] - GETTING Result<Ty2> from Function0<Unit>
2021-03-12 08:28:43,668 [main:106] - GETTING Result<Ty2> from ULong
2021-03-12 08:28:43,690 [main:106] - GETTING Result<Ty2> from Int
2021-03-12 08:28:43,691 [main:106] - GETTING Result<Ty2> from Any?
2021-03-12 08:28:43,696 [main:106] - GETTING Result<Ty2> from Continuation<MutableMap<Float, Long>>
2021-03-12 08:28:43,704 [main:106] - GETTING Result<Ty2> from P
2021-03-12 08:28:43,709 [main:106] - GETTING Result<Ty2> from Boolean
2021-03-12 08:28:43,718 [main:106] - GETTING Result<Ty2> from Continuation<Any?>
2021-03-12 08:28:43,719 [main:106] - GETTING Result<Ty2> from CoroutineContext
2021-03-12 08:28:43,720 [main:106] - GETTING Result<Ty2> from P
2021-03-12 08:28:43,721 [main:106] - GETTING Result<Ty2> from CoroutineContext
2021-03-12 08:28:43,722 [main:106] - GETTING Result<Ty2> from String
2021-03-12 08:28:43,723 [main:106] - GETTING Result<Ty2> from ULong
2021-03-12 08:28:43,725 [main:106] - GETTING Result<Ty2> from Any?
2021-03-12 08:28:43,726 [main:106] - GETTING Result<Ty2> from CoroutineContext
2021-03-12 08:28:43,727 [main:106] - GETTING Result<Ty2> from Boolean
2021-03-12 08:28:43,728 [main:106] - GETTING Result<Ty2> from CoroutineContext
2021-03-12 08:28:43,729 [main:106] - GETTING Result<Ty2> from Int
2021-03-12 08:28:43,730 [main:106] - GETTING Result<Ty2> from Boolean
2021-03-12 08:28:43,731 [main:106] - GETTING Result<Ty2> from P
2021-03-12 08:28:43,732 [main:106] - GETTING Result<Ty2> from String
2021-03-12 08:28:43,733 [main:106] - GETTING Result<Ty2> from String
2021-03-12 08:28:43,733 [main:111] - Cant find and generate replacement for prope25 type Result<Ty2>
2021-03-12 08:28:43,733 [main:107] - replacing ("tail-call optimization hit: method " + method + " has no state-machine ", String)
2021-03-12 08:28:43,735 [main:50] - replacing "tail-call optimization hit: method " + method + " has no state-machine " String
2021-03-12 08:28:43,735 [main:54] - Getting value of type String
2021-03-12 08:28:44,016 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:28:44,027 [main:58] - GENERATED VALUE OF TYPE String = "wjtsc"
2021-03-12 08:28:44,027 [main:61] - GENERATED IS CALL =false
2021-03-12 08:28:44,676 [main:67] - randomType = List<Boolean?>
2021-03-12 08:28:44,676 [main:106] - GETTING String from String
2021-03-12 08:28:44,693 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62046f2d]]
2021-03-12 08:28:44,693 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62046f2d]
2021-03-12 08:28:44,934 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:28:44,948 [main:117] - GENERATED CALL = (fu14({a: String -> "jxsfr"}, "faslp")).commonPrefixWith("diwga", Kla4().prope8)
2021-03-12 08:28:44,948 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e3c851f], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]]
2021-03-12 08:28:44,948 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e3c851f]
2021-03-12 08:28:45,196 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:28:45,207 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]
2021-03-12 08:28:45,208 [main:117] - GENERATED CALL = (fu14({a: String -> "jxsfr"}, "faslp")).get(2090830957).uppercase()
2021-03-12 08:28:45,208 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3e028244], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75eb3a44]]
2021-03-12 08:28:45,208 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3e028244]
2021-03-12 08:28:45,208 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75eb3a44]
2021-03-12 08:28:45,448 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:28:45,463 [main:117] - GENERATED CALL = (fu14({a: String -> "jxsfr"}, "faslp")).subSequence(P(1118931594).i, P(1118931594).i).commonSuffixWith("asjpb", Kla11().prope17)
2021-03-12 08:28:45,463 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@1b3c341c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:28:45,463 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:28:45,463 [main:117] - GENERATED CALL = (fu14({a: String -> "jxsfr"}, "faslp")).length.toString(P(1118931594).i)
2021-03-12 08:28:45,463 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a9bcbb4]]
2021-03-12 08:28:45,463 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a9bcbb4]
2021-03-12 08:28:45,703 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 08:28:45,714 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 08:28:45,726 [main:117] - GENERATED CALL = (fu14({a: String -> "jxsfr"}, "faslp")).filter({a: Char -> false})
2021-03-12 08:28:45,726 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a1e5ee0]]
2021-03-12 08:28:45,726 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a1e5ee0]
2021-03-12 08:28:45,966 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:28:45,980 [main:117] - GENERATED CALL = (fu14({a: String -> "jxsfr"}, "faslp")).removeSuffix("fjdba")
2021-03-12 08:28:45,981 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@484c126a]]
2021-03-12 08:28:45,981 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@484c126a]
2021-03-12 08:28:45,981 [main:117] - GENERATED CALL = (fu14({a: String -> "jxsfr"}, "faslp")).trimMargin(var prope5 =
2021-03-12 08:28:45,981 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25d2d88f]]
2021-03-12 08:28:45,981 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25d2d88f]
2021-03-12 08:28:45,981 [main:117] - GENERATED CALL = (fu14({a: String -> "jxsfr"}, "faslp")).toUpperCase()
2021-03-12 08:28:45,981 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a66aef2]]
2021-03-12 08:28:45,981 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a66aef2]
2021-03-12 08:28:45,981 [main:117] - GENERATED CALL = (fu14({a: String -> "jxsfr"}, "faslp")).take((true).compareTo(Kla4().prope8))
2021-03-12 08:28:45,981 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@101908f0]]
2021-03-12 08:28:45,981 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@101908f0]
2021-03-12 08:28:46,224 [main:302] - generating value of type = Char true depth = 0
2021-03-12 08:28:46,476 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:28:46,488 [main:117] - GENERATED CALL = (fu14({a: String -> "jxsfr"}, "faslp")).replaceAfter('‡™¢', fu1(), "ngsga")
2021-03-12 08:28:46,488 [main:114] - replacement of "tail-call optimization hit: method " + method + " has no state-machine " of type String is (fu14({a: String -> "jxsfr"}, "faslp")).toUpperCase()
2021-03-12 08:28:46,728 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:28:46,729 [main:66] - Compilation checking started
2021-03-12 08:28:47,422 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = 0
        outer@while (prope30 < 10) {
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) {
                if (prope30 + prope31 > 3) break@outer
                prope22 += "$prope30,$prope31;"
                fu26()
                prope31++
            }
            prope22 += "i++;"
            prope30++
        }
        prope22 += "done;"
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if (prope25.isSuccess) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith(method) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith(method) == true } ?: error((fu14({a: String -> "jxsfr"}, "faslp")).toUpperCase() +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = 0
    var prope21 = false

    var prope28: () -> Unit = {}

    fun fu34() {
        prope27 = 0
        prope21 = false
        prope28 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> { c ->
        prope27++
        prope28 = { c.resume(Unit) }
    }

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in 1..(Kla4().prope9).equals(Kla1().prope5).compareTo(Kla11().prope17)) {
            if (prope27 != prope30) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (prope27 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error("Wrong state-machine generated: it is finished early")
        prope28()
        if (checkFinished && (Kla7().context).equals(Kla8().prope14).not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope24.prope28 = {
            prope24.prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:28:47,424 [main:107] - replacing (prope27++, Int)
2021-03-12 08:28:47,424 [main:50] - replacing prope27++ Int
2021-03-12 08:28:47,424 [main:54] - Getting value of type Int
2021-03-12 08:28:47,666 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:28:47,678 [main:58] - GENERATED VALUE OF TYPE Int = 1865681497
2021-03-12 08:28:47,678 [main:61] - GENERATED IS CALL =false
2021-03-12 08:28:48,327 [main:67] - randomType = List<UShort?>
2021-03-12 08:28:48,327 [main:106] - GETTING Int from Int
2021-03-12 08:28:48,357 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b6a54c], public final val first: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@18f6525d]]
2021-03-12 08:28:48,357 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b6a54c]
2021-03-12 08:28:48,597 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:28:48,609 [main:117] - GENERATED CALL = ((true).compareTo(Kla4().prope8)).rangeTo(41).first
2021-03-12 08:28:48,609 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1e3928b4]]
2021-03-12 08:28:48,609 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:28:48,609 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1e3928b4]
2021-03-12 08:28:48,609 [main:117] - GENERATED CALL = ((true).compareTo(Kla4().prope8)).toInt().toInt()
2021-03-12 08:28:48,609 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]]
2021-03-12 08:28:48,609 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]
2021-03-12 08:28:48,848 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:28:48,849 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:28:48,849 [main:117] - GENERATED CALL = ((true).compareTo(Kla4().prope8)).equals("fwcql").compareTo(Kla11().prope17)
2021-03-12 08:28:48,849 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@53acdc6e]]
2021-03-12 08:28:48,849 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:28:48,849 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@53acdc6e]
2021-03-12 08:28:48,849 [main:117] - GENERATED CALL = ((true).compareTo(Kla4().prope8)).toInt().takeHighestOneBit()
2021-03-12 08:28:48,849 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6da5a213]]
2021-03-12 08:28:48,849 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d]
2021-03-12 08:28:48,849 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6da5a213]
2021-03-12 08:28:49,128 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:28:49,139 [main:117] - GENERATED CALL = ((true).compareTo(Kla4().prope8)).toShort().rem(123)
2021-03-12 08:28:49,139 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@12909d67]]
2021-03-12 08:28:49,139 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:28:49,139 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@12909d67]
2021-03-12 08:28:49,379 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:28:49,391 [main:117] - GENERATED CALL = ((true).compareTo(Kla4().prope8)).toInt().rotateLeft(1550188889)
2021-03-12 08:28:49,391 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@175c25dd]]
2021-03-12 08:28:49,391 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:28:49,391 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@175c25dd]
2021-03-12 08:28:49,632 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:28:49,643 [main:117] - GENERATED CALL = ((true).compareTo(Kla4().prope8)).toInt().div(17)
2021-03-12 08:28:49,643 [main:113] - Case = [public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@77c8dd61]]
2021-03-12 08:28:49,644 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@77c8dd61]
2021-03-12 08:28:49,644 [main:117] - GENERATED CALL = ((true).compareTo(Kla4().prope8)).shr((true).compareTo(Kla4().prope8))
2021-03-12 08:28:49,644 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45b67d0e]]
2021-03-12 08:28:49,644 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d]
2021-03-12 08:28:49,644 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45b67d0e]
2021-03-12 08:28:49,644 [main:117] - GENERATED CALL = ((true).compareTo(Kla4().prope8)).toShort().countOneBits()
2021-03-12 08:28:49,644 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@542e3b11]]
2021-03-12 08:28:49,644 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d]
2021-03-12 08:28:49,644 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@542e3b11]
2021-03-12 08:28:49,886 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:28:49,897 [main:117] - GENERATED CALL = ((true).compareTo(Kla4().prope8)).toShort().plus(2)
2021-03-12 08:28:49,897 [main:114] - replacement of prope27++ of type Int is (true).compareTo(Kla4().prope8)
2021-03-12 08:28:50,137 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:28:50,138 [main:66] - Compilation checking started
2021-03-12 08:28:51,111 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = 0
        outer@while (prope30 < 10) {
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) {
                if (prope30 + prope31 > 3) break@outer
                prope22 += "$prope30,$prope31;"
                fu26()
                prope31++
            }
            prope22 += "i++;"
            prope30++
        }
        prope22 += "done;"
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if (prope25.isSuccess) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith(method) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = 0
    var prope21 = false

    var prope28: () -> Unit = {}

    fun fu34() {
        prope27 = 0
        prope21 = false
        prope28 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> { c ->
        (true).compareTo(Kla4().prope8)
        prope28 = { c.resume(Unit) }
    }

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in 1..(Kla4().prope9).equals(Kla1().prope5).compareTo(Kla11().prope17)) {
            if (prope27 != prope30) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (prope27 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error("Wrong state-machine generated: it is finished early")
        prope28()
        if (checkFinished && (Kla7().context).equals(Kla8().prope14).not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope24.prope28 = {
            prope24.prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:28:51,114 [main:107] - replacing (getOrThrow(), Any?)
2021-03-12 08:28:51,116 [main:50] - replacing getOrThrow() Any?
2021-03-12 08:28:51,116 [main:54] - Getting value of type Any?
2021-03-12 08:28:51,361 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:28:51,361 [main:58] - GENERATED VALUE OF TYPE Any? = "liivb"
2021-03-12 08:28:51,361 [main:61] - GENERATED IS CALL =false
2021-03-12 08:28:52,431 [main:67] - randomType = Pair<Long?, Kla10>?
2021-03-12 08:28:52,672 [main:302] - generating value of type = Pair<Long?, Kla10> false depth = 0
2021-03-12 08:28:52,929 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Long?, second: Kla10): Pair<Long?, Kla10> = TODO()
2021-03-12 08:28:52,943 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Long?, second: Kla10): Pair<Long?, Kla10> = TODO()
2021-03-12 08:28:53,203 [main:302] - generating value of type = Long true depth = 3
2021-03-12 08:28:53,215 [main:302] - generating value of type = Kla10 false depth = 3
2021-03-12 08:28:53,226 [main:112] - generating klass Kla10 text = class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}
2021-03-12 08:28:53,227 [main:95] - GENERATED = Pair<Long?, Kla10>(5170859214650526499, Kla10())
2021-03-12 08:28:53,241 [main:106] - GETTING Any? from Function0<Unit>
2021-03-12 08:28:53,250 [main:106] - GETTING Any? from String
2021-03-12 08:28:53,267 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:28:53,272 [main:106] - GETTING Any? from EmptyCoroutineContext
2021-03-12 08:28:53,286 [main:106] - GETTING Any? from EmptyCoroutineContext
2021-03-12 08:28:53,287 [main:106] - GETTING Any? from P
2021-03-12 08:28:53,291 [main:106] - GETTING Any? from Any?
2021-03-12 08:28:53,295 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:28:53,296 [main:106] - GETTING Any? from Int
2021-03-12 08:28:53,325 [main:106] - GETTING Any? from Continuation<Any?>
2021-03-12 08:28:53,332 [main:106] - GETTING Any? from Int
2021-03-12 08:28:53,334 [main:106] - GETTING Any? from Continuation<MutableMap<Array<UInt>, String>>
2021-03-12 08:28:53,343 [main:106] - GETTING Any? from P
2021-03-12 08:28:53,344 [main:106] - GETTING Any? from Int
2021-03-12 08:28:53,345 [main:106] - GETTING Any? from String
2021-03-12 08:28:53,346 [main:106] - GETTING Any? from Boolean
2021-03-12 08:28:53,355 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:28:53,356 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:28:53,357 [main:106] - GETTING Any? from Function0<Unit>
2021-03-12 08:28:53,358 [main:106] - GETTING Any? from Long
2021-03-12 08:28:53,387 [main:106] - GETTING Any? from P
2021-03-12 08:28:53,388 [main:106] - GETTING Any? from Continuation<Any?>
2021-03-12 08:28:53,389 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:28:53,390 [main:106] - GETTING Any? from Any?
2021-03-12 08:28:53,391 [main:106] - GETTING Any? from Boolean
2021-03-12 08:28:53,392 [main:106] - GETTING Any? from Continuation<MutableMap<Float, Long>>
2021-03-12 08:28:53,401 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:28:53,402 [main:106] - GETTING Any? from Int
2021-03-12 08:28:53,403 [main:106] - GETTING Any? from String
2021-03-12 08:28:53,404 [main:106] - GETTING Any? from ULong
2021-03-12 08:28:53,426 [main:106] - GETTING Any? from Boolean
2021-03-12 08:28:53,427 [main:106] - GETTING Any? from ULong
2021-03-12 08:28:53,428 [main:106] - GETTING Any? from String
2021-03-12 08:28:53,428 [main:114] - replacement of getOrThrow() of type Any? is "liivb"
2021-03-12 08:28:53,668 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 08:28:53,669 [main:66] - Compilation checking started
2021-03-12 08:28:54,388 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = 0
        outer@while (prope30 < 10) {
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) {
                if (prope30 + prope31 > 3) break@outer
                prope22 += "$prope30,$prope31;"
                fu26()
                prope31++
            }
            prope22 += "i++;"
            prope30++
        }
        prope22 += "done;"
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25."liivb"
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if (prope25.isSuccess) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith(method) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = 0
    var prope21 = false

    var prope28: () -> Unit = {}

    fun fu34() {
        prope27 = 0
        prope21 = false
        prope28 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> { c ->
        (true).compareTo(Kla4().prope8)
        prope28 = { c.resume(Unit) }
    }

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in 1..(Kla4().prope9).equals(Kla1().prope5).compareTo(Kla11().prope17)) {
            if (prope27 != prope30) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (prope27 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error("Wrong state-machine generated: it is finished early")
        prope28()
        if (checkFinished && (Kla7().context).equals(Kla8().prope14).not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope24.prope28 = {
            prope24.prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:28:54,390 [main:107] - replacing (0, Int)
2021-03-12 08:28:54,390 [main:50] - replacing 0 Int
2021-03-12 08:28:54,390 [main:54] - Getting value of type Int
2021-03-12 08:28:54,636 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:28:54,648 [main:58] - GENERATED VALUE OF TYPE Int = -1775149350
2021-03-12 08:28:54,648 [main:61] - GENERATED IS CALL =false
2021-03-12 08:28:54,979 [main:67] - randomType = UByte?
2021-03-12 08:28:55,221 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 08:28:55,271 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@581e30f5]
2021-03-12 08:28:55,271 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6da5a213]
2021-03-12 08:28:55,517 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:28:55,528 [main:78] - Generated call from random type = (19.toUByte())?.toShort().rem(-94)
2021-03-12 08:28:55,529 [main:106] - GETTING Int from String
2021-03-12 08:28:55,546 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@1b3c341c], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d657a3a]]
2021-03-12 08:28:55,546 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5d657a3a]
2021-03-12 08:28:55,546 [main:117] - GENERATED CALL = (fu13("ekfhd", "ldnpv")).length.inv()
2021-03-12 08:28:55,546 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@51835189], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d574310]]
2021-03-12 08:28:55,546 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@51835189]
2021-03-12 08:28:55,788 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:28:55,801 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d574310]
2021-03-12 08:28:56,042 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:28:56,054 [main:117] - GENERATED CALL = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
2021-03-12 08:28:56,054 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@1b3c341c], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@38ea499c]]
2021-03-12 08:28:56,054 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@38ea499c]
2021-03-12 08:28:56,054 [main:117] - GENERATED CALL = (fu13("ekfhd", "ldnpv")).length.inc()
2021-03-12 08:28:56,054 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@51835189], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6280d214]]
2021-03-12 08:28:56,054 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@51835189]
2021-03-12 08:28:56,055 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6280d214]
2021-03-12 08:28:56,297 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:28:56,309 [main:117] - GENERATED CALL = (fu13("ekfhd", "ldnpv")).compareTo(var prope5 =.shl(-1843218941)
2021-03-12 08:28:56,309 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@51835189], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76b2a99c]]
2021-03-12 08:28:56,309 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@51835189]
2021-03-12 08:28:56,310 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@76b2a99c]
2021-03-12 08:28:56,310 [main:117] - GENERATED CALL = (fu13("ekfhd", "ldnpv")).compareTo(fu14({a: String -> "jxsfr"}, "faslp")).countTrailingZeroBits()
2021-03-12 08:28:56,310 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@1b3c341c], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b68430d]]
2021-03-12 08:28:56,310 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b68430d]
2021-03-12 08:28:56,310 [main:117] - GENERATED CALL = (fu13("ekfhd", "ldnpv")).length.and(P(931472561).i)
2021-03-12 08:28:56,310 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@1b3c341c], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@175c25dd]]
2021-03-12 08:28:56,311 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@175c25dd]
2021-03-12 08:28:56,565 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:28:56,576 [main:117] - GENERATED CALL = (fu13("ekfhd", "ldnpv")).length.div(92)
2021-03-12 08:28:56,576 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@1b3c341c], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@425531c9]]
2021-03-12 08:28:56,576 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@425531c9]
2021-03-12 08:28:56,577 [main:117] - GENERATED CALL = (fu13("ekfhd", "ldnpv")).length.countOneBits()
2021-03-12 08:28:56,577 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ab22552]]
2021-03-12 08:28:56,577 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ab22552]
2021-03-12 08:28:56,577 [main:117] - GENERATED CALL = (fu13("ekfhd", "ldnpv")).count()
2021-03-12 08:28:56,577 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@1b3c341c], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43ac6084]]
2021-03-12 08:28:56,577 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@43ac6084]
2021-03-12 08:28:56,577 [main:117] - GENERATED CALL = (fu13("ekfhd", "ldnpv")).length.unaryPlus()
2021-03-12 08:28:56,577 [main:114] - replacement of 0 of type Int is (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
2021-03-12 08:28:56,818 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:28:56,818 [main:66] - Compilation checking started
2021-03-12 08:28:57,995 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = 0
        outer@while (prope30 < 10) {
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) {
                if (prope30 + prope31 > 3) break@outer
                prope22 += "$prope30,$prope31;"
                fu26()
                prope31++
            }
            prope22 += "i++;"
            prope30++
        }
        prope22 += "done;"
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if (prope25.isSuccess) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith(method) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = {}

    fun fu34() {
        prope27 = 0
        prope21 = false
        prope28 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> { c ->
        (true).compareTo(Kla4().prope8)
        prope28 = { c.resume(Unit) }
    }

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in 1..(Kla4().prope9).equals(Kla1().prope5).compareTo(Kla11().prope17)) {
            if (prope27 != prope30) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (prope27 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error("Wrong state-machine generated: it is finished early")
        prope28()
        if (checkFinished && (Kla7().context).equals(Kla8().prope14).not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope24.prope28 = {
            prope24.prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:28:57,997 [main:107] - replacing (0, Int)
2021-03-12 08:28:57,999 [main:50] - replacing 0 Int
2021-03-12 08:28:57,999 [main:54] - Getting value of type Int
2021-03-12 08:28:58,243 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:28:58,255 [main:58] - GENERATED VALUE OF TYPE Int = -1197139197
2021-03-12 08:28:58,255 [main:61] - GENERATED IS CALL =false
2021-03-12 08:28:58,279 [main:67] - randomType = Int
2021-03-12 08:28:58,522 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:28:58,564 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d]
2021-03-12 08:28:58,564 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@d30d6cd]
2021-03-12 08:28:58,807 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:28:58,819 [main:78] - Generated call from random type = (1716224313).toShort().compareTo(-52)
2021-03-12 08:28:58,819 [main:114] - replacement of 0 of type Int is (1716224313).toShort().compareTo(-52)
2021-03-12 08:28:59,065 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:28:59,065 [main:66] - Compilation checking started
2021-03-12 08:29:00,075 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = 0
        outer@while (prope30 < 10) {
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) {
                if (prope30 + prope31 > 3) break@outer
                prope22 += "$prope30,$prope31;"
                fu26()
                prope31++
            }
            prope22 += "i++;"
            prope30++
        }
        prope22 += "done;"
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if (prope25.isSuccess) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith(method) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = {}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = false
        prope28 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> { c ->
        (true).compareTo(Kla4().prope8)
        prope28 = { c.resume(Unit) }
    }

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in 1..(Kla4().prope9).equals(Kla1().prope5).compareTo(Kla11().prope17)) {
            if (prope27 != prope30) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (prope27 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error("Wrong state-machine generated: it is finished early")
        prope28()
        if (checkFinished && (Kla7().context).equals(Kla8().prope14).not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope24.prope28 = {
            prope24.prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:29:00,077 [main:107] - replacing (prope28, Function0<Unit>)
2021-03-12 08:29:00,078 [main:50] - replacing prope28 Function0<Unit>
2021-03-12 08:29:00,078 [main:54] - Getting value of type Function0<Unit>
2021-03-12 08:29:00,325 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 08:29:00,336 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:29:00,594 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 08:29:00,608 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 08:29:01,505 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 08:29:01,517 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 08:29:01,528 [main:302] - generating value of type = Any false depth = 5
2021-03-12 08:29:01,529 [main:95] - GENERATED = require(false, { "xnrwp"})
2021-03-12 08:29:01,529 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false, { "xnrwp"})}
2021-03-12 08:29:01,529 [main:61] - GENERATED IS CALL =false
2021-03-12 08:29:02,152 [main:67] - randomType = Byte?
2021-03-12 08:29:02,396 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:29:02,440 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 08:29:02,445 [main:106] - GETTING Function0<Unit> from EmptyCoroutineContext
2021-03-12 08:29:02,458 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 08:29:02,465 [main:114] - replacement of prope28 of type Function0<Unit> is Kla4().prope9
2021-03-12 08:29:02,708 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:29:02,709 [main:66] - Compilation checking started
2021-03-12 08:29:03,690 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = 0
        outer@while (prope30 < 10) {
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) {
                if (prope30 + prope31 > 3) break@outer
                prope22 += "$prope30,$prope31;"
                fu26()
                prope31++
            }
            prope22 += "i++;"
            prope30++
        }
        prope22 += "done;"
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if (prope25.isSuccess) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith(method) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = {}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = false
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> { c ->
        (true).compareTo(Kla4().prope8)
        prope28 = { c.resume(Unit) }
    }

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in 1..(Kla4().prope9).equals(Kla1().prope5).compareTo(Kla11().prope17)) {
            if (prope27 != prope30) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (prope27 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error("Wrong state-machine generated: it is finished early")
        prope28()
        if (checkFinished && (Kla7().context).equals(Kla8().prope14).not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope24.prope28 = {
            prope24.prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:29:03,693 [main:107] - replacing (exception, Throwable)
2021-03-12 08:29:03,695 [main:50] - replacing exception Throwable
2021-03-12 08:29:03,695 [main:54] - Getting value of type Throwable
2021-03-12 08:29:03,939 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 08:29:04,197 [main:43] - GENERATING CALL OF fun ClassCastException(message: kotlin.String?): Throwable = TODO()
2021-03-12 08:29:04,211 [main:61] - WITHOUT TYPE PARAMS = fun ClassCastException(message: kotlin.String?): Throwable = TODO()
2021-03-12 08:29:04,827 [main:302] - generating value of type = String true depth = 3
2021-03-12 08:29:04,839 [main:95] - GENERATED = ClassCastException("syuzq")
2021-03-12 08:29:04,839 [main:58] - GENERATED VALUE OF TYPE Throwable = ClassCastException("syuzq")
2021-03-12 08:29:04,840 [main:61] - GENERATED IS CALL =true
2021-03-12 08:29:04,863 [main:67] - randomType = UShort
2021-03-12 08:29:05,107 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 08:29:05,144 [main:106] - GETTING Throwable from Function0<Unit>
2021-03-12 08:29:05,152 [main:106] - GETTING Throwable from ULong
2021-03-12 08:29:05,174 [main:106] - GETTING Throwable from ULong
2021-03-12 08:29:05,174 [main:106] - GETTING Throwable from Continuation<Any?>
2021-03-12 08:29:05,181 [main:106] - GETTING Throwable from EmptyCoroutineContext
2021-03-12 08:29:05,194 [main:106] - GETTING Throwable from String
2021-03-12 08:29:05,211 [main:106] - GETTING Throwable from CoroutineContext
2021-03-12 08:29:05,216 [main:106] - GETTING Throwable from Continuation<MutableMap<Float, Long>>
2021-03-12 08:29:05,224 [main:106] - GETTING Throwable from String
2021-03-12 08:29:05,225 [main:106] - GETTING Throwable from P
2021-03-12 08:29:05,230 [main:106] - GETTING Throwable from P
2021-03-12 08:29:05,230 [main:106] - GETTING Throwable from P
2021-03-12 08:29:05,231 [main:106] - GETTING Throwable from Long
2021-03-12 08:29:05,259 [main:106] - GETTING Throwable from Any?
2021-03-12 08:29:05,262 [main:106] - GETTING Throwable from Continuation<Any?>
2021-03-12 08:29:05,263 [main:106] - GETTING Throwable from Int
2021-03-12 08:29:05,292 [main:106] - GETTING Throwable from Int
2021-03-12 08:29:05,293 [main:106] - GETTING Throwable from CoroutineContext
2021-03-12 08:29:05,293 [main:106] - GETTING Throwable from Boolean
2021-03-12 08:29:05,301 [main:106] - GETTING Throwable from Function0<Unit>
2021-03-12 08:29:05,302 [main:106] - GETTING Throwable from CoroutineContext
2021-03-12 08:29:05,303 [main:106] - GETTING Throwable from Any?
2021-03-12 08:29:05,303 [main:106] - GETTING Throwable from Int
2021-03-12 08:29:05,304 [main:106] - GETTING Throwable from Boolean
2021-03-12 08:29:05,304 [main:106] - GETTING Throwable from Boolean
2021-03-12 08:29:05,305 [main:106] - GETTING Throwable from Continuation<MutableMap<Array<UInt>, String>>
2021-03-12 08:29:05,315 [main:106] - GETTING Throwable from Int
2021-03-12 08:29:05,315 [main:106] - GETTING Throwable from String
2021-03-12 08:29:05,316 [main:106] - GETTING Throwable from CoroutineContext
2021-03-12 08:29:05,316 [main:106] - GETTING Throwable from CoroutineContext
2021-03-12 08:29:05,317 [main:106] - GETTING Throwable from String
2021-03-12 08:29:05,318 [main:106] - GETTING Throwable from EmptyCoroutineContext
2021-03-12 08:29:05,318 [main:106] - GETTING Throwable from CoroutineContext
2021-03-12 08:29:05,318 [main:114] - replacement of exception of type Throwable is ClassCastException("syuzq")
2021-03-12 08:29:05,561 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:29:05,562 [main:66] - Compilation checking started
2021-03-12 08:29:06,555 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = 0
        outer@while (prope30 < 10) {
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) {
                if (prope30 + prope31 > 3) break@outer
                prope22 += "$prope30,$prope31;"
                fu26()
                prope31++
            }
            prope22 += "i++;"
            prope30++
        }
        prope22 += "done;"
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if (prope25.isSuccess) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith(method) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = {}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = false
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> { c ->
        (true).compareTo(Kla4().prope8)
        prope28 = { c.resume(Unit) }
    }

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in 1..(Kla4().prope9).equals(Kla1().prope5).compareTo(Kla11().prope17)) {
            if (prope27 != prope30) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (prope27 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error("Wrong state-machine generated: it is finished early")
        prope28()
        if (checkFinished && (Kla7().context).equals(Kla8().prope14).not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope24.prope28 = {
            prope24.prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:29:06,557 [main:107] - replacing (method, String)
2021-03-12 08:29:06,557 [main:50] - replacing method String
2021-03-12 08:29:06,557 [main:54] - Getting value of type String
2021-03-12 08:29:06,804 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:29:06,815 [main:58] - GENERATED VALUE OF TYPE String = "clxat"
2021-03-12 08:29:06,816 [main:61] - GENERATED IS CALL =false
2021-03-12 08:29:07,563 [main:67] - randomType = LinkedHashMap<Kla7?, Double>
2021-03-12 08:29:07,809 [main:302] - generating value of type = LinkedHashMap<Kla7?, Double> false depth = 0
2021-03-12 08:29:08,071 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Kla7?, Double>): LkedHashMap<Kla7?, Double> = TODO()
2021-03-12 08:29:08,086 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Kla7?, Double>): LkedHashMap<Kla7?, Double> = TODO()
2021-03-12 08:29:08,353 [main:302] - generating value of type = Pair<Kla7?, Double> false depth = 3
2021-03-12 08:29:08,615 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla7?, second: Double): Pair<Kla7?, Double> = TODO()
2021-03-12 08:29:08,629 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla7?, second: Double): Pair<Kla7?, Double> = TODO()
2021-03-12 08:29:08,897 [main:302] - generating value of type = Kla7 false depth = 6
2021-03-12 08:29:08,909 [main:112] - generating klass Kla7 text = open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}
2021-03-12 08:29:09,158 [main:194] - Type params = []
2021-03-12 08:29:09,456 [main:302] - generating value of type = CoroutineContext false depth = 8
2021-03-12 08:29:09,715 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:29:09,729 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:29:10,340 [main:302] - generating value of type = Key<*> false depth = 11
2021-03-12 08:29:10,611 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:29:10,625 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:29:11,586 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 14
2021-03-12 08:29:11,858 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:29:11,872 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:29:12,826 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 17
2021-03-12 08:29:12,826 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:29:12,826 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:29:12,826 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:29:12,826 [main:302] - generating value of type = Double true depth = 6
2021-03-12 08:29:12,839 [main:95] - GENERATED = Pair<Kla7?, Double>(Kla7(), 0.4639169793721024)
2021-03-12 08:29:12,839 [main:95] - GENERATED = linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))
2021-03-12 08:29:12,949 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:29:12,950 [main:78] - Generated call from random type = (linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))).size.toString(P(1118931594).i)
2021-03-12 08:29:12,950 [main:114] - replacement of method of type String is (linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))).size.toString(P(1118931594).i)
2021-03-12 08:29:13,194 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:29:13,194 [main:66] - Compilation checking started
2021-03-12 08:29:14,247 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = 0
        outer@while (prope30 < 10) {
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) {
                if (prope30 + prope31 > 3) break@outer
                prope22 += "$prope30,$prope31;"
                fu26()
                prope31++
            }
            prope22 += "i++;"
            prope30++
        }
        prope22 += "done;"
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if (prope25.isSuccess) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith(method) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))).size.toString(P(1118931594).i) + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = {}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = false
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> { c ->
        (true).compareTo(Kla4().prope8)
        prope28 = { c.resume(Unit) }
    }

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in 1..(Kla4().prope9).equals(Kla1().prope5).compareTo(Kla11().prope17)) {
            if (prope27 != prope30) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (prope27 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error("Wrong state-machine generated: it is finished early")
        prope28()
        if (checkFinished && (Kla7().context).equals(Kla8().prope14).not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope24.prope28 = {
            prope24.prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:29:14,250 [main:107] - replacing (prope22, String)
2021-03-12 08:29:14,251 [main:50] - replacing prope22 String
2021-03-12 08:29:14,251 [main:54] - Getting value of type String
2021-03-12 08:29:14,541 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:29:14,553 [main:58] - GENERATED VALUE OF TYPE String = "rmgcg"
2021-03-12 08:29:14,553 [main:61] - GENERATED IS CALL =false
2021-03-12 08:29:15,000 [main:67] - randomType = Triple<Long, String, Long>
2021-03-12 08:29:15,260 [main:302] - generating value of type = Triple<Long, String, Long> false depth = 0
2021-03-12 08:29:15,527 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Long, second: String, third: Long): Triple<Long, String, Long> = TODO()
2021-03-12 08:29:15,541 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Long, second: String, third: Long): Triple<Long, String, Long> = TODO()
2021-03-12 08:29:15,808 [main:302] - generating value of type = Long true depth = 3
2021-03-12 08:29:15,820 [main:302] - generating value of type = String true depth = 3
2021-03-12 08:29:15,831 [main:302] - generating value of type = Long true depth = 3
2021-03-12 08:29:15,843 [main:95] - GENERATED = Triple<Long, String, Long>(1181603609225386806, "niuli", 6911506423925103124)
2021-03-12 08:29:15,854 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@334a5986]
2021-03-12 08:29:16,104 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:29:16,364 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 08:29:16,378 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 08:29:16,960 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:29:16,972 [main:95] - GENERATED = StringBuilder(520071798)
2021-03-12 08:29:16,973 [main:78] - Generated call from random type = (Triple<Long, String, Long>(1181603609225386806, "niuli", 6911506423925103124)).second.removeSurrounding(StringBuilder(520071798))
2021-03-12 08:29:16,973 [main:106] - GETTING String from CoroutineContext
2021-03-12 08:29:16,979 [main:106] - GETTING String from CoroutineContext
2021-03-12 08:29:16,980 [main:106] - GETTING String from P
2021-03-12 08:29:16,984 [main:113] - Case = [public final val i: kotlin.Int defined in a.P[PropertyDescriptorImpl@4f6dd914], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:29:16,984 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:29:17,240 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:29:17,252 [main:117] - GENERATED CALL = (P(P(1118931594).i)).i.toString(1992010447)
2021-03-12 08:29:17,252 [main:114] - replacement of prope22 of type String is (P(P(1118931594).i)).i.toString(1992010447)
2021-03-12 08:29:17,500 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:29:17,500 [main:66] - Compilation checking started
2021-03-12 08:29:18,227 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = 0
        outer@while (prope30 < 10) {
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) {
                if (prope30 + prope31 > 3) break@outer
                prope22 += "$prope30,$prope31;"
                fu26()
                prope31++
            }
            prope22 += "i++;"
            prope30++
        }
        (P(P(1118931594).i)).i.toString(1992010447) += "done;"
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if (prope25.isSuccess) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith(method) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))).size.toString(P(1118931594).i) + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = {}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = false
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> { c ->
        (true).compareTo(Kla4().prope8)
        prope28 = { c.resume(Unit) }
    }

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in 1..(Kla4().prope9).equals(Kla1().prope5).compareTo(Kla11().prope17)) {
            if (prope27 != prope30) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (prope27 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error("Wrong state-machine generated: it is finished early")
        prope28()
        if (checkFinished && (Kla7().context).equals(Kla8().prope14).not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope24.prope28 = {
            prope24.prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:29:18,231 [main:107] - replacing (prope25.isSuccess, Boolean)
2021-03-12 08:29:18,232 [main:50] - replacing prope25.isSuccess Boolean
2021-03-12 08:29:18,232 [main:54] - Getting value of type Boolean
2021-03-12 08:29:18,518 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:29:18,530 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 08:29:18,530 [main:61] - GENERATED IS CALL =false
2021-03-12 08:29:18,870 [main:67] - randomType = Boolean?
2021-03-12 08:29:19,122 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:29:19,144 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6]
2021-03-12 08:29:19,144 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]
2021-03-12 08:29:19,144 [main:78] - Generated call from random type = (true)?.equals(Kla8().prope14).or(Kla4().prope8)
2021-03-12 08:29:19,145 [main:106] - GETTING Boolean from String
2021-03-12 08:29:19,161 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25d1db43]]
2021-03-12 08:29:19,161 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25d1db43]
2021-03-12 08:29:19,161 [main:117] - GENERATED CALL = (fu13("ekfhd", "ldnpv")).toBoolean()
2021-03-12 08:29:19,161 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@70cafef0], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]]
2021-03-12 08:29:19,161 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@70cafef0]
2021-03-12 08:29:19,161 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]
2021-03-12 08:29:19,162 [main:117] - GENERATED CALL = (fu13("ekfhd", "ldnpv")).equals(Kla1().prope5).not()
2021-03-12 08:29:19,162 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3e028244], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2334aa25]]
2021-03-12 08:29:19,162 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3e028244]
2021-03-12 08:29:19,162 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2334aa25]
2021-03-12 08:29:19,162 [main:117] - GENERATED CALL = (fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()
2021-03-12 08:29:19,162 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3e028244], public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@486d1d97]]
2021-03-12 08:29:19,162 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3e028244]
2021-03-12 08:29:19,411 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:29:19,673 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:29:19,714 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@486d1d97]
2021-03-12 08:29:19,964 [main:302] - generating value of type = Char true depth = 0
2021-03-12 08:29:19,976 [main:117] - GENERATED CALL = (fu13("ekfhd", "ldnpv")).subSequence(71097112, 95076241).contains('‰©∞', Kla4().prope8)
2021-03-12 08:29:19,976 [main:113] - Case = [public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c252ef9]]
2021-03-12 08:29:19,976 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c252ef9]
2021-03-12 08:29:20,225 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:29:20,237 [main:117] - GENERATED CALL = (fu13("ekfhd", "ldnpv")).endsWith(fu14({a: String -> "jxsfr"}, "faslp"), false)
2021-03-12 08:29:20,237 [main:113] - Case = [public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7cfc61bb]]
2021-03-12 08:29:20,238 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7cfc61bb]
2021-03-12 08:29:20,487 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:29:20,747 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 08:29:20,761 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 08:29:21,341 [main:302] - generating value of type = String true depth = 3
2021-03-12 08:29:21,353 [main:95] - GENERATED = StringBuilder("yggac")
2021-03-12 08:29:21,354 [main:117] - GENERATED CALL = (fu13("ekfhd", "ldnpv")).regionMatches(P(931472561).i, StringBuilder("yggac"), (true).compareTo(Kla4().prope8), P(1118931594).i, Kla11().prope17)
2021-03-12 08:29:21,354 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@70cafef0], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]]
2021-03-12 08:29:21,354 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@70cafef0]
2021-03-12 08:29:21,354 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]
2021-03-12 08:29:21,601 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:29:21,613 [main:117] - GENERATED CALL = (fu13("ekfhd", "ldnpv")).equals(Kla8().prope14).or(false)
2021-03-12 08:29:21,614 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@70cafef0]]
2021-03-12 08:29:21,614 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@70cafef0]
2021-03-12 08:29:21,614 [main:117] - GENERATED CALL = (fu13("ekfhd", "ldnpv")).equals(Kla1().prope5)
2021-03-12 08:29:21,614 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3e028244], public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6efbf68d]]
2021-03-12 08:29:21,614 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3e028244]
2021-03-12 08:29:21,861 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:29:21,873 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6efbf68d]
2021-03-12 08:29:21,873 [main:117] - GENERATED CALL = (fu13("ekfhd", "ldnpv")).subSequence(1840707290, (P(1118931594).i)).none()
2021-03-12 08:29:21,873 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e3c851f], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21d5d759]]
2021-03-12 08:29:21,873 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e3c851f]
2021-03-12 08:29:21,873 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21d5d759]
2021-03-12 08:29:21,873 [main:117] - GENERATED CALL = (fu13("ekfhd", "ldnpv")).get(P(1118931594).i).isLetter()
2021-03-12 08:29:21,873 [main:114] - replacement of prope25.isSuccess of type Boolean is (fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()
2021-03-12 08:29:22,118 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:29:22,119 [main:66] - Compilation checking started
2021-03-12 08:29:23,162 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = 0
        outer@while (prope30 < 10) {
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) {
                if (prope30 + prope31 > 3) break@outer
                prope22 += "$prope30,$prope31;"
                fu26()
                prope31++
            }
            prope22 += "i++;"
            prope30++
        }
        prope22 += "done;"
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith(method) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))).size.toString(P(1118931594).i) + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = {}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = false
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> { c ->
        (true).compareTo(Kla4().prope8)
        prope28 = { c.resume(Unit) }
    }

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in 1..(Kla4().prope9).equals(Kla1().prope5).compareTo(Kla11().prope17)) {
            if (prope27 != prope30) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (prope27 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error("Wrong state-machine generated: it is finished early")
        prope28()
        if (checkFinished && (Kla7().context).equals(Kla8().prope14).not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope24.prope28 = {
            prope24.prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:29:23,165 [main:107] - replacing (method, String)
2021-03-12 08:29:23,165 [main:50] - replacing method String
2021-03-12 08:29:23,165 [main:54] - Getting value of type String
2021-03-12 08:29:23,419 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:29:23,431 [main:58] - GENERATED VALUE OF TYPE String = "evqmr"
2021-03-12 08:29:23,431 [main:61] - GENERATED IS CALL =false
2021-03-12 08:29:23,456 [main:67] - randomType = UInt
2021-03-12 08:29:23,709 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 08:29:23,745 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@636a600c]
2021-03-12 08:29:23,746 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]
2021-03-12 08:29:23,997 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:29:24,009 [main:78] - Generated call from random type = (752502137.toUInt()).toByte().toString(810649754)
2021-03-12 08:29:24,010 [main:106] - GETTING String from Continuation<MutableMap<Array<UInt>, String>>
2021-03-12 08:29:24,019 [main:106] - GETTING String from Any?
2021-03-12 08:29:24,022 [main:113] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@76b34e5]]
2021-03-12 08:29:24,022 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@76b34e5]
2021-03-12 08:29:24,022 [main:117] - GENERATED CALL = (Kla1().prope5).toString()
2021-03-12 08:29:24,022 [main:114] - replacement of method of type String is (Kla1().prope5).toString()
2021-03-12 08:29:24,270 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:29:24,271 [main:66] - Compilation checking started
2021-03-12 08:29:25,349 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = 0
        outer@while (prope30 < 10) {
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) {
                if (prope30 + prope31 > 3) break@outer
                prope22 += "$prope30,$prope31;"
                fu26()
                prope31++
            }
            prope22 += "i++;"
            prope30++
        }
        prope22 += "done;"
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith((Kla1().prope5).toString()) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))).size.toString(P(1118931594).i) + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = {}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = false
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> { c ->
        (true).compareTo(Kla4().prope8)
        prope28 = { c.resume(Unit) }
    }

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in 1..(Kla4().prope9).equals(Kla1().prope5).compareTo(Kla11().prope17)) {
            if (prope27 != prope30) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (prope27 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error("Wrong state-machine generated: it is finished early")
        prope28()
        if (checkFinished && (Kla7().context).equals(Kla8().prope14).not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope24.prope28 = {
            prope24.prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:29:25,352 [main:107] - replacing ({}, Function0<Unit>)
2021-03-12 08:29:25,352 [main:50] - replacing {} Function0<Unit>
2021-03-12 08:29:25,352 [main:54] - Getting value of type Function0<Unit>
2021-03-12 08:29:25,602 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 08:29:25,614 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:29:25,878 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:29:25,892 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:29:26,489 [main:302] - generating value of type = Any false depth = 4
2021-03-12 08:29:26,490 [main:95] - GENERATED = println("lbczc")
2021-03-12 08:29:26,490 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println("lbczc")}
2021-03-12 08:29:26,490 [main:61] - GENERATED IS CALL =false
2021-03-12 08:29:26,836 [main:67] - randomType = Kla19
2021-03-12 08:29:27,093 [main:302] - generating value of type = Kla19 false depth = 0
2021-03-12 08:29:27,105 [main:112] - generating klass Kla19 text = object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope24.prope28 = {
            prope24.prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}
2021-03-12 08:29:27,123 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 08:29:27,153 [main:106] - GETTING Function0<Unit> from Continuation<MutableMap<Array<UInt>, String>>
2021-03-12 08:29:27,162 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 08:29:27,169 [main:114] - replacement of {} of type Function0<Unit> is { println("lbczc")}
2021-03-12 08:29:27,417 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 08:29:27,418 [main:66] - Compilation checking started
2021-03-12 08:29:28,449 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = 0
        outer@while (prope30 < 10) {
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) {
                if (prope30 + prope31 > 3) break@outer
                prope22 += "$prope30,$prope31;"
                fu26()
                prope31++
            }
            prope22 += "i++;"
            prope30++
        }
        prope22 += "done;"
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith((Kla1().prope5).toString()) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))).size.toString(P(1118931594).i) + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = false
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> { c ->
        (true).compareTo(Kla4().prope8)
        prope28 = { c.resume(Unit) }
    }

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in 1..(Kla4().prope9).equals(Kla1().prope5).compareTo(Kla11().prope17)) {
            if (prope27 != prope30) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (prope27 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error("Wrong state-machine generated: it is finished early")
        prope28()
        if (checkFinished && (Kla7().context).equals(Kla8().prope14).not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope24.prope28 = {
            prope24.prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:29:28,451 [main:107] - replacing ({
                if (prope30 + prope31 > 3) break@outer
                prope22 += "$prope30,$prope31;"
                fu26()
                prope31++
            }, Int)
2021-03-12 08:29:28,452 [main:50] - replacing {
                if (prope30 + prope31 > 3) break@outer
                prope22 += "$prope30,$prope31;"
                fu26()
                prope31++
            } Int
2021-03-12 08:29:28,452 [main:54] - Getting value of type Int
2021-03-12 08:29:28,702 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:29:28,714 [main:58] - GENERATED VALUE OF TYPE Int = -1658268738
2021-03-12 08:29:28,714 [main:61] - GENERATED IS CALL =false
2021-03-12 08:29:28,739 [main:67] - randomType = UInt
2021-03-12 08:29:28,994 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 08:29:29,031 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@5bbaf61b]
2021-03-12 08:29:29,283 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 08:29:29,295 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6280d214]
2021-03-12 08:29:29,295 [main:78] - Generated call from random type = (696841726.toUInt()).compareTo(42.toUByte()).shl(P(1118931594).i)
2021-03-12 08:29:29,295 [main:114] - replacement of {
                if (prope30 + prope31 > 3) break@outer
                prope22 += "$prope30,$prope31;"
                fu26()
                prope31++
            } of type Int is (696841726.toUInt()).compareTo(42.toUByte()).shl(P(1118931594).i)
2021-03-12 08:29:29,551 [main:33] - Trying to replace BLOCK on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:29:29,551 [main:66] - Compilation checking started
2021-03-12 08:29:30,592 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = 0
        outer@while (prope30 < 10) {
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) (696841726.toUInt()).compareTo(42.toUByte()).shl(P(1118931594).i)
            prope22 += "i++;"
            prope30++
        }
        prope22 += "done;"
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith((Kla1().prope5).toString()) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))).size.toString(P(1118931594).i) + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = false
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> { c ->
        (true).compareTo(Kla4().prope8)
        prope28 = { c.resume(Unit) }
    }

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in 1..(Kla4().prope9).equals(Kla1().prope5).compareTo(Kla11().prope17)) {
            if (prope27 != prope30) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (prope27 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error("Wrong state-machine generated: it is finished early")
        prope28()
        if (checkFinished && (Kla7().context).equals(Kla8().prope14).not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope24.prope28 = {
            prope24.prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:29:30,595 [main:107] - replacing (false, Boolean)
2021-03-12 08:29:30,595 [main:50] - replacing false Boolean
2021-03-12 08:29:30,595 [main:54] - Getting value of type Boolean
2021-03-12 08:29:30,851 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:29:30,863 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 08:29:30,863 [main:61] - GENERATED IS CALL =false
2021-03-12 08:29:31,237 [main:67] - randomType = Array<Kla18>
2021-03-12 08:29:31,487 [main:302] - generating value of type = Array<Kla18> false depth = 0
2021-03-12 08:29:31,749 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: Kla18): Array<Kla18> = TODO()
2021-03-12 08:29:31,764 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: Kla18): Array<Kla18> = TODO()
2021-03-12 08:29:32,032 [main:302] - generating value of type = Kla18 false depth = 3
2021-03-12 08:29:32,044 [main:112] - generating klass Kla18 text = class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = false
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> { c ->
        (true).compareTo(Kla4().prope8)
        prope28 = { c.resume(Unit) }
    }

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in 1..(Kla4().prope9).equals(Kla1().prope5).compareTo(Kla11().prope17)) {
            if (prope27 != prope30) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (prope27 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error("Wrong state-machine generated: it is finished early")
        prope28()
        if (checkFinished && (Kla7().context).equals(Kla8().prope14).not()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 08:29:32,044 [main:95] - GENERATED = arrayOf<Kla18>(Kla18())
2021-03-12 08:29:32,055 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2af16755]
2021-03-12 08:29:32,055 [main:78] - Generated call from random type = (arrayOf<Kla18>(Kla18())).none()
2021-03-12 08:29:32,056 [main:106] - GETTING Boolean from P
2021-03-12 08:29:32,060 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in a.P[SimpleFunctionDescriptorImpl@7b4d7861], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]]
2021-03-12 08:29:32,060 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in a.P[SimpleFunctionDescriptorImpl@7b4d7861]
2021-03-12 08:29:32,311 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:29:32,311 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]
2021-03-12 08:29:32,311 [main:117] - GENERATED CALL = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals("vxqvm").and(Kla4().prope8)
2021-03-12 08:29:32,311 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in a.P[SimpleFunctionDescriptorImpl@7b4d7861], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]]
2021-03-12 08:29:32,311 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in a.P[SimpleFunctionDescriptorImpl@7b4d7861]
2021-03-12 08:29:32,560 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:29:32,560 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]
2021-03-12 08:29:32,561 [main:117] - GENERATED CALL = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals("wuxre").xor((true))
2021-03-12 08:29:32,561 [main:113] - Case = [public final val i: kotlin.Int defined in a.P[PropertyDescriptorImpl@4f6dd914], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]]
2021-03-12 08:29:32,561 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]
2021-03-12 08:29:32,561 [main:117] - GENERATED CALL = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).i.equals(Kla8().prope14)
2021-03-12 08:29:32,561 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in a.P[SimpleFunctionDescriptorImpl@7b4d7861], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]]
2021-03-12 08:29:32,561 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in a.P[SimpleFunctionDescriptorImpl@7b4d7861]
2021-03-12 08:29:32,810 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:29:32,810 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]
2021-03-12 08:29:32,810 [main:117] - GENERATED CALL = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals("zoszx").equals(Kla8().prope14)
2021-03-12 08:29:32,810 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in a.P[SimpleFunctionDescriptorImpl@7b4d7861]]
2021-03-12 08:29:32,810 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in a.P[SimpleFunctionDescriptorImpl@7b4d7861]
2021-03-12 08:29:32,810 [main:117] - GENERATED CALL = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(Kla8().prope14)
2021-03-12 08:29:32,810 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in a.P[SimpleFunctionDescriptorImpl@7b4d7861], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]]
2021-03-12 08:29:32,810 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in a.P[SimpleFunctionDescriptorImpl@7b4d7861]
2021-03-12 08:29:33,060 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]
2021-03-12 08:29:33,308 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:29:33,320 [main:117] - GENERATED CALL = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(null).or(true)
2021-03-12 08:29:33,320 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in a.P[SimpleFunctionDescriptorImpl@7b4d7861], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]]
2021-03-12 08:29:33,320 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in a.P[SimpleFunctionDescriptorImpl@7b4d7861]
2021-03-12 08:29:33,320 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]
2021-03-12 08:29:33,321 [main:117] - GENERATED CALL = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(Kla1().prope5).not()
2021-03-12 08:29:33,321 [main:114] - replacement of false of type Boolean is (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(null).or(true)
2021-03-12 08:29:33,569 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:29:33,569 [main:66] - Compilation checking started
2021-03-12 08:29:34,587 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = 0
        outer@while (prope30 < 10) {
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) (696841726.toUInt()).compareTo(42.toUByte()).shl(P(1118931594).i)
            prope22 += "i++;"
            prope30++
        }
        prope22 += "done;"
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith((Kla1().prope5).toString()) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))).size.toString(P(1118931594).i) + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(null).or(true)
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> { c ->
        (true).compareTo(Kla4().prope8)
        prope28 = { c.resume(Unit) }
    }

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in 1..(Kla4().prope9).equals(Kla1().prope5).compareTo(Kla11().prope17)) {
            if (prope27 != prope30) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (prope27 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error("Wrong state-machine generated: it is finished early")
        prope28()
        if (checkFinished && (Kla7().context).equals(Kla8().prope14).not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope24.prope28 = {
            prope24.prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:29:34,590 [main:107] - replacing (prope21, Boolean)
2021-03-12 08:29:34,591 [main:50] - replacing prope21 Boolean
2021-03-12 08:29:34,591 [main:54] - Getting value of type Boolean
2021-03-12 08:29:34,849 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:29:34,862 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 08:29:34,862 [main:61] - GENERATED IS CALL =false
2021-03-12 08:29:35,874 [main:67] - randomType = Sequence<Float?>
2021-03-12 08:29:35,875 [main:106] - GETTING Boolean from ULong
2021-03-12 08:29:35,897 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@3cd0ae73], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@31fdc6f6]]
2021-03-12 08:29:35,897 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@3cd0ae73]
2021-03-12 08:29:35,897 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@31fdc6f6]
2021-03-12 08:29:35,897 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636).toULong()).toDouble().equals(Kla8().prope14)
2021-03-12 08:29:35,897 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@25ebee8f], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@65498049]]
2021-03-12 08:29:35,897 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@25ebee8f]
2021-03-12 08:29:35,897 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 08:29:36,149 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:29:36,150 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636).toULong()).toShort().equals("qlaoq")
2021-03-12 08:29:36,150 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@3cd0ae73], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3a79289b]]
2021-03-12 08:29:36,150 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@3cd0ae73]
2021-03-12 08:29:36,150 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3a79289b]
2021-03-12 08:29:36,150 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636).toULong()).toDouble().isFinite()
2021-03-12 08:29:36,150 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@415a873b], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@7ee93eda]]
2021-03-12 08:29:36,150 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@415a873b]
2021-03-12 08:29:36,150 [main:149] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@7ee93eda]
2021-03-12 08:29:36,150 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636).toULong()).toFloat().isNaN()
2021-03-12 08:29:36,150 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@6757dd7e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]]
2021-03-12 08:29:36,150 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@6757dd7e]
2021-03-12 08:29:36,404 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:29:36,404 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]
2021-03-12 08:29:36,405 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636).toULong()).equals("neokb").equals(Kla1().prope5)
2021-03-12 08:29:36,405 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@3cd0ae73], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4047829]]
2021-03-12 08:29:36,405 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@3cd0ae73]
2021-03-12 08:29:36,405 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4047829]
2021-03-12 08:29:36,405 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636).toULong()).toDouble().isInfinite()
2021-03-12 08:29:36,405 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@1cf16854], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@418eed39]]
2021-03-12 08:29:36,405 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@1cf16854]
2021-03-12 08:29:36,405 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@418eed39]
2021-03-12 08:29:36,405 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636).toULong()).toLong().equals(Kla1().prope5)
2021-03-12 08:29:36,405 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@7528ea42], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@c52f127]]
2021-03-12 08:29:36,405 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@7528ea42]
2021-03-12 08:29:36,405 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@c52f127]
2021-03-12 08:29:36,406 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636).toULong()).toUByte().equals(Kla8().prope14)
2021-03-12 08:29:36,406 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.ULong): kotlin.ranges.ULongRange defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@68ec3763], public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.ULongRange[DeserializedSimpleFunctionDescriptor@52571ba1]]
2021-03-12 08:29:36,406 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.ULong): kotlin.ranges.ULongRange defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@68ec3763]
2021-03-12 08:29:36,406 [main:149] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.ULongRange[DeserializedSimpleFunctionDescriptor@52571ba1]
2021-03-12 08:29:36,406 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636).toULong()).rangeTo(((P(1118931594).i).div(-6350246603923996636).toULong())).isEmpty()
2021-03-12 08:29:36,406 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@5703fb0e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6c9608ba]]
2021-03-12 08:29:36,406 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@5703fb0e]
2021-03-12 08:29:36,406 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6c9608ba]
2021-03-12 08:29:36,658 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:29:36,659 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636).toULong()).toByte().equals("zllkh")
2021-03-12 08:29:36,659 [main:114] - replacement of prope21 of type Boolean is ((P(1118931594).i).div(-6350246603923996636).toULong()).toUByte().equals(Kla8().prope14)
2021-03-12 08:29:36,914 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:29:36,914 [main:66] - Compilation checking started
2021-03-12 08:29:37,655 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = 0
        outer@while (prope30 < 10) {
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) (696841726.toUInt()).compareTo(42.toUByte()).shl(P(1118931594).i)
            prope22 += "i++;"
            prope30++
        }
        prope22 += "done;"
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith((Kla1().prope5).toString()) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))).size.toString(P(1118931594).i) + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(null).or(true)
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> { c ->
        (true).compareTo(Kla4().prope8)
        prope28 = { c.resume(Unit) }
    }

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in 1..(Kla4().prope9).equals(Kla1().prope5).compareTo(Kla11().prope17)) {
            if (prope27 != prope30) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (prope27 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error("Wrong state-machine generated: it is finished early")
        prope28()
        if (checkFinished && (Kla7().context).equals(Kla8().prope14).not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope24.prope28 = {
            prope24.((P(1118931594).i).div(-6350246603923996636).toULong()).toUByte().equals(Kla8().prope14) = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:29:37,658 [main:107] - replacing (checkFinished && (Kla7().context).equals(Kla8().prope14).not(), Boolean)
2021-03-12 08:29:37,658 [main:50] - replacing checkFinished && (Kla7().context).equals(Kla8().prope14).not() Boolean
2021-03-12 08:29:37,658 [main:54] - Getting value of type Boolean
2021-03-12 08:29:37,913 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:29:37,925 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 08:29:37,925 [main:61] - GENERATED IS CALL =false
2021-03-12 08:29:37,950 [main:67] - randomType = Short
2021-03-12 08:29:38,203 [main:302] - generating value of type = Short true depth = 0
2021-03-12 08:29:38,245 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@18d0c042]
2021-03-12 08:29:38,499 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:29:38,512 [main:149] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@3799e7a8]
2021-03-12 08:29:38,512 [main:78] - Generated call from random type = (-8250).rangeTo(5).isEmpty()
2021-03-12 08:29:38,513 [main:106] - GETTING Boolean from ULong
2021-03-12 08:29:38,535 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@6757dd7e], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]]
2021-03-12 08:29:38,535 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@6757dd7e]
2021-03-12 08:29:38,535 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]
2021-03-12 08:29:38,535 [main:117] - GENERATED CALL = (((P(1118931594).i).div(-6350246603923996636).toULong())).equals(Kla1().prope5).or(Kla11().prope17)
2021-03-12 08:29:38,535 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@6757dd7e], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]]
2021-03-12 08:29:38,535 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@6757dd7e]
2021-03-12 08:29:38,535 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]
2021-03-12 08:29:38,790 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:29:38,802 [main:117] - GENERATED CALL = (((P(1118931594).i).div(-6350246603923996636).toULong())).equals(Kla1().prope5).and(false)
2021-03-12 08:29:38,802 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@1cf16854], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@418eed39]]
2021-03-12 08:29:38,802 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@1cf16854]
2021-03-12 08:29:38,802 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@418eed39]
2021-03-12 08:29:39,055 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:29:39,055 [main:117] - GENERATED CALL = (((P(1118931594).i).div(-6350246603923996636).toULong())).toLong().equals("xtukq")
2021-03-12 08:29:39,055 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@52d193c4], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]]
2021-03-12 08:29:39,055 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@52d193c4]
2021-03-12 08:29:39,307 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 08:29:39,319 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]
2021-03-12 08:29:39,319 [main:117] - GENERATED CALL = (((P(1118931594).i).div(-6350246603923996636).toULong())).compareTo(73.toUByte()).equals(Kla1().prope5)
2021-03-12 08:29:39,319 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@415a873b], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@7ee93eda]]
2021-03-12 08:29:39,319 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@415a873b]
2021-03-12 08:29:39,319 [main:149] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@7ee93eda]
2021-03-12 08:29:39,319 [main:117] - GENERATED CALL = (((P(1118931594).i).div(-6350246603923996636).toULong())).toFloat().isNaN()
2021-03-12 08:29:39,319 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@7528ea42], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@c52f127]]
2021-03-12 08:29:39,319 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@7528ea42]
2021-03-12 08:29:39,320 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@c52f127]
2021-03-12 08:29:39,570 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:29:39,570 [main:117] - GENERATED CALL = (((P(1118931594).i).div(-6350246603923996636).toULong())).toUByte().equals("nveir")
2021-03-12 08:29:39,570 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@6757dd7e], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]]
2021-03-12 08:29:39,570 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@6757dd7e]
2021-03-12 08:29:39,823 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:29:39,823 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]
2021-03-12 08:29:39,823 [main:117] - GENERATED CALL = (((P(1118931594).i).div(-6350246603923996636).toULong())).equals("zqqsy").not()
2021-03-12 08:29:39,823 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@3cd0ae73], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4047829]]
2021-03-12 08:29:39,823 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@3cd0ae73]
2021-03-12 08:29:39,823 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4047829]
2021-03-12 08:29:39,823 [main:117] - GENERATED CALL = (((P(1118931594).i).div(-6350246603923996636).toULong())).toDouble().isInfinite()
2021-03-12 08:29:39,823 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@415a873b], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@47032d02]]
2021-03-12 08:29:39,823 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@415a873b]
2021-03-12 08:29:39,823 [main:149] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@47032d02]
2021-03-12 08:29:39,824 [main:117] - GENERATED CALL = (((P(1118931594).i).div(-6350246603923996636).toULong())).toFloat().isFinite()
2021-03-12 08:29:39,824 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@25ebee8f], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@65498049]]
2021-03-12 08:29:39,824 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@25ebee8f]
2021-03-12 08:29:39,824 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 08:29:40,075 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:29:40,075 [main:117] - GENERATED CALL = (((P(1118931594).i).div(-6350246603923996636).toULong())).toShort().equals("ruvtu")
2021-03-12 08:29:40,075 [main:114] - replacement of checkFinished && (Kla7().context).equals(Kla8().prope14).not() of type Boolean is (((P(1118931594).i).div(-6350246603923996636).toULong())).toFloat().isNaN()
2021-03-12 08:29:40,329 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:29:40,329 [main:66] - Compilation checking started
2021-03-12 08:29:41,383 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = 0
        outer@while (prope30 < 10) {
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) (696841726.toUInt()).compareTo(42.toUByte()).shl(P(1118931594).i)
            prope22 += "i++;"
            prope30++
        }
        prope22 += "done;"
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith((Kla1().prope5).toString()) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))).size.toString(P(1118931594).i) + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(null).or(true)
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> { c ->
        (true).compareTo(Kla4().prope8)
        prope28 = { c.resume(Unit) }
    }

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in 1..(Kla4().prope9).equals(Kla1().prope5).compareTo(Kla11().prope17)) {
            if (prope27 != prope30) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (prope27 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error("Wrong state-machine generated: it is finished early")
        prope28()
        if ((((P(1118931594).i).div(-6350246603923996636).toULong())).toFloat().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope24.prope28 = {
            prope24.prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:29:41,386 [main:107] - replacing (prope28, Function0<Unit>)
2021-03-12 08:29:41,386 [main:50] - replacing prope28 Function0<Unit>
2021-03-12 08:29:41,386 [main:54] - Getting value of type Function0<Unit>
2021-03-12 08:29:41,639 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 08:29:41,651 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:29:41,917 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:29:41,932 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:29:42,530 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 08:29:42,542 [main:95] - GENERATED = check(false)
2021-03-12 08:29:42,542 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false)}
2021-03-12 08:29:42,542 [main:61] - GENERATED IS CALL =false
2021-03-12 08:29:42,567 [main:67] - randomType = Boolean
2021-03-12 08:29:42,821 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:29:42,843 [main:106] - GETTING Function0<Unit> from P
2021-03-12 08:29:42,847 [main:106] - GETTING Function0<Unit> from ULong
2021-03-12 08:29:42,869 [main:106] - GETTING Function0<Unit> from String
2021-03-12 08:29:42,886 [main:106] - GETTING Function0<Unit> from Any?
2021-03-12 08:29:42,889 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 08:29:42,895 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 08:29:42,896 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 08:29:42,925 [main:106] - GETTING Function0<Unit> from Boolean
2021-03-12 08:29:42,933 [main:106] - GETTING Function0<Unit> from Continuation<Any?>
2021-03-12 08:29:42,940 [main:106] - GETTING Function0<Unit> from String
2021-03-12 08:29:42,941 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 08:29:42,942 [main:106] - GETTING Function0<Unit> from EmptyCoroutineContext
2021-03-12 08:29:42,956 [main:106] - GETTING Function0<Unit> from P
2021-03-12 08:29:42,957 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 08:29:42,957 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 08:29:42,965 [main:114] - replacement of prope28 of type Function0<Unit> is Kla4().prope9
2021-03-12 08:29:43,215 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:29:43,216 [main:66] - Compilation checking started
2021-03-12 08:29:43,949 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = 0
        outer@while (prope30 < 10) {
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) (696841726.toUInt()).compareTo(42.toUByte()).shl(P(1118931594).i)
            prope22 += "i++;"
            prope30++
        }
        prope22 += "done;"
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith((Kla1().prope5).toString()) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))).size.toString(P(1118931594).i) + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(null).or(true)
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> { c ->
        (true).compareTo(Kla4().prope8)
        prope28 = { c.resume(Unit) }
    }

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in 1..(Kla4().prope9).equals(Kla1().prope5).compareTo(Kla11().prope17)) {
            if (prope27 != prope30) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (prope27 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error("Wrong state-machine generated: it is finished early")
        prope28()
        if ((((P(1118931594).i).div(-6350246603923996636).toULong())).toFloat().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope24.Kla4().prope9 = {
            prope24.prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:29:43,952 [main:107] - replacing (1..(Kla4().prope9).equals(Kla1().prope5).compareTo(Kla11().prope17), IntRange)
2021-03-12 08:29:43,952 [main:50] - replacing 1..(Kla4().prope9).equals(Kla1().prope5).compareTo(Kla11().prope17) IntRange
2021-03-12 08:29:43,952 [main:54] - Getting value of type IntRange
2021-03-12 08:29:44,213 [main:302] - generating value of type = IntRange false depth = 0
2021-03-12 08:29:44,481 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 08:29:44,495 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 08:29:45,415 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:29:45,427 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:29:45,439 [main:95] - GENERATED = IntRange(1824713090, 645941577)
2021-03-12 08:29:45,439 [main:58] - GENERATED VALUE OF TYPE IntRange = IntRange(1824713090, 645941577)
2021-03-12 08:29:45,440 [main:61] - GENERATED IS CALL =true
2021-03-12 08:29:45,822 [main:67] - randomType = Kla16<Double>
2021-03-12 08:29:46,076 [main:302] - generating value of type = Kla16<Double> false depth = 0
2021-03-12 08:29:46,088 [main:112] - generating klass Kla16 text = abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}
2021-03-12 08:29:47,367 [main:302] - generating value of type = Kla19 false depth = 2
2021-03-12 08:29:47,379 [main:112] - generating klass Kla19 text = object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope24.prope28 = {
            prope24.prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}
2021-03-12 08:29:47,392 [main:106] - GETTING IntRange from CoroutineContext
2021-03-12 08:29:47,398 [main:106] - GETTING IntRange from ULong
2021-03-12 08:29:47,418 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@5703fb0e], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@23c343e1]]
2021-03-12 08:29:47,418 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@5703fb0e]
2021-03-12 08:29:47,418 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@23c343e1]
2021-03-12 08:29:47,670 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:29:47,683 [main:117] - GENERATED CALL = (((P(1118931594).i).div(-6350246603923996636).toULong())).toByte().rangeTo(-80)
2021-03-12 08:29:47,683 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@52d193c4], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b6a54c]]
2021-03-12 08:29:47,683 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@52d193c4]
2021-03-12 08:29:47,943 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 08:29:47,955 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b6a54c]
2021-03-12 08:29:48,207 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:29:48,219 [main:117] - GENERATED CALL = (((P(1118931594).i).div(-6350246603923996636).toULong())).compareTo(2.toUByte()).rangeTo(103)
2021-03-12 08:29:48,219 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@52d193c4], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7f8c7c3b]]
2021-03-12 08:29:48,219 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@52d193c4]
2021-03-12 08:29:48,470 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 08:29:48,482 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7f8c7c3b]
2021-03-12 08:29:48,732 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:29:48,745 [main:117] - GENERATED CALL = (((P(1118931594).i).div(-6350246603923996636).toULong())).compareTo(25.toUByte()).until(-98)
2021-03-12 08:29:48,745 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@25ebee8f], public infix fun kotlin.Short.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50fef73f]]
2021-03-12 08:29:48,745 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@25ebee8f]
2021-03-12 08:29:48,745 [main:149] - GENERATING call of type public infix fun kotlin.Short.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@50fef73f]
2021-03-12 08:29:48,997 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:29:49,009 [main:117] - GENERATED CALL = (((P(1118931594).i).div(-6350246603923996636).toULong())).toShort().until(72)
2021-03-12 08:29:49,009 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@5703fb0e], public infix fun kotlin.Byte.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3df9100b]]
2021-03-12 08:29:49,009 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@5703fb0e]
2021-03-12 08:29:49,009 [main:149] - GENERATING call of type public infix fun kotlin.Byte.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3df9100b]
2021-03-12 08:29:49,268 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:29:49,280 [main:117] - GENERATED CALL = (((P(1118931594).i).div(-6350246603923996636).toULong())).toByte().until(-127)
2021-03-12 08:29:49,387 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@25ebee8f], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@18d0c042]]
2021-03-12 08:29:49,388 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@25ebee8f]
2021-03-12 08:29:49,388 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@18d0c042]
2021-03-12 08:29:49,641 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:29:49,654 [main:117] - GENERATED CALL = (((P(1118931594).i).div(-6350246603923996636).toULong())).toShort().rangeTo(69)
2021-03-12 08:29:49,654 [main:114] - replacement of 1..(Kla4().prope9).equals(Kla1().prope5).compareTo(Kla11().prope17) of type IntRange is (((P(1118931594).i).div(-6350246603923996636).toULong())).toShort().until(72)
2021-03-12 08:29:49,911 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:29:49,912 [main:66] - Compilation checking started
2021-03-12 08:29:50,973 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = 0
        outer@while (prope30 < 10) {
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) (696841726.toUInt()).compareTo(42.toUByte()).shl(P(1118931594).i)
            prope22 += "i++;"
            prope30++
        }
        prope22 += "done;"
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith((Kla1().prope5).toString()) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))).size.toString(P(1118931594).i) + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(null).or(true)
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> { c ->
        (true).compareTo(Kla4().prope8)
        prope28 = { c.resume(Unit) }
    }

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in (((P(1118931594).i).div(-6350246603923996636).toULong())).toShort().until(72)) {
            if (prope27 != prope30) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (prope27 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error("Wrong state-machine generated: it is finished early")
        prope28()
        if ((((P(1118931594).i).div(-6350246603923996636).toULong())).toFloat().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope24.prope28 = {
            prope24.prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:29:50,976 [main:107] - replacing (prope30 < 10, Boolean)
2021-03-12 08:29:50,976 [main:50] - replacing prope30 < 10 Boolean
2021-03-12 08:29:50,976 [main:54] - Getting value of type Boolean
2021-03-12 08:29:51,233 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:29:51,245 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 08:29:51,245 [main:61] - GENERATED IS CALL =false
2021-03-12 08:29:51,595 [main:67] - randomType = Byte
2021-03-12 08:29:51,846 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:29:51,891 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@28d52ecb]
2021-03-12 08:29:51,891 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cc89c78]
2021-03-12 08:29:51,891 [main:78] - Generated call from random type = (-9).toChar().isSurrogate()
2021-03-12 08:29:51,891 [main:106] - GETTING Boolean from Boolean
2021-03-12 08:29:51,899 [main:113] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]]
2021-03-12 08:29:51,899 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]
2021-03-12 08:29:52,160 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:29:52,172 [main:117] - GENERATED CALL = (Kla4().prope8).or(false)
2021-03-12 08:29:52,173 [main:113] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]]
2021-03-12 08:29:52,173 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]
2021-03-12 08:29:52,173 [main:117] - GENERATED CALL = (Kla4().prope8).xor(Kla11().prope17)
2021-03-12 08:29:52,173 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]]
2021-03-12 08:29:52,173 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6]
2021-03-12 08:29:52,173 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]
2021-03-12 08:29:52,173 [main:117] - GENERATED CALL = (Kla4().prope8).equals(Kla1().prope5).or(Kla4().prope8)
2021-03-12 08:29:52,173 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]]
2021-03-12 08:29:52,173 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6]
2021-03-12 08:29:52,173 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]
2021-03-12 08:29:52,173 [main:117] - GENERATED CALL = (Kla4().prope8).equals(Kla8().prope14).xor((true))
2021-03-12 08:29:52,173 [main:113] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]]
2021-03-12 08:29:52,173 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]
2021-03-12 08:29:52,174 [main:117] - GENERATED CALL = (Kla4().prope8).and((true))
2021-03-12 08:29:52,174 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]]
2021-03-12 08:29:52,174 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]
2021-03-12 08:29:52,174 [main:117] - GENERATED CALL = (Kla4().prope8).equals(Kla1().prope5)
2021-03-12 08:29:52,174 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]]
2021-03-12 08:29:52,174 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:29:52,432 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:29:52,445 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]
2021-03-12 08:29:52,700 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:29:52,700 [main:117] - GENERATED CALL = (Kla4().prope8).compareTo(true).equals("zlksq")
2021-03-12 08:29:52,701 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]]
2021-03-12 08:29:52,701 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6]
2021-03-12 08:29:52,701 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]
2021-03-12 08:29:52,701 [main:117] - GENERATED CALL = (Kla4().prope8).equals(Kla1().prope5).not()
2021-03-12 08:29:52,701 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]]
2021-03-12 08:29:52,701 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6]
2021-03-12 08:29:52,951 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:29:52,952 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]
2021-03-12 08:29:52,952 [main:117] - GENERATED CALL = (Kla4().prope8).equals("fnggx").equals(Kla8().prope14)
2021-03-12 08:29:52,952 [main:113] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]]
2021-03-12 08:29:52,952 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]
2021-03-12 08:29:52,952 [main:117] - GENERATED CALL = (Kla4().prope8).not()
2021-03-12 08:29:52,952 [main:114] - replacement of prope30 < 10 of type Boolean is (Kla4().prope8).xor(Kla11().prope17)
2021-03-12 08:29:53,204 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:29:53,204 [main:66] - Compilation checking started
2021-03-12 08:29:54,247 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = 0
        outer@while ((Kla4().prope8).xor(Kla11().prope17)) {
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) (696841726.toUInt()).compareTo(42.toUByte()).shl(P(1118931594).i)
            prope22 += "i++;"
            prope30++
        }
        prope22 += "done;"
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith((Kla1().prope5).toString()) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))).size.toString(P(1118931594).i) + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(null).or(true)
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> { c ->
        (true).compareTo(Kla4().prope8)
        prope28 = { c.resume(Unit) }
    }

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in (((P(1118931594).i).div(-6350246603923996636).toULong())).toShort().until(72)) {
            if (prope27 != prope30) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (prope27 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error("Wrong state-machine generated: it is finished early")
        prope28()
        if ((((P(1118931594).i).div(-6350246603923996636).toULong())).toFloat().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope24.prope28 = {
            prope24.prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:29:54,250 [main:107] - replacing (prope27 != prope30, Boolean)
2021-03-12 08:29:54,251 [main:50] - replacing prope27 != prope30 Boolean
2021-03-12 08:29:54,251 [main:54] - Getting value of type Boolean
2021-03-12 08:29:54,505 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:29:54,517 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 08:29:54,517 [main:61] - GENERATED IS CALL =false
2021-03-12 08:29:54,542 [main:67] - randomType = Short
2021-03-12 08:29:54,795 [main:302] - generating value of type = Short true depth = 0
2021-03-12 08:29:54,837 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@18d0c042]
2021-03-12 08:29:55,090 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:29:55,103 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4330f93c]
2021-03-12 08:29:55,358 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:29:55,370 [main:78] - Generated call from random type = (-15536).rangeTo(15).contains(-1873478740)
2021-03-12 08:29:55,371 [main:106] - GETTING Boolean from Continuation<MutableMap<Float, Long>>
2021-03-12 08:29:55,379 [main:113] - Case = [public abstract val context: kotlin.coroutines.CoroutineContext defined in kotlin.coroutines.Continuation[DeserializedPropertyDescriptor@7832d3bb], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4e0a1e]]
2021-03-12 08:29:55,379 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4e0a1e]
2021-03-12 08:29:55,380 [main:117] - GENERATED CALL = (fu3<MutableMap<Float, Long>>({a: MutableMap<Float, Long> -> check(true)})).context.equals(Kla8().prope14)
2021-03-12 08:29:55,380 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@4a4bbd17], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]]
2021-03-12 08:29:55,380 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@4a4bbd17]
2021-03-12 08:29:55,380 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]
2021-03-12 08:29:55,380 [main:117] - GENERATED CALL = (fu3<MutableMap<Float, Long>>({a: MutableMap<Float, Long> -> check(true)})).equals(Kla1().prope5).or((true))
2021-03-12 08:29:55,380 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@4a4bbd17]]
2021-03-12 08:29:55,380 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@4a4bbd17]
2021-03-12 08:29:55,380 [main:117] - GENERATED CALL = (fu3<MutableMap<Float, Long>>({a: MutableMap<Float, Long> -> check(true)})).equals(Kla1().prope5)
2021-03-12 08:29:55,380 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@4a4bbd17], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]]
2021-03-12 08:29:55,380 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@4a4bbd17]
2021-03-12 08:29:55,632 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:29:55,633 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]
2021-03-12 08:29:55,633 [main:117] - GENERATED CALL = (fu3<MutableMap<Float, Long>>({a: MutableMap<Float, Long> -> check(true)})).equals("gwwrt").not()
2021-03-12 08:29:55,633 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@4a4bbd17], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]]
2021-03-12 08:29:55,633 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@4a4bbd17]
2021-03-12 08:29:55,885 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:29:55,885 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]
2021-03-12 08:29:56,137 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:29:56,138 [main:117] - GENERATED CALL = (fu3<MutableMap<Float, Long>>({a: MutableMap<Float, Long> -> check(true)})).equals("jdvrd").equals("napqm")
2021-03-12 08:29:56,138 [main:113] - Case = [public abstract fun resumeWith(result: kotlin.Result<kotlin.collections.MutableMap<kotlin.Float, kotlin.Long>>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@1ee9fd7e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@21ac4f85]]
2021-03-12 08:29:56,138 [main:149] - GENERATING call of type public abstract fun resumeWith(result: kotlin.Result<kotlin.collections.MutableMap<kotlin.Float, kotlin.Long>>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@1ee9fd7e]
2021-03-12 08:29:56,391 [main:302] - generating value of type = Result<MutableMap<Float, Long>> false depth = 0
2021-03-12 08:29:56,661 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->MutableMap<Float, Long>): Result<MutableMap<Float, Long>> = TODO()
2021-03-12 08:29:56,675 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->MutableMap<Float, Long>): Result<MutableMap<Float, Long>> = TODO()
2021-03-12 08:29:57,338 [main:302] - generating value of type = Function0<MutableMap<Float, Long>> false depth = 3
2021-03-12 08:29:57,351 [main:302] - generating value of type = MutableMap<Float, Long> false depth = 4
2021-03-12 08:29:57,620 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(original: kotlin.collections.Map<Float, Long>): MutableMap<Float, Long> = TODO()
2021-03-12 08:29:57,635 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(original: kotlin.collections.Map<Float, Long>): MutableMap<Float, Long> = TODO()
2021-03-12 08:29:58,298 [main:302] - generating value of type = Map<Float, Long> false depth = 7
2021-03-12 08:29:58,567 [main:43] - GENERATING CALL OF fun <K, V> mapOf(): Map<Float, Long> = TODO()
2021-03-12 08:29:58,582 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> mapOf(): Map<Float, Long> = TODO()
2021-03-12 08:29:58,856 [main:95] - GENERATED = mapOf<Float, Long>()
2021-03-12 08:29:58,856 [main:95] - GENERATED = LinkedHashMap<Float, Long>(mapOf<Float, Long>())
2021-03-12 08:29:58,857 [main:95] - GENERATED = runCatching<MutableMap<Float, Long>>({ LinkedHashMap<Float, Long>(mapOf<Float, Long>())})
2021-03-12 08:29:58,857 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@21ac4f85]
2021-03-12 08:29:58,857 [main:117] - GENERATED CALL = (fu3<MutableMap<Float, Long>>({a: MutableMap<Float, Long> -> check(true)})).resumeWith(runCatching<MutableMap<Float, Long>>({ LinkedHashMap<Float, Long>(mapOf<Float, Long>())})).equals(Kla1().prope5)
2021-03-12 08:29:58,857 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@4a4bbd17], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]]
2021-03-12 08:29:58,857 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@4a4bbd17]
2021-03-12 08:29:59,127 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:29:59,128 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]
2021-03-12 08:29:59,128 [main:117] - GENERATED CALL = (fu3<MutableMap<Float, Long>>({a: MutableMap<Float, Long> -> check(true)})).equals("rozyv").xor((true))
2021-03-12 08:29:59,128 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@4a4bbd17], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]]
2021-03-12 08:29:59,128 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@4a4bbd17]
2021-03-12 08:29:59,128 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]
2021-03-12 08:29:59,129 [main:117] - GENERATED CALL = (fu3<MutableMap<Float, Long>>({a: MutableMap<Float, Long> -> check(true)})).equals(Kla1().prope5).and(Kla4().prope8)
2021-03-12 08:29:59,129 [main:114] - replacement of prope27 != prope30 of type Boolean is (-15536).rangeTo(15).contains(-1873478740)
2021-03-12 08:29:59,381 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:29:59,382 [main:66] - Compilation checking started
2021-03-12 08:30:00,443 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = 0
        outer@while ((Kla4().prope8).xor(Kla11().prope17)) {
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) (696841726.toUInt()).compareTo(42.toUByte()).shl(P(1118931594).i)
            prope22 += "i++;"
            prope30++
        }
        prope22 += "done;"
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith((Kla1().prope5).toString()) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))).size.toString(P(1118931594).i) + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(null).or(true)
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> { c ->
        (true).compareTo(Kla4().prope8)
        prope28 = { c.resume(Unit) }
    }

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in (((P(1118931594).i).div(-6350246603923996636).toULong())).toShort().until(72)) {
            if ((-15536).rangeTo(15).contains(-1873478740)) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (prope27 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error("Wrong state-machine generated: it is finished early")
        prope28()
        if ((((P(1118931594).i).div(-6350246603923996636).toULong())).toFloat().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope24.prope28 = {
            prope24.prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:30:00,446 [main:107] - replacing ("done;", String)
2021-03-12 08:30:00,446 [main:50] - replacing "done;" String
2021-03-12 08:30:00,446 [main:54] - Getting value of type String
2021-03-12 08:30:00,700 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:30:00,712 [main:58] - GENERATED VALUE OF TYPE String = "evdeq"
2021-03-12 08:30:00,712 [main:61] - GENERATED IS CALL =false
2021-03-12 08:30:01,425 [main:67] - randomType = List<Kla8?>
2021-03-12 08:30:01,426 [main:106] - GETTING String from Continuation<MutableMap<Float, Long>>
2021-03-12 08:30:01,435 [main:106] - GETTING String from Any?
2021-03-12 08:30:01,438 [main:113] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@76b34e5]]
2021-03-12 08:30:01,438 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@76b34e5]
2021-03-12 08:30:01,438 [main:117] - GENERATED CALL = (Kla1().prope5).toString()
2021-03-12 08:30:01,438 [main:114] - replacement of "done;" of type String is (Kla1().prope5).toString()
2021-03-12 08:30:01,693 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:30:01,693 [main:66] - Compilation checking started
2021-03-12 08:30:02,812 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = 0
        outer@while ((Kla4().prope8).xor(Kla11().prope17)) {
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) (696841726.toUInt()).compareTo(42.toUByte()).shl(P(1118931594).i)
            prope22 += "i++;"
            prope30++
        }
        prope22 += (Kla1().prope5).toString()
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith((Kla1().prope5).toString()) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))).size.toString(P(1118931594).i) + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(null).or(true)
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> { c ->
        (true).compareTo(Kla4().prope8)
        prope28 = { c.resume(Unit) }
    }

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in (((P(1118931594).i).div(-6350246603923996636).toULong())).toShort().until(72)) {
            if ((-15536).rangeTo(15).contains(-1873478740)) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (prope27 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error("Wrong state-machine generated: it is finished early")
        prope28()
        if ((((P(1118931594).i).div(-6350246603923996636).toULong())).toFloat().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope24.prope28 = {
            prope24.prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:30:02,815 [main:107] - replacing (prope25, Result<Any?>)
2021-03-12 08:30:02,816 [main:50] - replacing prope25 Result<Any?>
2021-03-12 08:30:02,816 [main:54] - Getting value of type Result<Any?>
2021-03-12 08:30:03,088 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-12 08:30:03,358 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 08:30:03,373 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 08:30:03,996 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-12 08:30:04,008 [main:302] - generating value of type = Any false depth = 4
2021-03-12 08:30:04,009 [main:95] - GENERATED = runCatching<Any?>({ "tbyvb"})
2021-03-12 08:30:04,009 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "tbyvb"})
2021-03-12 08:30:04,009 [main:61] - GENERATED IS CALL =true
2021-03-12 08:30:05,137 [main:67] - randomType = Function1<Kla9<UByte?>, Kla5>
2021-03-12 08:30:05,138 [main:106] - GETTING Result<Any?> from P
2021-03-12 08:30:05,145 [main:106] - GETTING Result<Any?> from Any?
2021-03-12 08:30:05,148 [main:106] - GETTING Result<Any?> from Function0<Unit>
2021-03-12 08:30:05,157 [main:106] - GETTING Result<Any?> from Int
2021-03-12 08:30:05,188 [main:106] - GETTING Result<Any?> from Boolean
2021-03-12 08:30:05,196 [main:106] - GETTING Result<Any?> from Boolean
2021-03-12 08:30:05,197 [main:106] - GETTING Result<Any?> from Function0<Unit>
2021-03-12 08:30:05,199 [main:106] - GETTING Result<Any?> from P
2021-03-12 08:30:05,200 [main:106] - GETTING Result<Any?> from Int
2021-03-12 08:30:05,201 [main:106] - GETTING Result<Any?> from ULong
2021-03-12 08:30:05,224 [main:106] - GETTING Result<Any?> from Boolean
2021-03-12 08:30:05,225 [main:106] - GETTING Result<Any?> from CoroutineContext
2021-03-12 08:30:05,232 [main:106] - GETTING Result<Any?> from Int
2021-03-12 08:30:05,233 [main:106] - GETTING Result<Any?> from CoroutineContext
2021-03-12 08:30:05,234 [main:106] - GETTING Result<Any?> from Int
2021-03-12 08:30:05,235 [main:106] - GETTING Result<Any?> from Continuation<Any?>
2021-03-12 08:30:05,243 [main:106] - GETTING Result<Any?> from Long
2021-03-12 08:30:05,272 [main:106] - GETTING Result<Any?> from ULong
2021-03-12 08:30:05,273 [main:106] - GETTING Result<Any?> from Continuation<MutableMap<Array<UInt>, String>>
2021-03-12 08:30:05,283 [main:106] - GETTING Result<Any?> from String
2021-03-12 08:30:05,300 [main:106] - GETTING Result<Any?> from P
2021-03-12 08:30:05,302 [main:106] - GETTING Result<Any?> from String
2021-03-12 08:30:05,303 [main:106] - GETTING Result<Any?> from CoroutineContext
2021-03-12 08:30:05,304 [main:106] - GETTING Result<Any?> from EmptyCoroutineContext
2021-03-12 08:30:05,318 [main:106] - GETTING Result<Any?> from CoroutineContext
2021-03-12 08:30:05,320 [main:106] - GETTING Result<Any?> from String
2021-03-12 08:30:05,321 [main:106] - GETTING Result<Any?> from Continuation<MutableMap<Float, Long>>
2021-03-12 08:30:05,330 [main:106] - GETTING Result<Any?> from String
2021-03-12 08:30:05,331 [main:106] - GETTING Result<Any?> from EmptyCoroutineContext
2021-03-12 08:30:05,333 [main:106] - GETTING Result<Any?> from Continuation<Any?>
2021-03-12 08:30:05,334 [main:106] - GETTING Result<Any?> from Any?
2021-03-12 08:30:05,335 [main:106] - GETTING Result<Any?> from CoroutineContext
2021-03-12 08:30:05,336 [main:106] - GETTING Result<Any?> from CoroutineContext
2021-03-12 08:30:05,336 [main:114] - replacement of prope25 of type Result<Any?> is runCatching<Any?>({ "tbyvb"})
2021-03-12 08:30:05,594 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:30:05,595 [main:66] - Compilation checking started
2021-03-12 08:30:06,640 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = 0
        outer@while ((Kla4().prope8).xor(Kla11().prope17)) {
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) (696841726.toUInt()).compareTo(42.toUByte()).shl(P(1118931594).i)
            prope22 += "i++;"
            prope30++
        }
        prope22 += (Kla1().prope5).toString()
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
runCatching<Any?>({ "tbyvb"}).getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith((Kla1().prope5).toString()) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + (linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))).size.toString(P(1118931594).i) + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(null).or(true)
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> { c ->
        (true).compareTo(Kla4().prope8)
        prope28 = { c.resume(Unit) }
    }

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in (((P(1118931594).i).div(-6350246603923996636).toULong())).toShort().until(72)) {
            if ((-15536).rangeTo(15).contains(-1873478740)) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (prope27 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error("Wrong state-machine generated: it is finished early")
        prope28()
        if ((((P(1118931594).i).div(-6350246603923996636).toULong())).toFloat().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope24.prope28 = {
            prope24.prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:30:06,643 [main:107] - replacing (it?.methodName?.startsWith(method) == true, Boolean)
2021-03-12 08:30:06,643 [main:50] - replacing it?.methodName?.startsWith(method) == true Boolean
2021-03-12 08:30:06,643 [main:54] - Getting value of type Boolean
2021-03-12 08:30:06,902 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:30:06,914 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 08:30:06,914 [main:61] - GENERATED IS CALL =false
2021-03-12 08:30:06,939 [main:67] - randomType = Boolean
2021-03-12 08:30:07,197 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:30:07,218 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]
2021-03-12 08:30:07,219 [main:78] - Generated call from random type = (false).equals(Kla8().prope14)
2021-03-12 08:30:07,219 [main:106] - GETTING Boolean from CoroutineContext
2021-03-12 08:30:07,224 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4e0a1e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]]
2021-03-12 08:30:07,225 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4e0a1e]
2021-03-12 08:30:07,502 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:30:07,503 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]
2021-03-12 08:30:07,503 [main:117] - GENERATED CALL = (Kla12.context).equals("xhers").equals(Kla8().prope14)
2021-03-12 08:30:07,503 [main:113] - Case = [public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@a04926c], public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@4ad177f3]]
2021-03-12 08:30:07,503 [main:149] - GENERATING call of type public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@a04926c]
2021-03-12 08:30:07,759 [main:302] - generating value of type = R false depth = 0
2021-03-12 08:30:08,106 [main:43] - GENERATING CALL OF fun <T, R> with(receiver: Int, block: T.()->Kla8): R = TODO()
2021-03-12 08:30:08,121 [main:61] - WITHOUT TYPE PARAMS = fun <T, R> with(receiver: Int, block: T.()->Kla8): R = TODO()
2021-03-12 08:30:08,737 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:30:08,750 [main:385] - Cant generate call of fun <T, R> with(receiver: Int, block: T.()->Kla8): R = TODO()
2021-03-12 08:30:09,008 [main:302] - generating value of type = Function2<R, Element, R> false depth = 0
2021-03-12 08:30:09,021 [main:302] - generating value of type = R false depth = 1
2021-03-12 08:30:10,010 [main:43] - GENERATING CALL OF fun <R> run(block: ()->HashSet<Kla11?>): R = TODO()
2021-03-12 08:30:10,025 [main:61] - WITHOUT TYPE PARAMS = fun <R> run(block: ()->HashSet<Kla11?>): R = TODO()
2021-03-12 08:30:10,702 [main:302] - generating value of type = Function0<HashSet<Kla11?>> false depth = 4
2021-03-12 08:30:10,715 [main:302] - generating value of type = HashSet<Kla11?> false depth = 5
2021-03-12 08:30:10,986 [main:43] - GENERATING CALL OF fun <T> hashSetOf(): HashSet<Kla11?> = TODO()
2021-03-12 08:30:11,000 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(): HashSet<Kla11?> = TODO()
2021-03-12 08:30:11,277 [main:95] - GENERATED = hashSetOf<Kla11?>()
2021-03-12 08:30:11,277 [main:95] - GENERATED = run<HashSet<Kla11?>>({ hashSetOf<Kla11?>()})
2021-03-12 08:30:11,278 [main:158] - CANT GENERATE PARAMS FOR public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@a04926c]
2021-03-12 08:30:11,278 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4e0a1e], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]]
2021-03-12 08:30:11,278 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4e0a1e]
2021-03-12 08:30:11,278 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]
2021-03-12 08:30:11,278 [main:117] - GENERATED CALL = (Kla12.context).equals(Kla1().prope5).and((true))
2021-03-12 08:30:11,278 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4e0a1e], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]]
2021-03-12 08:30:11,278 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4e0a1e]
2021-03-12 08:30:11,278 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]
2021-03-12 08:30:11,278 [main:117] - GENERATED CALL = (Kla12.context).equals(Kla1().prope5).or((true))
2021-03-12 08:30:11,278 [main:113] - Case = [public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@a04926c], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun <T : kotlin.Any, R : kotlin.collections.Iterable<T>> R.contains(element: T?): kotlin.Boolean where R : kotlin.ranges.ClosedRange<T> defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@e78f01e]]
2021-03-12 08:30:11,278 [main:149] - GENERATING call of type public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@a04926c]
2021-03-12 08:30:11,534 [main:302] - generating value of type = R false depth = 0
2021-03-12 08:30:11,831 [main:43] - GENERATING CALL OF fun <R> run(block: ()->Int): R = TODO()
2021-03-12 08:30:11,845 [main:61] - WITHOUT TYPE PARAMS = fun <R> run(block: ()->Int): R = TODO()
2021-03-12 08:30:12,461 [main:302] - generating value of type = Function0<Int> false depth = 3
2021-03-12 08:30:12,474 [main:302] - generating value of type = Int true depth = 4
2021-03-12 08:30:12,486 [main:95] - GENERATED = run<Int>({ -1818099205})
2021-03-12 08:30:12,767 [main:302] - generating value of type = Function2<R, Element, R> false depth = 0
2021-03-12 08:30:12,779 [main:302] - generating value of type = R false depth = 1
2021-03-12 08:30:13,766 [main:43] - GENERATING CALL OF fun <T, R> with(receiver: ArrayList<Long?>, block: T.()->Boolean): R = TODO()
2021-03-12 08:30:13,781 [main:61] - WITHOUT TYPE PARAMS = fun <T, R> with(receiver: ArrayList<Long?>, block: T.()->Boolean): R = TODO()
2021-03-12 08:30:14,395 [main:302] - generating value of type = ArrayList<Long?> false depth = 4
2021-03-12 08:30:14,666 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Long?> = TODO()
2021-03-12 08:30:14,681 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Long?> = TODO()
2021-03-12 08:30:14,968 [main:95] - GENERATED = arrayListOf<Long?>()
2021-03-12 08:30:14,968 [main:385] - Cant generate call of fun <T, R> with(receiver: ArrayList<Long?>, block: T.()->Boolean): R = TODO()
2021-03-12 08:30:14,968 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun <T : kotlin.Any, R : kotlin.collections.Iterable<T>> R.contains(element: T?): kotlin.Boolean where R : kotlin.ranges.ClosedRange<T> defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@e78f01e]
2021-03-12 08:30:15,225 [main:302] - generating value of type = T false depth = 0
2021-03-12 08:30:15,521 [main:43] - GENERATING CALL OF fun <T> maxOf(a: String, b: String, c: String, comparator: kotlin.Comparator<String>): T = TODO()
2021-03-12 08:30:15,536 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: String, b: String, c: String, comparator: kotlin.Comparator<String>): T = TODO()
2021-03-12 08:30:16,164 [main:302] - generating value of type = String true depth = 3
2021-03-12 08:30:16,177 [main:302] - generating value of type = String true depth = 3
2021-03-12 08:30:16,189 [main:302] - generating value of type = String true depth = 3
2021-03-12 08:30:16,201 [main:302] - generating value of type = Comparator<String> false depth = 3
2021-03-12 08:30:16,471 [main:43] - GENERATING CALL OF fun <T> naturalOrder(): Comparator<Strg> = TODO()
2021-03-12 08:30:16,485 [main:61] - WITHOUT TYPE PARAMS = fun <T> naturalOrder(): Comparator<Strg> = TODO()
2021-03-12 08:30:16,761 [main:95] - GENERATED = naturalOrder<String>()
2021-03-12 08:30:16,761 [main:95] - GENERATED = maxOf<String>("cfixa", "ykwkp", "lllsr", naturalOrder<String>())
2021-03-12 08:30:16,761 [main:117] - GENERATED CALL = (Kla12.context).fold(run<Int>({ -1818099205}), {a: R, b: Element -> })?.contains(maxOf<String>("cfixa", "ykwkp", "lllsr", naturalOrder<String>()))
2021-03-12 08:30:16,761 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4e0a1e], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]]
2021-03-12 08:30:16,761 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4e0a1e]
2021-03-12 08:30:16,761 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]
2021-03-12 08:30:16,761 [main:117] - GENERATED CALL = (Kla12.context).equals(Kla1().prope5).xor(Kla4().prope8)
2021-03-12 08:30:16,762 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4e0a1e]]
2021-03-12 08:30:16,762 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4e0a1e]
2021-03-12 08:30:17,017 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:30:17,017 [main:117] - GENERATED CALL = (Kla12.context).equals("rjgyr")
2021-03-12 08:30:17,017 [main:113] - Case = [public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4e37fc9b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext.Element[DeserializedSimpleFunctionDescriptor@2b508d10]]
2021-03-12 08:30:17,017 [main:149] - GENERATING call of type public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4e37fc9b]
2021-03-12 08:30:17,275 [main:302] - generating value of type = Key<E> false depth = 0
2021-03-12 08:30:17,561 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-12 08:30:17,576 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-12 08:30:18,597 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 3
2021-03-12 08:30:18,878 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:30:18,893 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:30:19,876 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:30:19,876 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-12 08:30:19,876 [main:158] - CANT GENERATE PARAMS FOR public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4e37fc9b]
2021-03-12 08:30:19,876 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4e0a1e], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]]
2021-03-12 08:30:19,876 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4e0a1e]
2021-03-12 08:30:20,129 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:30:20,129 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]
2021-03-12 08:30:20,129 [main:117] - GENERATED CALL = (Kla12.context).equals("ghojt").not()
2021-03-12 08:30:20,129 [main:114] - replacement of it?.methodName?.startsWith(method) == true of type Boolean is (Kla12.context).equals(Kla1().prope5).xor(Kla4().prope8)
2021-03-12 08:30:20,383 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:30:20,383 [main:66] - Compilation checking started
2021-03-12 08:30:21,447 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = 0
        outer@while ((Kla4().prope8).xor(Kla11().prope17)) {
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) (696841726.toUInt()).compareTo(42.toUByte()).shl(P(1118931594).i)
            prope22 += "i++;"
            prope30++
        }
        prope22 += (Kla1().prope5).toString()
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
runCatching<Any?>({ "tbyvb"}).getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith((Kla1().prope5).toString()) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { (Kla12.context).equals(Kla1().prope5).xor(Kla4().prope8) } ?: error("tail-call optimization hit: method " + (linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))).size.toString(P(1118931594).i) + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(null).or(true)
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> { c ->
        (true).compareTo(Kla4().prope8)
        prope28 = { c.resume(Unit) }
    }

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in (((P(1118931594).i).div(-6350246603923996636).toULong())).toShort().until(72)) {
            if ((-15536).rangeTo(15).contains(-1873478740)) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (prope27 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error("Wrong state-machine generated: it is finished early")
        prope28()
        if ((((P(1118931594).i).div(-6350246603923996636).toULong())).toFloat().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope24.prope28 = {
            prope24.prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:30:21,450 [main:107] - replacing ({ c ->
        (true).compareTo(Kla4().prope8)
        prope28 = { c.resume(Unit) }
    }, Function1<Continuation<Unit>, Unit>)
2021-03-12 08:30:21,450 [main:50] - replacing { c ->
        (true).compareTo(Kla4().prope8)
        prope28 = { c.resume(Unit) }
    } Function1<Continuation<Unit>, Unit>
2021-03-12 08:30:21,450 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-12 08:30:21,707 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-12 08:30:21,720 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:30:21,990 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:30:22,005 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:30:22,608 [main:302] - generating value of type = Any false depth = 4
2021-03-12 08:30:22,608 [main:95] - GENERATED = println("jxsom")
2021-03-12 08:30:22,609 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> println("jxsom")}
2021-03-12 08:30:22,609 [main:61] - GENERATED IS CALL =false
2021-03-12 08:30:22,634 [main:67] - randomType = Short
2021-03-12 08:30:22,892 [main:302] - generating value of type = Short true depth = 0
2021-03-12 08:30:22,935 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from CoroutineContext
2021-03-12 08:30:22,941 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Boolean
2021-03-12 08:30:22,950 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 08:30:22,967 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Continuation<Any?>
2021-03-12 08:30:22,975 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from CoroutineContext
2021-03-12 08:30:22,976 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Function0<Unit>
2021-03-12 08:30:22,986 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from EmptyCoroutineContext
2021-03-12 08:30:23,000 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from P
2021-03-12 08:30:23,005 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-12 08:30:23,059 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from CoroutineContext
2021-03-12 08:30:23,060 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 08:30:23,061 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 08:30:23,063 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Continuation<MutableMap<Array<UInt>, String>>
2021-03-12 08:30:23,074 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Long
2021-03-12 08:30:23,103 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-12 08:30:23,105 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Function0<Unit>
2021-03-12 08:30:23,106 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from CoroutineContext
2021-03-12 08:30:23,107 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Continuation<Any?>
2021-03-12 08:30:23,109 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from EmptyCoroutineContext
2021-03-12 08:30:23,110 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Boolean
2021-03-12 08:30:23,112 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from ULong
2021-03-12 08:30:23,135 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Boolean
2021-03-12 08:30:23,136 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from P
2021-03-12 08:30:23,138 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-12 08:30:23,139 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Continuation<MutableMap<Float, Long>>
2021-03-12 08:30:23,149 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 08:30:23,151 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-12 08:30:23,152 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from CoroutineContext
2021-03-12 08:30:23,154 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Any?
2021-03-12 08:30:23,158 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from CoroutineContext
2021-03-12 08:30:23,160 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from ULong
2021-03-12 08:30:23,161 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Any?
2021-03-12 08:30:23,163 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from P
2021-03-12 08:30:23,163 [main:114] - replacement of { c ->
        (true).compareTo(Kla4().prope8)
        prope28 = { c.resume(Unit) }
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> println("jxsom")}
2021-03-12 08:30:23,418 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 08:30:23,419 [main:66] - Compilation checking started
2021-03-12 08:30:24,459 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = 0
        outer@while ((Kla4().prope8).xor(Kla11().prope17)) {
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) (696841726.toUInt()).compareTo(42.toUByte()).shl(P(1118931594).i)
            prope22 += "i++;"
            prope30++
        }
        prope22 += (Kla1().prope5).toString()
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
runCatching<Any?>({ "tbyvb"}).getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith((Kla1().prope5).toString()) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { (Kla12.context).equals(Kla1().prope5).xor(Kla4().prope8) } ?: error("tail-call optimization hit: method " + (linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))).size.toString(P(1118931594).i) + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(null).or(true)
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("jxsom")}

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in (((P(1118931594).i).div(-6350246603923996636).toULong())).toShort().until(72)) {
            if ((-15536).rangeTo(15).contains(-1873478740)) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (prope27 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error("Wrong state-machine generated: it is finished early")
        prope28()
        if ((((P(1118931594).i).div(-6350246603923996636).toULong())).toFloat().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope24.prope28 = {
            prope24.prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:30:24,463 [main:107] - replacing ("Continuation " + c, String)
2021-03-12 08:30:24,464 [main:50] - replacing "Continuation " + c String
2021-03-12 08:30:24,464 [main:54] - Getting value of type String
2021-03-12 08:30:24,725 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:30:24,737 [main:58] - GENERATED VALUE OF TYPE String = "edsrc"
2021-03-12 08:30:24,737 [main:61] - GENERATED IS CALL =false
2021-03-12 08:30:24,762 [main:67] - randomType = Short
2021-03-12 08:30:25,018 [main:302] - generating value of type = Short true depth = 0
2021-03-12 08:30:25,060 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2043cf19]
2021-03-12 08:30:25,061 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]
2021-03-12 08:30:25,317 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:30:25,329 [main:78] - Generated call from random type = (-26085).toByte().toString(614182953)
2021-03-12 08:30:25,329 [main:106] - GETTING String from String
2021-03-12 08:30:25,346 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5458c5eb]]
2021-03-12 08:30:25,346 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5458c5eb]
2021-03-12 08:30:25,346 [main:117] - GENERATED CALL = (fu14({a: String -> "jxsfr"}, "faslp")).uppercase()
2021-03-12 08:30:25,347 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e658de3]]
2021-03-12 08:30:25,347 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e658de3]
2021-03-12 08:30:25,601 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:30:25,872 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 08:30:25,886 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 08:30:26,487 [main:302] - generating value of type = String true depth = 3
2021-03-12 08:30:26,500 [main:95] - GENERATED = StringBuilder("tuhgu")
2021-03-12 08:30:26,500 [main:117] - GENERATED CALL = (fu14({a: String -> "jxsfr"}, "faslp")).removePrefix(StringBuilder("tuhgu"))
2021-03-12 08:30:26,500 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44a9ab95]]
2021-03-12 08:30:26,500 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44a9ab95]
2021-03-12 08:30:26,500 [main:117] - GENERATED CALL = (fu14({a: String -> "jxsfr"}, "faslp")).substring((P(1118931594).i))
2021-03-12 08:30:26,500 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41db94d1]]
2021-03-12 08:30:26,500 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41db94d1]
2021-03-12 08:30:26,501 [main:117] - GENERATED CALL = (fu14({a: String -> "jxsfr"}, "faslp")).capitalize()
2021-03-12 08:30:26,501 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3e028244], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62046f2d]]
2021-03-12 08:30:26,501 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@3e028244]
2021-03-12 08:30:26,755 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:30:27,022 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:30:27,034 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62046f2d]
2021-03-12 08:30:27,289 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:30:27,558 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 08:30:27,573 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 08:30:28,175 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:30:28,188 [main:95] - GENERATED = StringBuilder(1636763652)
2021-03-12 08:30:28,467 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:30:28,480 [main:117] - GENERATED CALL = (fu14({a: String -> "jxsfr"}, "faslp")).subSequence(1217826876, 624885770).commonPrefixWith(StringBuilder(1636763652), false)
2021-03-12 08:30:28,480 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d8f0cae]]
2021-03-12 08:30:28,480 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d8f0cae]
2021-03-12 08:30:28,736 [main:302] - generating value of type = Char true depth = 0
2021-03-12 08:30:28,749 [main:117] - GENERATED CALL = (fu14({a: String -> "jxsfr"}, "faslp")).substringBefore('ÌÜ∑', fu0("kfmlb"))
2021-03-12 08:30:28,749 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20de9653]]
2021-03-12 08:30:28,749 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20de9653]
2021-03-12 08:30:29,009 [main:302] - generating value of type = Char true depth = 0
2021-03-12 08:30:29,277 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:30:29,290 [main:117] - GENERATED CALL = (fu14({a: String -> "jxsfr"}, "faslp")).replaceAfterLast('ÂòÉ', "cldck", fu14({a: String -> "jxsfr"}, "faslp"))
2021-03-12 08:30:29,290 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10b1ce5]]
2021-03-12 08:30:29,290 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10b1ce5]
2021-03-12 08:30:29,290 [main:117] - GENERATED CALL = (fu14({a: String -> "jxsfr"}, "faslp")).trimEnd()
2021-03-12 08:30:29,291 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ced0bae]]
2021-03-12 08:30:29,291 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ced0bae]
2021-03-12 08:30:29,291 [main:117] - GENERATED CALL = (fu14({a: String -> "jxsfr"}, "faslp")).concat(fu13("ekfhd", "ldnpv"))
2021-03-12 08:30:29,291 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f3a7d2c]]
2021-03-12 08:30:29,291 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f3a7d2c]
2021-03-12 08:30:29,546 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 08:30:29,558 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 08:30:29,571 [main:117] - GENERATED CALL = (fu14({a: String -> "jxsfr"}, "faslp")).dropLastWhile({a: Char -> true})
2021-03-12 08:30:29,571 [main:114] - replacement of "Continuation " + c of type String is (fu14({a: String -> "jxsfr"}, "faslp")).substring((P(1118931594).i))
2021-03-12 08:30:29,825 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:30:29,826 [main:66] - Compilation checking started
2021-03-12 08:30:30,579 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = 0
        outer@while ((Kla4().prope8).xor(Kla11().prope17)) {
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) (696841726.toUInt()).compareTo(42.toUByte()).shl(P(1118931594).i)
            prope22 += "i++;"
            prope30++
        }
        prope22 += (Kla1().prope5).toString()
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
runCatching<Any?>({ "tbyvb"}).getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if (c !is CoroutineStackFrame) error((fu14({a: String -> "jxsfr"}, "faslp")).substring((P(1118931594).i)) + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith((Kla1().prope5).toString()) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { (Kla12.context).equals(Kla1().prope5).xor(Kla4().prope8) } ?: error("tail-call optimization hit: method " + (linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))).size.toString(P(1118931594).i) + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(null).or(true)
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("jxsom")}

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in (((P(1118931594).i).div(-6350246603923996636).toULong())).toShort().until(72)) {
            if ((-15536).rangeTo(15).contains(-1873478740)) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (prope27 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error("Wrong state-machine generated: it is finished early")
        prope28()
        if ((((P(1118931594).i).div(-6350246603923996636).toULong())).toFloat().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope24.prope28 = {
            prope24.prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:30:30,582 [main:107] - replacing (c, Continuation<Unit>)
2021-03-12 08:30:30,582 [main:50] - replacing c Continuation<Unit>
2021-03-12 08:30:30,582 [main:54] - Getting value of type Continuation<Unit>
2021-03-12 08:30:30,836 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-12 08:30:31,105 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 08:30:31,120 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 08:30:32,096 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 08:30:32,368 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:30:32,383 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:30:33,023 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 08:30:33,307 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:30:33,322 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:30:34,358 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-12 08:30:34,644 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:30:34,659 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:30:35,660 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:30:35,661 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:30:35,661 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:30:35,661 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 08:30:35,661 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-12 08:30:36,016 [main:67] - randomType = UByte?
2021-03-12 08:30:36,274 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 08:30:36,314 [main:106] - GETTING Continuation<Unit> from Int
2021-03-12 08:30:36,344 [main:106] - GETTING Continuation<Unit> from Int
2021-03-12 08:30:36,345 [main:106] - GETTING Continuation<Unit> from Continuation<MutableMap<Array<UInt>, String>>
2021-03-12 08:30:36,355 [main:106] - GETTING Continuation<Unit> from Any?
2021-03-12 08:30:36,358 [main:106] - GETTING Continuation<Unit> from Function0<Unit>
2021-03-12 08:30:36,366 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 08:30:36,383 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 08:30:36,384 [main:106] - GETTING Continuation<Unit> from EmptyCoroutineContext
2021-03-12 08:30:36,398 [main:106] - GETTING Continuation<Unit> from CoroutineContext
2021-03-12 08:30:36,403 [main:106] - GETTING Continuation<Unit> from Function0<Unit>
2021-03-12 08:30:36,404 [main:106] - GETTING Continuation<Unit> from CoroutineContext
2021-03-12 08:30:36,405 [main:106] - GETTING Continuation<Unit> from EmptyCoroutineContext
2021-03-12 08:30:36,406 [main:106] - GETTING Continuation<Unit> from CoroutineContext
2021-03-12 08:30:36,407 [main:106] - GETTING Continuation<Unit> from ULong
2021-03-12 08:30:36,429 [main:106] - GETTING Continuation<Unit> from P
2021-03-12 08:30:36,434 [main:106] - GETTING Continuation<Unit> from Long
2021-03-12 08:30:36,463 [main:106] - GETTING Continuation<Unit> from Boolean
2021-03-12 08:30:36,471 [main:106] - GETTING Continuation<Unit> from Continuation<Any?>
2021-03-12 08:30:36,478 [main:106] - GETTING Continuation<Unit> from CoroutineContext
2021-03-12 08:30:36,479 [main:106] - GETTING Continuation<Unit> from ULong
2021-03-12 08:30:36,480 [main:106] - GETTING Continuation<Unit> from CoroutineContext
2021-03-12 08:30:36,481 [main:106] - GETTING Continuation<Unit> from Any?
2021-03-12 08:30:36,481 [main:106] - GETTING Continuation<Unit> from P
2021-03-12 08:30:36,482 [main:106] - GETTING Continuation<Unit> from Boolean
2021-03-12 08:30:36,483 [main:106] - GETTING Continuation<Unit> from Boolean
2021-03-12 08:30:36,484 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 08:30:36,485 [main:106] - GETTING Continuation<Unit> from P
2021-03-12 08:30:36,486 [main:106] - GETTING Continuation<Unit> from Continuation<Any?>
2021-03-12 08:30:36,487 [main:106] - GETTING Continuation<Unit> from Int
2021-03-12 08:30:36,488 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 08:30:36,488 [main:106] - GETTING Continuation<Unit> from Continuation<MutableMap<Float, Long>>
2021-03-12 08:30:36,498 [main:106] - GETTING Continuation<Unit> from Int
2021-03-12 08:30:36,499 [main:106] - GETTING Continuation<Unit> from CoroutineContext
2021-03-12 08:30:36,499 [main:111] - Cant find and generate replacement for c type Continuation<Unit>
2021-03-12 08:30:36,499 [main:107] - replacing (prope24, Kla18)
2021-03-12 08:30:36,499 [main:50] - replacing prope24 Kla18
2021-03-12 08:30:36,499 [main:54] - Getting value of type Kla18
2021-03-12 08:30:36,757 [main:302] - generating value of type = Kla18 false depth = 0
2021-03-12 08:30:36,770 [main:112] - generating klass Kla18 text = class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(null).or(true)
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("jxsom")}

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in (((P(1118931594).i).div(-6350246603923996636).toULong())).toShort().until(72)) {
            if ((-15536).rangeTo(15).contains(-1873478740)) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (prope27 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error("Wrong state-machine generated: it is finished early")
        prope28()
        if ((((P(1118931594).i).div(-6350246603923996636).toULong())).toFloat().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 08:30:36,770 [main:58] - GENERATED VALUE OF TYPE Kla18 = Kla18()
2021-03-12 08:30:36,770 [main:61] - GENERATED IS CALL =true
2021-03-12 08:30:37,263 [main:67] - randomType = HashMap<Kla10, Kla5?>
2021-03-12 08:30:37,517 [main:302] - generating value of type = HashMap<Kla10, Kla5?> false depth = 0
2021-03-12 08:30:37,787 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): HashMap<Kla10, Kla5?> = TODO()
2021-03-12 08:30:37,802 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): HashMap<Kla10, Kla5?> = TODO()
2021-03-12 08:30:38,077 [main:95] - GENERATED = linkedMapOf<Kla10, Kla5?>()
2021-03-12 08:30:38,169 [main:106] - GETTING Kla18 from CoroutineContext
2021-03-12 08:30:38,174 [main:106] - GETTING Kla18 from String
2021-03-12 08:30:38,191 [main:106] - GETTING Kla18 from Continuation<MutableMap<Float, Long>>
2021-03-12 08:30:38,199 [main:106] - GETTING Kla18 from Any?
2021-03-12 08:30:38,202 [main:106] - GETTING Kla18 from ULong
2021-03-12 08:30:38,223 [main:106] - GETTING Kla18 from Function0<Unit>
2021-03-12 08:30:38,231 [main:106] - GETTING Kla18 from EmptyCoroutineContext
2021-03-12 08:30:38,244 [main:106] - GETTING Kla18 from Int
2021-03-12 08:30:38,297 [main:106] - GETTING Kla18 from Int
2021-03-12 08:30:38,298 [main:106] - GETTING Kla18 from EmptyCoroutineContext
2021-03-12 08:30:38,298 [main:106] - GETTING Kla18 from P
2021-03-12 08:30:38,303 [main:106] - GETTING Kla18 from P
2021-03-12 08:30:38,303 [main:106] - GETTING Kla18 from CoroutineContext
2021-03-12 08:30:38,304 [main:106] - GETTING Kla18 from P
2021-03-12 08:30:38,305 [main:106] - GETTING Kla18 from Int
2021-03-12 08:30:38,305 [main:106] - GETTING Kla18 from CoroutineContext
2021-03-12 08:30:38,306 [main:106] - GETTING Kla18 from ULong
2021-03-12 08:30:38,306 [main:106] - GETTING Kla18 from Function0<Unit>
2021-03-12 08:30:38,307 [main:106] - GETTING Kla18 from String
2021-03-12 08:30:38,307 [main:106] - GETTING Kla18 from Long
2021-03-12 08:30:38,336 [main:106] - GETTING Kla18 from Any?
2021-03-12 08:30:38,337 [main:106] - GETTING Kla18 from CoroutineContext
2021-03-12 08:30:38,338 [main:106] - GETTING Kla18 from CoroutineContext
2021-03-12 08:30:38,338 [main:106] - GETTING Kla18 from Boolean
2021-03-12 08:30:38,347 [main:106] - GETTING Kla18 from Continuation<Any?>
2021-03-12 08:30:38,353 [main:106] - GETTING Kla18 from String
2021-03-12 08:30:38,354 [main:106] - GETTING Kla18 from String
2021-03-12 08:30:38,354 [main:106] - GETTING Kla18 from Continuation<MutableMap<Array<UInt>, String>>
2021-03-12 08:30:38,364 [main:106] - GETTING Kla18 from CoroutineContext
2021-03-12 08:30:38,365 [main:106] - GETTING Kla18 from Continuation<Any?>
2021-03-12 08:30:38,365 [main:106] - GETTING Kla18 from Boolean
2021-03-12 08:30:38,366 [main:106] - GETTING Kla18 from Boolean
2021-03-12 08:30:38,366 [main:106] - GETTING Kla18 from Int
2021-03-12 08:30:38,366 [main:114] - replacement of prope24 of type Kla18 is Kla18()
2021-03-12 08:30:38,622 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:30:38,623 [main:66] - Compilation checking started
2021-03-12 08:30:39,688 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = 0
        outer@while ((Kla4().prope8).xor(Kla11().prope17)) {
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) (696841726.toUInt()).compareTo(42.toUByte()).shl(P(1118931594).i)
            prope22 += "i++;"
            prope30++
        }
        prope22 += (Kla1().prope5).toString()
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
runCatching<Any?>({ "tbyvb"}).getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith((Kla1().prope5).toString()) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { (Kla12.context).equals(Kla1().prope5).xor(Kla4().prope8) } ?: error("tail-call optimization hit: method " + (linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))).size.toString(P(1118931594).i) + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(null).or(true)
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("jxsom")}

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in (((P(1118931594).i).div(-6350246603923996636).toULong())).toShort().until(72)) {
            if ((-15536).rangeTo(15).contains(-1873478740)) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (prope27 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error("Wrong state-machine generated: it is finished early")
        prope28()
        if ((((P(1118931594).i).div(-6350246603923996636).toULong())).toFloat().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope24.prope28 = {
            Kla18().prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:30:39,691 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 08:30:39,691 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 08:30:39,691 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 08:30:39,949 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 08:30:39,964 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 08:30:40,399 [main:67] - randomType = LinkedHashMap<Short, Kla3>
2021-03-12 08:30:40,662 [main:302] - generating value of type = LinkedHashMap<Short, Kla3> false depth = 0
2021-03-12 08:30:40,936 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Short, Kla3> = TODO()
2021-03-12 08:30:40,951 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Short, Kla3> = TODO()
2021-03-12 08:30:41,230 [main:95] - GENERATED = linkedMapOf<Short, Kla3>()
2021-03-12 08:30:41,339 [main:106] - GETTING EmptyCoroutineContext from EmptyCoroutineContext
2021-03-12 08:30:41,351 [main:114] - replacement of EmptyCoroutineContext of type EmptyCoroutineContext is Kla8().context
2021-03-12 08:30:41,611 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:30:41,614 [main:107] - replacing ("Wrong state-machine generated: it is finished early", String)
2021-03-12 08:30:41,614 [main:50] - replacing "Wrong state-machine generated: it is finished early" String
2021-03-12 08:30:41,614 [main:54] - Getting value of type String
2021-03-12 08:30:41,870 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:30:41,883 [main:58] - GENERATED VALUE OF TYPE String = "lqpqj"
2021-03-12 08:30:41,883 [main:61] - GENERATED IS CALL =false
2021-03-12 08:30:42,576 [main:67] - randomType = Kla19?
2021-03-12 08:30:42,836 [main:302] - generating value of type = Kla19 false depth = 0
2021-03-12 08:30:42,849 [main:112] - generating klass Kla19 text = object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope24.prope28 = {
            Kla18().prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}
2021-03-12 08:30:42,868 [main:106] - GETTING String from Long
2021-03-12 08:30:42,896 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]]
2021-03-12 08:30:42,896 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0]
2021-03-12 08:30:42,896 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]
2021-03-12 08:30:42,896 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toChar().lowercase()
2021-03-12 08:30:42,896 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@283d49e5], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:30:42,896 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@283d49e5]
2021-03-12 08:30:43,158 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:30:43,171 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:30:43,171 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).compareTo(120).toString(P(1118931594).i)
2021-03-12 08:30:43,171 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]]
2021-03-12 08:30:43,171 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0]
2021-03-12 08:30:43,171 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]
2021-03-12 08:30:43,171 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toChar().titlecase()
2021-03-12 08:30:43,171 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]]
2021-03-12 08:30:43,171 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0]
2021-03-12 08:30:43,171 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]
2021-03-12 08:30:43,172 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toChar().plus(fu1())
2021-03-12 08:30:43,172 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@46c9e88a], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]]
2021-03-12 08:30:43,172 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@46c9e88a]
2021-03-12 08:30:43,172 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]
2021-03-12 08:30:43,172 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toShort().toString((P(1118931594).i))
2021-03-12 08:30:43,172 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:30:43,172 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:30:43,172 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:30:43,172 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toInt().toString((P(1118931594).i))
2021-03-12 08:30:43,172 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:30:43,172 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:30:43,173 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toString((true).compareTo(Kla4().prope8))
2021-03-12 08:30:43,173 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:30:43,173 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f]
2021-03-12 08:30:43,173 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:30:43,173 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i))
2021-03-12 08:30:43,173 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@53131125], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]]
2021-03-12 08:30:43,173 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@53131125]
2021-03-12 08:30:43,173 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]
2021-03-12 08:30:43,458 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:30:43,473 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toByte().toString(1908483256)
2021-03-12 08:30:43,473 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]]
2021-03-12 08:30:43,473 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2b7c52e0]
2021-03-12 08:30:43,473 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@294f2c82]
2021-03-12 08:30:43,473 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636)).toChar().uppercase()
2021-03-12 08:30:43,473 [main:114] - replacement of "Wrong state-machine generated: it is finished early" of type String is ((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i))
2021-03-12 08:30:43,734 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:30:43,735 [main:66] - Compilation checking started
2021-03-12 08:30:44,790 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = 0
        outer@while ((Kla4().prope8).xor(Kla11().prope17)) {
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) (696841726.toUInt()).compareTo(42.toUByte()).shl(P(1118931594).i)
            prope22 += "i++;"
            prope30++
        }
        prope22 += (Kla1().prope5).toString()
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
runCatching<Any?>({ "tbyvb"}).getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith((Kla1().prope5).toString()) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { (Kla12.context).equals(Kla1().prope5).xor(Kla4().prope8) } ?: error("tail-call optimization hit: method " + (linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))).size.toString(P(1118931594).i) + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(null).or(true)
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("jxsom")}

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in (((P(1118931594).i).div(-6350246603923996636).toULong())).toShort().until(72)) {
            if ((-15536).rangeTo(15).contains(-1873478740)) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (prope27 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
        prope28()
        if ((((P(1118931594).i).div(-6350246603923996636).toULong())).toFloat().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope24.prope28 = {
            Kla18().prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:30:44,793 [main:107] - replacing (0, Int)
2021-03-12 08:30:44,794 [main:50] - replacing 0 Int
2021-03-12 08:30:44,794 [main:54] - Getting value of type Int
2021-03-12 08:30:45,059 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:30:45,072 [main:58] - GENERATED VALUE OF TYPE Int = 11695576
2021-03-12 08:30:45,072 [main:61] - GENERATED IS CALL =false
2021-03-12 08:30:45,097 [main:67] - randomType = UByte
2021-03-12 08:30:45,354 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 08:30:45,393 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@44c06427]
2021-03-12 08:30:45,393 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@782a0e57]
2021-03-12 08:30:45,393 [main:78] - Generated call from random type = (125.toUByte()).toLong().countLeadingZeroBits()
2021-03-12 08:30:45,394 [main:106] - GETTING Int from Continuation<Any?>
2021-03-12 08:30:45,400 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@4a4bbd17], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]]
2021-03-12 08:30:45,400 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@4a4bbd17]
2021-03-12 08:30:45,400 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:30:45,400 [main:117] - GENERATED CALL = (fu16({a: Throwable -> require(false)})).equals(Kla1().prope5).compareTo((true))
2021-03-12 08:30:45,400 [main:114] - replacement of 0 of type Int is (125.toUByte()).toLong().countLeadingZeroBits()
2021-03-12 08:30:45,657 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:30:45,658 [main:66] - Compilation checking started
2021-03-12 08:30:46,724 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = (125.toUByte()).toLong().countLeadingZeroBits()
        outer@while ((Kla4().prope8).xor(Kla11().prope17)) {
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) (696841726.toUInt()).compareTo(42.toUByte()).shl(P(1118931594).i)
            prope22 += "i++;"
            prope30++
        }
        prope22 += (Kla1().prope5).toString()
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
runCatching<Any?>({ "tbyvb"}).getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith((Kla1().prope5).toString()) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { (Kla12.context).equals(Kla1().prope5).xor(Kla4().prope8) } ?: error("tail-call optimization hit: method " + (linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))).size.toString(P(1118931594).i) + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(null).or(true)
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("jxsom")}

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in (((P(1118931594).i).div(-6350246603923996636).toULong())).toShort().until(72)) {
            if ((-15536).rangeTo(15).contains(-1873478740)) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (prope27 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
        prope28()
        if ((((P(1118931594).i).div(-6350246603923996636).toULong())).toFloat().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope24.prope28 = {
            Kla18().prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:30:46,727 [main:107] - replacing (prope27, Int)
2021-03-12 08:30:46,728 [main:50] - replacing prope27 Int
2021-03-12 08:30:46,728 [main:54] - Getting value of type Int
2021-03-12 08:30:46,988 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:30:47,000 [main:58] - GENERATED VALUE OF TYPE Int = -934354318
2021-03-12 08:30:47,000 [main:61] - GENERATED IS CALL =false
2021-03-12 08:30:47,050 [main:67] - randomType = Kla8
2021-03-12 08:30:47,307 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-12 08:30:47,319 [main:112] - generating klass Kla8 text = class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}
2021-03-12 08:30:47,333 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in a.Kla8[DeserializedSimpleFunctionDescriptor@655204b5]
2021-03-12 08:30:47,333 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:30:47,334 [main:78] - Generated call from random type = (Kla8()).equals(Kla8().prope14).compareTo(Kla11().prope17)
2021-03-12 08:30:47,334 [main:106] - GETTING Int from ULong
2021-03-12 08:30:47,355 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@52d193c4], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@175c25dd]]
2021-03-12 08:30:47,355 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@52d193c4]
2021-03-12 08:30:47,614 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 08:30:47,627 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@175c25dd]
2021-03-12 08:30:47,887 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:30:47,900 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo(62.toUByte()).div(-12)
2021-03-12 08:30:47,900 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@52d193c4], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7118ba4d]]
2021-03-12 08:30:47,900 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@52d193c4]
2021-03-12 08:30:48,162 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 08:30:48,174 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7118ba4d]
2021-03-12 08:30:48,432 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:30:48,444 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo(4.toUByte()).or(-1357635462)
2021-03-12 08:30:48,445 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@25ebee8f], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@42583cc1]]
2021-03-12 08:30:48,445 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@25ebee8f]
2021-03-12 08:30:48,445 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@42583cc1]
2021-03-12 08:30:48,445 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636).toULong()).toShort().countTrailingZeroBits()
2021-03-12 08:30:48,445 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@7528ea42], @kotlin.internal.InlineOnly public final inline fun toInt(): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@1cdd367e]]
2021-03-12 08:30:48,445 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@7528ea42]
2021-03-12 08:30:48,445 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toInt(): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@1cdd367e]
2021-03-12 08:30:48,445 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636).toULong()).toUByte().toInt()
2021-03-12 08:30:48,445 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@5703fb0e], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@14aec0e4]]
2021-03-12 08:30:48,445 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@5703fb0e]
2021-03-12 08:30:48,445 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@14aec0e4]
2021-03-12 08:30:48,446 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636).toULong()).toByte().unaryPlus()
2021-03-12 08:30:48,446 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@52d193c4], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@90001f0]]
2021-03-12 08:30:48,446 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@52d193c4]
2021-03-12 08:30:48,702 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 08:30:48,715 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@90001f0]
2021-03-12 08:30:48,715 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo(5.toUByte()).dec()
2021-03-12 08:30:48,715 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@25ebee8f], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@455b7c42]]
2021-03-12 08:30:48,715 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@25ebee8f]
2021-03-12 08:30:48,715 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@455b7c42]
2021-03-12 08:30:48,994 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:30:49,007 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636).toULong()).toShort().div(27)
2021-03-12 08:30:49,007 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@25ebee8f], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6f4dd65d]]
2021-03-12 08:30:49,007 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@25ebee8f]
2021-03-12 08:30:49,007 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6f4dd65d]
2021-03-12 08:30:49,008 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636).toULong()).toShort().unaryMinus()
2021-03-12 08:30:49,008 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@4698400e], @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@41f100bb]]
2021-03-12 08:30:49,008 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@4698400e]
2021-03-12 08:30:49,008 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@41f100bb]
2021-03-12 08:30:49,266 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 08:30:49,279 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636).toULong()).toUShort().compareTo(83.toUByte())
2021-03-12 08:30:49,279 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@7528ea42], @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@2fbde001]]
2021-03-12 08:30:49,279 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@7528ea42]
2021-03-12 08:30:49,279 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@2fbde001]
2021-03-12 08:30:49,536 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 08:30:49,548 [main:117] - GENERATED CALL = ((P(1118931594).i).div(-6350246603923996636).toULong()).toUByte().compareTo(93.toUByte())
2021-03-12 08:30:49,548 [main:114] - replacement of prope27 of type Int is ((P(1118931594).i).div(-6350246603923996636).toULong()).toShort().countTrailingZeroBits()
2021-03-12 08:30:49,803 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:30:49,804 [main:66] - Compilation checking started
2021-03-12 08:30:50,893 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = (125.toUByte()).toLong().countLeadingZeroBits()
        outer@while ((Kla4().prope8).xor(Kla11().prope17)) {
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) (696841726.toUInt()).compareTo(42.toUByte()).shl(P(1118931594).i)
            prope22 += "i++;"
            prope30++
        }
        prope22 += (Kla1().prope5).toString()
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
runCatching<Any?>({ "tbyvb"}).getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith((Kla1().prope5).toString()) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { (Kla12.context).equals(Kla1().prope5).xor(Kla4().prope8) } ?: error("tail-call optimization hit: method " + (linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))).size.toString(P(1118931594).i) + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(null).or(true)
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("jxsom")}

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in (((P(1118931594).i).div(-6350246603923996636).toULong())).toShort().until(72)) {
            if ((-15536).rangeTo(15).contains(-1873478740)) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (((P(1118931594).i).div(-6350246603923996636).toULong()).toShort().countTrailingZeroBits() != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
        prope28()
        if ((((P(1118931594).i).div(-6350246603923996636).toULong())).toFloat().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope24.prope28 = {
            Kla18().prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:30:50,896 [main:107] - replacing (c, Continuation<*>)
2021-03-12 08:30:50,896 [main:50] - replacing c Continuation<*>
2021-03-12 08:30:50,896 [main:54] - Getting value of type Continuation<*>
2021-03-12 08:30:51,156 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 08:30:51,427 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 08:30:51,442 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 08:30:52,447 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 08:30:52,721 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:30:52,736 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:30:53,382 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 08:30:53,669 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:30:53,684 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:30:54,742 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:30:54,743 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:30:54,743 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 08:30:54,743 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 08:30:55,114 [main:67] - randomType = Set<Double>
2021-03-12 08:30:55,115 [main:106] - GETTING Continuation<*> from Continuation<MutableMap<Float, Long>>
2021-03-12 08:30:55,124 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-12 08:30:55,130 [main:106] - GETTING Continuation<*> from Int
2021-03-12 08:30:55,159 [main:106] - GETTING Continuation<*> from String
2021-03-12 08:30:55,175 [main:106] - GETTING Continuation<*> from Continuation<Any?>
2021-03-12 08:30:55,182 [main:106] - GETTING Continuation<*> from Int
2021-03-12 08:30:55,183 [main:106] - GETTING Continuation<*> from P
2021-03-12 08:30:55,187 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-12 08:30:55,188 [main:106] - GETTING Continuation<*> from String
2021-03-12 08:30:55,189 [main:106] - GETTING Continuation<*> from Int
2021-03-12 08:30:55,190 [main:106] - GETTING Continuation<*> from EmptyCoroutineContext
2021-03-12 08:30:55,204 [main:106] - GETTING Continuation<*> from Function0<Unit>
2021-03-12 08:30:55,212 [main:106] - GETTING Continuation<*> from Boolean
2021-03-12 08:30:55,220 [main:106] - GETTING Continuation<*> from String
2021-03-12 08:30:55,221 [main:106] - GETTING Continuation<*> from ULong
2021-03-12 08:30:55,243 [main:106] - GETTING Continuation<*> from Boolean
2021-03-12 08:30:55,243 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-12 08:30:55,244 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-12 08:30:55,245 [main:106] - GETTING Continuation<*> from EmptyCoroutineContext
2021-03-12 08:30:55,246 [main:106] - GETTING Continuation<*> from Long
2021-03-12 08:30:55,275 [main:106] - GETTING Continuation<*> from ULong
2021-03-12 08:30:55,276 [main:106] - GETTING Continuation<*> from Continuation<MutableMap<Array<UInt>, String>>
2021-03-12 08:30:55,285 [main:106] - GETTING Continuation<*> from Function0<Unit>
2021-03-12 08:30:55,286 [main:106] - GETTING Continuation<*> from P
2021-03-12 08:30:55,287 [main:106] - GETTING Continuation<*> from String
2021-03-12 08:30:55,287 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-12 08:30:55,288 [main:106] - GETTING Continuation<*> from Continuation<Any?>
2021-03-12 08:30:55,289 [main:106] - GETTING Continuation<*> from Any?
2021-03-12 08:30:55,293 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-12 08:30:55,294 [main:106] - GETTING Continuation<*> from Boolean
2021-03-12 08:30:55,295 [main:106] - GETTING Continuation<*> from P
2021-03-12 08:30:55,296 [main:106] - GETTING Continuation<*> from Int
2021-03-12 08:30:55,296 [main:106] - GETTING Continuation<*> from Any?
2021-03-12 08:30:55,296 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-12 08:30:55,296 [main:107] - replacing ({
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) (696841726.toUInt()).compareTo(42.toUByte()).shl(P(1118931594).i)
            prope22 += "i++;"
            prope30++
        }, Int)
2021-03-12 08:30:55,297 [main:50] - replacing {
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) (696841726.toUInt()).compareTo(42.toUByte()).shl(P(1118931594).i)
            prope22 += "i++;"
            prope30++
        } Int
2021-03-12 08:30:55,297 [main:54] - Getting value of type Int
2021-03-12 08:30:55,555 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:30:55,567 [main:58] - GENERATED VALUE OF TYPE Int = -881992634
2021-03-12 08:30:55,568 [main:61] - GENERATED IS CALL =false
2021-03-12 08:30:55,950 [main:67] - randomType = List<P>
2021-03-12 08:30:55,951 [main:106] - GETTING Int from Any?
2021-03-12 08:30:55,955 [main:113] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@4ad177f3], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]]
2021-03-12 08:30:55,955 [main:149] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@4ad177f3]
2021-03-12 08:30:55,955 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:30:56,214 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:30:56,227 [main:117] - GENERATED CALL = (Kla1().prope5).equals(Kla8().prope14).compareTo(false)
2021-03-12 08:30:56,227 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Any?.hashCode(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@338e0952]]
2021-03-12 08:30:56,227 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Any?.hashCode(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@338e0952]
2021-03-12 08:30:56,227 [main:117] - GENERATED CALL = (Kla1().prope5).hashCode()
2021-03-12 08:30:56,227 [main:114] - replacement of {
            while ((P(P(1118931594).i)).i.coerceAtLeast(P(931472561).i) < 10) (696841726.toUInt()).compareTo(42.toUByte()).shl(P(1118931594).i)
            prope22 += "i++;"
            prope30++
        } of type Int is (Kla1().prope5).hashCode()
2021-03-12 08:30:56,483 [main:33] - Trying to replace BLOCK on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:30:56,484 [main:66] - Compilation checking started
2021-03-12 08:30:57,528 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = (125.toUByte()).toLong().countLeadingZeroBits()
        outer@while ((Kla4().prope8).xor(Kla11().prope17)) (Kla1().prope5).hashCode()
        prope22 += (Kla1().prope5).toString()
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
runCatching<Any?>({ "tbyvb"}).getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith((Kla1().prope5).toString()) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { (Kla12.context).equals(Kla1().prope5).xor(Kla4().prope8) } ?: error("tail-call optimization hit: method " + (linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))).size.toString(P(1118931594).i) + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(null).or(true)
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("jxsom")}

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in (((P(1118931594).i).div(-6350246603923996636).toULong())).toShort().until(72)) {
            if ((-15536).rangeTo(15).contains(-1873478740)) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (((P(1118931594).i).div(-6350246603923996636).toULong()).toShort().countTrailingZeroBits() != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
        prope28()
        if ((((P(1118931594).i).div(-6350246603923996636).toULong())).toFloat().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope24.prope28 = {
            Kla18().prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:30:57,531 [main:107] - replacing (c !is CoroutineStackFrame, Boolean)
2021-03-12 08:30:57,531 [main:50] - replacing c !is CoroutineStackFrame Boolean
2021-03-12 08:30:57,531 [main:54] - Getting value of type Boolean
2021-03-12 08:30:57,785 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:30:57,798 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 08:30:57,798 [main:61] - GENERATED IS CALL =false
2021-03-12 08:30:58,190 [main:67] - randomType = Kla14?
2021-03-12 08:30:58,443 [main:302] - generating value of type = Kla14 false depth = 0
2021-03-12 08:30:58,455 [main:112] - generating klass Kla14 text = open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
runCatching<Any?>({ "tbyvb"}).getOrThrow()
    }
}
2021-03-12 08:30:58,707 [main:194] - Type params = []
2021-03-12 08:30:58,962 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 08:30:59,260 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:30:59,275 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:30:59,911 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 08:31:00,193 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:31:00,208 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:31:01,193 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-12 08:31:01,474 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:31:01,489 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:31:02,474 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 11
2021-03-12 08:31:02,755 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:31:02,769 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:31:03,755 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:31:03,755 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 08:31:03,755 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:31:03,755 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:31:03,767 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in a.Kla14[DeserializedSimpleFunctionDescriptor@439f15d4]
2021-03-12 08:31:03,768 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]
2021-03-12 08:31:03,768 [main:78] - Generated call from random type = (Kla14())?.equals(Kla8().prope14).not()
2021-03-12 08:31:03,769 [main:106] - GETTING Boolean from Int
2021-03-12 08:31:03,797 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]]
2021-03-12 08:31:03,797 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:31:03,797 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]
2021-03-12 08:31:03,797 [main:117] - GENERATED CALL = (P(1118931594).i).toInt().equals(Kla8().prope14)
2021-03-12 08:31:03,797 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@706b2ff0], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4047829]]
2021-03-12 08:31:03,797 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@706b2ff0]
2021-03-12 08:31:03,798 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4047829]
2021-03-12 08:31:03,798 [main:117] - GENERATED CALL = (P(1118931594).i).toDouble().isInfinite()
2021-03-12 08:31:03,798 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]]
2021-03-12 08:31:03,798 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]
2021-03-12 08:31:03,798 [main:117] - GENERATED CALL = (P(1118931594).i).equals(Kla1().prope5)
2021-03-12 08:31:03,798 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]]
2021-03-12 08:31:03,798 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]
2021-03-12 08:31:04,051 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:31:04,051 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]
2021-03-12 08:31:04,330 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:31:04,342 [main:117] - GENERATED CALL = (P(1118931594).i).equals("puwbm").or(false)
2021-03-12 08:31:04,343 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4d84f8a6], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@47032d02]]
2021-03-12 08:31:04,343 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4d84f8a6]
2021-03-12 08:31:04,343 [main:149] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@47032d02]
2021-03-12 08:31:04,343 [main:117] - GENERATED CALL = (P(1118931594).i).toFloat().isFinite()
2021-03-12 08:31:04,343 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b6a54c], public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@3799e7a8]]
2021-03-12 08:31:04,343 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b6a54c]
2021-03-12 08:31:04,596 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:31:04,608 [main:149] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@3799e7a8]
2021-03-12 08:31:04,609 [main:117] - GENERATED CALL = (P(1118931594).i).rangeTo(122).isEmpty()
2021-03-12 08:31:04,609 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2457c30c]]
2021-03-12 08:31:04,609 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:31:04,609 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2457c30c]
2021-03-12 08:31:04,609 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().isDefined()
2021-03-12 08:31:04,609 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]]
2021-03-12 08:31:04,609 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]
2021-03-12 08:31:04,609 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]
2021-03-12 08:31:04,609 [main:117] - GENERATED CALL = (P(1118931594).i).equals(Kla1().prope5).xor(Kla11().prope17)
2021-03-12 08:31:04,609 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@65498049]]
2021-03-12 08:31:04,609 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d]
2021-03-12 08:31:04,609 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@65498049]
2021-03-12 08:31:04,609 [main:117] - GENERATED CALL = (P(1118931594).i).toShort().equals(Kla1().prope5)
2021-03-12 08:31:04,609 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4d84f8a6], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@7ee93eda]]
2021-03-12 08:31:04,609 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4d84f8a6]
2021-03-12 08:31:04,610 [main:149] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@7ee93eda]
2021-03-12 08:31:04,610 [main:117] - GENERATED CALL = (P(1118931594).i).toFloat().isNaN()
2021-03-12 08:31:04,610 [main:114] - replacement of c !is CoroutineStackFrame of type Boolean is (P(1118931594).i).toFloat().isFinite()
2021-03-12 08:31:04,862 [main:33] - Trying to replace Element(IS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:31:04,862 [main:66] - Compilation checking started
2021-03-12 08:31:05,602 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = (125.toUByte()).toLong().countLeadingZeroBits()
        outer@while ((Kla4().prope8).xor(Kla11().prope17)) (Kla1().prope5).hashCode()
        prope22 += (Kla1().prope5).toString()
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
runCatching<Any?>({ "tbyvb"}).getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((P(1118931594).i).toFloat().isFinite()) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith((Kla1().prope5).toString()) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { (Kla12.context).equals(Kla1().prope5).xor(Kla4().prope8) } ?: error("tail-call optimization hit: method " + (linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))).size.toString(P(1118931594).i) + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(null).or(true)
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("jxsom")}

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in (((P(1118931594).i).div(-6350246603923996636).toULong())).toShort().until(72)) {
            if ((-15536).rangeTo(15).contains(-1873478740)) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (((P(1118931594).i).div(-6350246603923996636).toULong()).toShort().countTrailingZeroBits() != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
        prope28()
        if ((((P(1118931594).i).div(-6350246603923996636).toULong())).toFloat().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope24.prope28 = {
            Kla18().prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:31:05,605 [main:107] - replacing (getOrThrow(), Any?)
2021-03-12 08:31:05,605 [main:50] - replacing getOrThrow() Any?
2021-03-12 08:31:05,605 [main:54] - Getting value of type Any?
2021-03-12 08:31:05,864 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:31:05,864 [main:58] - GENERATED VALUE OF TYPE Any? = "demth"
2021-03-12 08:31:05,864 [main:61] - GENERATED IS CALL =false
2021-03-12 08:31:05,914 [main:67] - randomType = Kla18
2021-03-12 08:31:06,168 [main:302] - generating value of type = Kla18 false depth = 0
2021-03-12 08:31:06,180 [main:112] - generating klass Kla18 text = class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(null).or(true)
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("jxsom")}

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in (((P(1118931594).i).div(-6350246603923996636).toULong())).toShort().until(72)) {
            if ((-15536).rangeTo(15).contains(-1873478740)) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (((P(1118931594).i).div(-6350246603923996636).toULong()).toShort().countTrailingZeroBits() != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
        prope28()
        if ((((P(1118931594).i).div(-6350246603923996636).toULong())).toFloat().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 08:31:06,188 [main:106] - GETTING Any? from Int
2021-03-12 08:31:06,218 [main:106] - GETTING Any? from String
2021-03-12 08:31:06,234 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:31:06,240 [main:106] - GETTING Any? from Int
2021-03-12 08:31:06,241 [main:106] - GETTING Any? from Continuation<MutableMap<Array<UInt>, String>>
2021-03-12 08:31:06,251 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:31:06,252 [main:106] - GETTING Any? from String
2021-03-12 08:31:06,254 [main:106] - GETTING Any? from Function0<Unit>
2021-03-12 08:31:06,263 [main:106] - GETTING Any? from Any?
2021-03-12 08:31:06,267 [main:106] - GETTING Any? from Boolean
2021-03-12 08:31:06,275 [main:106] - GETTING Any? from String
2021-03-12 08:31:06,276 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:31:06,277 [main:106] - GETTING Any? from P
2021-03-12 08:31:06,282 [main:106] - GETTING Any? from Boolean
2021-03-12 08:31:06,283 [main:106] - GETTING Any? from ULong
2021-03-12 08:31:06,305 [main:106] - GETTING Any? from Continuation<Any?>
2021-03-12 08:31:06,312 [main:106] - GETTING Any? from Long
2021-03-12 08:31:06,340 [main:106] - GETTING Any? from ULong
2021-03-12 08:31:06,341 [main:106] - GETTING Any? from Continuation<MutableMap<Float, Long>>
2021-03-12 08:31:06,350 [main:106] - GETTING Any? from P
2021-03-12 08:31:06,351 [main:106] - GETTING Any? from Continuation<Any?>
2021-03-12 08:31:06,352 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:31:06,353 [main:106] - GETTING Any? from Function0<Unit>
2021-03-12 08:31:06,354 [main:106] - GETTING Any? from Boolean
2021-03-12 08:31:06,355 [main:106] - GETTING Any? from EmptyCoroutineContext
2021-03-12 08:31:06,369 [main:106] - GETTING Any? from String
2021-03-12 08:31:06,370 [main:106] - GETTING Any? from Any?
2021-03-12 08:31:06,371 [main:106] - GETTING Any? from Int
2021-03-12 08:31:06,372 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:31:06,373 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:31:06,373 [main:106] - GETTING Any? from EmptyCoroutineContext
2021-03-12 08:31:06,374 [main:106] - GETTING Any? from Int
2021-03-12 08:31:06,375 [main:106] - GETTING Any? from P
2021-03-12 08:31:06,375 [main:114] - replacement of getOrThrow() of type Any? is "demth"
2021-03-12 08:31:06,628 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 08:31:06,629 [main:66] - Compilation checking started
2021-03-12 08:31:07,367 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = (125.toUByte()).toLong().countLeadingZeroBits()
        outer@while ((Kla4().prope8).xor(Kla11().prope17)) (Kla1().prope5).hashCode()
        prope22 += (Kla1().prope5).toString()
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
runCatching<Any?>({ "tbyvb"}).getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25."demth"
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith((Kla1().prope5).toString()) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { (Kla12.context).equals(Kla1().prope5).xor(Kla4().prope8) } ?: error("tail-call optimization hit: method " + (linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))).size.toString(P(1118931594).i) + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(null).or(true)
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("jxsom")}

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in (((P(1118931594).i).div(-6350246603923996636).toULong())).toShort().until(72)) {
            if ((-15536).rangeTo(15).contains(-1873478740)) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (((P(1118931594).i).div(-6350246603923996636).toULong()).toShort().countTrailingZeroBits() != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27)
        if (prope21) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
        prope28()
        if ((((P(1118931594).i).div(-6350246603923996636).toULong())).toFloat().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope24.prope28 = {
            Kla18().prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:31:07,370 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27, String)
2021-03-12 08:31:07,370 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27 String
2021-03-12 08:31:07,370 [main:54] - Getting value of type String
2021-03-12 08:31:07,623 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:31:07,635 [main:58] - GENERATED VALUE OF TYPE String = "ppogx"
2021-03-12 08:31:07,635 [main:61] - GENERATED IS CALL =false
2021-03-12 08:31:08,670 [main:67] - randomType = Set<Kla9<Kla19>>
2021-03-12 08:31:08,671 [main:106] - GETTING String from P
2021-03-12 08:31:08,676 [main:113] - Case = [public final val i: kotlin.Int defined in a.P[PropertyDescriptorImpl@4f6dd914], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:31:08,676 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:31:08,929 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:31:08,942 [main:117] - GENERATED CALL = (P(1118931594)).i.toString(1835037527)
2021-03-12 08:31:08,942 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope27 of type String is (P(1118931594)).i.toString(1835037527)
2021-03-12 08:31:09,193 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:31:09,194 [main:66] - Compilation checking started
2021-03-12 08:31:10,265 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = (125.toUByte()).toLong().countLeadingZeroBits()
        outer@while ((Kla4().prope8).xor(Kla11().prope17)) (Kla1().prope5).hashCode()
        prope22 += (Kla1().prope5).toString()
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    prope20 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
runCatching<Any?>({ "tbyvb"}).getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith((Kla1().prope5).toString()) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { (Kla12.context).equals(Kla1().prope5).xor(Kla4().prope8) } ?: error("tail-call optimization hit: method " + (linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))).size.toString(P(1118931594).i) + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(null).or(true)
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("jxsom")}

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in (((P(1118931594).i).div(-6350246603923996636).toULong())).toShort().until(72)) {
            if ((-15536).rangeTo(15).contains(-1873478740)) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (((P(1118931594).i).div(-6350246603923996636).toULong()).toShort().countTrailingZeroBits() != numberOfSuspensions)
            error((P(1118931594)).i.toString(1835037527))
        if (prope21) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
        prope28()
        if ((((P(1118931594).i).div(-6350246603923996636).toULong())).toFloat().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope24.prope28 = {
            Kla18().prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:31:10,269 [main:107] - replacing (prope20, Function0<Unit>)
2021-03-12 08:31:10,269 [main:50] - replacing prope20 Function0<Unit>
2021-03-12 08:31:10,269 [main:54] - Getting value of type Function0<Unit>
2021-03-12 08:31:10,524 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 08:31:10,536 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:31:10,810 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:31:10,825 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:31:11,430 [main:302] - generating value of type = Any false depth = 4
2021-03-12 08:31:11,430 [main:95] - GENERATED = println("whzog")
2021-03-12 08:31:11,430 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println("whzog")}
2021-03-12 08:31:11,430 [main:61] - GENERATED IS CALL =false
2021-03-12 08:31:11,481 [main:67] - randomType = Kla7
2021-03-12 08:31:11,739 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 08:31:11,751 [main:112] - generating klass Kla7 text = open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}
2021-03-12 08:31:12,009 [main:194] - Type params = []
2021-03-12 08:31:12,267 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 08:31:12,537 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:31:12,552 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:31:13,190 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 08:31:13,470 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:31:13,485 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:31:14,473 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 8
2021-03-12 08:31:14,804 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:31:14,820 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:31:15,822 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 11
2021-03-12 08:31:16,103 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:31:16,118 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:31:17,104 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:31:17,104 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 08:31:17,104 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:31:17,104 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:31:17,117 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 08:31:17,147 [main:106] - GETTING Function0<Unit> from Boolean
2021-03-12 08:31:17,155 [main:106] - GETTING Function0<Unit> from Continuation<Any?>
2021-03-12 08:31:17,162 [main:106] - GETTING Function0<Unit> from Continuation<MutableMap<Float, Long>>
2021-03-12 08:31:17,171 [main:106] - GETTING Function0<Unit> from ULong
2021-03-12 08:31:17,192 [main:106] - GETTING Function0<Unit> from Any?
2021-03-12 08:31:17,196 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 08:31:17,202 [main:106] - GETTING Function0<Unit> from Continuation<Any?>
2021-03-12 08:31:17,202 [main:106] - GETTING Function0<Unit> from Long
2021-03-12 08:31:17,240 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 08:31:17,241 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 08:31:17,242 [main:106] - GETTING Function0<Unit> from String
2021-03-12 08:31:17,258 [main:106] - GETTING Function0<Unit> from Any?
2021-03-12 08:31:17,259 [main:106] - GETTING Function0<Unit> from Boolean
2021-03-12 08:31:17,259 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 08:31:17,267 [main:114] - replacement of prope20 of type Function0<Unit> is Kla4().prope9
2021-03-12 08:31:17,520 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:31:17,521 [main:66] - Compilation checking started
2021-03-12 08:31:18,563 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = (125.toUByte()).toLong().countLeadingZeroBits()
        outer@while ((Kla4().prope8).xor(Kla11().prope17)) (Kla1().prope5).hashCode()
        prope22 += (Kla1().prope5).toString()
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    Kla4().prope9 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
runCatching<Any?>({ "tbyvb"}).getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith((Kla1().prope5).toString()) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { (Kla12.context).equals(Kla1().prope5).xor(Kla4().prope8) } ?: error("tail-call optimization hit: method " + (linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))).size.toString(P(1118931594).i) + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(null).or(true)
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("jxsom")}

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in (((P(1118931594).i).div(-6350246603923996636).toULong())).toShort().until(72)) {
            if ((-15536).rangeTo(15).contains(-1873478740)) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (((P(1118931594).i).div(-6350246603923996636).toULong()).toShort().countTrailingZeroBits() != numberOfSuspensions)
            error((P(1118931594)).i.toString(1835037527))
        if (prope21) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
        prope28()
        if ((((P(1118931594).i).div(-6350246603923996636).toULong())).toFloat().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope24.prope28 = {
            Kla18().prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:31:18,566 [main:107] - replacing (Kla18(), Kla18)
2021-03-12 08:31:18,566 [main:50] - replacing Kla18() Kla18
2021-03-12 08:31:18,566 [main:54] - Getting value of type Kla18
2021-03-12 08:31:18,828 [main:302] - generating value of type = Kla18 false depth = 0
2021-03-12 08:31:18,840 [main:112] - generating klass Kla18 text = class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(null).or(true)
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("jxsom")}

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in (((P(1118931594).i).div(-6350246603923996636).toULong())).toShort().until(72)) {
            if ((-15536).rangeTo(15).contains(-1873478740)) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (((P(1118931594).i).div(-6350246603923996636).toULong()).toShort().countTrailingZeroBits() != numberOfSuspensions)
            error((P(1118931594)).i.toString(1835037527))
        if (prope21) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
        prope28()
        if ((((P(1118931594).i).div(-6350246603923996636).toULong())).toFloat().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 08:31:18,841 [main:58] - GENERATED VALUE OF TYPE Kla18 = Kla18()
2021-03-12 08:31:18,841 [main:61] - GENERATED IS CALL =true
2021-03-12 08:31:18,890 [main:67] - randomType = Kla11
2021-03-12 08:31:19,145 [main:302] - generating value of type = Kla11 false depth = 0
2021-03-12 08:31:19,157 [main:112] - generating klass Kla11 text = class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}
2021-03-12 08:31:19,165 [main:106] - GETTING Kla18 from Int
2021-03-12 08:31:19,194 [main:106] - GETTING Kla18 from Function0<Unit>
2021-03-12 08:31:19,202 [main:106] - GETTING Kla18 from String
2021-03-12 08:31:19,218 [main:106] - GETTING Kla18 from Boolean
2021-03-12 08:31:19,226 [main:106] - GETTING Kla18 from P
2021-03-12 08:31:19,230 [main:106] - GETTING Kla18 from Long
2021-03-12 08:31:19,258 [main:106] - GETTING Kla18 from CoroutineContext
2021-03-12 08:31:19,263 [main:106] - GETTING Kla18 from CoroutineContext
2021-03-12 08:31:19,264 [main:106] - GETTING Kla18 from Boolean
2021-03-12 08:31:19,264 [main:106] - GETTING Kla18 from CoroutineContext
2021-03-12 08:31:19,265 [main:106] - GETTING Kla18 from Any?
2021-03-12 08:31:19,268 [main:106] - GETTING Kla18 from Continuation<Any?>
2021-03-12 08:31:19,275 [main:106] - GETTING Kla18 from Int
2021-03-12 08:31:19,275 [main:106] - GETTING Kla18 from CoroutineContext
2021-03-12 08:31:19,276 [main:106] - GETTING Kla18 from P
2021-03-12 08:31:19,276 [main:106] - GETTING Kla18 from EmptyCoroutineContext
2021-03-12 08:31:19,290 [main:106] - GETTING Kla18 from String
2021-03-12 08:31:19,290 [main:106] - GETTING Kla18 from CoroutineContext
2021-03-12 08:31:19,291 [main:106] - GETTING Kla18 from ULong
2021-03-12 08:31:19,312 [main:106] - GETTING Kla18 from Any?
2021-03-12 08:31:19,313 [main:106] - GETTING Kla18 from Function0<Unit>
2021-03-12 08:31:19,313 [main:106] - GETTING Kla18 from String
2021-03-12 08:31:19,314 [main:106] - GETTING Kla18 from Continuation<MutableMap<Float, Long>>
2021-03-12 08:31:19,322 [main:106] - GETTING Kla18 from CoroutineContext
2021-03-12 08:31:19,323 [main:106] - GETTING Kla18 from ULong
2021-03-12 08:31:19,323 [main:106] - GETTING Kla18 from String
2021-03-12 08:31:19,324 [main:106] - GETTING Kla18 from Boolean
2021-03-12 08:31:19,325 [main:106] - GETTING Kla18 from Int
2021-03-12 08:31:19,325 [main:106] - GETTING Kla18 from EmptyCoroutineContext
2021-03-12 08:31:19,326 [main:106] - GETTING Kla18 from P
2021-03-12 08:31:19,326 [main:106] - GETTING Kla18 from Continuation<Any?>
2021-03-12 08:31:19,327 [main:106] - GETTING Kla18 from Continuation<MutableMap<Array<UInt>, String>>
2021-03-12 08:31:19,337 [main:106] - GETTING Kla18 from Int
2021-03-12 08:31:19,337 [main:114] - replacement of Kla18() of type Kla18 is Kla18()
2021-03-12 08:31:19,613 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:31:19,616 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 08:31:19,616 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 08:31:19,616 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 08:31:19,873 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 08:31:19,889 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 08:31:20,224 [main:67] - randomType = Byte
2021-03-12 08:31:20,480 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:31:20,522 [main:106] - GETTING EmptyCoroutineContext from P
2021-03-12 08:31:20,527 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 08:31:20,556 [main:106] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-12 08:31:20,561 [main:106] - GETTING EmptyCoroutineContext from P
2021-03-12 08:31:20,562 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 08:31:20,562 [main:106] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-12 08:31:20,563 [main:106] - GETTING EmptyCoroutineContext from Any?
2021-03-12 08:31:20,566 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 08:31:20,582 [main:106] - GETTING EmptyCoroutineContext from Continuation<Any?>
2021-03-12 08:31:20,589 [main:106] - GETTING EmptyCoroutineContext from Long
2021-03-12 08:31:20,617 [main:106] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-12 08:31:20,617 [main:106] - GETTING EmptyCoroutineContext from EmptyCoroutineContext
2021-03-12 08:31:20,629 [main:114] - replacement of EmptyCoroutineContext of type EmptyCoroutineContext is Kla1().context
2021-03-12 08:31:20,883 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:31:20,883 [main:66] - Compilation checking started
2021-03-12 08:31:21,923 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = (125.toUByte()).toLong().countLeadingZeroBits()
        outer@while ((Kla4().prope8).xor(Kla11().prope17)) (Kla1().prope5).hashCode()
        prope22 += (Kla1().prope5).toString()
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    Kla4().prope9 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
runCatching<Any?>({ "tbyvb"}).getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith((Kla1().prope5).toString()) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { (Kla12.context).equals(Kla1().prope5).xor(Kla4().prope8) } ?: error("tail-call optimization hit: method " + (linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))).size.toString(P(1118931594).i) + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(null).or(true)
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("jxsom")}

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in (((P(1118931594).i).div(-6350246603923996636).toULong())).toShort().until(72)) {
            if ((-15536).rangeTo(15).contains(-1873478740)) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (((P(1118931594).i).div(-6350246603923996636).toULong()).toShort().countTrailingZeroBits() != numberOfSuspensions)
            error((P(1118931594)).i.toString(1835037527))
        if (prope21) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
        prope28()
        if ((((P(1118931594).i).div(-6350246603923996636).toULong())).toFloat().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope24.prope28 = {
            Kla18().prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:31:21,926 [main:107] - replacing (prope21, Boolean)
2021-03-12 08:31:21,926 [main:50] - replacing prope21 Boolean
2021-03-12 08:31:21,926 [main:54] - Getting value of type Boolean
2021-03-12 08:31:22,184 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:31:22,197 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 08:31:22,197 [main:61] - GENERATED IS CALL =false
2021-03-12 08:31:24,832 [main:67] - randomType = HashMap<Map<LinkedHashSet<Byte>, Kla9<Kla11>>?, Double>?
2021-03-12 08:31:25,087 [main:302] - generating value of type = HashMap<Map<LinkedHashSet<Byte>, Kla9<Kla11>>?, Double> false depth = 0
2021-03-12 08:31:25,359 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(pairs: Pair<Map<LinkedHashSet<Byte>, Kla9<Kla11>>?, Double>): HashMap<Map<LkedHashSet<Byte>, Kla9<Kla11>>?, Double> = TODO()
2021-03-12 08:31:25,374 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(pairs: Pair<Map<LinkedHashSet<Byte>, Kla9<Kla11>>?, Double>): HashMap<Map<LkedHashSet<Byte>, Kla9<Kla11>>?, Double> = TODO()
2021-03-12 08:31:25,648 [main:302] - generating value of type = Pair<Map<LinkedHashSet<Byte>, Kla9<Kla11>>?, Double> false depth = 3
2021-03-12 08:31:25,920 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Map<LinkedHashSet<Byte>, Kla9<Kla11>>?, second: Double): Pair<Map<LinkedHashSet<Byte>, Kla9<Kla11>>?, Double> = TODO()
2021-03-12 08:31:25,935 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Map<LinkedHashSet<Byte>, Kla9<Kla11>>?, second: Double): Pair<Map<LinkedHashSet<Byte>, Kla9<Kla11>>?, Double> = TODO()
2021-03-12 08:31:26,212 [main:302] - generating value of type = Double true depth = 6
2021-03-12 08:31:26,225 [main:95] - GENERATED = Pair<Map<LinkedHashSet<Byte>, Kla9<Kla11>>?, Double>(null, 0.8129451340619102)
2021-03-12 08:31:26,225 [main:95] - GENERATED = hashMapOf<Map<LinkedHashSet<Byte>, Kla9<Kla11>>?, Double>(Pair<Map<LinkedHashSet<Byte>, Kla9<Kla11>>?, Double>(null, 0.8129451340619102))
2021-03-12 08:31:26,379 [main:149] - GENERATING call of type public abstract fun add(element: kotlin.collections.Map<kotlin.collections.LinkedHashSet<kotlin.Byte>, a.Kla9<a.Kla11>>?): kotlin.Boolean defined in kotlin.collections.MutableSet[DeserializedSimpleFunctionDescriptor@286adc62]
2021-03-12 08:31:26,634 [main:302] - generating value of type = Map<LinkedHashSet<Byte>, Kla9<Kla11>> false depth = 0
2021-03-12 08:31:26,906 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(pairs: Pair<LinkedHashSet<Byte>, Kla9<Kla11>>): Map<LkedHashSet<Byte>, Kla9<Kla11>> = TODO()
2021-03-12 08:31:26,921 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(pairs: Pair<LinkedHashSet<Byte>, Kla9<Kla11>>): Map<LkedHashSet<Byte>, Kla9<Kla11>> = TODO()
2021-03-12 08:31:27,197 [main:302] - generating value of type = Pair<LinkedHashSet<Byte>, Kla9<Kla11>> false depth = 3
2021-03-12 08:31:27,468 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: LinkedHashSet<Byte>, second: Kla9<Kla11>): Pair<LinkedHashSet<Byte>, Kla9<Kla11>> = TODO()
2021-03-12 08:31:27,484 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: LinkedHashSet<Byte>, second: Kla9<Kla11>): Pair<LinkedHashSet<Byte>, Kla9<Kla11>> = TODO()
2021-03-12 08:31:27,758 [main:302] - generating value of type = LinkedHashSet<Byte> false depth = 6
2021-03-12 08:31:28,030 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(): LinkedHashSet<Byte> = TODO()
2021-03-12 08:31:28,045 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(): LinkedHashSet<Byte> = TODO()
2021-03-12 08:31:28,319 [main:95] - GENERATED = LinkedHashSet<Byte>()
2021-03-12 08:31:28,319 [main:302] - generating value of type = Kla9<Kla11> false depth = 6
2021-03-12 08:31:28,331 [main:112] - generating klass Kla9 text = abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-12 08:31:29,629 [main:302] - generating value of type = Kla12 false depth = 8
2021-03-12 08:31:29,642 [main:112] - generating klass Kla12 text = object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}
2021-03-12 08:31:29,642 [main:95] - GENERATED = Pair<LinkedHashSet<Byte>, Kla9<Kla11>>(LinkedHashSet<Byte>(), Kla12)
2021-03-12 08:31:29,642 [main:95] - GENERATED = hashMapOf<LinkedHashSet<Byte>, Kla9<Kla11>>(Pair<LinkedHashSet<Byte>, Kla9<Kla11>>(LinkedHashSet<Byte>(), Kla12))
2021-03-12 08:31:29,643 [main:78] - Generated call from random type = (hashMapOf<Map<LinkedHashSet<Byte>, Kla9<Kla11>>?, Double>(Pair<Map<LinkedHashSet<Byte>, Kla9<Kla11>>?, Double>(null, 0.8129451340619102)))?.keys.add(hashMapOf<LinkedHashSet<Byte>, Kla9<Kla11>>(Pair<LinkedHashSet<Byte>, Kla9<Kla11>>(LinkedHashSet<Byte>(), Kla12)))
2021-03-12 08:31:29,643 [main:106] - GETTING Boolean from Boolean
2021-03-12 08:31:29,651 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]]
2021-03-12 08:31:29,651 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6]
2021-03-12 08:31:29,651 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@193d691]
2021-03-12 08:31:29,651 [main:117] - GENERATED CALL = ((true)).equals(Kla1().prope5).or(Kla4().prope8)
2021-03-12 08:31:29,651 [main:113] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]]
2021-03-12 08:31:29,651 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]
2021-03-12 08:31:29,929 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:31:29,942 [main:117] - GENERATED CALL = ((true)).and(true)
2021-03-12 08:31:29,942 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]]
2021-03-12 08:31:29,942 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6]
2021-03-12 08:31:30,196 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:31:30,196 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]
2021-03-12 08:31:30,196 [main:117] - GENERATED CALL = ((true)).equals("onohv").equals(Kla1().prope5)
2021-03-12 08:31:30,197 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]]
2021-03-12 08:31:30,197 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6]
2021-03-12 08:31:30,197 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]
2021-03-12 08:31:30,197 [main:117] - GENERATED CALL = ((true)).equals(Kla8().prope14).not()
2021-03-12 08:31:30,197 [main:113] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]]
2021-03-12 08:31:30,197 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]
2021-03-12 08:31:30,451 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:31:30,463 [main:117] - GENERATED CALL = ((true)).xor(false)
2021-03-12 08:31:30,463 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]]
2021-03-12 08:31:30,464 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16ae6a38]
2021-03-12 08:31:30,464 [main:117] - GENERATED CALL = ((true)).equals(Kla8().prope14)
2021-03-12 08:31:30,464 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]]
2021-03-12 08:31:30,464 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a9b482d]
2021-03-12 08:31:30,464 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b0f06b9]
2021-03-12 08:31:30,718 [main:117] - GENERATED CALL = ((true)).compareTo((true)).equals(null)
2021-03-12 08:31:30,719 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]]
2021-03-12 08:31:30,719 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6]
2021-03-12 08:31:30,973 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:31:30,974 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@30c9d01c]
2021-03-12 08:31:30,974 [main:117] - GENERATED CALL = ((true)).equals("phyid").xor((true))
2021-03-12 08:31:30,974 [main:113] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]]
2021-03-12 08:31:30,974 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@713932bb]
2021-03-12 08:31:30,974 [main:117] - GENERATED CALL = ((true)).not()
2021-03-12 08:31:30,974 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]]
2021-03-12 08:31:30,974 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@2d36a2a6]
2021-03-12 08:31:30,974 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1ee88095]
2021-03-12 08:31:31,228 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:31:31,241 [main:117] - GENERATED CALL = ((true)).equals(Kla1().prope5).and(true)
2021-03-12 08:31:31,241 [main:114] - replacement of prope21 of type Boolean is ((true)).equals(Kla8().prope14)
2021-03-12 08:31:31,494 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:31:31,494 [main:66] - Compilation checking started
2021-03-12 08:31:32,541 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = (125.toUByte()).toLong().countLeadingZeroBits()
        outer@while ((Kla4().prope8).xor(Kla11().prope17)) (Kla1().prope5).hashCode()
        prope22 += (Kla1().prope5).toString()
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    Kla4().prope9 = {
        c.resume(Unit)
    }
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
runCatching<Any?>({ "tbyvb"}).getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith((Kla1().prope5).toString()) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { (Kla12.context).equals(Kla1().prope5).xor(Kla4().prope8) } ?: error("tail-call optimization hit: method " + (linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))).size.toString(P(1118931594).i) + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(null).or(true)
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("jxsom")}

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in (((P(1118931594).i).div(-6350246603923996636).toULong())).toShort().until(72)) {
            if ((-15536).rangeTo(15).contains(-1873478740)) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (((P(1118931594).i).div(-6350246603923996636).toULong()).toShort().countTrailingZeroBits() != numberOfSuspensions)
            error((P(1118931594)).i.toString(1835037527))
        if (((true)).equals(Kla8().prope14)) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
        prope28()
        if ((((P(1118931594).i).div(-6350246603923996636).toULong())).toFloat().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope24.prope28 = {
            Kla18().prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:31:32,544 [main:107] - replacing ({
        c.resume(Unit)
    }, Function0<Unit>)
2021-03-12 08:31:32,544 [main:50] - replacing {
        c.resume(Unit)
    } Function0<Unit>
2021-03-12 08:31:32,544 [main:54] - Getting value of type Function0<Unit>
2021-03-12 08:31:32,802 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 08:31:32,815 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:31:33,086 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:31:33,101 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:31:33,707 [main:302] - generating value of type = Any false depth = 4
2021-03-12 08:31:33,707 [main:95] - GENERATED = println("jozxv")
2021-03-12 08:31:33,707 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println("jozxv")}
2021-03-12 08:31:33,707 [main:61] - GENERATED IS CALL =false
2021-03-12 08:31:33,733 [main:67] - randomType = Int
2021-03-12 08:31:33,990 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:31:34,033 [main:106] - GETTING Function0<Unit> from String
2021-03-12 08:31:34,050 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 08:31:34,055 [main:106] - GETTING Function0<Unit> from Continuation<Any?>
2021-03-12 08:31:34,062 [main:106] - GETTING Function0<Unit> from Any?
2021-03-12 08:31:34,066 [main:106] - GETTING Function0<Unit> from P
2021-03-12 08:31:34,070 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 08:31:34,071 [main:106] - GETTING Function0<Unit> from Any?
2021-03-12 08:31:34,072 [main:106] - GETTING Function0<Unit> from String
2021-03-12 08:31:34,073 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 08:31:34,103 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 08:31:34,103 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 08:31:34,111 [main:114] - replacement of {
        c.resume(Unit)
    } of type Function0<Unit> is { println("jozxv")}
2021-03-12 08:31:34,367 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 08:31:34,368 [main:66] - Compilation checking started
2021-03-12 08:31:35,426 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = (125.toUByte()).toLong().countLeadingZeroBits()
        outer@while ((Kla4().prope8).xor(Kla11().prope17)) (Kla1().prope5).hashCode()
        prope22 += (Kla1().prope5).toString()
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    Kla4().prope9 = { println("jozxv")}
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
runCatching<Any?>({ "tbyvb"}).getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith((Kla1().prope5).toString()) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { (Kla12.context).equals(Kla1().prope5).xor(Kla4().prope8) } ?: error("tail-call optimization hit: method " + (linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))).size.toString(P(1118931594).i) + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(null).or(true)
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("jxsom")}

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in (((P(1118931594).i).div(-6350246603923996636).toULong())).toShort().until(72)) {
            if ((-15536).rangeTo(15).contains(-1873478740)) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (((P(1118931594).i).div(-6350246603923996636).toULong()).toShort().countTrailingZeroBits() != numberOfSuspensions)
            error((P(1118931594)).i.toString(1835037527))
        if (((true)).equals(Kla8().prope14)) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
        prope28()
        if ((((P(1118931594).i).div(-6350246603923996636).toULong())).toFloat().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope24.prope28 = {
            Kla18().prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:31:35,429 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 08:31:35,429 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 08:31:35,429 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 08:31:35,688 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 08:31:35,703 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 08:31:35,729 [main:67] - randomType = Double
2021-03-12 08:31:35,985 [main:302] - generating value of type = Double true depth = 0
2021-03-12 08:31:36,026 [main:106] - GETTING EmptyCoroutineContext from Any?
2021-03-12 08:31:36,029 [main:106] - GETTING EmptyCoroutineContext from Continuation<Any?>
2021-03-12 08:31:36,035 [main:106] - GETTING EmptyCoroutineContext from Continuation<MutableMap<Array<UInt>, String>>
2021-03-12 08:31:36,045 [main:106] - GETTING EmptyCoroutineContext from Function0<Unit>
2021-03-12 08:31:36,053 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 08:31:36,082 [main:106] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-12 08:31:36,088 [main:106] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-12 08:31:36,088 [main:106] - GETTING EmptyCoroutineContext from EmptyCoroutineContext
2021-03-12 08:31:36,100 [main:114] - replacement of EmptyCoroutineContext of type EmptyCoroutineContext is Kla1().context
2021-03-12 08:31:36,354 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:31:36,355 [main:66] - Compilation checking started
2021-03-12 08:31:37,389 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = (125.toUByte()).toLong().countLeadingZeroBits()
        outer@while ((Kla4().prope8).xor(Kla11().prope17)) (Kla1().prope5).hashCode()
        prope22 += (Kla1().prope5).toString()
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    Kla4().prope9 = { println("jozxv")}
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = {}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
runCatching<Any?>({ "tbyvb"}).getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith((Kla1().prope5).toString()) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { (Kla12.context).equals(Kla1().prope5).xor(Kla4().prope8) } ?: error("tail-call optimization hit: method " + (linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))).size.toString(P(1118931594).i) + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(null).or(true)
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("jxsom")}

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in (((P(1118931594).i).div(-6350246603923996636).toULong())).toShort().until(72)) {
            if ((-15536).rangeTo(15).contains(-1873478740)) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (((P(1118931594).i).div(-6350246603923996636).toULong()).toShort().countTrailingZeroBits() != numberOfSuspensions)
            error((P(1118931594)).i.toString(1835037527))
        if (((true)).equals(Kla8().prope14)) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
        prope28()
        if ((((P(1118931594).i).div(-6350246603923996636).toULong())).toFloat().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = Kla1().context

    override fun resume(value: Unit) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope24.prope28 = {
            Kla18().prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:31:37,392 [main:107] - replacing ({}, Function0<Unit>)
2021-03-12 08:31:37,392 [main:50] - replacing {} Function0<Unit>
2021-03-12 08:31:37,392 [main:54] - Getting value of type Function0<Unit>
2021-03-12 08:31:37,650 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 08:31:37,662 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:31:37,936 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:31:37,951 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:31:38,556 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 08:31:38,569 [main:95] - GENERATED = check(false)
2021-03-12 08:31:38,569 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false)}
2021-03-12 08:31:38,569 [main:61] - GENERATED IS CALL =false
2021-03-12 08:31:38,595 [main:67] - randomType = UInt
2021-03-12 08:31:38,852 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 08:31:38,890 [main:106] - GETTING Function0<Unit> from Continuation<Any?>
2021-03-12 08:31:38,897 [main:106] - GETTING Function0<Unit> from ULong
2021-03-12 08:31:38,919 [main:106] - GETTING Function0<Unit> from String
2021-03-12 08:31:38,935 [main:106] - GETTING Function0<Unit> from EmptyCoroutineContext
2021-03-12 08:31:38,947 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 08:31:38,955 [main:114] - replacement of {} of type Function0<Unit> is { check(false)}
2021-03-12 08:31:39,209 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 08:31:39,209 [main:66] - Compilation checking started
2021-03-12 08:31:40,257 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = (125.toUByte()).toLong().countLeadingZeroBits()
        outer@while ((Kla4().prope8).xor(Kla11().prope17)) (Kla1().prope5).hashCode()
        prope22 += (Kla1().prope5).toString()
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $prope22"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    Kla4().prope9 = { println("jozxv")}
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = { check(false)}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
runCatching<Any?>({ "tbyvb"}).getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith((Kla1().prope5).toString()) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { (Kla12.context).equals(Kla1().prope5).xor(Kla4().prope8) } ?: error("tail-call optimization hit: method " + (linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))).size.toString(P(1118931594).i) + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(null).or(true)
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("jxsom")}

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in (((P(1118931594).i).div(-6350246603923996636).toULong())).toShort().until(72)) {
            if ((-15536).rangeTo(15).contains(-1873478740)) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (((P(1118931594).i).div(-6350246603923996636).toULong()).toShort().countTrailingZeroBits() != numberOfSuspensions)
            error((P(1118931594)).i.toString(1835037527))
        if (((true)).equals(Kla8().prope14)) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
        prope28()
        if ((((P(1118931594).i).div(-6350246603923996636).toULong())).toFloat().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = Kla1().context

    override fun resume(value: Unit) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope24.prope28 = {
            Kla18().prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:31:40,260 [main:107] - replacing (prope22, String)
2021-03-12 08:31:40,260 [main:50] - replacing prope22 String
2021-03-12 08:31:40,260 [main:54] - Getting value of type String
2021-03-12 08:31:40,538 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:31:40,550 [main:58] - GENERATED VALUE OF TYPE String = "xajqv"
2021-03-12 08:31:40,550 [main:61] - GENERATED IS CALL =false
2021-03-12 08:31:40,938 [main:67] - randomType = Kla16<Int>
2021-03-12 08:31:41,194 [main:302] - generating value of type = Kla16<Int> false depth = 0
2021-03-12 08:31:41,207 [main:112] - generating klass Kla16 text = abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}
2021-03-12 08:31:42,506 [main:302] - generating value of type = Kla19 false depth = 2
2021-03-12 08:31:42,519 [main:112] - generating klass Kla19 text = object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = Kla1().context

    override fun resume(value: Unit) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope24.prope28 = {
            Kla18().prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}
2021-03-12 08:31:42,533 [main:106] - GETTING String from Int
2021-03-12 08:31:42,561 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]]
2021-03-12 08:31:42,561 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:31:42,561 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c69f545]
2021-03-12 08:31:42,561 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().lowercase()
2021-03-12 08:31:42,561 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:31:42,561 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3cc27ab4]
2021-03-12 08:31:42,562 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:31:42,562 [main:117] - GENERATED CALL = (P(1118931594).i).div((P(1118931594).i).div(-6350246603923996636)).toString((P(1118931594).i))
2021-03-12 08:31:42,562 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:31:42,562 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@17618df2]
2021-03-12 08:31:42,562 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:31:42,562 [main:117] - GENERATED CALL = (P(1118931594).i).toInt().toString(P(931472561).i)
2021-03-12 08:31:42,562 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]]
2021-03-12 08:31:42,562 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:31:42,562 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3a760f]
2021-03-12 08:31:42,562 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().titlecase()
2021-03-12 08:31:42,562 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]]
2021-03-12 08:31:42,563 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b58503b]
2021-03-12 08:31:42,563 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20e4afb]
2021-03-12 08:31:42,563 [main:117] - GENERATED CALL = (P(1118931594).i).toByte().toString((true).compareTo(Kla4().prope8))
2021-03-12 08:31:42,563 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:31:42,563 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7d081b40]
2021-03-12 08:31:42,563 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:31:42,819 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:31:42,832 [main:117] - GENERATED CALL = (P(1118931594).i).compareTo(P(931472561).i).toString(-1694704937)
2021-03-12 08:31:42,832 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]]
2021-03-12 08:31:42,832 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@27ef9f1f]
2021-03-12 08:31:42,832 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5515470e]
2021-03-12 08:31:42,832 [main:117] - GENERATED CALL = (P(1118931594).i).toLong().toString(P(931472561).i)
2021-03-12 08:31:42,832 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:31:42,832 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:31:42,832 [main:117] - GENERATED CALL = (P(1118931594).i).toString((true).compareTo(Kla4().prope8))
2021-03-12 08:31:42,832 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]]
2021-03-12 08:31:42,832 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5e557d9d]
2021-03-12 08:31:42,833 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@564b7a83]
2021-03-12 08:31:42,833 [main:117] - GENERATED CALL = (P(1118931594).i).toShort().toString((true).compareTo(Kla4().prope8))
2021-03-12 08:31:42,833 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]]
2021-03-12 08:31:42,833 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6b5a35f6]
2021-03-12 08:31:42,833 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76019d80]
2021-03-12 08:31:43,088 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:31:43,101 [main:117] - GENERATED CALL = (P(1118931594).i).toChar().plus("vvolc")
2021-03-12 08:31:43,101 [main:114] - replacement of prope22 of type String is (P(1118931594).i).div((P(1118931594).i).div(-6350246603923996636)).toString((P(1118931594).i))
2021-03-12 08:31:43,355 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:31:43,355 [main:66] - Compilation checking started
2021-03-12 08:31:44,400 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = (125.toUByte()).toLong().countLeadingZeroBits()
        outer@while ((Kla4().prope8).xor(Kla11().prope17)) (Kla1().prope5).hashCode()
        prope22 += (Kla1().prope5).toString()
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $(P(1118931594).i).div((P(1118931594).i).div(-6350246603923996636)).toString((P(1118931594).i))"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    Kla4().prope9 = { println("jozxv")}
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = { check(false)}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
runCatching<Any?>({ "tbyvb"}).getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith((Kla1().prope5).toString()) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { (Kla12.context).equals(Kla1().prope5).xor(Kla4().prope8) } ?: error("tail-call optimization hit: method " + (linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))).size.toString(P(1118931594).i) + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(null).or(true)
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("jxsom")}

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in (((P(1118931594).i).div(-6350246603923996636).toULong())).toShort().until(72)) {
            if ((-15536).rangeTo(15).contains(-1873478740)) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (((P(1118931594).i).div(-6350246603923996636).toULong()).toShort().countTrailingZeroBits() != numberOfSuspensions)
            error((P(1118931594)).i.toString(1835037527))
        if (((true)).equals(Kla8().prope14)) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
        prope28()
        if ((((P(1118931594).i).div(-6350246603923996636).toULong())).toFloat().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = Kla1().context

    override fun resume(value: Unit) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope24.prope28 = {
            Kla18().prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:31:44,403 [main:107] - replacing ("tail-call optimization hit: method " + (linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))).size.toString(P(1118931594).i), String)
2021-03-12 08:31:44,404 [main:50] - replacing "tail-call optimization hit: method " + (linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))).size.toString(P(1118931594).i) String
2021-03-12 08:31:44,404 [main:54] - Getting value of type String
2021-03-12 08:31:44,663 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:31:44,676 [main:58] - GENERATED VALUE OF TYPE String = "kaprf"
2021-03-12 08:31:44,676 [main:61] - GENERATED IS CALL =false
2021-03-12 08:31:45,047 [main:67] - randomType = Collection<UByte>
2021-03-12 08:31:45,048 [main:106] - GETTING String from P
2021-03-12 08:31:45,054 [main:113] - Case = [public final val i: kotlin.Int defined in a.P[PropertyDescriptorImpl@4f6dd914], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]]
2021-03-12 08:31:45,054 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@311f0add]
2021-03-12 08:31:45,054 [main:117] - GENERATED CALL = (P(1118931594)).i.toString(P(931472561).i)
2021-03-12 08:31:45,054 [main:114] - replacement of "tail-call optimization hit: method " + (linkedMapOf<Kla7?, Double>(Pair<Kla7?, Double>(Kla7(), 0.4639169793721024))).size.toString(P(1118931594).i) of type String is "kaprf"
2021-03-12 08:31:45,313 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 08:31:45,314 [main:66] - Compilation checking started
2021-03-12 08:31:46,363 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    c.startCoroutine(fu27 {
        prope21 = true
    })
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = (125.toUByte()).toLong().countLeadingZeroBits()
        outer@while ((Kla4().prope8).xor(Kla11().prope17)) (Kla1().prope5).hashCode()
        prope22 += (Kla1().prope5).toString()
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $(P(1118931594).i).div((P(1118931594).i).div(-6350246603923996636)).toString((P(1118931594).i))"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    Kla4().prope9 = { println("jozxv")}
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = { check(false)}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
runCatching<Any?>({ "tbyvb"}).getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith((Kla1().prope5).toString()) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { (Kla12.context).equals(Kla1().prope5).xor(Kla4().prope8) } ?: error("kaprf" + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(null).or(true)
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("jxsom")}

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in (((P(1118931594).i).div(-6350246603923996636).toULong())).toShort().until(72)) {
            if ((-15536).rangeTo(15).contains(-1873478740)) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (((P(1118931594).i).div(-6350246603923996636).toULong()).toShort().countTrailingZeroBits() != numberOfSuspensions)
            error((P(1118931594)).i.toString(1835037527))
        if (((true)).equals(Kla8().prope14)) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
        prope28()
        if ((((P(1118931594).i).div(-6350246603923996636).toULong())).toFloat().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = Kla1().context

    override fun resume(value: Unit) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope24.prope28 = {
            Kla18().prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:31:46,366 [main:107] - replacing ({
        prope21 = true
    }, Function1<Unit, Unit>)
2021-03-12 08:31:46,367 [main:50] - replacing {
        prope21 = true
    } Function1<Unit, Unit>
2021-03-12 08:31:46,367 [main:54] - Getting value of type Function1<Unit, Unit>
2021-03-12 08:31:46,624 [main:302] - generating value of type = Function1<Unit, Unit> false depth = 0
2021-03-12 08:31:46,636 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:31:46,906 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:31:46,921 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 08:31:47,520 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 08:31:47,533 [main:95] - GENERATED = check(false)
2021-03-12 08:31:47,533 [main:58] - GENERATED VALUE OF TYPE Function1<Unit, Unit> = {a: Unit -> check(false)}
2021-03-12 08:31:47,533 [main:61] - GENERATED IS CALL =false
2021-03-12 08:31:47,584 [main:67] - randomType = Kla14
2021-03-12 08:31:47,840 [main:302] - generating value of type = Kla14 false depth = 0
2021-03-12 08:31:47,852 [main:112] - generating klass Kla14 text = open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
runCatching<Any?>({ "tbyvb"}).getOrThrow()
    }
}
2021-03-12 08:31:48,105 [main:194] - Type params = []
2021-03-12 08:31:48,360 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 08:31:48,629 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:31:48,644 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:31:49,280 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 08:31:49,561 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:31:49,576 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:31:50,558 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 08:31:50,558 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 08:31:50,571 [main:106] - GETTING Function1<Unit, Unit> from P
2021-03-12 08:31:50,576 [main:106] - GETTING Function1<Unit, Unit> from CoroutineContext
2021-03-12 08:31:50,583 [main:106] - GETTING Function1<Unit, Unit> from String
2021-03-12 08:31:50,599 [main:106] - GETTING Function1<Unit, Unit> from Continuation<MutableMap<Float, Long>>
2021-03-12 08:31:50,609 [main:106] - GETTING Function1<Unit, Unit> from Continuation<Any?>
2021-03-12 08:31:50,616 [main:106] - GETTING Function1<Unit, Unit> from Continuation<MutableMap<Array<UInt>, String>>
2021-03-12 08:31:50,626 [main:106] - GETTING Function1<Unit, Unit> from CoroutineContext
2021-03-12 08:31:50,627 [main:106] - GETTING Function1<Unit, Unit> from Int
2021-03-12 08:31:50,656 [main:106] - GETTING Function1<Unit, Unit> from Boolean
2021-03-12 08:31:50,665 [main:106] - GETTING Function1<Unit, Unit> from Int
2021-03-12 08:31:50,666 [main:106] - GETTING Function1<Unit, Unit> from Boolean
2021-03-12 08:31:50,667 [main:106] - GETTING Function1<Unit, Unit> from Function0<Unit>
2021-03-12 08:31:50,676 [main:106] - GETTING Function1<Unit, Unit> from CoroutineContext
2021-03-12 08:31:50,677 [main:106] - GETTING Function1<Unit, Unit> from CoroutineContext
2021-03-12 08:31:50,678 [main:106] - GETTING Function1<Unit, Unit> from ULong
2021-03-12 08:31:50,701 [main:106] - GETTING Function1<Unit, Unit> from EmptyCoroutineContext
2021-03-12 08:31:50,715 [main:106] - GETTING Function1<Unit, Unit> from Any?
2021-03-12 08:31:50,719 [main:106] - GETTING Function1<Unit, Unit> from String
2021-03-12 08:31:50,720 [main:106] - GETTING Function1<Unit, Unit> from Function0<Unit>
2021-03-12 08:31:50,721 [main:106] - GETTING Function1<Unit, Unit> from P
2021-03-12 08:31:50,722 [main:106] - GETTING Function1<Unit, Unit> from Long
2021-03-12 08:31:50,773 [main:106] - GETTING Function1<Unit, Unit> from Boolean
2021-03-12 08:31:50,774 [main:106] - GETTING Function1<Unit, Unit> from EmptyCoroutineContext
2021-03-12 08:31:50,775 [main:106] - GETTING Function1<Unit, Unit> from ULong
2021-03-12 08:31:50,776 [main:106] - GETTING Function1<Unit, Unit> from Any?
2021-03-12 08:31:50,777 [main:106] - GETTING Function1<Unit, Unit> from CoroutineContext
2021-03-12 08:31:50,778 [main:106] - GETTING Function1<Unit, Unit> from CoroutineContext
2021-03-12 08:31:50,780 [main:106] - GETTING Function1<Unit, Unit> from String
2021-03-12 08:31:50,781 [main:106] - GETTING Function1<Unit, Unit> from String
2021-03-12 08:31:50,782 [main:106] - GETTING Function1<Unit, Unit> from Int
2021-03-12 08:31:50,783 [main:106] - GETTING Function1<Unit, Unit> from Continuation<Any?>
2021-03-12 08:31:50,784 [main:106] - GETTING Function1<Unit, Unit> from Int
2021-03-12 08:31:50,785 [main:106] - GETTING Function1<Unit, Unit> from P
2021-03-12 08:31:50,785 [main:114] - replacement of {
        prope21 = true
    } of type Function1<Unit, Unit> is {a: Unit -> check(false)}
2021-03-12 08:31:51,041 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 08:31:51,041 [main:66] - Compilation checking started
2021-03-12 08:31:52,071 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
c.startCoroutine(fu27 {a: Unit -> check(false)})
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = (125.toUByte()).toLong().countLeadingZeroBits()
        outer@while ((Kla4().prope8).xor(Kla11().prope17)) (Kla1().prope5).hashCode()
        prope22 += (Kla1().prope5).toString()
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $(P(1118931594).i).div((P(1118931594).i).div(-6350246603923996636)).toString((P(1118931594).i))"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    Kla4().prope9 = { println("jozxv")}
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = { check(false)}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
runCatching<Any?>({ "tbyvb"}).getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith((Kla1().prope5).toString()) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { (Kla12.context).equals(Kla1().prope5).xor(Kla4().prope8) } ?: error("kaprf" + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(null).or(true)
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("jxsom")}

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in (((P(1118931594).i).div(-6350246603923996636).toULong())).toShort().until(72)) {
            if ((-15536).rangeTo(15).contains(-1873478740)) error("guhzs" + ", got " + prope27)
            prope28()
        }
        if (((P(1118931594).i).div(-6350246603923996636).toULong()).toShort().countTrailingZeroBits() != numberOfSuspensions)
            error((P(1118931594)).i.toString(1835037527))
        if (((true)).equals(Kla8().prope14)) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
        prope28()
        if ((((P(1118931594).i).div(-6350246603923996636).toULong())).toFloat().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = Kla1().context

    override fun resume(value: Unit) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope24.prope28 = {
            Kla18().prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:31:52,074 [main:107] - replacing (prope28, Function0<Unit>)
2021-03-12 08:31:52,074 [main:50] - replacing prope28 Function0<Unit>
2021-03-12 08:31:52,075 [main:54] - Getting value of type Function0<Unit>
2021-03-12 08:31:52,332 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 08:31:52,345 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:31:52,617 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:31:52,632 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 08:31:53,233 [main:302] - generating value of type = Any false depth = 4
2021-03-12 08:31:53,234 [main:95] - GENERATED = println("liyjn")
2021-03-12 08:31:53,234 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println("liyjn")}
2021-03-12 08:31:53,234 [main:61] - GENERATED IS CALL =false
2021-03-12 08:31:53,260 [main:67] - randomType = UShort
2021-03-12 08:31:53,515 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 08:31:53,554 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 08:31:53,560 [main:106] - GETTING Function0<Unit> from EmptyCoroutineContext
2021-03-12 08:31:53,573 [main:106] - GETTING Function0<Unit> from EmptyCoroutineContext
2021-03-12 08:31:53,574 [main:106] - GETTING Function0<Unit> from String
2021-03-12 08:31:53,590 [main:106] - GETTING Function0<Unit> from Long
2021-03-12 08:31:53,618 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 08:31:53,619 [main:106] - GETTING Function0<Unit> from Continuation<MutableMap<Array<UInt>, String>>
2021-03-12 08:31:53,629 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 08:31:53,630 [main:106] - GETTING Function0<Unit> from String
2021-03-12 08:31:53,631 [main:106] - GETTING Function0<Unit> from Any?
2021-03-12 08:31:53,635 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 08:31:53,636 [main:106] - GETTING Function0<Unit> from Any?
2021-03-12 08:31:53,637 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 08:31:53,667 [main:106] - GETTING Function0<Unit> from Continuation<Any?>
2021-03-12 08:31:53,674 [main:106] - GETTING Function0<Unit> from ULong
2021-03-12 08:31:53,696 [main:106] - GETTING Function0<Unit> from ULong
2021-03-12 08:31:53,697 [main:106] - GETTING Function0<Unit> from Boolean
2021-03-12 08:31:53,705 [main:106] - GETTING Function0<Unit> from Boolean
2021-03-12 08:31:53,706 [main:106] - GETTING Function0<Unit> from P
2021-03-12 08:31:53,710 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 08:31:53,718 [main:114] - replacement of prope28 of type Function0<Unit> is Kla4().prope9
2021-03-12 08:31:53,971 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:31:53,971 [main:66] - Compilation checking started
2021-03-12 08:31:54,996 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
c.startCoroutine(fu27 {a: Unit -> check(false)})
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = (125.toUByte()).toLong().countLeadingZeroBits()
        outer@while ((Kla4().prope8).xor(Kla11().prope17)) (Kla1().prope5).hashCode()
        prope22 += (Kla1().prope5).toString()
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $(P(1118931594).i).div((P(1118931594).i).div(-6350246603923996636)).toString((P(1118931594).i))"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    Kla4().prope9 = { println("jozxv")}
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = { check(false)}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
runCatching<Any?>({ "tbyvb"}).getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith((Kla1().prope5).toString()) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { (Kla12.context).equals(Kla1().prope5).xor(Kla4().prope8) } ?: error("kaprf" + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(null).or(true)
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("jxsom")}

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in (((P(1118931594).i).div(-6350246603923996636).toULong())).toShort().until(72)) {
            if ((-15536).rangeTo(15).contains(-1873478740)) error("guhzs" + ", got " + prope27)
            Kla4().prope9()
        }
        if (((P(1118931594).i).div(-6350246603923996636).toULong()).toShort().countTrailingZeroBits() != numberOfSuspensions)
            error((P(1118931594)).i.toString(1835037527))
        if (((true)).equals(Kla8().prope14)) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
        prope28()
        if ((((P(1118931594).i).div(-6350246603923996636).toULong())).toFloat().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = Kla1().context

    override fun resume(value: Unit) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope24.prope28 = {
            Kla18().prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:31:54,999 [main:107] - replacing ({
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
runCatching<Any?>({ "tbyvb"}).getOrThrow()
    }, Any?)
2021-03-12 08:31:55,000 [main:50] - replacing {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
runCatching<Any?>({ "tbyvb"}).getOrThrow()
    } Any?
2021-03-12 08:31:55,000 [main:54] - Getting value of type Any?
2021-03-12 08:31:55,255 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:31:55,255 [main:58] - GENERATED VALUE OF TYPE Any? = "izycv"
2021-03-12 08:31:55,255 [main:61] - GENERATED IS CALL =false
2021-03-12 08:31:55,283 [main:67] - randomType = Float
2021-03-12 08:31:55,537 [main:302] - generating value of type = Float true depth = 0
2021-03-12 08:31:55,578 [main:106] - GETTING Any? from Continuation<Any?>
2021-03-12 08:31:55,585 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:31:55,591 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:31:55,592 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:31:55,593 [main:106] - GETTING Any? from Int
2021-03-12 08:31:55,622 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:31:55,623 [main:106] - GETTING Any? from Continuation<MutableMap<Array<UInt>, String>>
2021-03-12 08:31:55,633 [main:106] - GETTING Any? from EmptyCoroutineContext
2021-03-12 08:31:55,646 [main:106] - GETTING Any? from String
2021-03-12 08:31:55,663 [main:106] - GETTING Any? from Continuation<MutableMap<Float, Long>>
2021-03-12 08:31:55,671 [main:106] - GETTING Any? from Continuation<Any?>
2021-03-12 08:31:55,672 [main:106] - GETTING Any? from P
2021-03-12 08:31:55,677 [main:106] - GETTING Any? from String
2021-03-12 08:31:55,678 [main:106] - GETTING Any? from String
2021-03-12 08:31:55,679 [main:106] - GETTING Any? from Int
2021-03-12 08:31:55,680 [main:106] - GETTING Any? from EmptyCoroutineContext
2021-03-12 08:31:55,681 [main:106] - GETTING Any? from Int
2021-03-12 08:31:55,682 [main:106] - GETTING Any? from Any?
2021-03-12 08:31:55,686 [main:106] - GETTING Any? from Function0<Unit>
2021-03-12 08:31:55,695 [main:106] - GETTING Any? from ULong
2021-03-12 08:31:55,716 [main:106] - GETTING Any? from Boolean
2021-03-12 08:31:55,747 [main:106] - GETTING Any? from Any?
2021-03-12 08:31:55,748 [main:106] - GETTING Any? from Boolean
2021-03-12 08:31:55,749 [main:106] - GETTING Any? from P
2021-03-12 08:31:55,749 [main:106] - GETTING Any? from Int
2021-03-12 08:31:55,750 [main:106] - GETTING Any? from ULong
2021-03-12 08:31:55,751 [main:106] - GETTING Any? from Boolean
2021-03-12 08:31:55,752 [main:106] - GETTING Any? from Long
2021-03-12 08:31:55,782 [main:106] - GETTING Any? from Function0<Unit>
2021-03-12 08:31:55,783 [main:106] - GETTING Any? from P
2021-03-12 08:31:55,784 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:31:55,785 [main:106] - GETTING Any? from String
2021-03-12 08:31:55,786 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 08:31:55,786 [main:114] - replacement of {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
runCatching<Any?>({ "tbyvb"}).getOrThrow()
    } of type Any? is "izycv"
2021-03-12 08:31:56,039 [main:33] - Trying to replace BLOCK on Element(STRING_TEMPLATE)
2021-03-12 08:31:56,039 [main:66] - Compilation checking started
2021-03-12 08:31:56,058 [main:71] - Wrong syntax or breaks conditions
2021-03-12 08:31:56,059 [main:49] - Result = false
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
c.startCoroutine(fu27 {a: Unit -> check(false)})
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 {
        var prope30 = 0
        var prope31 = (125.toUByte()).toLong().countLeadingZeroBits()
        outer@while ((Kla4().prope8).xor(Kla11().prope17)) (Kla1().prope5).hashCode()
        prope22 += (Kla1().prope5).toString()
        fu26()
    }

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $(P(1118931594).i).div((P(1118931594).i).div(-6350246603923996636)).toString((P(1118931594).i))"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    Kla4().prope9 = { println("jozxv")}
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = { check(false)}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) "izycv"
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith((Kla1().prope5).toString()) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { (Kla12.context).equals(Kla1().prope5).xor(Kla4().prope8) } ?: error("kaprf" + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(null).or(true)
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("jxsom")}

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in (((P(1118931594).i).div(-6350246603923996636).toULong())).toShort().until(72)) {
            if ((-15536).rangeTo(15).contains(-1873478740)) error("guhzs" + ", got " + prope27)
            Kla4().prope9()
        }
        if (((P(1118931594).i).div(-6350246603923996636).toULong()).toShort().countTrailingZeroBits() != numberOfSuspensions)
            error((P(1118931594)).i.toString(1835037527))
        if (((true)).equals(Kla8().prope14)) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
        prope28()
        if ((((P(1118931594).i).div(-6350246603923996636).toULong())).toFloat().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = Kla1().context

    override fun resume(value: Unit) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope24.prope28 = {
            Kla18().prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:31:56,062 [main:107] - replacing ({
        var prope30 = 0
        var prope31 = (125.toUByte()).toLong().countLeadingZeroBits()
        outer@while ((Kla4().prope8).xor(Kla11().prope17)) (Kla1().prope5).hashCode()
        prope22 += (Kla1().prope5).toString()
        fu26()
    }, SuspendFunction0<Unit>)
2021-03-12 08:31:56,062 [main:50] - replacing {
        var prope30 = 0
        var prope31 = (125.toUByte()).toLong().countLeadingZeroBits()
        outer@while ((Kla4().prope8).xor(Kla11().prope17)) (Kla1().prope5).hashCode()
        prope22 += (Kla1().prope5).toString()
        fu26()
    } SuspendFunction0<Unit>
2021-03-12 08:31:56,062 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-12 08:31:56,321 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-12 08:31:56,334 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 08:31:56,603 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 08:31:56,618 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 08:31:57,574 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 08:31:57,587 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 08:31:57,600 [main:302] - generating value of type = Any false depth = 5
2021-03-12 08:31:57,600 [main:95] - GENERATED = check(true, { "dkkyd"})
2021-03-12 08:31:57,600 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { check(true, { "dkkyd"})}
2021-03-12 08:31:57,600 [main:61] - GENERATED IS CALL =false
2021-03-12 08:31:58,300 [main:67] - randomType = LinkedHashSet<Float?>
2021-03-12 08:31:58,555 [main:302] - generating value of type = LinkedHashSet<Float?> false depth = 0
2021-03-12 08:31:58,825 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(elements: kotlin.collections.Collection<Float?>): LinkedHashSet<Float?> = TODO()
2021-03-12 08:31:58,840 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(elements: kotlin.collections.Collection<Float?>): LinkedHashSet<Float?> = TODO()
2021-03-12 08:31:59,486 [main:302] - generating value of type = Collection<Float?> false depth = 3
2021-03-12 08:31:59,758 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: Float?): Collection<Float?> = TODO()
2021-03-12 08:31:59,773 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: Float?): Collection<Float?> = TODO()
2021-03-12 08:32:00,046 [main:302] - generating value of type = Float true depth = 6
2021-03-12 08:32:00,059 [main:95] - GENERATED = hashSetOf<Float?>(0.86433065f)
2021-03-12 08:32:00,059 [main:95] - GENERATED = LinkedHashSet<Float?>(hashSetOf<Float?>(0.86433065f))
2021-03-12 08:32:00,173 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-12 08:32:00,202 [main:106] - GETTING SuspendFunction0<Unit> from ULong
2021-03-12 08:32:00,224 [main:106] - GETTING SuspendFunction0<Unit> from Any?
2021-03-12 08:32:00,227 [main:106] - GETTING SuspendFunction0<Unit> from EmptyCoroutineContext
2021-03-12 08:32:00,240 [main:106] - GETTING SuspendFunction0<Unit> from P
2021-03-12 08:32:00,245 [main:106] - GETTING SuspendFunction0<Unit> from Boolean
2021-03-12 08:32:00,253 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 08:32:00,269 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 08:32:00,270 [main:106] - GETTING SuspendFunction0<Unit> from Function0<Unit>
2021-03-12 08:32:00,279 [main:106] - GETTING SuspendFunction0<Unit> from Function0<Unit>
2021-03-12 08:32:00,280 [main:106] - GETTING SuspendFunction0<Unit> from CoroutineContext
2021-03-12 08:32:00,286 [main:106] - GETTING SuspendFunction0<Unit> from P
2021-03-12 08:32:00,287 [main:106] - GETTING SuspendFunction0<Unit> from CoroutineContext
2021-03-12 08:32:00,288 [main:106] - GETTING SuspendFunction0<Unit> from CoroutineContext
2021-03-12 08:32:00,289 [main:106] - GETTING SuspendFunction0<Unit> from CoroutineContext
2021-03-12 08:32:00,289 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-12 08:32:00,290 [main:106] - GETTING SuspendFunction0<Unit> from Any?
2021-03-12 08:32:00,291 [main:106] - GETTING SuspendFunction0<Unit> from Boolean
2021-03-12 08:32:00,292 [main:106] - GETTING SuspendFunction0<Unit> from Continuation<MutableMap<Float, Long>>
2021-03-12 08:32:00,301 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-12 08:32:00,302 [main:106] - GETTING SuspendFunction0<Unit> from Continuation<Any?>
2021-03-12 08:32:00,309 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-12 08:32:00,310 [main:106] - GETTING SuspendFunction0<Unit> from CoroutineContext
2021-03-12 08:32:00,311 [main:106] - GETTING SuspendFunction0<Unit> from Continuation<MutableMap<Array<UInt>, String>>
2021-03-12 08:32:00,321 [main:106] - GETTING SuspendFunction0<Unit> from EmptyCoroutineContext
2021-03-12 08:32:00,321 [main:106] - GETTING SuspendFunction0<Unit> from ULong
2021-03-12 08:32:00,322 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 08:32:00,323 [main:106] - GETTING SuspendFunction0<Unit> from P
2021-03-12 08:32:00,324 [main:106] - GETTING SuspendFunction0<Unit> from Long
2021-03-12 08:32:00,353 [main:106] - GETTING SuspendFunction0<Unit> from CoroutineContext
2021-03-12 08:32:00,354 [main:106] - GETTING SuspendFunction0<Unit> from Continuation<Any?>
2021-03-12 08:32:00,355 [main:106] - GETTING SuspendFunction0<Unit> from Boolean
2021-03-12 08:32:00,356 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 08:32:00,356 [main:114] - replacement of {
        var prope30 = 0
        var prope31 = (125.toUByte()).toLong().countLeadingZeroBits()
        outer@while ((Kla4().prope8).xor(Kla11().prope17)) (Kla1().prope5).hashCode()
        prope22 += (Kla1().prope5).toString()
        fu26()
    } of type SuspendFunction0<Unit> is { check(true, { "dkkyd"})}
2021-03-12 08:32:00,610 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 08:32:00,611 [main:66] - Compilation checking started
2021-03-12 08:32:01,649 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
c.startCoroutine(fu27 {a: Unit -> check(false)})
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 { check(true, { "dkkyd"})}

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $(P(1118931594).i).div((P(1118931594).i).div(-6350246603923996636)).toString((P(1118931594).i))"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    Kla4().prope9 = { println("jozxv")}
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = { check(false)}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
runCatching<Any?>({ "tbyvb"}).getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith((Kla1().prope5).toString()) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { (Kla12.context).equals(Kla1().prope5).xor(Kla4().prope8) } ?: error("kaprf" + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(null).or(true)
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("jxsom")}

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in (((P(1118931594).i).div(-6350246603923996636).toULong())).toShort().until(72)) {
            if ((-15536).rangeTo(15).contains(-1873478740)) error("guhzs" + ", got " + prope27)
            Kla4().prope9()
        }
        if (((P(1118931594).i).div(-6350246603923996636).toULong()).toShort().countTrailingZeroBits() != numberOfSuspensions)
            error((P(1118931594)).i.toString(1835037527))
        if (((true)).equals(Kla8().prope14)) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
        prope28()
        if ((((P(1118931594).i).div(-6350246603923996636).toULong())).toFloat().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = Kla1().context

    override fun resume(value: Unit) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope24.prope28 = {
            Kla18().prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:32:01,652 [main:107] - replacing (this, Kla15)
2021-03-12 08:32:01,652 [main:50] - replacing this Kla15
2021-03-12 08:32:01,652 [main:54] - Getting value of type Kla15
2021-03-12 08:32:01,911 [main:302] - generating value of type = Kla15 false depth = 0
2021-03-12 08:32:01,924 [main:112] - generating klass Kla15 text = class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
this.prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}
2021-03-12 08:32:01,924 [main:58] - GENERATED VALUE OF TYPE Kla15 = Kla15()
2021-03-12 08:32:01,924 [main:61] - GENERATED IS CALL =true
2021-03-12 08:32:01,949 [main:67] - randomType = UShort
2021-03-12 08:32:02,199 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 08:32:02,238 [main:106] - GETTING Kla15 from Continuation<Any?>
2021-03-12 08:32:02,245 [main:106] - GETTING Kla15 from P
2021-03-12 08:32:02,249 [main:106] - GETTING Kla15 from Int
2021-03-12 08:32:02,278 [main:106] - GETTING Kla15 from Any?
2021-03-12 08:32:02,281 [main:106] - GETTING Kla15 from P
2021-03-12 08:32:02,282 [main:106] - GETTING Kla15 from CoroutineContext
2021-03-12 08:32:02,287 [main:106] - GETTING Kla15 from ULong
2021-03-12 08:32:02,308 [main:106] - GETTING Kla15 from Int
2021-03-12 08:32:02,309 [main:106] - GETTING Kla15 from Function0<Unit>
2021-03-12 08:32:02,318 [main:106] - GETTING Kla15 from String
2021-03-12 08:32:02,334 [main:106] - GETTING Kla15 from Int
2021-03-12 08:32:02,334 [main:106] - GETTING Kla15 from EmptyCoroutineContext
2021-03-12 08:32:02,348 [main:106] - GETTING Kla15 from Boolean
2021-03-12 08:32:02,356 [main:106] - GETTING Kla15 from Continuation<MutableMap<Float, Long>>
2021-03-12 08:32:02,364 [main:106] - GETTING Kla15 from CoroutineContext
2021-03-12 08:32:02,364 [main:106] - GETTING Kla15 from CoroutineContext
2021-03-12 08:32:02,365 [main:106] - GETTING Kla15 from Int
2021-03-12 08:32:02,366 [main:106] - GETTING Kla15 from Continuation<MutableMap<Array<UInt>, String>>
2021-03-12 08:32:02,375 [main:106] - GETTING Kla15 from Continuation<Any?>
2021-03-12 08:32:02,376 [main:106] - GETTING Kla15 from String
2021-03-12 08:32:02,376 [main:106] - GETTING Kla15 from CoroutineContext
2021-03-12 08:32:02,377 [main:106] - GETTING Kla15 from CoroutineContext
2021-03-12 08:32:02,377 [main:106] - GETTING Kla15 from Boolean
2021-03-12 08:32:02,378 [main:106] - GETTING Kla15 from EmptyCoroutineContext
2021-03-12 08:32:02,379 [main:106] - GETTING Kla15 from P
2021-03-12 08:32:02,379 [main:106] - GETTING Kla15 from ULong
2021-03-12 08:32:02,380 [main:106] - GETTING Kla15 from Boolean
2021-03-12 08:32:02,380 [main:106] - GETTING Kla15 from Function0<Unit>
2021-03-12 08:32:02,381 [main:106] - GETTING Kla15 from Long
2021-03-12 08:32:02,412 [main:106] - GETTING Kla15 from String
2021-03-12 08:32:02,413 [main:106] - GETTING Kla15 from CoroutineContext
2021-03-12 08:32:02,414 [main:106] - GETTING Kla15 from String
2021-03-12 08:32:02,415 [main:106] - GETTING Kla15 from Any?
2021-03-12 08:32:02,415 [main:114] - replacement of this of type Kla15 is Kla15()
2021-03-12 08:32:02,676 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 08:32:02,676 [main:66] - Compilation checking started
2021-03-12 08:32:03,694 [main:53] - Result = true
Text:
package a
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline class P(val i: Int)

suspend fun foo(p: P = P(1)) {}

suspend fun bar(p: P) {}

suspend fun fu0(v: String): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "qxzuo"}

suspend fun fu1(): String {
    val prope2 = (P((P(1118931594).i).toInt()).i).toChar().uppercase()
    val prope3 = (P(P(1118931594).i).i).compareTo(P(1118931594).i).toString(72)
    val prope4 = prope3 + fu0((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i).toInt().toString(P(P(1118931594).i).i))

    return (P((P((P(P(1118931594).i).i).compareTo(P(1118931594).i)).i))).i.toString(P(1118931594).i)
}

fun fu2(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box613(): String {
    var prope5 = ""

    fu2 {
        prope5 = (P(1118931594).i).div(-6350246603923996636).toString(P(P(1118931594).i).i)
    }

    return prope5
}

fun <Ty0> fu3(prope3: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        prope3(prope5.getOrThrow())
    }
}

fun fu4(prope3: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        println(null)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope5: Result<Any?>) {
        "wdttq"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Any?>) {
        Kla1().prope5 = "zqnrd"
    }

    var prope5: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope5: Result<Ty0>) {
        if (prope5.isSuccess) {
            resume(prope5.getOrThrow())
        } else {
            fu5(prope5.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"), { "dvfao"})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((P(P(P(1118931594).i).i).i).toChar().titlecase())
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu8(method: String) {
        prope6.find { true}?.let { error((P(P(1118931594).i).i).toChar().titlecase()) }
    }

    fun fu9(method: String) {
        prope6.find { true} ?: error((P((P(1118931594).i)).i).toShort().toString(-1294284587) +
                prope6.joinToString(separator = (P(1118931594).i).toString(P(0).i)))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope7 = (0.7710914626188926).toShort().plus(-42)
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu10() {
        prope7 = 0
        prope8 = (P((P(1118931594).i).toInt().unaryPlus()).i).toChar().isLowerCase()
        prope9 = { require(false, { "hsmww"})}
    }

    suspend fun fu1() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require((P((P(1118931594).i)).i).equals("mgjxn"))}

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (P(0).i).toInt().until(P(1118931594).i)) {
            if ((P((P(1118931594).i)).i).div(-6127939662873622062).countLeadingZeroBits() != (P(1118931594).i).compareTo(P(P(1118931594).i).i).toInt()) error((P(1118931594).i).toString(i))
            prope9()
        }
        if ((P(P(1118931594).i).i).toInt().unaryPlus() != (linkedSetOf<Kla5?>(Kla5)).size.xor(P(1118931594).i))
            error((P(1118931594).i).compareTo(P(1118931594).i).toString(P(1118931594).i))
        if ((1979271849.toUShort()).equals("sscud").equals("ltovx")) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !(P((P(1118931594).i)).i).equals("mgjxn")) error((P((P(P(1118931594).i).i).toInt().unaryPlus()).i).toChar().plus("ozyki"))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope9 = { require(equals("mgjxn"))}
    }

    override fun fu5(exception: Throwable) {
        throw Error(AssertionError("ugbvh", Throwable()))
    }
}

fun fu12(c: suspend () -> Unit) {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
c.startCoroutine(Kla7)
}

fun fu13(s1: String, s2: String = "K"): String = ((P(1118931594).i)).toInt().toString(-118984644) + "fmcbg"

inline suspend fun fu14(fn: suspend (String) -> String, arg: String) = {a: String -> "jzrjx"}.invoke(arg)

fun box655(): String {
    var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
var prope13 = "failed"
    fu12 { println()}
    return (true).compareTo(Kla4().prope8).toString(P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte())).i)
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
x(prope14.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
(Kla5).resumeWithException(Error())
    }
}

open class Kla7(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla13 : Kla7()
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
"lmmno"
    }
}

class Kla8 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope14: Result<Any?>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
this.prope14 = "fcbze"
    }

    var prope14: Any? = null
}

abstract class Kla9<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla1().context
    override fun resumeWith(prope14: Result<Ty1>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (prope14.isSuccess) {
            resume(prope14.getOrThrow())
        } else {
            fu17(Throwable("bizgp", NumberFormatException()))
        }
    }

    abstract fun fu17(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla10 {
    private val prope15 = arrayListOf<StackTraceElement?>()

    suspend fun fu19() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("pszri")}

    fun fu19(c: Continuation<*>) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
if (c !is CoroutineStackFrame) error(((P(1118931594).i).div(((P(1118931594).i).div(-6350246603923996636)))).toInt().toString(-922266730))
        prope15.clear()
        var prope19: CoroutineStackFrame? = c
        while (prope19 != null) {
            prope15.add(prope19.getStackTraceElement())
            prope19 = prope19.callerFrame
        }
    }

    fun fu20(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { equals("mgjxn")}?.let { error(((P(1118931594).i).div(-6350246603923996636)).toInt().toString(-777972992) + it + (P(1118931594).i).compareTo(1118931594).toString((P(P(1118931594).i).i)) +
                prope15.joinToString(separator = "\n")) }
    }

    fun fu21(method: String) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope15.find { (Kla4().prope8).equals(Kla1().prope5).equals(Kla1().prope5) } ?: error((P(P(1118931594).i).i.toUShort())?.div(116.toUByte()).toString(P(18190).i) +
                prope15.joinToString(separator = ((P(1118931594).i)).toChar().lowercase()))
    }
}

val prope11 = Kla10()

class Kla11 {
    private var prope16 = 0
    var prope17 = (Kla1().context).equals("dlsde").xor(false)

    var prope18: () -> Unit = {}

    fun fu22() {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
prope16 = ((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()).minus((P(1118931594).i))
        prope17 = ((P((P((P(1118931594).i)).i)).i)).div((0.7710914626188926)).equals("dhqcp")
        Kla4().prope9 = Kla4().prope9
    }

    suspend fun fu23() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(equals(Kla1().prope5))}

    fun fu24(numberOfSuspensions: Int, checkFinished: Boolean = (Kla4().prope9).equals(Kla1().prope5)) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
for (i in (Kla5).equals(Kla1().prope5).compareTo(true)..((P(0).i).toInt().toUShort()).compareTo(P(P(P(1118931594).i).i).i.toUByte()).or((P(1118931594).i))) {
            if ((Kla4().prope9).equals("arwos").equals("apbel")) error(((P(P(P(1118931594).i).i).i).div((P(P(P(1118931594).i).i).i).div(6350246603923996636))).toLong().toString((P(1118931594).i)))
            prope18()
        }
        if ((Kla4().prope8).compareTo(Kla4().prope8).shr(-1885106046) != numberOfSuspensions)
            error(((P(P(P(1118931594).i).i).i).div(6350246603923996636)).toLong().toString(P((P(1118931594).i)).i))
        if (prope17) error("Wrong state-machine generated: it is finished early")
        Kla4().prope9()
        if (checkFinished && (fu4({a: Throwable -> println()})).equals(Kla1().prope5).equals(null)) error("bpazp")
    }
}

val prope12 = Kla11()

object Kla12: Kla9<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
Kla4().prope9 = Kla4().prope9
    }

    override fun fu17(exception: Throwable) {
        var prope5 = ""
val prope0 = Kla3()
val prope1 = Kla4()
throw Throwable("nqddv")
    }
}

fun fu25(c: suspend () -> Unit): Unit {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
c.startCoroutine(fu27 {a: Unit -> check(false)})
}

fun box521(): String {
    var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
fu25 { check(true, { "dkkyd"})}

    while (!prope21) {
        prope22 += "@;"
        prope20()
    }

    if (prope22 != "0,0;@;0,1;@;0,2;@;0,3;@;done;@;") return "fail: $(P(1118931594).i).div((P(1118931594).i).div(-6350246603923996636)).toString((P(1118931594).i))"

    return "OK"
}

suspend fun fu26(): Unit = suspendCoroutineUninterceptedOrReturn { c ->
    Kla4().prope9 = { println("jozxv")}
    COROUTINE_SUSPENDED
}

var prope20: () -> Unit = { check(false)}

var prope21 = false

var prope22 = ""

fun <Ty2> fu27(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
x(prope25.getOrThrow())
    }
}

fun fu28(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope25: Result<Any?>) {
        prope25.exceptionOrNull()?.let(x)
    }
}

open class Kla14(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla20 : Kla14()
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
runCatching<Any?>({ "tbyvb"}).getOrThrow()
    }
}

class Kla15 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Any?>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
Kla15().prope25 = prope25.getOrThrow()
    }

    var prope25: Any? = null
}

abstract class Kla16<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope25: Result<Ty2>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if ((fu13("ekfhd", "ldnpv")).subSequence(P(1118931594).i, (true).compareTo(Kla4().prope8)).isNotEmpty()) {
            resume(prope25.getOrThrow())
        } else {
            fu29(ConcurrentModificationException("mnobx")!!)
        }
    }

    abstract fun fu29(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla17 {
    private val prope26 = arrayListOf<StackTraceElement?>()

    suspend fun fu31() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu31(it)
    }

    fun fu31(c: Continuation<*>) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope26.clear()
        var prope29: CoroutineStackFrame? = c
        while (prope29 != null) {
            prope26.add(prope29.getStackTraceElement())
            prope29 = prope29.callerFrame
        }
    }

    fun fu32(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { it?.methodName?.startsWith((Kla1().prope5).toString()) == true }?.let { error((P(931472561).i).toChar().titlecase() + " has state-machine " +
                prope26.joinToString(separator = "\n")) }
    }

    fun fu33(method: String) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope26.find { (Kla12.context).equals(Kla1().prope5).xor(Kla4().prope8) } ?: error("kaprf" + " has no state-machine " +
                prope26.joinToString(separator = "\n"))
    }
}

val prope23 = Kla17()

class Kla18 {
    private var prope27 = (fu13("ekfhd", "ldnpv")).compareTo("trxvy").plus(76)
    var prope21 = false

    var prope28: () -> Unit = { println("lbczc")}

    fun fu34() {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope27 = (1716224313).toShort().compareTo(-52)
        prope21 = (P(((P(1118931594).i).div(-6350246603923996636).toULong()).compareTo((P(1118931594).i).toUByte()))).equals(null).or(true)
        Kla4().prope9 = {}
    }

    suspend fun fu35() = suspendCoroutine<Unit> {a: Continuation<Unit> -> println("jxsom")}

    fun fu36(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
for (prope30 in (((P(1118931594).i).div(-6350246603923996636).toULong())).toShort().until(72)) {
            if ((-15536).rangeTo(15).contains(-1873478740)) error("guhzs" + ", got " + prope27)
            Kla4().prope9()
        }
        if (((P(1118931594).i).div(-6350246603923996636).toULong()).toShort().countTrailingZeroBits() != numberOfSuspensions)
            error((P(1118931594)).i.toString(1835037527))
        if (((true)).equals(Kla8().prope14)) error(((P(1118931594).i).div(-6350246603923996636)).toLong().toString((P(1118931594).i)))
        prope28()
        if ((((P(1118931594).i).div(-6350246603923996636).toULong())).toFloat().isNaN()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope24 = Kla18()

object Kla19: Kla16<Unit>() {
    override val context: CoroutineContext
        get() = Kla1().context

    override fun resume(value: Unit) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
prope24.prope28 = {
            Kla18().prope21 = true
        }
    }

    override fun fu29(exception: Throwable) {
        var prope5 = ""
var prope13 = "failed"
val prope0 = Kla3()
val prope1 = Kla4()
val prope11 = Kla10()
val prope12 = Kla11()
throw ClassCastException("syuzq")
    }
}


2021-03-12 08:32:03,698 [main:107] - replacing (it?.methodName?.startsWith((Kla1().prope5).toString()) == true, Boolean)
2021-03-12 08:32:03,698 [main:50] - replacing it?.methodName?.startsWith((Kla1().prope5).toString()) == true Boolean
2021-03-12 08:32:03,698 [main:54] - Getting value of type Boolean
