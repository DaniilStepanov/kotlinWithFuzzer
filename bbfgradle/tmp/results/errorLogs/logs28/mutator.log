2021-03-11 20:11:38,993 [main:66] - Compilation checking started
2021-03-11 20:11:40,294 [main:50] - replacing var x: Int Int
2021-03-11 20:11:40,294 [main:54] - Getting value of type Int
2021-03-11 20:11:40,438 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:11:40,440 [main:58] - GENERATED VALUE OF TYPE Int = -399962283
2021-03-11 20:11:40,440 [main:61] - GENERATED IS CALL =false
2021-03-11 20:11:40,443 [main:67] - randomType = A
2021-03-11 20:11:40,590 [main:302] - generating value of type = A false depth = 0
2021-03-11 20:11:40,591 [main:112] - generating klass A text = data class A(var x: Int, val z: Int?)
2021-03-11 20:11:40,781 [main:194] - Type params = []
2021-03-11 20:11:40,917 [main:302] - generating value of type = Int true depth = 2
2021-03-11 20:11:40,918 [main:302] - generating value of type = Int true depth = 2
2021-03-11 20:11:41,440 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@72901c0d]
2021-03-11 20:11:41,442 [main:78] - Generated call from random type = (A(-1990340360, -1194718670)).x.countOneBits()
2021-03-11 20:11:41,442 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:11:41,443 [main:66] - Compilation checking started
2021-03-11 20:11:41,979 [main:53] - Result = true
Text:
data class A(var x: Int = -399962283, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}
2021-03-11 20:11:41,980 [main:50] - replacing val z: Int? Int?
2021-03-11 20:11:41,980 [main:54] - Getting value of type Int?
2021-03-11 20:11:42,120 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:11:42,120 [main:58] - GENERATED VALUE OF TYPE Int? = 302039436
2021-03-11 20:11:42,121 [main:61] - GENERATED IS CALL =false
2021-03-11 20:11:42,546 [main:67] - randomType = ArrayDeque<Long>
2021-03-11 20:11:42,641 [main:302] - generating value of type = ArrayDeque<Long> false depth = 0
2021-03-11 20:11:42,789 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<Long>): ArrayDeque<Long> = TODO()
2021-03-11 20:11:42,794 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<Long>): ArrayDeque<Long> = TODO()
2021-03-11 20:11:43,040 [main:302] - generating value of type = Collection<Long> false depth = 3
2021-03-11 20:11:43,139 [main:43] - GENERATING CALL OF fun UIntArray(size: kotlin.Int): Collection<Long> = TODO()
2021-03-11 20:11:43,141 [main:61] - WITHOUT TYPE PARAMS = fun UIntArray(size: kotlin.Int): Collection<Long> = TODO()
2021-03-11 20:11:43,343 [main:302] - generating value of type = Int true depth = 6
2021-03-11 20:11:43,344 [main:95] - GENERATED = UIntArray(-2075199572)
2021-03-11 20:11:43,344 [main:95] - GENERATED = ArrayDeque<Long>(UIntArray(-2075199572))
2021-03-11 20:11:43,628 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5f430c5a]
2021-03-11 20:11:43,629 [main:78] - Generated call from random type = (ArrayDeque<Long>(UIntArray(-2075199572))).modCount.unaryPlus()
2021-03-11 20:11:43,630 [main:106] - GETTING Int? from Int
2021-03-11 20:11:43,704 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f971e3d], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@b32dbea]]
2021-03-11 20:11:43,704 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f971e3d]
2021-03-11 20:11:43,704 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@b32dbea]
2021-03-11 20:11:43,706 [main:117] - GENERATED CALL = (x)?.toFloat().toRawBits()
2021-03-11 20:11:43,706 [main:113] - Case = [public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@49accbb4]]
2021-03-11 20:11:43,706 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@49accbb4]
2021-03-11 20:11:43,707 [main:117] - GENERATED CALL = (x)?.coerceAtMost(x)
2021-03-11 20:11:43,708 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@719e1c26], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@f559f83]]
2021-03-11 20:11:43,708 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@719e1c26]
2021-03-11 20:11:43,812 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:11:43,813 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@f559f83]
2021-03-11 20:11:43,814 [main:117] - GENERATED CALL = (x)?.compareTo(-1529841005).takeHighestOneBit()
2021-03-11 20:11:43,814 [main:113] - Case = [public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4cbb519f]]
2021-03-11 20:11:43,815 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4cbb519f]
2021-03-11 20:11:43,816 [main:117] - GENERATED CALL = (x)?.coerceIn(x, x)
2021-03-11 20:11:43,816 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a33abcd], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a80d21]]
2021-03-11 20:11:43,816 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a33abcd]
2021-03-11 20:11:43,817 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a80d21]
2021-03-11 20:11:43,818 [main:117] - GENERATED CALL = (x)?.toInt().toInt()
2021-03-11 20:11:43,818 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5e6956fa], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5723efaa]]
2021-03-11 20:11:43,818 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5e6956fa]
2021-03-11 20:11:43,819 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5723efaa]
2021-03-11 20:11:43,912 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:11:43,914 [main:117] - GENERATED CALL = (x)?.toDouble().compareTo(26)
2021-03-11 20:11:43,914 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a33abcd], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@15480ba9]]
2021-03-11 20:11:43,914 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a33abcd]
2021-03-11 20:11:43,915 [main:117] - GENERATED CALL = (x)?.toInt().sign
2021-03-11 20:11:43,916 [main:113] - Case = [public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1a49f8b8]]
2021-03-11 20:11:43,916 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1a49f8b8]
2021-03-11 20:11:43,917 [main:117] - GENERATED CALL = (x)?.inv()
2021-03-11 20:11:43,917 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a33abcd], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@783a8ec4]]
2021-03-11 20:11:43,917 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a33abcd]
2021-03-11 20:11:43,917 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@783a8ec4]
2021-03-11 20:11:43,918 [main:117] - GENERATED CALL = (x)?.toInt().takeLowestOneBit()
2021-03-11 20:11:43,918 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a33abcd], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4cbb519f]]
2021-03-11 20:11:43,918 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a33abcd]
2021-03-11 20:11:43,919 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4cbb519f]
2021-03-11 20:11:43,919 [main:117] - GENERATED CALL = (x)?.toInt().coerceIn(x, x)
2021-03-11 20:11:43,920 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 20:11:43,920 [main:66] - Compilation checking started
2021-03-11 20:11:44,551 [main:53] - Result = true
Text:
data class A(var x: Int = -399962283, val z: Int? = (x)?.toInt().takeLowestOneBit())

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}


2021-03-11 20:11:44,729 [main:112] - generating klass A text = data class A(var x: Int, val z: Int?)
2021-03-11 20:11:44,820 [main:194] - Type params = []
2021-03-11 20:11:44,893 [main:302] - generating value of type = Int true depth = 1
2021-03-11 20:11:44,893 [main:302] - generating value of type = Int true depth = 1
2021-03-11 20:11:45,061 [main:45] - Trying to change 9 nodes
2021-03-11 20:11:45,064 [main:53] - replacing ("$a" != "A(x=1, z=null)", Boolean)
2021-03-11 20:11:45,064 [main:50] - replacing "$a" != "A(x=1, z=null)" Boolean
2021-03-11 20:11:45,064 [main:54] - Getting value of type Boolean
2021-03-11 20:11:45,149 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:11:45,149 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 20:11:45,149 [main:61] - GENERATED IS CALL =false
2021-03-11 20:11:45,150 [main:67] - randomType = String
2021-03-11 20:11:45,231 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:11:45,265 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b17838a]
2021-03-11 20:11:45,343 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 20:11:45,343 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 20:11:45,346 [main:78] - Generated call from random type = ("fojkf").all({a: Char -> true})
2021-03-11 20:11:45,348 [main:106] - GETTING Boolean from Int?
2021-03-11 20:11:45,457 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@220c529a], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6bca329b]]
2021-03-11 20:11:45,457 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@220c529a]
2021-03-11 20:11:45,536 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:11:45,537 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6bca329b]
2021-03-11 20:11:45,628 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:11:45,630 [main:117] - GENERATED CALL = (A(-1561733152, 1015913749).z).equals("pjlje").and(true)
2021-03-11 20:11:45,631 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ea9efde]]
2021-03-11 20:11:45,631 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:11:45,631 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ea9efde]
2021-03-11 20:11:45,633 [main:117] - GENERATED CALL = (A(-1561733152, 1015913749).z).toChar().isUpperCase()
2021-03-11 20:11:45,633 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f971e3d], public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@5987e28d]]
2021-03-11 20:11:45,633 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f971e3d]
2021-03-11 20:11:45,634 [main:149] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@5987e28d]
2021-03-11 20:11:45,635 [main:117] - GENERATED CALL = (A(-1561733152, 1015913749).z).toFloat().isInfinite()
2021-03-11 20:11:45,635 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@641ccc76]]
2021-03-11 20:11:45,635 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:11:45,636 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@641ccc76]
2021-03-11 20:11:45,637 [main:117] - GENERATED CALL = (A(-1561733152, 1015913749).z).toChar().isTitleCase()
2021-03-11 20:11:45,637 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@a00b4a6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@4c4e0700]]
2021-03-11 20:11:45,637 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@a00b4a6]
2021-03-11 20:11:45,638 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@4c4e0700]
2021-03-11 20:11:45,727 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:11:45,728 [main:117] - GENERATED CALL = (A(-1561733152, 1015913749).z).toLong().equals("zawun")
2021-03-11 20:11:45,729 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a9668d7]]
2021-03-11 20:11:45,729 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:11:45,729 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a9668d7]
2021-03-11 20:11:45,730 [main:117] - GENERATED CALL = (A(-1561733152, 1015913749).z).toChar().isHighSurrogate()
2021-03-11 20:11:45,731 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3348cc8b]]
2021-03-11 20:11:45,731 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:11:45,731 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3348cc8b]
2021-03-11 20:11:45,732 [main:117] - GENERATED CALL = (A(-1561733152, 1015913749).z).toChar().isLetterOrDigit()
2021-03-11 20:11:45,733 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@540774de]]
2021-03-11 20:11:45,733 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:11:45,733 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@540774de]
2021-03-11 20:11:45,734 [main:117] - GENERATED CALL = (A(-1561733152, 1015913749).z).toChar().isSurrogate()
2021-03-11 20:11:45,734 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@682d5403], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@3bc00b46]]
2021-03-11 20:11:45,734 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@682d5403]
2021-03-11 20:11:45,812 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:11:45,812 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@3bc00b46]
2021-03-11 20:11:45,888 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:11:45,890 [main:117] - GENERATED CALL = (A(-1561733152, 1015913749).z).rangeTo(-97).equals("akzma")
2021-03-11 20:11:45,890 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40b6c5e7]]
2021-03-11 20:11:45,890 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:11:45,890 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40b6c5e7]
2021-03-11 20:11:45,891 [main:117] - GENERATED CALL = (A(-1561733152, 1015913749).z).toChar().isWhitespace()
2021-03-11 20:11:45,891 [main:61] - replacement of "$a" != "A(x=1, z=null)" of type Boolean is ("fojkf").all({a: Char -> true})
2021-03-11 20:11:45,979 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:11:45,980 [main:66] - Compilation checking started
2021-03-11 20:11:46,479 [main:53] - Result = true
Text:
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if(("fojkf").all({a: Char -> true})) return "$a"
    return "OK"
}
2021-03-11 20:11:46,481 [main:53] - replacing ("$a", String)
2021-03-11 20:11:46,481 [main:50] - replacing "$a" String
2021-03-11 20:11:46,481 [main:54] - Getting value of type String
2021-03-11 20:11:46,597 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:11:46,597 [main:58] - GENERATED VALUE OF TYPE String = "zrmrb"
2021-03-11 20:11:46,598 [main:61] - GENERATED IS CALL =false
2021-03-11 20:11:46,702 [main:67] - randomType = LinkedHashSet<A>
2021-03-11 20:11:46,792 [main:302] - generating value of type = LinkedHashSet<A> false depth = 0
2021-03-11 20:11:46,898 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: A): LkedHashSet<A> = TODO()
2021-03-11 20:11:46,900 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: A): LkedHashSet<A> = TODO()
2021-03-11 20:11:47,024 [main:302] - generating value of type = A false depth = 3
2021-03-11 20:11:47,024 [main:112] - generating klass A text = data class A(var x: Int, val z: Int?)
2021-03-11 20:11:47,122 [main:194] - Type params = []
2021-03-11 20:11:47,202 [main:302] - generating value of type = Int true depth = 5
2021-03-11 20:11:47,203 [main:302] - generating value of type = Int true depth = 5
2021-03-11 20:11:47,204 [main:95] - GENERATED = linkedSetOf<A>(A(2049384702, -700500949))
2021-03-11 20:11:47,412 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@59f91ee8]
2021-03-11 20:11:47,499 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 20:11:47,609 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 20:11:47,712 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 20:11:47,714 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 20:11:47,908 [main:302] - generating value of type = String true depth = 3
2021-03-11 20:11:47,909 [main:95] - GENERATED = StringBuilder("voijw")
2021-03-11 20:11:47,987 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 20:11:48,071 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 20:11:48,072 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 20:11:48,276 [main:302] - generating value of type = String true depth = 3
2021-03-11 20:11:48,277 [main:95] - GENERATED = StringBuilder("vurzf")
2021-03-11 20:11:48,367 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:11:48,447 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 20:11:48,528 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 20:11:48,528 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 20:11:48,534 [main:78] - Generated call from random type = (linkedSetOf<A>(A(2049384702, -700500949))).joinToString("yssgs", StringBuilder("voijw"), StringBuilder("vurzf"), 748173574, "dzwth", {a: T -> StringBuilder()})
2021-03-11 20:11:48,534 [main:61] - replacement of "$a" of type String is (linkedSetOf<A>(A(2049384702, -700500949))).joinToString("yssgs", StringBuilder("voijw"), StringBuilder("vurzf"), 748173574, "dzwth", {a: T -> StringBuilder()})
2021-03-11 20:11:48,613 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:11:48,614 [main:66] - Compilation checking started
2021-03-11 20:11:48,988 [main:49] - Result = false
Text:
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if(("fojkf").all({a: Char -> true})) return (linkedSetOf<A>(A(2049384702, -700500949))).joinToString("yssgs", StringBuilder("voijw"), StringBuilder("vurzf"), 748173574, "dzwth", {a: T -> StringBuilder()})
    return "OK"
}


2021-03-11 20:11:48,989 [main:53] - replacing ("$a", String)
2021-03-11 20:11:48,989 [main:50] - replacing "$a" String
2021-03-11 20:11:48,989 [main:54] - Getting value of type String
2021-03-11 20:11:49,082 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:11:49,083 [main:58] - GENERATED VALUE OF TYPE String = "fhizb"
2021-03-11 20:11:49,083 [main:61] - GENERATED IS CALL =false
2021-03-11 20:11:49,266 [main:67] - randomType = Pair<A, Long>
2021-03-11 20:11:49,345 [main:302] - generating value of type = Pair<A, Long> false depth = 0
2021-03-11 20:11:49,428 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: A, second: Long): Pair<A, Long> = TODO()
2021-03-11 20:11:49,430 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: A, second: Long): Pair<A, Long> = TODO()
2021-03-11 20:11:49,513 [main:302] - generating value of type = A false depth = 3
2021-03-11 20:11:49,513 [main:112] - generating klass A text = data class A(var x: Int, val z: Int?)
2021-03-11 20:11:49,595 [main:194] - Type params = []
2021-03-11 20:11:49,692 [main:302] - generating value of type = Int true depth = 5
2021-03-11 20:11:49,693 [main:302] - generating value of type = Int true depth = 5
2021-03-11 20:11:49,693 [main:302] - generating value of type = Long true depth = 3
2021-03-11 20:11:49,694 [main:95] - GENERATED = Pair<A, Long>(A(-522433002, -1449634168), 991507257016344092)
2021-03-11 20:11:49,716 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]
2021-03-11 20:11:49,805 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:11:49,807 [main:78] - Generated call from random type = (Pair<A, Long>(A(-522433002, -1449634168), 991507257016344092)).second.toString(-1260261450)
2021-03-11 20:11:49,808 [main:106] - GETTING String from Int?
2021-03-11 20:11:49,892 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@719e1c26], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:11:49,893 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@719e1c26]
2021-03-11 20:11:49,894 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:11:49,895 [main:117] - GENERATED CALL = (A(-1561733152, 1015913749).z).compareTo(A(-1561733152, 1015913749).x).toString(A(-1561733152, 1015913749).x)
2021-03-11 20:11:49,895 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@a00b4a6], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]]
2021-03-11 20:11:49,895 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@a00b4a6]
2021-03-11 20:11:49,896 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]
2021-03-11 20:11:49,995 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:11:49,997 [main:117] - GENERATED CALL = (A(-1561733152, 1015913749).z).toLong().toString(1157802350)
2021-03-11 20:11:49,997 [main:113] - Case = [public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ae52aa2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:11:49,997 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ae52aa2]
2021-03-11 20:11:49,998 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:11:49,999 [main:117] - GENERATED CALL = (A(-1561733152, 1015913749).z).and(A(-1561733152, 1015913749).x).toString(A(-1561733152, 1015913749).x)
2021-03-11 20:11:49,999 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5352fcf1]]
2021-03-11 20:11:49,999 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:11:49,999 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5352fcf1]
2021-03-11 20:11:50,000 [main:117] - GENERATED CALL = (A(-1561733152, 1015913749).z).toChar().lowercase()
2021-03-11 20:11:50,000 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@638e8eca]]
2021-03-11 20:11:50,000 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:11:50,000 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@638e8eca]
2021-03-11 20:11:50,080 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:11:50,081 [main:117] - GENERATED CALL = (A(-1561733152, 1015913749).z).toChar().plus("crmra")
2021-03-11 20:11:50,081 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a33abcd], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:11:50,082 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a33abcd]
2021-03-11 20:11:50,082 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:11:50,083 [main:117] - GENERATED CALL = (A(-1561733152, 1015913749).z).toInt().toString(A(-1561733152, 1015913749).x)
2021-03-11 20:11:50,083 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e31e89]]
2021-03-11 20:11:50,083 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:11:50,084 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e31e89]
2021-03-11 20:11:50,084 [main:117] - GENERATED CALL = (A(-1561733152, 1015913749).z).toChar().titlecase()
2021-03-11 20:11:50,084 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25e54512]]
2021-03-11 20:11:50,085 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:11:50,085 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25e54512]
2021-03-11 20:11:50,086 [main:117] - GENERATED CALL = (A(-1561733152, 1015913749).z).toChar().uppercase()
2021-03-11 20:11:50,086 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@fea99d7], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d4a6f4c]]
2021-03-11 20:11:50,086 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@fea99d7]
2021-03-11 20:11:50,087 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d4a6f4c]
2021-03-11 20:11:50,087 [main:117] - GENERATED CALL = (A(-1561733152, 1015913749).z).toByte().toString(A(-1561733152, 1015913749).x)
2021-03-11 20:11:50,088 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7b71a3ab], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]]
2021-03-11 20:11:50,088 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7b71a3ab]
2021-03-11 20:11:50,194 [main:302] - generating value of type = Long true depth = 0
2021-03-11 20:11:50,195 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]
2021-03-11 20:11:50,196 [main:117] - GENERATED CALL = (A(-1561733152, 1015913749).z).div(5615902364375005406).toString(A(-1561733152, 1015913749).x)
2021-03-11 20:11:50,196 [main:61] - replacement of "$a" of type String is (A(-1561733152, 1015913749).z).toChar().plus("crmra")
2021-03-11 20:11:50,303 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:11:50,396 [main:119] - TRYING TO REPLACE CONSTANT true
2021-03-11 20:11:50,487 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:11:50,488 [main:66] - Compilation checking started
2021-03-11 20:11:50,910 [main:53] - Result = true
Text:
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if(("fojkf").all({a: Char -> ("fojkf").all({a: Char -> true})})) return "$a"
    return "OK"
}


2021-03-11 20:11:50,935 [main:41] - AFTER TRY 0 res = data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}
2021-03-11 20:11:51,087 [main:112] - generating klass A text = data class A(var x: Int, val z: Int?)
2021-03-11 20:11:51,158 [main:194] - Type params = []
2021-03-11 20:11:51,242 [main:302] - generating value of type = Int true depth = 1
2021-03-11 20:11:51,242 [main:302] - generating value of type = Int true depth = 1
2021-03-11 20:11:51,402 [main:43] - Try №0
2021-03-11 20:11:52,483 [main:69] - Trying to insert fun box535(): String {
    val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable(prope0) as Object).getClass()

    return if (prope1 == prope2) "OK" else "$prope1 $prope2"
}
2021-03-11 20:11:52,576 [main:66] - Compilation checking started
2021-03-11 20:11:53,224 [main:103] - Trying to change 7 nodes
2021-03-11 20:11:53,224 [main:107] - replacing (prope1 == prope2, Boolean)
2021-03-11 20:11:53,227 [main:50] - replacing prope1 == prope2 Boolean
2021-03-11 20:11:53,227 [main:54] - Getting value of type Boolean
2021-03-11 20:11:53,316 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:11:53,316 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 20:11:53,317 [main:61] - GENERATED IS CALL =false
2021-03-11 20:11:53,712 [main:67] - randomType = Function2<UShort, String?, Float>
2021-03-11 20:11:53,714 [main:106] - GETTING Boolean from Int
2021-03-11 20:11:53,794 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f971e3d], public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@5987e28d]]
2021-03-11 20:11:53,794 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f971e3d]
2021-03-11 20:11:53,795 [main:149] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@5987e28d]
2021-03-11 20:11:53,795 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toFloat().isInfinite()
2021-03-11 20:11:53,796 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5e6956fa], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@13f065ac]]
2021-03-11 20:11:53,796 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5e6956fa]
2021-03-11 20:11:53,796 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@13f065ac]
2021-03-11 20:11:53,797 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toDouble().isInfinite()
2021-03-11 20:11:53,797 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57ba1828], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@13f065ac]]
2021-03-11 20:11:53,797 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57ba1828]
2021-03-11 20:11:53,889 [main:302] - generating value of type = Double true depth = 0
2021-03-11 20:11:53,890 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@13f065ac]
2021-03-11 20:11:53,891 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).div(0.22292246469985666).isInfinite()
2021-03-11 20:11:53,892 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@540774de]]
2021-03-11 20:11:53,892 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:11:53,892 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@540774de]
2021-03-11 20:11:53,893 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toChar().isSurrogate()
2021-03-11 20:11:53,893 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f971e3d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@1953167e]]
2021-03-11 20:11:53,893 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f971e3d]
2021-03-11 20:11:53,893 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@1953167e]
2021-03-11 20:11:53,994 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:11:53,995 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toFloat().equals("iqwwd")
2021-03-11 20:11:53,995 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@220c529a], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6bca329b]]
2021-03-11 20:11:53,995 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@220c529a]
2021-03-11 20:11:54,084 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:11:54,085 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6bca329b]
2021-03-11 20:11:54,171 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:11:54,172 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).equals("pdsfn").and(true)
2021-03-11 20:11:54,172 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16972bc5], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@115bb033]]
2021-03-11 20:11:54,172 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16972bc5]
2021-03-11 20:11:54,172 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@115bb033]
2021-03-11 20:11:54,258 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:11:54,259 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toShort().equals("mbcmr")
2021-03-11 20:11:54,259 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a9668d7]]
2021-03-11 20:11:54,259 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:11:54,260 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a9668d7]
2021-03-11 20:11:54,260 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toChar().isHighSurrogate()
2021-03-11 20:11:54,260 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@220c529a], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@277b0e94]]
2021-03-11 20:11:54,261 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@220c529a]
2021-03-11 20:11:54,365 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:11:54,366 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@277b0e94]
2021-03-11 20:11:54,475 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:11:54,475 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).equals("eckjh").equals("awvie")
2021-03-11 20:11:54,476 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f46b57]]
2021-03-11 20:11:54,476 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:11:54,476 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f46b57]
2021-03-11 20:11:54,476 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toChar().isDigit()
2021-03-11 20:11:54,476 [main:114] - replacement of prope1 == prope2 of type Boolean is (A(-1435118121, -1465758632).x).toChar().isDigit()
2021-03-11 20:11:54,556 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:11:54,556 [main:66] - Compilation checking started
2021-03-11 20:11:54,922 [main:53] - Result = true
Text:
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable(prope0) as Object).getClass()

    return if ((A(-1435118121, -1465758632).x).toChar().isDigit()) "OK" else "$prope1 $prope2"
}


2021-03-11 20:11:54,923 [main:107] - replacing ("OK", String)
2021-03-11 20:11:54,923 [main:50] - replacing "OK" String
2021-03-11 20:11:54,923 [main:54] - Getting value of type String
2021-03-11 20:11:55,002 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:11:55,003 [main:58] - GENERATED VALUE OF TYPE String = "zfdvw"
2021-03-11 20:11:55,003 [main:61] - GENERATED IS CALL =false
2021-03-11 20:11:55,004 [main:67] - randomType = String
2021-03-11 20:11:55,087 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:11:55,110 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@272269b3]
2021-03-11 20:11:55,192 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:11:55,193 [main:78] - Generated call from random type = ("bdolk").plus("kzkum")
2021-03-11 20:11:55,194 [main:106] - GETTING String from Int
2021-03-11 20:11:55,262 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@719e1c26], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:11:55,263 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@719e1c26]
2021-03-11 20:11:55,263 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:11:55,264 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).compareTo(A(-1435118121, -1465758632).x).toString(A(-1435118121, -1465758632).x)
2021-03-11 20:11:55,264 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e31e89]]
2021-03-11 20:11:55,264 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:11:55,264 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e31e89]
2021-03-11 20:11:55,264 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toChar().titlecase()
2021-03-11 20:11:55,265 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7b71a3ab], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]]
2021-03-11 20:11:55,265 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7b71a3ab]
2021-03-11 20:11:55,354 [main:302] - generating value of type = Long true depth = 0
2021-03-11 20:11:55,354 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]
2021-03-11 20:11:55,440 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:11:55,441 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).div(3647109644710179405).toString(359304759)
2021-03-11 20:11:55,441 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5352fcf1]]
2021-03-11 20:11:55,441 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:11:55,441 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5352fcf1]
2021-03-11 20:11:55,441 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toChar().lowercase()
2021-03-11 20:11:55,441 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@a00b4a6], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]]
2021-03-11 20:11:55,442 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@a00b4a6]
2021-03-11 20:11:55,442 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]
2021-03-11 20:11:55,442 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toLong().toString(A(-1435118121, -1465758632).x)
2021-03-11 20:11:55,442 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@fea99d7], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d4a6f4c]]
2021-03-11 20:11:55,442 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@fea99d7]
2021-03-11 20:11:55,443 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d4a6f4c]
2021-03-11 20:11:55,529 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:11:55,530 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toByte().toString(429199318)
2021-03-11 20:11:55,530 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:11:55,530 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:11:55,531 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toString(A(-1435118121, -1465758632).x)
2021-03-11 20:11:55,531 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16972bc5], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa4447]]
2021-03-11 20:11:55,531 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16972bc5]
2021-03-11 20:11:55,531 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa4447]
2021-03-11 20:11:55,531 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toShort().toString(A(-1435118121, -1465758632).x)
2021-03-11 20:11:55,531 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a33abcd], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:11:55,531 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a33abcd]
2021-03-11 20:11:55,532 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:11:55,532 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toInt().toString(A(-1435118121, -1465758632).x)
2021-03-11 20:11:55,532 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@638e8eca]]
2021-03-11 20:11:55,532 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:11:55,532 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@638e8eca]
2021-03-11 20:11:55,616 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:11:55,617 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toChar().plus("klfee")
2021-03-11 20:11:55,617 [main:114] - replacement of "OK" of type String is (A(-1435118121, -1465758632).x).toChar().titlecase()
2021-03-11 20:11:55,698 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:11:55,699 [main:66] - Compilation checking started
2021-03-11 20:11:56,053 [main:53] - Result = true
Text:
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable(prope0) as Object).getClass()

    return if ((A(-1435118121, -1465758632).x).toChar().isDigit()) (A(-1435118121, -1465758632).x).toChar().titlecase() else "$prope1 $prope2"
}


2021-03-11 20:11:56,053 [main:107] - replacing (prope0, Function0<Unit>)
2021-03-11 20:11:56,054 [main:50] - replacing prope0 Function0<Unit>
2021-03-11 20:11:56,054 [main:54] - Getting value of type Function0<Unit>
2021-03-11 20:11:56,155 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 20:11:56,155 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:11:56,259 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:11:56,260 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:11:56,529 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 20:11:56,530 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 20:11:56,530 [main:302] - generating value of type = Any false depth = 5
2021-03-11 20:11:56,531 [main:95] - GENERATED = check(false, { "xdvef"})
2021-03-11 20:11:56,531 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "xdvef"})}
2021-03-11 20:11:56,531 [main:61] - GENERATED IS CALL =false
2021-03-11 20:11:56,726 [main:67] - randomType = LinkedHashMap<A, Long>
2021-03-11 20:11:56,813 [main:302] - generating value of type = LinkedHashMap<A, Long> false depth = 0
2021-03-11 20:11:56,904 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<A, Long> = TODO()
2021-03-11 20:11:56,906 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<A, Long> = TODO()
2021-03-11 20:11:57,019 [main:95] - GENERATED = linkedMapOf<A, Long>()
2021-03-11 20:11:57,223 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:11:57,281 [main:106] - GETTING Function0<Unit> from Int?
2021-03-11 20:11:57,339 [main:114] - replacement of prope0 of type Function0<Unit> is { check(false, { "xdvef"})}
2021-03-11 20:11:57,427 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:11:57,428 [main:66] - Compilation checking started
2021-03-11 20:11:57,815 [main:53] - Result = true
Text:
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check(false, { "xdvef"})}) as Object).getClass()

    return if ((A(-1435118121, -1465758632).x).toChar().isDigit()) (A(-1435118121, -1465758632).x).toChar().titlecase() else "$prope1 $prope2"
}


2021-03-11 20:11:57,914 [main:141] - TRYING TO REPLACE CONSTANT 1435118121
2021-03-11 20:11:58,017 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PARENTHESIZED)
2021-03-11 20:11:58,017 [main:66] - Compilation checking started
2021-03-11 20:11:58,421 [main:53] - Result = true
Text:
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check(false, { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), -1465758632).x).toChar().isDigit()) (A(-1435118121, -1465758632).x).toChar().titlecase() else "$prope1 $prope2"
}


2021-03-11 20:11:58,421 [main:141] - TRYING TO REPLACE CONSTANT 1465758632
2021-03-11 20:11:58,515 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 20:11:58,515 [main:66] - Compilation checking started
2021-03-11 20:11:58,898 [main:53] - Result = true
Text:
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check(false, { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(-1435118121, -1465758632).x).toChar().titlecase() else "$prope1 $prope2"
}


2021-03-11 20:11:58,898 [main:141] - TRYING TO REPLACE CONSTANT 1435118121
2021-03-11 20:11:58,990 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 20:11:58,990 [main:66] - Compilation checking started
2021-03-11 20:11:59,397 [main:53] - Result = true
Text:
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check(false, { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, -1465758632).x).toChar().titlecase() else "$prope1 $prope2"
}


2021-03-11 20:11:59,397 [main:141] - TRYING TO REPLACE CONSTANT 1465758632
2021-03-11 20:11:59,484 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PARENTHESIZED)
2021-03-11 20:11:59,484 [main:66] - Compilation checking started
2021-03-11 20:11:59,860 [main:53] - Result = true
Text:
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check(false, { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}


2021-03-11 20:11:59,861 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-11 20:11:59,976 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:11:59,976 [main:66] - Compilation checking started
2021-03-11 20:12:00,352 [main:53] - Result = true
Text:
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}


2021-03-11 20:12:00,352 [main:41] - AFTER TRY 1 res = data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}


2021-03-11 20:12:00,555 [main:112] - generating klass A text = data class A(var x: Int, val z: Int?)
2021-03-11 20:12:00,665 [main:194] - Type params = []
2021-03-11 20:12:00,788 [main:302] - generating value of type = Int true depth = 1
2021-03-11 20:12:00,789 [main:302] - generating value of type = Int true depth = 1
2021-03-11 20:12:00,989 [main:43] - Try №1
2021-03-11 20:12:12,178 [main:48] - Already checked
2021-03-11 20:12:16,271 [main:69] - Trying to insert fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
2021-03-11 20:12:16,371 [main:66] - Compilation checking started
2021-03-11 20:12:17,485 [main:103] - Trying to change 141 nodes
2021-03-11 20:12:17,485 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got ", String)
2021-03-11 20:12:17,488 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " String
2021-03-11 20:12:17,489 [main:54] - Getting value of type String
2021-03-11 20:12:17,649 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:12:17,654 [main:58] - GENERATED VALUE OF TYPE String = "eppyu"
2021-03-11 20:12:17,654 [main:61] - GENERATED IS CALL =false
2021-03-11 20:12:18,060 [main:67] - randomType = Pair<UInt, Kla2>
2021-03-11 20:12:18,217 [main:302] - generating value of type = Pair<UInt, Kla2> false depth = 0
2021-03-11 20:12:18,398 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: UInt, second: Kla2): Pair<UInt, Kla2> = TODO()
2021-03-11 20:12:18,403 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: UInt, second: Kla2): Pair<UInt, Kla2> = TODO()
2021-03-11 20:12:18,560 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 20:12:18,563 [main:302] - generating value of type = Kla2 false depth = 3
2021-03-11 20:12:18,566 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}
2021-03-11 20:12:18,566 [main:95] - GENERATED = Pair<UInt, Kla2>(542154729.toUInt(), Kla2())
2021-03-11 20:12:18,583 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f5bdbad]
2021-03-11 20:12:18,726 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:12:18,729 [main:78] - Generated call from random type = (Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141)
2021-03-11 20:12:18,729 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " of type String is (Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141)
2021-03-11 20:12:18,872 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:12:18,872 [main:66] - Compilation checking started
2021-03-11 20:12:19,606 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box727(): String {
    fu1 {
        fu0 {
            prope4.fu11()
            prope4.fu11()
        }
    }
    prope4.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:12:19,609 [main:107] - replacing (prope6, Result<Any?>)
2021-03-11 20:12:19,611 [main:50] - replacing prope6 Result<Any?>
2021-03-11 20:12:19,611 [main:54] - Getting value of type Result<Any?>
2021-03-11 20:12:19,769 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-11 20:12:19,918 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 20:12:19,922 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 20:12:20,272 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-11 20:12:20,276 [main:302] - generating value of type = Any false depth = 4
2021-03-11 20:12:20,277 [main:95] - GENERATED = runCatching<Any?>({ "vwvko"})
2021-03-11 20:12:20,277 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "vwvko"})
2021-03-11 20:12:20,277 [main:61] - GENERATED IS CALL =true
2021-03-11 20:12:20,283 [main:67] - randomType = Int
2021-03-11 20:12:20,433 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:12:20,487 [main:106] - GETTING Result<Any?> from Int?
2021-03-11 20:12:20,547 [main:106] - GETTING Result<Any?> from Int
2021-03-11 20:12:20,605 [main:106] - GETTING Result<Any?> from Int
2021-03-11 20:12:20,607 [main:106] - GETTING Result<Any?> from A
2021-03-11 20:12:20,618 [main:106] - GETTING Result<Any?> from Int
2021-03-11 20:12:20,620 [main:106] - GETTING Result<Any?> from Char
2021-03-11 20:12:20,643 [main:106] - GETTING Result<Any?> from Char
2021-03-11 20:12:20,645 [main:106] - GETTING Result<Any?> from Int
2021-03-11 20:12:20,646 [main:106] - GETTING Result<Any?> from Int
2021-03-11 20:12:20,647 [main:106] - GETTING Result<Any?> from A
2021-03-11 20:12:20,648 [main:106] - GETTING Result<Any?> from A
2021-03-11 20:12:20,650 [main:106] - GETTING Result<Any?> from Int
2021-03-11 20:12:20,650 [main:114] - replacement of prope6 of type Result<Any?> is runCatching<Any?>({ "vwvko"})
2021-03-11 20:12:20,798 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:12:20,798 [main:66] - Compilation checking started
2021-03-11 20:12:21,612 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box727(): String {
    fu1 {
        fu0 {
            prope4.fu11()
            prope4.fu11()
        }
    }
    prope4.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
runCatching<Any?>({ "vwvko"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:12:21,614 [main:107] - replacing (prope9, Boolean)
2021-03-11 20:12:21,615 [main:50] - replacing prope9 Boolean
2021-03-11 20:12:21,615 [main:54] - Getting value of type Boolean
2021-03-11 20:12:21,777 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:12:21,780 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 20:12:21,780 [main:61] - GENERATED IS CALL =false
2021-03-11 20:12:21,974 [main:67] - randomType = Byte
2021-03-11 20:12:22,156 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:12:22,198 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2568d45a]
2021-03-11 20:12:22,199 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66ade11]
2021-03-11 20:12:22,199 [main:78] - Generated call from random type = (-16).toChar().isDefined()
2021-03-11 20:12:22,200 [main:106] - GETTING Boolean from Int
2021-03-11 20:12:22,240 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57ba1828], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4094dfbc]]
2021-03-11 20:12:22,240 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57ba1828]
2021-03-11 20:12:22,435 [main:302] - generating value of type = Double true depth = 0
2021-03-11 20:12:22,438 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4094dfbc]
2021-03-11 20:12:22,601 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:12:22,601 [main:117] - GENERATED CALL = ((A((A(-1435118121, -1465758632).x), 1465758632).x)).div(0.8725874697420583).equals("opsqm")
2021-03-11 20:12:22,601 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ea9efde]]
2021-03-11 20:12:22,601 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:12:22,602 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ea9efde]
2021-03-11 20:12:22,602 [main:117] - GENERATED CALL = ((A((A(-1435118121, -1465758632).x), 1465758632).x)).toChar().isUpperCase()
2021-03-11 20:12:22,602 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@fea99d7], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2a45c12]]
2021-03-11 20:12:22,602 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@fea99d7]
2021-03-11 20:12:22,602 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2a45c12]
2021-03-11 20:12:22,797 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:12:22,798 [main:117] - GENERATED CALL = ((A((A(-1435118121, -1465758632).x), 1465758632).x)).toByte().equals("rfpkw")
2021-03-11 20:12:22,798 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f971e3d], public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@5987e28d]]
2021-03-11 20:12:22,799 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f971e3d]
2021-03-11 20:12:22,799 [main:149] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@5987e28d]
2021-03-11 20:12:22,799 [main:117] - GENERATED CALL = ((A((A(-1435118121, -1465758632).x), 1465758632).x)).toFloat().isInfinite()
2021-03-11 20:12:22,799 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a9668d7]]
2021-03-11 20:12:22,799 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:12:22,799 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a9668d7]
2021-03-11 20:12:22,800 [main:117] - GENERATED CALL = ((A((A(-1435118121, -1465758632).x), 1465758632).x)).toChar().isHighSurrogate()
2021-03-11 20:12:22,800 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57ba1828], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3cd0df14]]
2021-03-11 20:12:22,800 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57ba1828]
2021-03-11 20:12:22,983 [main:302] - generating value of type = Double true depth = 0
2021-03-11 20:12:22,988 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3cd0df14]
2021-03-11 20:12:22,988 [main:117] - GENERATED CALL = ((A((A(-1435118121, -1465758632).x), 1465758632).x)).div(0.7860576710344582).isFinite()
2021-03-11 20:12:22,988 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@682d5403], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@99bff40]]
2021-03-11 20:12:22,989 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@682d5403]
2021-03-11 20:12:23,147 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:12:23,150 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@99bff40]
2021-03-11 20:12:23,307 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:12:23,310 [main:117] - GENERATED CALL = ((A((A(-1435118121, -1465758632).x), 1465758632).x)).rangeTo(100).contains(344780916)
2021-03-11 20:12:23,310 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5e6956fa], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@13f065ac]]
2021-03-11 20:12:23,310 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5e6956fa]
2021-03-11 20:12:23,310 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@13f065ac]
2021-03-11 20:12:23,310 [main:117] - GENERATED CALL = ((A((A(-1435118121, -1465758632).x), 1465758632).x)).toDouble().isInfinite()
2021-03-11 20:12:23,310 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@641ccc76]]
2021-03-11 20:12:23,310 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:12:23,311 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@641ccc76]
2021-03-11 20:12:23,311 [main:117] - GENERATED CALL = ((A((A(-1435118121, -1465758632).x), 1465758632).x)).toChar().isTitleCase()
2021-03-11 20:12:23,311 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57ba1828], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@13f065ac]]
2021-03-11 20:12:23,311 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57ba1828]
2021-03-11 20:12:23,455 [main:302] - generating value of type = Double true depth = 0
2021-03-11 20:12:23,460 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@13f065ac]
2021-03-11 20:12:23,460 [main:117] - GENERATED CALL = ((A((A(-1435118121, -1465758632).x), 1465758632).x)).div(0.4202009958781755).isInfinite()
2021-03-11 20:12:23,461 [main:114] - replacement of prope9 of type Boolean is ((A((A(-1435118121, -1465758632).x), 1465758632).x)).div(0.8725874697420583).equals("opsqm")
2021-03-11 20:12:23,642 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:12:23,642 [main:66] - Compilation checking started
2021-03-11 20:12:24,111 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box727(): String {
    fu1 {
        fu0 {
            prope4.fu11()
            prope4.fu11()
        }
    }
    prope4.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
runCatching<Any?>({ "vwvko"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        ((A((A(-1435118121, -1465758632).x), 1465758632).x)).div(0.8725874697420583).equals("opsqm") = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:12:24,114 [main:107] - replacing (prope8, Int)
2021-03-11 20:12:24,114 [main:50] - replacing prope8 Int
2021-03-11 20:12:24,114 [main:54] - Getting value of type Int
2021-03-11 20:12:24,270 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:12:24,273 [main:58] - GENERATED VALUE OF TYPE Int = -587726620
2021-03-11 20:12:24,273 [main:61] - GENERATED IS CALL =false
2021-03-11 20:12:24,438 [main:67] - randomType = Kla4?
2021-03-11 20:12:24,571 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 20:12:24,574 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}
2021-03-11 20:12:24,583 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla4[DeserializedSimpleFunctionDescriptor@5f97eead]
2021-03-11 20:12:24,716 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:12:24,716 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@355a0cfb]
2021-03-11 20:12:24,855 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:12:24,858 [main:78] - Generated call from random type = (Kla4())?.equals("fibjy").compareTo(true)
2021-03-11 20:12:24,859 [main:106] - GETTING Int from A
2021-03-11 20:12:24,872 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@62601b72], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5715e1dd]]
2021-03-11 20:12:24,873 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5715e1dd]
2021-03-11 20:12:24,873 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.or(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)
2021-03-11 20:12:24,873 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@62601b72], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4226618c]]
2021-03-11 20:12:24,873 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4226618c]
2021-03-11 20:12:25,019 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:12:25,023 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.div(71)
2021-03-11 20:12:25,023 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@62601b72], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4cbb519f]]
2021-03-11 20:12:25,023 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4cbb519f]
2021-03-11 20:12:25,189 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:12:25,193 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.coerceIn((A((A(-1435118121, -1465758632).x), 1465758632).x), -418675407)
2021-03-11 20:12:25,193 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@62601b72], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4110a187]]
2021-03-11 20:12:25,193 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4110a187]
2021-03-11 20:12:25,194 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.dec()
2021-03-11 20:12:25,194 [main:113] - Case = [public final val z: kotlin.Int? defined in A[PropertyDescriptorImpl@6ea53851], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4110a187]]
2021-03-11 20:12:25,194 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4110a187]
2021-03-11 20:12:25,194 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).z?.dec()
2021-03-11 20:12:25,194 [main:113] - Case = [public final val z: kotlin.Int? defined in A[PropertyDescriptorImpl@6ea53851], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24fa8]]
2021-03-11 20:12:25,194 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24fa8]
2021-03-11 20:12:25,342 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:12:25,345 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).z?.rem(-36)
2021-03-11 20:12:25,345 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@62601b72], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24fa8]]
2021-03-11 20:12:25,345 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@24fa8]
2021-03-11 20:12:25,483 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:12:25,486 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.rem(61)
2021-03-11 20:12:25,487 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@62601b72], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@747a393e]]
2021-03-11 20:12:25,487 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@747a393e]
2021-03-11 20:12:25,621 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:12:25,625 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.compareTo(43)
2021-03-11 20:12:25,625 [main:113] - Case = [public final val z: kotlin.Int? defined in A[PropertyDescriptorImpl@6ea53851], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1a49f8b8]]
2021-03-11 20:12:25,625 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1a49f8b8]
2021-03-11 20:12:25,625 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).z?.inv()
2021-03-11 20:12:25,625 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@62601b72], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@783a8ec4]]
2021-03-11 20:12:25,625 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@783a8ec4]
2021-03-11 20:12:25,625 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.takeLowestOneBit()
2021-03-11 20:12:25,625 [main:114] - replacement of prope8 of type Int is (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.rem(61)
2021-03-11 20:12:25,761 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:12:25,762 [main:66] - Compilation checking started
2021-03-11 20:12:26,159 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box727(): String {
    fu1 {
        fu0 {
            prope4.fu11()
            prope4.fu11()
        }
    }
    prope4.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
runCatching<Any?>({ "vwvko"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.rem(61)++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:12:26,161 [main:107] - replacing (prope4.prope10, Function0<Unit>)
2021-03-11 20:12:26,162 [main:50] - replacing prope4.prope10 Function0<Unit>
2021-03-11 20:12:26,162 [main:54] - Getting value of type Function0<Unit>
2021-03-11 20:12:26,297 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 20:12:26,300 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:12:26,455 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 20:12:26,459 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 20:12:26,798 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 20:12:26,802 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 20:12:26,809 [main:95] - GENERATED = contract({ println()})
2021-03-11 20:12:26,809 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ println()})}
2021-03-11 20:12:26,810 [main:61] - GENERATED IS CALL =false
2021-03-11 20:12:26,823 [main:67] - randomType = Kla1
2021-03-11 20:12:26,968 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 20:12:26,972 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}
2021-03-11 20:12:27,116 [main:194] - Type params = []
2021-03-11 20:12:27,254 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 20:12:27,404 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:12:27,408 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:12:27,756 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 20:12:27,902 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:12:27,906 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:12:28,397 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-11 20:12:28,560 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:12:28,565 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:12:29,031 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:12:29,031 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:12:29,031 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:12:29,049 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:12:29,130 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 20:12:29,156 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:12:29,158 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:12:29,159 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:12:29,159 [main:106] - GETTING Function0<Unit> from Int?
2021-03-11 20:12:29,203 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 20:12:29,204 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:12:29,205 [main:106] - GETTING Function0<Unit> from A
2021-03-11 20:12:29,213 [main:106] - GETTING Function0<Unit> from A
2021-03-11 20:12:29,214 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:12:29,215 [main:106] - GETTING Function0<Unit> from A
2021-03-11 20:12:29,215 [main:114] - replacement of prope4.prope10 of type Function0<Unit> is { contract({ println()})}
2021-03-11 20:12:29,349 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:12:29,349 [main:66] - Compilation checking started
2021-03-11 20:12:29,746 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box727(): String {
    fu1 {
        fu0 {
            prope4.fu11()
            prope4.fu11()
        }
    }
    prope4.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
runCatching<Any?>({ "vwvko"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
{ contract({ println()})} = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:12:29,748 [main:107] - replacing (prope8, Int)
2021-03-11 20:12:29,748 [main:50] - replacing prope8 Int
2021-03-11 20:12:29,748 [main:54] - Getting value of type Int
2021-03-11 20:12:29,883 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:12:29,886 [main:58] - GENERATED VALUE OF TYPE Int = -1142017370
2021-03-11 20:12:29,886 [main:61] - GENERATED IS CALL =false
2021-03-11 20:12:30,052 [main:67] - randomType = UShort
2021-03-11 20:12:30,193 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 20:12:30,256 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@7a2eea86]
2021-03-11 20:12:30,388 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 20:12:30,392 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@783a8ec4]
2021-03-11 20:12:30,393 [main:78] - Generated call from random type = (11323.toUShort()).compareTo(98.toUByte()).takeLowestOneBit()
2021-03-11 20:12:30,394 [main:106] - GETTING Int from Char
2021-03-11 20:12:30,414 [main:113] - Case = [public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@46c22594]]
2021-03-11 20:12:30,414 [main:149] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@46c22594]
2021-03-11 20:12:30,414 [main:117] - GENERATED CALL = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toInt()
2021-03-11 20:12:30,414 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@697b1b46], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7893e5a8]]
2021-03-11 20:12:30,414 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@697b1b46]
2021-03-11 20:12:30,414 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7893e5a8]
2021-03-11 20:12:30,415 [main:117] - GENERATED CALL = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).rotateLeft(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)
2021-03-11 20:12:30,415 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@697b1b46], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@191ff7d2]]
2021-03-11 20:12:30,415 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@697b1b46]
2021-03-11 20:12:30,549 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:12:30,553 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@191ff7d2]
2021-03-11 20:12:30,554 [main:117] - GENERATED CALL = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('?').countLeadingZeroBits()
2021-03-11 20:12:30,554 [main:113] - Case = [public final fun toDouble(): kotlin.Double defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@142c4dd6], @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@42a073c1]]
2021-03-11 20:12:30,554 [main:149] - GENERATING call of type public final fun toDouble(): kotlin.Double defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@142c4dd6]
2021-03-11 20:12:30,554 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@42a073c1]
2021-03-11 20:12:30,555 [main:117] - GENERATED CALL = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toDouble().roundToInt()
2021-03-11 20:12:30,555 [main:113] - Case = [public final fun toFloat(): kotlin.Float defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5b3ab554], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@b32dbea]]
2021-03-11 20:12:30,555 [main:149] - GENERATING call of type public final fun toFloat(): kotlin.Float defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5b3ab554]
2021-03-11 20:12:30,555 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@b32dbea]
2021-03-11 20:12:30,555 [main:117] - GENERATED CALL = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toFloat().toRawBits()
2021-03-11 20:12:30,555 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@697b1b46], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7c81fec0]]
2021-03-11 20:12:30,555 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@697b1b46]
2021-03-11 20:12:30,697 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:12:30,700 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7c81fec0]
2021-03-11 20:12:30,701 [main:117] - GENERATED CALL = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('擹').coerceAtLeast(A((A(-1435118121, -1465758632).x), 1465758632).x)
2021-03-11 20:12:30,701 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@697b1b46], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5715e1dd]]
2021-03-11 20:12:30,701 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@697b1b46]
2021-03-11 20:12:30,701 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5715e1dd]
2021-03-11 20:12:30,702 [main:117] - GENERATED CALL = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).or(A(1920083034, 1486922171).x)
2021-03-11 20:12:30,702 [main:113] - Case = [public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@53b6d9], public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@62d6611a]]
2021-03-11 20:12:30,702 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@53b6d9]
2021-03-11 20:12:30,702 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@62d6611a]
2021-03-11 20:12:30,832 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:12:30,836 [main:117] - GENERATED CALL = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().compareTo(52)
2021-03-11 20:12:30,836 [main:113] - Case = [public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@27446428], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@20ad6dcd]]
2021-03-11 20:12:30,836 [main:149] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@27446428]
2021-03-11 20:12:30,836 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@20ad6dcd]
2021-03-11 20:12:30,969 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:12:30,973 [main:117] - GENERATED CALL = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toShort().plus(112)
2021-03-11 20:12:30,973 [main:113] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5170c12d], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@10765e11]]
2021-03-11 20:12:30,973 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5170c12d]
2021-03-11 20:12:30,973 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@10765e11]
2021-03-11 20:12:30,973 [main:117] - GENERATED CALL = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits()
2021-03-11 20:12:30,973 [main:114] - replacement of prope8 of type Int is ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits()
2021-03-11 20:12:31,110 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:12:31,110 [main:66] - Compilation checking started
2021-03-11 20:12:31,864 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box727(): String {
    fu1 {
        fu0 {
            prope4.fu11()
            prope4.fu11()
        }
    }
    prope4.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
runCatching<Any?>({ "vwvko"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:12:31,867 [main:107] - replacing (true, Boolean)
2021-03-11 20:12:31,868 [main:50] - replacing true Boolean
2021-03-11 20:12:31,868 [main:54] - Getting value of type Boolean
2021-03-11 20:12:32,013 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:12:32,016 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 20:12:32,016 [main:61] - GENERATED IS CALL =false
2021-03-11 20:12:32,986 [main:67] - randomType = Pair<Kla3<ULong>, ULong?>?
2021-03-11 20:12:33,135 [main:302] - generating value of type = Pair<Kla3<ULong>, ULong?> false depth = 0
2021-03-11 20:12:33,275 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla3<ULong>, second: ULong?): Pair<Kla3<ULong>, ULong?> = TODO()
2021-03-11 20:12:33,279 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla3<ULong>, second: ULong?): Pair<Kla3<ULong>, ULong?> = TODO()
2021-03-11 20:12:33,416 [main:302] - generating value of type = Kla3<ULong> false depth = 3
2021-03-11 20:12:33,419 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 20:12:34,042 [main:302] - generating value of type = Kla6 false depth = 5
2021-03-11 20:12:34,045 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-11 20:12:34,045 [main:302] - generating value of type = ULong true depth = 3
2021-03-11 20:12:34,048 [main:95] - GENERATED = Pair<Kla3<ULong>, ULong?>(Kla6, 727369431519679133.toULong())
2021-03-11 20:12:34,072 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Pair[DeserializedSimpleFunctionDescriptor@5ec28b50]
2021-03-11 20:12:34,199 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:12:34,199 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6bca329b]
2021-03-11 20:12:34,324 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:12:34,328 [main:78] - Generated call from random type = (Pair<Kla3<ULong>, ULong?>(Kla6, 727369431519679133.toULong()))?.equals("xhdgu").and(false)
2021-03-11 20:12:34,330 [main:106] - GETTING Boolean from A
2021-03-11 20:12:34,340 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[SimpleFunctionDescriptorImpl@495e4cbb], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@572d41a1]]
2021-03-11 20:12:34,340 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[SimpleFunctionDescriptorImpl@495e4cbb]
2021-03-11 20:12:34,479 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:12:34,479 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@572d41a1]
2021-03-11 20:12:34,479 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632)).equals("qmfpg").not()
2021-03-11 20:12:34,479 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[SimpleFunctionDescriptorImpl@495e4cbb]]
2021-03-11 20:12:34,480 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[SimpleFunctionDescriptorImpl@495e4cbb]
2021-03-11 20:12:34,620 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:12:34,621 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632)).equals("hkenc")
2021-03-11 20:12:34,621 [main:113] - Case = [public final val z: kotlin.Int? defined in A[PropertyDescriptorImpl@6ea53851], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@220c529a]]
2021-03-11 20:12:34,621 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@220c529a]
2021-03-11 20:12:34,750 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:12:34,750 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632)).z?.equals("sffky")
2021-03-11 20:12:34,750 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[SimpleFunctionDescriptorImpl@495e4cbb], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6f2d3666]]
2021-03-11 20:12:34,751 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[SimpleFunctionDescriptorImpl@495e4cbb]
2021-03-11 20:12:34,875 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:12:34,875 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6f2d3666]
2021-03-11 20:12:35,000 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:12:35,003 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632)).equals("wcdnr").xor(true)
2021-03-11 20:12:35,003 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[SimpleFunctionDescriptorImpl@495e4cbb], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6bca329b]]
2021-03-11 20:12:35,003 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[SimpleFunctionDescriptorImpl@495e4cbb]
2021-03-11 20:12:35,147 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:12:35,148 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6bca329b]
2021-03-11 20:12:35,283 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:12:35,286 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632)).equals("kquew").and(false)
2021-03-11 20:12:35,286 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[SimpleFunctionDescriptorImpl@495e4cbb], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@32f5a26b]]
2021-03-11 20:12:35,287 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[SimpleFunctionDescriptorImpl@495e4cbb]
2021-03-11 20:12:35,418 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:12:35,419 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@32f5a26b]
2021-03-11 20:12:35,542 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:12:35,546 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632)).equals("wbfpj").or(false)
2021-03-11 20:12:35,546 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@62601b72], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@220c529a]]
2021-03-11 20:12:35,546 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@220c529a]
2021-03-11 20:12:35,681 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:12:35,681 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632)).x.equals("yjbxx")
2021-03-11 20:12:35,682 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[SimpleFunctionDescriptorImpl@495e4cbb], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@277b0e94]]
2021-03-11 20:12:35,682 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[SimpleFunctionDescriptorImpl@495e4cbb]
2021-03-11 20:12:35,821 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:12:35,822 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@277b0e94]
2021-03-11 20:12:35,962 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:12:35,962 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632)).equals("lknqs").equals("fzuyk")
2021-03-11 20:12:35,962 [main:114] - replacement of true of type Boolean is (Pair<Kla3<ULong>, ULong?>(Kla6, 727369431519679133.toULong()))?.equals("xhdgu").and(false)
2021-03-11 20:12:36,098 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:12:36,099 [main:66] - Compilation checking started
2021-03-11 20:12:36,541 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box727(): String {
    fu1 {
        fu0 {
            prope4.fu11()
            prope4.fu11()
        }
    }
    prope4.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
runCatching<Any?>({ "vwvko"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { it?.methodName?.startsWith(method) == (Pair<Kla3<ULong>, ULong?>(Kla6, 727369431519679133.toULong()))?.equals("xhdgu").and(false) }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:12:36,543 [main:107] - replacing (prope4, Kla5)
2021-03-11 20:12:36,544 [main:50] - replacing prope4 Kla5
2021-03-11 20:12:36,544 [main:54] - Getting value of type Kla5
2021-03-11 20:12:36,692 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 20:12:36,696 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 20:12:36,696 [main:58] - GENERATED VALUE OF TYPE Kla5 = Kla5()
2021-03-11 20:12:36,696 [main:61] - GENERATED IS CALL =true
2021-03-11 20:12:36,849 [main:67] - randomType = Short
2021-03-11 20:12:36,976 [main:302] - generating value of type = Short true depth = 0
2021-03-11 20:12:37,027 [main:106] - GETTING Kla5 from Char
2021-03-11 20:12:37,057 [main:106] - GETTING Kla5 from Int
2021-03-11 20:12:37,113 [main:106] - GETTING Kla5 from Int
2021-03-11 20:12:37,114 [main:106] - GETTING Kla5 from Char
2021-03-11 20:12:37,115 [main:106] - GETTING Kla5 from Int
2021-03-11 20:12:37,116 [main:106] - GETTING Kla5 from Int?
2021-03-11 20:12:37,178 [main:106] - GETTING Kla5 from Int
2021-03-11 20:12:37,179 [main:106] - GETTING Kla5 from Int
2021-03-11 20:12:37,180 [main:106] - GETTING Kla5 from Int
2021-03-11 20:12:37,181 [main:106] - GETTING Kla5 from A
2021-03-11 20:12:37,193 [main:106] - GETTING Kla5 from A
2021-03-11 20:12:37,194 [main:106] - GETTING Kla5 from A
2021-03-11 20:12:37,194 [main:114] - replacement of prope4 of type Kla5 is Kla5()
2021-03-11 20:12:37,331 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:12:37,332 [main:66] - Compilation checking started
2021-03-11 20:12:38,070 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 {
            prope4.fu11()
            Kla5().fu11()
        }
    }
    prope4.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
runCatching<Any?>({ "vwvko"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:12:38,074 [main:107] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got ", String)
2021-03-11 20:12:38,074 [main:50] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " String
2021-03-11 20:12:38,074 [main:54] - Getting value of type String
2021-03-11 20:12:38,219 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:12:38,222 [main:58] - GENERATED VALUE OF TYPE String = "lveon"
2021-03-11 20:12:38,222 [main:61] - GENERATED IS CALL =false
2021-03-11 20:12:38,229 [main:67] - randomType = Boolean
2021-03-11 20:12:38,355 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:12:38,367 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@355a0cfb]
2021-03-11 20:12:38,507 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:12:38,511 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:12:38,511 [main:78] - Generated call from random type = (false).compareTo(true).toString((A((A(-1435118121, -1465758632).x), 1465758632).x))
2021-03-11 20:12:38,512 [main:106] - GETTING String from Char
2021-03-11 20:12:38,534 [main:113] - Case = [public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@27446428], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa4447]]
2021-03-11 20:12:38,534 [main:149] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@27446428]
2021-03-11 20:12:38,535 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa4447]
2021-03-11 20:12:38,666 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:12:38,670 [main:117] - GENERATED CALL = ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).toShort().toString(810477435)
2021-03-11 20:12:38,670 [main:113] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5170c12d], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]]
2021-03-11 20:12:38,670 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5170c12d]
2021-03-11 20:12:38,670 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]
2021-03-11 20:12:38,797 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:12:38,800 [main:117] - GENERATED CALL = ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).toLong().toString(928675499)
2021-03-11 20:12:38,801 [main:113] - Case = [public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@53b6d9], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d4a6f4c]]
2021-03-11 20:12:38,801 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@53b6d9]
2021-03-11 20:12:38,801 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d4a6f4c]
2021-03-11 20:12:38,801 [main:117] - GENERATED CALL = ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).toByte().toString(A(1920083034, 1486922171).x)
2021-03-11 20:12:38,801 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5352fcf1]]
2021-03-11 20:12:38,801 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5352fcf1]
2021-03-11 20:12:38,801 [main:117] - GENERATED CALL = ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).lowercase()
2021-03-11 20:12:38,801 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e31e89]]
2021-03-11 20:12:38,802 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e31e89]
2021-03-11 20:12:38,802 [main:117] - GENERATED CALL = ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).titlecase()
2021-03-11 20:12:38,802 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25e54512]]
2021-03-11 20:12:38,802 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25e54512]
2021-03-11 20:12:38,802 [main:117] - GENERATED CALL = ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).uppercase()
2021-03-11 20:12:38,802 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@638e8eca]]
2021-03-11 20:12:38,802 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@638e8eca]
2021-03-11 20:12:38,925 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:12:38,928 [main:117] - GENERATED CALL = ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).plus("gddqb")
2021-03-11 20:12:38,928 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@697b1b46], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:12:38,928 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@697b1b46]
2021-03-11 20:12:39,051 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:12:39,054 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:12:39,178 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:12:39,182 [main:117] - GENERATED CALL = ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).compareTo('⤝').toString(1136413597)
2021-03-11 20:12:39,182 [main:114] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " of type String is ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).toShort().toString(810477435)
2021-03-11 20:12:39,305 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:12:39,305 [main:66] - Compilation checking started
2021-03-11 20:12:40,013 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 {
            prope4.fu11()
            Kla5().fu11()
        }
    }
    prope4.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
runCatching<Any?>({ "vwvko"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error(((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).toShort().toString(810477435) + prope8)
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:12:40,016 [main:107] - replacing (checkFinished, Boolean)
2021-03-11 20:12:40,016 [main:50] - replacing checkFinished Boolean
2021-03-11 20:12:40,016 [main:54] - Getting value of type Boolean
2021-03-11 20:12:40,164 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:12:40,168 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 20:12:40,168 [main:61] - GENERATED IS CALL =false
2021-03-11 20:12:40,338 [main:67] - randomType = Kla3<Kla6>
2021-03-11 20:12:40,476 [main:302] - generating value of type = Kla3<Kla6> false depth = 0
2021-03-11 20:12:40,482 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 20:12:40,943 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 20:12:40,947 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-11 20:12:40,961 [main:149] - GENERATING call of type public open fun resumeWith(prope6: kotlin.Result<Kla6>): kotlin.Unit defined in Kla3[SimpleFunctionDescriptorImpl@55a52400]
2021-03-11 20:12:41,085 [main:302] - generating value of type = Result<Kla6> false depth = 0
2021-03-11 20:12:41,218 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Kla6): Result<Kla6> = TODO()
2021-03-11 20:12:41,223 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Kla6): Result<Kla6> = TODO()
2021-03-11 20:12:41,525 [main:302] - generating value of type = Function0<Kla6> false depth = 3
2021-03-11 20:12:41,529 [main:302] - generating value of type = Kla6 false depth = 4
2021-03-11 20:12:41,532 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-11 20:12:41,532 [main:95] - GENERATED = runCatching<Kla6>({ Kla6})
2021-03-11 20:12:41,533 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@7e809a87]
2021-03-11 20:12:41,676 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:12:41,677 [main:78] - Generated call from random type = (Kla6).resumeWith(runCatching<Kla6>({ Kla6})).equals("ydzgn")
2021-03-11 20:12:41,678 [main:106] - GETTING Boolean from A
2021-03-11 20:12:41,687 [main:113] - Case = [public final val z: kotlin.Int? defined in A[PropertyDescriptorImpl@6ea53851], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@220c529a]]
2021-03-11 20:12:41,687 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@220c529a]
2021-03-11 20:12:41,819 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:12:41,819 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).z?.equals("shaqa")
2021-03-11 20:12:41,819 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[SimpleFunctionDescriptorImpl@495e4cbb], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@32f5a26b]]
2021-03-11 20:12:41,819 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[SimpleFunctionDescriptorImpl@495e4cbb]
2021-03-11 20:12:41,946 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:12:41,946 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@32f5a26b]
2021-03-11 20:12:42,075 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:12:42,079 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("nlbyq").or(false)
2021-03-11 20:12:42,079 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[SimpleFunctionDescriptorImpl@495e4cbb], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6f2d3666]]
2021-03-11 20:12:42,079 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[SimpleFunctionDescriptorImpl@495e4cbb]
2021-03-11 20:12:42,205 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:12:42,205 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6f2d3666]
2021-03-11 20:12:42,338 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:12:42,343 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("xmsqq").xor(false)
2021-03-11 20:12:42,343 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[SimpleFunctionDescriptorImpl@495e4cbb], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@572d41a1]]
2021-03-11 20:12:42,343 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[SimpleFunctionDescriptorImpl@495e4cbb]
2021-03-11 20:12:42,476 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:12:42,477 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@572d41a1]
2021-03-11 20:12:42,477 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not()
2021-03-11 20:12:42,477 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[SimpleFunctionDescriptorImpl@495e4cbb]]
2021-03-11 20:12:42,477 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[SimpleFunctionDescriptorImpl@495e4cbb]
2021-03-11 20:12:42,609 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:12:42,609 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("asirm")
2021-03-11 20:12:42,609 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[SimpleFunctionDescriptorImpl@495e4cbb], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@277b0e94]]
2021-03-11 20:12:42,609 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[SimpleFunctionDescriptorImpl@495e4cbb]
2021-03-11 20:12:42,738 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:12:42,738 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@277b0e94]
2021-03-11 20:12:42,868 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:12:42,869 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("htmpq").equals("vdadj")
2021-03-11 20:12:42,869 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@62601b72], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@220c529a]]
2021-03-11 20:12:42,869 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@220c529a]
2021-03-11 20:12:42,996 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:12:42,997 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.equals("wwciy")
2021-03-11 20:12:42,997 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[SimpleFunctionDescriptorImpl@495e4cbb], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6bca329b]]
2021-03-11 20:12:42,997 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[SimpleFunctionDescriptorImpl@495e4cbb]
2021-03-11 20:12:43,143 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6bca329b]
2021-03-11 20:12:43,272 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:12:43,276 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals(null).and(true)
2021-03-11 20:12:43,276 [main:114] - replacement of checkFinished of type Boolean is (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not()
2021-03-11 20:12:43,404 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:12:43,404 [main:66] - Compilation checking started
2021-03-11 20:12:44,078 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 {
            prope4.fu11()
            Kla5().fu11()
        }
    }
    prope4.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
runCatching<Any?>({ "vwvko"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error(((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).toShort().toString(810477435) + prope8)
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:12:44,081 [main:107] - replacing (prope6.getOrThrow(), Any?)
2021-03-11 20:12:44,082 [main:50] - replacing prope6.getOrThrow() Any?
2021-03-11 20:12:44,082 [main:54] - Getting value of type Any?
2021-03-11 20:12:44,225 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:12:44,225 [main:58] - GENERATED VALUE OF TYPE Any? = "czqdy"
2021-03-11 20:12:44,225 [main:61] - GENERATED IS CALL =false
2021-03-11 20:12:44,233 [main:67] - randomType = Boolean
2021-03-11 20:12:44,373 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:12:44,392 [main:106] - GETTING Any? from Int?
2021-03-11 20:12:44,451 [main:106] - GETTING Any? from Char
2021-03-11 20:12:44,484 [main:106] - GETTING Any? from Int
2021-03-11 20:12:44,534 [main:106] - GETTING Any? from Char
2021-03-11 20:12:44,535 [main:106] - GETTING Any? from Int
2021-03-11 20:12:44,537 [main:106] - GETTING Any? from Int
2021-03-11 20:12:44,538 [main:106] - GETTING Any? from Int
2021-03-11 20:12:44,539 [main:106] - GETTING Any? from Int
2021-03-11 20:12:44,540 [main:106] - GETTING Any? from A
2021-03-11 20:12:44,551 [main:106] - GETTING Any? from A
2021-03-11 20:12:44,552 [main:106] - GETTING Any? from Int
2021-03-11 20:12:44,553 [main:106] - GETTING Any? from A
2021-03-11 20:12:44,553 [main:114] - replacement of prope6.getOrThrow() of type Any? is "czqdy"
2021-03-11 20:12:44,687 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 20:12:44,688 [main:66] - Compilation checking started
2021-03-11 20:12:45,394 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 {
            prope4.fu11()
            Kla5().fu11()
        }
    }
    prope4.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
runCatching<Any?>({ "vwvko"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error(((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).toShort().toString(810477435) + prope8)
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:12:45,397 [main:107] - replacing (isSuccess, Boolean)
2021-03-11 20:12:45,399 [main:50] - replacing isSuccess Boolean
2021-03-11 20:12:45,399 [main:54] - Getting value of type Boolean
2021-03-11 20:12:45,544 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:12:45,548 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 20:12:45,548 [main:61] - GENERATED IS CALL =false
2021-03-11 20:12:46,059 [main:67] - randomType = HashSet<Set<Kla0>>
2021-03-11 20:12:46,212 [main:302] - generating value of type = HashSet<Set<Kla0>> false depth = 0
2021-03-11 20:12:46,366 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: Set<Kla0>): HashSet<Set<Kla0>> = TODO()
2021-03-11 20:12:46,373 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: Set<Kla0>): HashSet<Set<Kla0>> = TODO()
2021-03-11 20:12:46,520 [main:302] - generating value of type = Set<Kla0> false depth = 3
2021-03-11 20:12:46,669 [main:43] - GENERATING CALL OF fun <T> setOf(): Set<Kla0> = TODO()
2021-03-11 20:12:46,674 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOf(): Set<Kla0> = TODO()
2021-03-11 20:12:46,842 [main:95] - GENERATED = setOf<Kla0>()
2021-03-11 20:12:46,842 [main:95] - GENERATED = hashSetOf<Set<Kla0>>(setOf<Kla0>())
2021-03-11 20:12:46,982 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@281b73a8]
2021-03-11 20:12:47,111 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:12:47,112 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@277b0e94]
2021-03-11 20:12:47,243 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:12:47,243 [main:78] - Generated call from random type = (hashSetOf<Set<Kla0>>(setOf<Kla0>())).equals("igrcf").equals("otjsk")
2021-03-11 20:12:47,244 [main:106] - GETTING Boolean from Int
2021-03-11 20:12:47,295 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5e6956fa], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4094dfbc]]
2021-03-11 20:12:47,295 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5e6956fa]
2021-03-11 20:12:47,295 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4094dfbc]
2021-03-11 20:12:47,422 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:12:47,422 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toDouble().equals("tvjog")
2021-03-11 20:12:47,422 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@220c529a]]
2021-03-11 20:12:47,422 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@220c529a]
2021-03-11 20:12:47,552 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:12:47,553 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).equals("unufv")
2021-03-11 20:12:47,553 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57ba1828], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@13f065ac]]
2021-03-11 20:12:47,553 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57ba1828]
2021-03-11 20:12:47,676 [main:302] - generating value of type = Double true depth = 0
2021-03-11 20:12:47,680 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@13f065ac]
2021-03-11 20:12:47,680 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).div(0.35092226825225514).isInfinite()
2021-03-11 20:12:47,680 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@fea99d7], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2a45c12]]
2021-03-11 20:12:47,680 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@fea99d7]
2021-03-11 20:12:47,680 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2a45c12]
2021-03-11 20:12:47,803 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:12:47,804 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toByte().equals("jltwi")
2021-03-11 20:12:47,804 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f971e3d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@1953167e]]
2021-03-11 20:12:47,804 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f971e3d]
2021-03-11 20:12:47,804 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@1953167e]
2021-03-11 20:12:47,933 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:12:47,933 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toFloat().equals("wgxeh")
2021-03-11 20:12:47,933 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5e6956fa], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6395aed6]]
2021-03-11 20:12:47,933 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5e6956fa]
2021-03-11 20:12:47,933 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6395aed6]
2021-03-11 20:12:47,934 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toDouble().isNaN()
2021-03-11 20:12:47,934 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@a00b4a6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@4c4e0700]]
2021-03-11 20:12:47,934 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@a00b4a6]
2021-03-11 20:12:47,934 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@4c4e0700]
2021-03-11 20:12:48,065 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:12:48,065 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toLong().equals("wmual")
2021-03-11 20:12:48,065 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@719e1c26], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@220c529a]]
2021-03-11 20:12:48,065 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@719e1c26]
2021-03-11 20:12:48,065 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@220c529a]
2021-03-11 20:12:48,194 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:12:48,195 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).compareTo(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).equals("oadkp")
2021-03-11 20:12:48,195 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@521a6cab]]
2021-03-11 20:12:48,195 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:12:48,195 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@521a6cab]
2021-03-11 20:12:48,195 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().isLowerCase()
2021-03-11 20:12:48,196 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@540774de]]
2021-03-11 20:12:48,196 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:12:48,196 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@540774de]
2021-03-11 20:12:48,196 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().isSurrogate()
2021-03-11 20:12:48,196 [main:114] - replacement of isSuccess of type Boolean is (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).div(0.35092226825225514).isInfinite()
2021-03-11 20:12:48,341 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:12:48,344 [main:107] - replacing ({ it?.methodName?.startsWith(method) == true }, Function0<Boolean>)
2021-03-11 20:12:48,344 [main:50] - replacing { it?.methodName?.startsWith(method) == true } Function0<Boolean>
2021-03-11 20:12:48,344 [main:54] - Getting value of type Function0<Boolean>
2021-03-11 20:12:48,472 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 20:12:48,476 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 20:12:48,479 [main:58] - GENERATED VALUE OF TYPE Function0<Boolean> = { true}
2021-03-11 20:12:48,480 [main:61] - GENERATED IS CALL =false
2021-03-11 20:12:49,106 [main:67] - randomType = Collection<ArrayList<Kla3<ULong>>>
2021-03-11 20:12:49,108 [main:106] - GETTING Function0<Boolean> from Char
2021-03-11 20:12:49,139 [main:106] - GETTING Function0<Boolean> from Int
2021-03-11 20:12:49,188 [main:106] - GETTING Function0<Boolean> from Int
2021-03-11 20:12:49,189 [main:106] - GETTING Function0<Boolean> from Int
2021-03-11 20:12:49,190 [main:106] - GETTING Function0<Boolean> from A
2021-03-11 20:12:49,201 [main:106] - GETTING Function0<Boolean> from Int
2021-03-11 20:12:49,202 [main:106] - GETTING Function0<Boolean> from A
2021-03-11 20:12:49,203 [main:106] - GETTING Function0<Boolean> from A
2021-03-11 20:12:49,204 [main:106] - GETTING Function0<Boolean> from Int
2021-03-11 20:12:49,205 [main:106] - GETTING Function0<Boolean> from Char
2021-03-11 20:12:49,207 [main:106] - GETTING Function0<Boolean> from Int?
2021-03-11 20:12:49,264 [main:106] - GETTING Function0<Boolean> from Int
2021-03-11 20:12:49,264 [main:114] - replacement of { it?.methodName?.startsWith(method) == true } of type Function0<Boolean> is { true}
2021-03-11 20:12:49,392 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:12:49,393 [main:66] - Compilation checking started
2021-03-11 20:12:50,110 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 {
            prope4.fu11()
            Kla5().fu11()
        }
    }
    prope4.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
runCatching<Any?>({ "vwvko"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error(((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).toShort().toString(810477435) + prope8)
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:12:50,114 [main:107] - replacing (prope8, Int)
2021-03-11 20:12:50,114 [main:50] - replacing prope8 Int
2021-03-11 20:12:50,114 [main:54] - Getting value of type Int
2021-03-11 20:12:50,310 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:12:50,316 [main:58] - GENERATED VALUE OF TYPE Int = -1141599271
2021-03-11 20:12:50,317 [main:61] - GENERATED IS CALL =false
2021-03-11 20:12:50,468 [main:67] - randomType = UShort
2021-03-11 20:12:50,607 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 20:12:50,645 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@34a137db]
2021-03-11 20:12:50,645 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5f022340]
2021-03-11 20:12:50,645 [main:78] - Generated call from random type = (22955.toUShort()).toLong().countTrailingZeroBits()
2021-03-11 20:12:50,646 [main:106] - GETTING Int from A
2021-03-11 20:12:50,652 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@62601b72]]
2021-03-11 20:12:50,653 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632)).x
2021-03-11 20:12:50,653 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@62601b72], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@a29be6f]]
2021-03-11 20:12:50,653 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@a29be6f]
2021-03-11 20:12:50,653 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632)).x.inc()
2021-03-11 20:12:50,653 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@62601b72], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@191ff7d2]]
2021-03-11 20:12:50,653 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@191ff7d2]
2021-03-11 20:12:50,653 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632)).x.countLeadingZeroBits()
2021-03-11 20:12:50,653 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@62601b72], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a11f1e9]]
2021-03-11 20:12:50,653 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a11f1e9]
2021-03-11 20:12:50,778 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:12:50,782 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632)).x.minus(94)
2021-03-11 20:12:50,782 [main:113] - Case = [public final operator fun component1(): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@2558d511]]
2021-03-11 20:12:50,782 [main:149] - GENERATING call of type public final operator fun component1(): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@2558d511]
2021-03-11 20:12:50,782 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632)).component1()
2021-03-11 20:12:50,782 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@62601b72], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4110a187]]
2021-03-11 20:12:50,782 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4110a187]
2021-03-11 20:12:50,783 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632)).x.dec()
2021-03-11 20:12:50,783 [main:113] - Case = [public final val z: kotlin.Int? defined in A[PropertyDescriptorImpl@6ea53851], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4f2e5a0b]]
2021-03-11 20:12:50,783 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4f2e5a0b]
2021-03-11 20:12:50,909 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:12:50,913 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632)).z?.plus(90)
2021-03-11 20:12:50,913 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@62601b72], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a80d21]]
2021-03-11 20:12:50,914 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2a80d21]
2021-03-11 20:12:50,914 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632)).x.toInt()
2021-03-11 20:12:50,914 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@62601b72], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@50e98bbd]]
2021-03-11 20:12:50,914 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@50e98bbd]
2021-03-11 20:12:50,914 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632)).x.countTrailingZeroBits()
2021-03-11 20:12:50,914 [main:113] - Case = [public final val z: kotlin.Int? defined in A[PropertyDescriptorImpl@6ea53851], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7025cd74]]
2021-03-11 20:12:50,914 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7025cd74]
2021-03-11 20:12:51,042 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:12:51,046 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632)).z?.ushr(-2123294560)
2021-03-11 20:12:51,046 [main:114] - replacement of prope8 of type Int is -1141599271
2021-03-11 20:12:51,178 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 20:12:51,178 [main:66] - Compilation checking started
2021-03-11 20:12:51,561 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 {
            prope4.fu11()
            Kla5().fu11()
        }
    }
    prope4.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
runCatching<Any?>({ "vwvko"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        -1141599271++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error(((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).toShort().toString(810477435) + prope8)
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:12:51,564 [main:107] - replacing (prope10, Function0<Unit>)
2021-03-11 20:12:51,564 [main:50] - replacing prope10 Function0<Unit>
2021-03-11 20:12:51,564 [main:54] - Getting value of type Function0<Unit>
2021-03-11 20:12:51,687 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 20:12:51,691 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:12:51,825 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:12:51,830 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:12:52,132 [main:302] - generating value of type = Any false depth = 4
2021-03-11 20:12:52,132 [main:95] - GENERATED = print("nqljc")
2021-03-11 20:12:52,132 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { print("nqljc")}
2021-03-11 20:12:52,132 [main:61] - GENERATED IS CALL =false
2021-03-11 20:12:52,280 [main:67] - randomType = Byte
2021-03-11 20:12:52,407 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:12:52,447 [main:106] - GETTING Function0<Unit> from A
2021-03-11 20:12:52,454 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:12:52,486 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 20:12:52,504 [main:106] - GETTING Function0<Unit> from A
2021-03-11 20:12:52,505 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:12:52,506 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:12:52,507 [main:106] - GETTING Function0<Unit> from Int?
2021-03-11 20:12:52,540 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 20:12:52,542 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:12:52,542 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:12:52,544 [main:106] - GETTING Function0<Unit> from A
2021-03-11 20:12:52,545 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:12:52,545 [main:114] - replacement of prope10 of type Function0<Unit> is { print("nqljc")}
2021-03-11 20:12:52,668 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:12:52,669 [main:66] - Compilation checking started
2021-03-11 20:12:53,108 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 {
            prope4.fu11()
            Kla5().fu11()
        }
    }
    prope4.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
runCatching<Any?>({ "vwvko"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error(((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).toShort().toString(810477435) + prope8)
            { print("nqljc")}()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:12:53,111 [main:107] - replacing (prope6, Result<Ty0>)
2021-03-11 20:12:53,111 [main:50] - replacing prope6 Result<Ty0>
2021-03-11 20:12:53,111 [main:54] - Getting value of type Result<Ty0>
2021-03-11 20:12:53,262 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-11 20:12:53,405 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 20:12:53,411 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 20:12:53,738 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 20:12:53,738 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-11 20:12:54,214 [main:67] - randomType = ArrayList<Double>
2021-03-11 20:12:54,341 [main:302] - generating value of type = ArrayList<Double> false depth = 0
2021-03-11 20:12:54,480 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Double): ArrayList<Double> = TODO()
2021-03-11 20:12:54,485 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Double): ArrayList<Double> = TODO()
2021-03-11 20:12:54,616 [main:302] - generating value of type = Double true depth = 3
2021-03-11 20:12:54,620 [main:95] - GENERATED = arrayListOf<Double>(0.4365229767167915)
2021-03-11 20:12:54,745 [main:106] - GETTING Result<Ty0> from A
2021-03-11 20:12:54,753 [main:106] - GETTING Result<Ty0> from Char
2021-03-11 20:12:54,773 [main:106] - GETTING Result<Ty0> from Int
2021-03-11 20:12:54,804 [main:106] - GETTING Result<Ty0> from Int
2021-03-11 20:12:54,805 [main:106] - GETTING Result<Ty0> from Int
2021-03-11 20:12:54,807 [main:106] - GETTING Result<Ty0> from A
2021-03-11 20:12:54,808 [main:106] - GETTING Result<Ty0> from Int
2021-03-11 20:12:54,809 [main:106] - GETTING Result<Ty0> from Int?
2021-03-11 20:12:54,844 [main:106] - GETTING Result<Ty0> from Char
2021-03-11 20:12:54,845 [main:106] - GETTING Result<Ty0> from Int
2021-03-11 20:12:54,846 [main:106] - GETTING Result<Ty0> from A
2021-03-11 20:12:54,847 [main:106] - GETTING Result<Ty0> from Int
2021-03-11 20:12:54,847 [main:111] - Cant find and generate replacement for prope6 type Result<Ty0>
2021-03-11 20:12:54,847 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 20:12:54,848 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 20:12:54,848 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 20:12:54,976 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 20:12:54,983 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 20:12:55,497 [main:67] - randomType = MutableMap<UByte, A?>
2021-03-11 20:12:55,499 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-11 20:12:55,509 [main:106] - GETTING EmptyCoroutineContext from Char
2021-03-11 20:12:55,530 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:12:55,562 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:12:55,563 [main:106] - GETTING EmptyCoroutineContext from Int?
2021-03-11 20:12:55,598 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-11 20:12:55,599 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:12:55,600 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-11 20:12:55,600 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:12:55,601 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:12:55,602 [main:106] - GETTING EmptyCoroutineContext from Char
2021-03-11 20:12:55,602 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:12:55,602 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 20:12:55,603 [main:107] - replacing (runCatching<Any?>({ "vwvko"}).exceptionOrNull(), Throwable?)
2021-03-11 20:12:55,603 [main:50] - replacing runCatching<Any?>({ "vwvko"}).exceptionOrNull() Throwable?
2021-03-11 20:12:55,603 [main:54] - Getting value of type Throwable?
2021-03-11 20:12:55,728 [main:58] - GENERATED VALUE OF TYPE Throwable? = null
2021-03-11 20:12:55,728 [main:61] - GENERATED IS CALL =false
2021-03-11 20:12:55,736 [main:67] - randomType = Boolean
2021-03-11 20:12:55,862 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:12:55,878 [main:106] - GETTING Throwable? from A
2021-03-11 20:12:55,886 [main:106] - GETTING Throwable? from A
2021-03-11 20:12:55,886 [main:106] - GETTING Throwable? from Int?
2021-03-11 20:12:55,919 [main:106] - GETTING Throwable? from Char
2021-03-11 20:12:55,937 [main:106] - GETTING Throwable? from A
2021-03-11 20:12:55,938 [main:106] - GETTING Throwable? from Char
2021-03-11 20:12:55,938 [main:106] - GETTING Throwable? from Int
2021-03-11 20:12:55,969 [main:106] - GETTING Throwable? from Int
2021-03-11 20:12:55,970 [main:106] - GETTING Throwable? from Int
2021-03-11 20:12:55,971 [main:106] - GETTING Throwable? from Int
2021-03-11 20:12:55,972 [main:106] - GETTING Throwable? from Int
2021-03-11 20:12:55,972 [main:106] - GETTING Throwable? from Int
2021-03-11 20:12:55,972 [main:114] - replacement of runCatching<Any?>({ "vwvko"}).exceptionOrNull() of type Throwable? is null
2021-03-11 20:12:56,100 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(NULL)
2021-03-11 20:12:56,101 [main:66] - Compilation checking started
2021-03-11 20:12:56,723 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 {
            prope4.fu11()
            Kla5().fu11()
        }
    }
    prope4.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
null?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error(((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).toShort().toString(810477435) + prope8)
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:12:56,727 [main:107] - replacing (prope10, Function0<Unit>)
2021-03-11 20:12:56,727 [main:50] - replacing prope10 Function0<Unit>
2021-03-11 20:12:56,728 [main:54] - Getting value of type Function0<Unit>
2021-03-11 20:12:56,891 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 20:12:56,895 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:12:56,902 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 20:12:56,902 [main:61] - GENERATED IS CALL =false
2021-03-11 20:12:56,917 [main:67] - randomType = Kla2
2021-03-11 20:12:57,042 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 20:12:57,045 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}
2021-03-11 20:12:57,068 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:12:57,101 [main:106] - GETTING Function0<Unit> from Int?
2021-03-11 20:12:57,133 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:12:57,135 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 20:12:57,153 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:12:57,154 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:12:57,155 [main:106] - GETTING Function0<Unit> from A
2021-03-11 20:12:57,163 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:12:57,164 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:12:57,165 [main:106] - GETTING Function0<Unit> from A
2021-03-11 20:12:57,165 [main:106] - GETTING Function0<Unit> from A
2021-03-11 20:12:57,166 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 20:12:57,166 [main:114] - replacement of prope10 of type Function0<Unit> is { println()}
2021-03-11 20:12:57,297 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:12:57,298 [main:66] - Compilation checking started
2021-03-11 20:12:57,690 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 {
            prope4.fu11()
            Kla5().fu11()
        }
    }
    prope4.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
null?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        { println()} = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error(((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).toShort().toString(810477435) + prope8)
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:12:57,693 [main:107] - replacing (prope8, Int)
2021-03-11 20:12:57,694 [main:50] - replacing prope8 Int
2021-03-11 20:12:57,694 [main:54] - Getting value of type Int
2021-03-11 20:12:57,839 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:12:57,843 [main:58] - GENERATED VALUE OF TYPE Int = -2042761586
2021-03-11 20:12:57,843 [main:61] - GENERATED IS CALL =false
2021-03-11 20:12:57,858 [main:67] - randomType = Kla6
2021-03-11 20:12:57,982 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 20:12:57,986 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-11 20:12:58,013 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla6[DeserializedSimpleFunctionDescriptor@2bbf7d2d]
2021-03-11 20:12:58,136 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:12:58,136 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@355a0cfb]
2021-03-11 20:12:58,258 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:12:58,262 [main:78] - Generated call from random type = (Kla6).equals("rukuz").compareTo(true)
2021-03-11 20:12:58,263 [main:106] - GETTING Int from A
2021-03-11 20:12:58,269 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@62601b72], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1a49f8b8]]
2021-03-11 20:12:58,270 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1a49f8b8]
2021-03-11 20:12:58,270 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632)).x.inv()
2021-03-11 20:12:58,270 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@62601b72], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@747a393e]]
2021-03-11 20:12:58,270 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@747a393e]
2021-03-11 20:12:58,393 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:12:58,397 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632)).x.compareTo(81)
2021-03-11 20:12:58,397 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@62601b72], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7c81fec0]]
2021-03-11 20:12:58,397 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7c81fec0]
2021-03-11 20:12:58,398 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632)).x.coerceAtLeast((A((A(-1435118121, -1465758632).x), 1465758632).x))
2021-03-11 20:12:58,398 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@62601b72], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4cbb519f]]
2021-03-11 20:12:58,398 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4cbb519f]
2021-03-11 20:12:58,535 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:12:58,540 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632)).x.coerceIn(1581494301, A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)
2021-03-11 20:12:58,540 [main:113] - Case = [public final val z: kotlin.Int? defined in A[PropertyDescriptorImpl@6ea53851], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4226618c]]
2021-03-11 20:12:58,540 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4226618c]
2021-03-11 20:12:58,662 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:12:58,666 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632)).z?.div(62)
2021-03-11 20:12:58,666 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@62601b72], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@1394cb]]
2021-03-11 20:12:58,666 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632)).x.absoluteValue
2021-03-11 20:12:58,666 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@62601b72], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@783a8ec4]]
2021-03-11 20:12:58,666 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@783a8ec4]
2021-03-11 20:12:58,666 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632)).x.takeLowestOneBit()
2021-03-11 20:12:58,667 [main:113] - Case = [public final val z: kotlin.Int? defined in A[PropertyDescriptorImpl@6ea53851], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d5b9c0c]]
2021-03-11 20:12:58,667 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d5b9c0c]
2021-03-11 20:12:58,790 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:12:58,794 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632)).z?.shr(-1706902366)
2021-03-11 20:12:58,794 [main:113] - Case = [public final operator fun component1(): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@2558d511]]
2021-03-11 20:12:58,794 [main:149] - GENERATING call of type public final operator fun component1(): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@2558d511]
2021-03-11 20:12:58,795 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632)).component1()
2021-03-11 20:12:58,795 [main:113] - Case = [public final val z: kotlin.Int? defined in A[PropertyDescriptorImpl@6ea53851]]
2021-03-11 20:12:58,795 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632)).z
2021-03-11 20:12:58,795 [main:114] - replacement of prope8 of type Int is (A((A(-1435118121, -1465758632).x), 1465758632)).x.takeLowestOneBit()
2021-03-11 20:12:58,926 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:12:58,926 [main:66] - Compilation checking started
2021-03-11 20:12:59,592 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 {
            prope4.fu11()
            Kla5().fu11()
        }
    }
    prope4.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
null?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error(((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).toShort().toString(810477435) + (A((A(-1435118121, -1465758632).x), 1465758632)).x.takeLowestOneBit())
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:12:59,596 [main:107] - replacing ("tail-call optimization hit: method " + method, String)
2021-03-11 20:12:59,598 [main:50] - replacing "tail-call optimization hit: method " + method String
2021-03-11 20:12:59,598 [main:54] - Getting value of type String
2021-03-11 20:12:59,732 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:12:59,736 [main:58] - GENERATED VALUE OF TYPE String = "tgjsn"
2021-03-11 20:12:59,736 [main:61] - GENERATED IS CALL =false
2021-03-11 20:13:00,205 [main:67] - randomType = List<UShort>
2021-03-11 20:13:00,206 [main:106] - GETTING String from A
2021-03-11 20:13:00,215 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@62601b72], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:13:00,215 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:13:00,216 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
2021-03-11 20:13:00,216 [main:114] - replacement of "tail-call optimization hit: method " + method of type String is (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
2021-03-11 20:13:00,352 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:13:00,353 [main:66] - Compilation checking started
2021-03-11 20:13:01,037 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 {
            prope4.fu11()
            Kla5().fu11()
        }
    }
    prope4.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
null?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error(((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).toShort().toString(810477435) + (A((A(-1435118121, -1465758632).x), 1465758632)).x.takeLowestOneBit())
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:13:01,041 [main:107] - replacing ("tail-call optimization miss: method at " + it, String)
2021-03-11 20:13:01,041 [main:50] - replacing "tail-call optimization miss: method at " + it String
2021-03-11 20:13:01,041 [main:54] - Getting value of type String
2021-03-11 20:13:01,212 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:13:01,216 [main:58] - GENERATED VALUE OF TYPE String = "qjsje"
2021-03-11 20:13:01,217 [main:61] - GENERATED IS CALL =false
2021-03-11 20:13:01,233 [main:67] - randomType = Kla1
2021-03-11 20:13:01,368 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 20:13:01,372 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}
2021-03-11 20:13:01,498 [main:194] - Type params = []
2021-03-11 20:13:01,624 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 20:13:01,776 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:13:01,781 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:13:02,109 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 20:13:02,278 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:13:02,283 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:13:02,742 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 8
2021-03-11 20:13:02,882 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:13:02,887 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:13:03,340 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:13:03,340 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:13:03,340 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:13:03,357 [main:106] - GETTING String from Int
2021-03-11 20:13:03,396 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7b71a3ab], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]]
2021-03-11 20:13:03,396 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7b71a3ab]
2021-03-11 20:13:03,522 [main:302] - generating value of type = Long true depth = 0
2021-03-11 20:13:03,526 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]
2021-03-11 20:13:03,526 [main:117] - GENERATED CALL = ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).div(-8774248576185783008).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
2021-03-11 20:13:03,527 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@638e8eca]]
2021-03-11 20:13:03,527 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:13:03,527 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@638e8eca]
2021-03-11 20:13:03,662 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:13:03,667 [main:117] - GENERATED CALL = ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).toChar().plus("lvkjt")
2021-03-11 20:13:03,667 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e31e89]]
2021-03-11 20:13:03,667 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:13:03,667 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e31e89]
2021-03-11 20:13:03,667 [main:117] - GENERATED CALL = ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).toChar().titlecase()
2021-03-11 20:13:03,667 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5352fcf1]]
2021-03-11 20:13:03,667 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:13:03,668 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5352fcf1]
2021-03-11 20:13:03,668 [main:117] - GENERATED CALL = ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).toChar().lowercase()
2021-03-11 20:13:03,668 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@fea99d7], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d4a6f4c]]
2021-03-11 20:13:03,668 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@fea99d7]
2021-03-11 20:13:03,668 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d4a6f4c]
2021-03-11 20:13:03,668 [main:117] - GENERATED CALL = ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).toByte().toString(A((A(-1435118121, -1465758632).x), 1465758632).x)
2021-03-11 20:13:03,668 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:13:03,669 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:13:03,669 [main:117] - GENERATED CALL = ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).toString(A(-1435118121, -1465758632).x)
2021-03-11 20:13:03,669 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25e54512]]
2021-03-11 20:13:03,669 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:13:03,669 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25e54512]
2021-03-11 20:13:03,669 [main:117] - GENERATED CALL = ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).toChar().uppercase()
2021-03-11 20:13:03,669 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a33abcd], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:13:03,669 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a33abcd]
2021-03-11 20:13:03,669 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:13:03,670 [main:117] - GENERATED CALL = ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).toInt().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)
2021-03-11 20:13:03,670 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@719e1c26], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:13:03,670 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@719e1c26]
2021-03-11 20:13:03,670 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:13:03,803 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:13:03,829 [main:117] - GENERATED CALL = ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).compareTo(A(-1435118121, -1465758632).x).toString(-1814017157)
2021-03-11 20:13:03,829 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16972bc5], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa4447]]
2021-03-11 20:13:03,829 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16972bc5]
2021-03-11 20:13:03,829 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa4447]
2021-03-11 20:13:03,955 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:13:03,959 [main:117] - GENERATED CALL = ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).toShort().toString(-1500435396)
2021-03-11 20:13:03,959 [main:114] - replacement of "tail-call optimization miss: method at " + it of type String is ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).toString(A(-1435118121, -1465758632).x)
2021-03-11 20:13:04,103 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:13:04,104 [main:66] - Compilation checking started
2021-03-11 20:13:04,735 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 {
            prope4.fu11()
            Kla5().fu11()
        }
    }
    prope4.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
null?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { error(((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).toString(A(-1435118121, -1465758632).x) + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error(((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).toShort().toString(810477435) + (A((A(-1435118121, -1465758632).x), 1465758632)).x.takeLowestOneBit())
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:13:04,740 [main:107] - replacing (!prope9, Boolean)
2021-03-11 20:13:04,740 [main:50] - replacing !prope9 Boolean
2021-03-11 20:13:04,741 [main:54] - Getting value of type Boolean
2021-03-11 20:13:04,876 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:13:04,880 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 20:13:04,880 [main:61] - GENERATED IS CALL =false
2021-03-11 20:13:04,888 [main:67] - randomType = Char
2021-03-11 20:13:05,013 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:13:05,035 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@53b6d9]
2021-03-11 20:13:05,036 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2a45c12]
2021-03-11 20:13:05,161 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:13:05,162 [main:78] - Generated call from random type = ('㹹').toByte().equals("wxecj")
2021-03-11 20:13:05,162 [main:114] - replacement of !prope9 of type Boolean is ('㹹').toByte().equals("wxecj")
2021-03-11 20:13:05,288 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:13:05,288 [main:66] - Compilation checking started
2021-03-11 20:13:05,908 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 {
            prope4.fu11()
            Kla5().fu11()
        }
    }
    prope4.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
null?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { error(((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).toString(A(-1435118121, -1465758632).x) + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error(((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).toShort().toString(810477435) + (A((A(-1435118121, -1465758632).x), 1465758632)).x.takeLowestOneBit())
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:13:05,911 [main:107] - replacing (prope9, Boolean)
2021-03-11 20:13:05,911 [main:50] - replacing prope9 Boolean
2021-03-11 20:13:05,911 [main:54] - Getting value of type Boolean
2021-03-11 20:13:06,049 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:13:06,054 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 20:13:06,054 [main:61] - GENERATED IS CALL =false
2021-03-11 20:13:06,210 [main:67] - randomType = UByte
2021-03-11 20:13:06,348 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 20:13:06,381 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@509e08e5]
2021-03-11 20:13:06,381 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@48d131a1]
2021-03-11 20:13:06,509 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:13:06,509 [main:78] - Generated call from random type = (97.toUByte()).toUShort().equals("xhpbl")
2021-03-11 20:13:06,509 [main:114] - replacement of prope9 of type Boolean is (97.toUByte()).toUShort().equals("xhpbl")
2021-03-11 20:13:06,639 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:13:06,639 [main:66] - Compilation checking started
2021-03-11 20:13:07,061 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 {
            prope4.fu11()
            Kla5().fu11()
        }
    }
    prope4.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
null?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { error(((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).toString(A(-1435118121, -1465758632).x) + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error(((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).toShort().toString(810477435) + (A((A(-1435118121, -1465758632).x), 1465758632)).x.takeLowestOneBit())
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
prope4.prope10 = {
            prope4.(97.toUByte()).toUShort().equals("xhpbl") = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:13:07,066 [main:107] - replacing (c, Continuation<*>)
2021-03-11 20:13:07,068 [main:50] - replacing c Continuation<*>
2021-03-11 20:13:07,068 [main:54] - Getting value of type Continuation<*>
2021-03-11 20:13:07,231 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 20:13:07,385 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:13:07,391 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:13:07,869 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 20:13:08,006 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:13:08,011 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:13:08,319 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 20:13:08,462 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:13:08,467 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:13:08,940 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-11 20:13:09,080 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:13:09,085 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:13:09,617 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:13:09,617 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:13:09,617 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:13:09,617 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:13:09,617 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 20:13:09,638 [main:67] - randomType = Kla6
2021-03-11 20:13:09,765 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 20:13:09,769 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-11 20:13:09,789 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:13:09,819 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:13:09,820 [main:106] - GETTING Continuation<*> from Int?
2021-03-11 20:13:09,853 [main:106] - GETTING Continuation<*> from Char
2021-03-11 20:13:09,871 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:13:09,872 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:13:09,873 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:13:09,874 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:13:09,874 [main:106] - GETTING Continuation<*> from A
2021-03-11 20:13:09,882 [main:106] - GETTING Continuation<*> from A
2021-03-11 20:13:09,883 [main:106] - GETTING Continuation<*> from A
2021-03-11 20:13:09,883 [main:106] - GETTING Continuation<*> from Char
2021-03-11 20:13:09,884 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 20:13:09,884 [main:107] - replacing (prope6, Result<Ty0>)
2021-03-11 20:13:09,884 [main:50] - replacing prope6 Result<Ty0>
2021-03-11 20:13:09,884 [main:54] - Getting value of type Result<Ty0>
2021-03-11 20:13:10,010 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-11 20:13:10,145 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 20:13:10,150 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 20:13:10,453 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 20:13:10,454 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-11 20:13:10,462 [main:67] - randomType = Boolean
2021-03-11 20:13:10,590 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:13:10,604 [main:106] - GETTING Result<Ty0> from A
2021-03-11 20:13:10,611 [main:106] - GETTING Result<Ty0> from Int
2021-03-11 20:13:10,642 [main:106] - GETTING Result<Ty0> from Int?
2021-03-11 20:13:10,678 [main:106] - GETTING Result<Ty0> from Int
2021-03-11 20:13:10,679 [main:106] - GETTING Result<Ty0> from Int
2021-03-11 20:13:10,681 [main:106] - GETTING Result<Ty0> from A
2021-03-11 20:13:10,682 [main:106] - GETTING Result<Ty0> from Int
2021-03-11 20:13:10,683 [main:106] - GETTING Result<Ty0> from Int
2021-03-11 20:13:10,684 [main:106] - GETTING Result<Ty0> from Char
2021-03-11 20:13:10,706 [main:106] - GETTING Result<Ty0> from Int
2021-03-11 20:13:10,707 [main:106] - GETTING Result<Ty0> from Char
2021-03-11 20:13:10,708 [main:106] - GETTING Result<Ty0> from A
2021-03-11 20:13:10,708 [main:111] - Cant find and generate replacement for prope6 type Result<Ty0>
2021-03-11 20:13:10,708 [main:107] - replacing (1, Int)
2021-03-11 20:13:10,709 [main:50] - replacing 1 Int
2021-03-11 20:13:10,709 [main:54] - Getting value of type Int
2021-03-11 20:13:10,843 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:13:10,847 [main:58] - GENERATED VALUE OF TYPE Int = 134829347
2021-03-11 20:13:10,847 [main:61] - GENERATED IS CALL =false
2021-03-11 20:13:11,031 [main:67] - randomType = Kla3<Int>
2021-03-11 20:13:11,159 [main:302] - generating value of type = Kla3<Int> false depth = 0
2021-03-11 20:13:11,163 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 20:13:11,604 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 20:13:11,608 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-11 20:13:11,622 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla3[DeserializedSimpleFunctionDescriptor@12521500]
2021-03-11 20:13:11,748 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:13:11,748 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@355a0cfb]
2021-03-11 20:13:11,877 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:13:11,881 [main:78] - Generated call from random type = (Kla6).equals("lgrti").compareTo(true)
2021-03-11 20:13:11,881 [main:114] - replacement of 1 of type Int is (Kla6).equals("lgrti").compareTo(true)
2021-03-11 20:13:12,007 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:13:12,007 [main:66] - Compilation checking started
2021-03-11 20:13:12,637 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 {
            prope4.fu11()
            Kla5().fu11()
        }
    }
    prope4.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
null?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { error(((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).toString(A(-1435118121, -1465758632).x) + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in (Kla6).equals("lgrti").compareTo(true)..numberOfSuspensions) {
            if (prope8 != i) error(((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).toShort().toString(810477435) + (A((A(-1435118121, -1465758632).x), 1465758632)).x.takeLowestOneBit())
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:13:12,641 [main:107] - replacing ("\n", String)
2021-03-11 20:13:12,641 [main:50] - replacing "\n" String
2021-03-11 20:13:12,641 [main:54] - Getting value of type String
2021-03-11 20:13:12,784 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:13:12,789 [main:58] - GENERATED VALUE OF TYPE String = "ogzde"
2021-03-11 20:13:12,789 [main:61] - GENERATED IS CALL =false
2021-03-11 20:13:12,981 [main:67] - randomType = Sequence<Kla4>
2021-03-11 20:13:12,982 [main:106] - GETTING String from Int
2021-03-11 20:13:13,016 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e31e89]]
2021-03-11 20:13:13,016 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:13:13,016 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e31e89]
2021-03-11 20:13:13,016 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().titlecase()
2021-03-11 20:13:13,016 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:13:13,016 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:13:13,017 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632).x).toString(A(1920083034, 1486922171).x)
2021-03-11 20:13:13,017 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5352fcf1]]
2021-03-11 20:13:13,017 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:13:13,017 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5352fcf1]
2021-03-11 20:13:13,017 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().lowercase()
2021-03-11 20:13:13,017 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@638e8eca]]
2021-03-11 20:13:13,017 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:13:13,017 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@638e8eca]
2021-03-11 20:13:13,155 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:13:13,159 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().plus("vineh")
2021-03-11 20:13:13,159 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16972bc5], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa4447]]
2021-03-11 20:13:13,159 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16972bc5]
2021-03-11 20:13:13,159 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa4447]
2021-03-11 20:13:13,160 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632).x).toShort().toString(A(-1435118121, -1465758632).x)
2021-03-11 20:13:13,160 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7b71a3ab], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]]
2021-03-11 20:13:13,160 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7b71a3ab]
2021-03-11 20:13:13,303 [main:302] - generating value of type = Long true depth = 0
2021-03-11 20:13:13,307 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]
2021-03-11 20:13:13,447 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:13:13,452 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632).x).div(-6843206798857307303).toString(-2098446347)
2021-03-11 20:13:13,453 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a33abcd], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:13:13,453 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a33abcd]
2021-03-11 20:13:13,453 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:13:13,453 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632).x).toInt().toString((A((A(-1435118121, -1465758632).x), 1465758632).x))
2021-03-11 20:13:13,453 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@fea99d7], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d4a6f4c]]
2021-03-11 20:13:13,453 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@fea99d7]
2021-03-11 20:13:13,453 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d4a6f4c]
2021-03-11 20:13:13,454 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632).x).toByte().toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
2021-03-11 20:13:13,454 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@a00b4a6], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]]
2021-03-11 20:13:13,454 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@a00b4a6]
2021-03-11 20:13:13,454 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]
2021-03-11 20:13:13,596 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:13:13,600 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(-852913495)
2021-03-11 20:13:13,601 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25e54512]]
2021-03-11 20:13:13,601 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:13:13,601 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25e54512]
2021-03-11 20:13:13,601 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().uppercase()
2021-03-11 20:13:13,601 [main:114] - replacement of "\n" of type String is (A((A(-1435118121, -1465758632).x), 1465758632).x).toShort().toString(A(-1435118121, -1465758632).x)
2021-03-11 20:13:13,737 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:13:13,737 [main:66] - Compilation checking started
2021-03-11 20:13:14,362 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 {
            prope4.fu11()
            Kla5().fu11()
        }
    }
    prope4.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
null?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { error(((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).toString(A(-1435118121, -1465758632).x) + " has state-machine " +
                prope7.joinToString(separator = (A((A(-1435118121, -1465758632).x), 1465758632).x).toShort().toString(A(-1435118121, -1465758632).x))) }
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in (Kla6).equals("lgrti").compareTo(true)..numberOfSuspensions) {
            if (prope8 != i) error(((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).toShort().toString(810477435) + (A((A(-1435118121, -1465758632).x), 1465758632)).x.takeLowestOneBit())
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:13:14,366 [main:107] - replacing ("\n", String)
2021-03-11 20:13:14,366 [main:50] - replacing "\n" String
2021-03-11 20:13:14,366 [main:54] - Getting value of type String
2021-03-11 20:13:14,495 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:13:14,499 [main:58] - GENERATED VALUE OF TYPE String = "asmow"
2021-03-11 20:13:14,499 [main:61] - GENERATED IS CALL =false
2021-03-11 20:13:14,662 [main:67] - randomType = UByte
2021-03-11 20:13:14,792 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 20:13:14,827 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@467d907c]
2021-03-11 20:13:14,828 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa4447]
2021-03-11 20:13:14,958 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:13:14,962 [main:78] - Generated call from random type = (18.toUByte()).toShort().toString(-1861872736)
2021-03-11 20:13:14,963 [main:106] - GETTING String from Char
2021-03-11 20:13:14,995 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25e54512]]
2021-03-11 20:13:14,995 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25e54512]
2021-03-11 20:13:14,995 [main:117] - GENERATED CALL = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).uppercase()
2021-03-11 20:13:14,996 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5352fcf1]]
2021-03-11 20:13:14,996 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5352fcf1]
2021-03-11 20:13:14,996 [main:117] - GENERATED CALL = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).lowercase()
2021-03-11 20:13:14,996 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e31e89]]
2021-03-11 20:13:14,996 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e31e89]
2021-03-11 20:13:14,996 [main:117] - GENERATED CALL = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).titlecase()
2021-03-11 20:13:14,996 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@697b1b46], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:13:14,996 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@697b1b46]
2021-03-11 20:13:15,125 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:13:15,129 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:13:15,259 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:13:15,263 [main:117] - GENERATED CALL = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)
2021-03-11 20:13:15,264 [main:113] - Case = [public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@27446428], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa4447]]
2021-03-11 20:13:15,264 [main:149] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@27446428]
2021-03-11 20:13:15,264 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa4447]
2021-03-11 20:13:15,264 [main:117] - GENERATED CALL = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toShort().toString(A((A(-1435118121, -1465758632).x), 1465758632).x)
2021-03-11 20:13:15,264 [main:113] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5170c12d], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]]
2021-03-11 20:13:15,264 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5170c12d]
2021-03-11 20:13:15,264 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]
2021-03-11 20:13:15,265 [main:117] - GENERATED CALL = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)
2021-03-11 20:13:15,265 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@638e8eca]]
2021-03-11 20:13:15,265 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@638e8eca]
2021-03-11 20:13:15,396 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:13:15,400 [main:117] - GENERATED CALL = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).plus("dqxry")
2021-03-11 20:13:15,401 [main:113] - Case = [public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@53b6d9], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d4a6f4c]]
2021-03-11 20:13:15,401 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@53b6d9]
2021-03-11 20:13:15,401 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d4a6f4c]
2021-03-11 20:13:15,401 [main:117] - GENERATED CALL = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().toString((A((A(-1435118121, -1465758632).x), 1465758632).x))
2021-03-11 20:13:15,401 [main:114] - replacement of "\n" of type String is ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)
2021-03-11 20:13:15,533 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:13:15,533 [main:66] - Compilation checking started
2021-03-11 20:13:16,167 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 {
            prope4.fu11()
            Kla5().fu11()
        }
    }
    prope4.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
null?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { error(((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).toString(A(-1435118121, -1465758632).x) + " has state-machine " +
                prope7.joinToString(separator = (A((A(-1435118121, -1465758632).x), 1465758632).x).toShort().toString(A(-1435118121, -1465758632).x))) }
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + " has no state-machine " +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in (Kla6).equals("lgrti").compareTo(true)..numberOfSuspensions) {
            if (prope8 != i) error(((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).toShort().toString(810477435) + (A((A(-1435118121, -1465758632).x), 1465758632)).x.takeLowestOneBit())
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:13:16,170 [main:107] - replacing (prope4, Kla5)
2021-03-11 20:13:16,170 [main:50] - replacing prope4 Kla5
2021-03-11 20:13:16,170 [main:54] - Getting value of type Kla5
2021-03-11 20:13:16,308 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 20:13:16,312 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in (Kla6).equals("lgrti").compareTo(true)..numberOfSuspensions) {
            if (prope8 != i) error(((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).toShort().toString(810477435) + (A((A(-1435118121, -1465758632).x), 1465758632)).x.takeLowestOneBit())
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 20:13:16,312 [main:58] - GENERATED VALUE OF TYPE Kla5 = Kla5()
2021-03-11 20:13:16,312 [main:61] - GENERATED IS CALL =true
2021-03-11 20:13:16,329 [main:67] - randomType = Kla2
2021-03-11 20:13:16,462 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 20:13:16,466 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}
2021-03-11 20:13:16,488 [main:106] - GETTING Kla5 from A
2021-03-11 20:13:16,497 [main:106] - GETTING Kla5 from Int
2021-03-11 20:13:16,527 [main:106] - GETTING Kla5 from A
2021-03-11 20:13:16,528 [main:106] - GETTING Kla5 from Char
2021-03-11 20:13:16,546 [main:106] - GETTING Kla5 from A
2021-03-11 20:13:16,546 [main:106] - GETTING Kla5 from Int
2021-03-11 20:13:16,547 [main:106] - GETTING Kla5 from Char
2021-03-11 20:13:16,548 [main:106] - GETTING Kla5 from Int
2021-03-11 20:13:16,548 [main:106] - GETTING Kla5 from Int
2021-03-11 20:13:16,549 [main:106] - GETTING Kla5 from Int
2021-03-11 20:13:16,549 [main:106] - GETTING Kla5 from Int?
2021-03-11 20:13:16,583 [main:106] - GETTING Kla5 from Int
2021-03-11 20:13:16,583 [main:114] - replacement of prope4 of type Kla5 is Kla5()
2021-03-11 20:13:16,720 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:13:16,720 [main:66] - Compilation checking started
2021-03-11 20:13:17,392 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 {
            prope4.fu11()
            Kla5().fu11()
        }
    }
    prope4.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
null?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { error(((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).toString(A(-1435118121, -1465758632).x) + " has state-machine " +
                prope7.joinToString(separator = (A((A(-1435118121, -1465758632).x), 1465758632).x).toShort().toString(A(-1435118121, -1465758632).x))) }
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + " has no state-machine " +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in (Kla6).equals("lgrti").compareTo(true)..numberOfSuspensions) {
            if (prope8 != i) error(((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).toShort().toString(810477435) + (A((A(-1435118121, -1465758632).x), 1465758632)).x.takeLowestOneBit())
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:13:17,395 [main:107] - replacing ({ error(((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).toString(A(-1435118121, -1465758632).x) + " has state-machine " +
                prope7.joinToString(separator = (A((A(-1435118121, -1465758632).x), 1465758632).x).toShort().toString(A(-1435118121, -1465758632).x))) }, Function0<Nothing>)
2021-03-11 20:13:17,395 [main:50] - replacing { error(((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).toString(A(-1435118121, -1465758632).x) + " has state-machine " +
                prope7.joinToString(separator = (A((A(-1435118121, -1465758632).x), 1465758632).x).toShort().toString(A(-1435118121, -1465758632).x))) } Function0<Nothing>
2021-03-11 20:13:17,395 [main:54] - Getting value of type Function0<Nothing>
2021-03-11 20:13:17,540 [main:302] - generating value of type = Function0<Nothing> false depth = 0
2021-03-11 20:13:17,545 [main:302] - generating value of type = Nothing false depth = 1
2021-03-11 20:13:17,552 [main:58] - GENERATED VALUE OF TYPE Function0<Nothing> = { TODO()}
2021-03-11 20:13:17,552 [main:61] - GENERATED IS CALL =false
2021-03-11 20:13:17,723 [main:67] - randomType = A?
2021-03-11 20:13:17,857 [main:302] - generating value of type = A false depth = 0
2021-03-11 20:13:17,861 [main:112] - generating klass A text = data class A(var x: Int, val z: Int?)
2021-03-11 20:13:17,995 [main:194] - Type params = []
2021-03-11 20:13:18,129 [main:302] - generating value of type = Int true depth = 2
2021-03-11 20:13:18,133 [main:302] - generating value of type = Int true depth = 2
2021-03-11 20:13:18,146 [main:106] - GETTING Function0<Nothing> from Int
2021-03-11 20:13:18,178 [main:106] - GETTING Function0<Nothing> from Char
2021-03-11 20:13:18,196 [main:106] - GETTING Function0<Nothing> from A
2021-03-11 20:13:18,203 [main:106] - GETTING Function0<Nothing> from Int
2021-03-11 20:13:18,204 [main:106] - GETTING Function0<Nothing> from Int
2021-03-11 20:13:18,205 [main:106] - GETTING Function0<Nothing> from Int
2021-03-11 20:13:18,206 [main:106] - GETTING Function0<Nothing> from Int?
2021-03-11 20:13:18,240 [main:106] - GETTING Function0<Nothing> from A
2021-03-11 20:13:18,241 [main:106] - GETTING Function0<Nothing> from Int
2021-03-11 20:13:18,242 [main:106] - GETTING Function0<Nothing> from A
2021-03-11 20:13:18,243 [main:106] - GETTING Function0<Nothing> from Char
2021-03-11 20:13:18,244 [main:106] - GETTING Function0<Nothing> from Int
2021-03-11 20:13:18,244 [main:114] - replacement of { error(((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).toString(A(-1435118121, -1465758632).x) + " has state-machine " +
                prope7.joinToString(separator = (A((A(-1435118121, -1465758632).x), 1465758632).x).toShort().toString(A(-1435118121, -1465758632).x))) } of type Function0<Nothing> is { TODO()}
2021-03-11 20:13:18,375 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:13:18,375 [main:66] - Compilation checking started
2021-03-11 20:13:18,963 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 {
            prope4.fu11()
            Kla5().fu11()
        }
    }
    prope4.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
null?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + " has no state-machine " +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in (Kla6).equals("lgrti").compareTo(true)..numberOfSuspensions) {
            if (prope8 != i) error(((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).toShort().toString(810477435) + (A((A(-1435118121, -1465758632).x), 1465758632)).x.takeLowestOneBit())
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:13:18,967 [main:107] - replacing (((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).toShort().toString(810477435) + (A((A(-1435118121, -1465758632).x), 1465758632)).x.takeLowestOneBit(), String)
2021-03-11 20:13:18,968 [main:50] - replacing ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).toShort().toString(810477435) + (A((A(-1435118121, -1465758632).x), 1465758632)).x.takeLowestOneBit() String
2021-03-11 20:13:18,969 [main:54] - Getting value of type String
2021-03-11 20:13:19,110 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:13:19,114 [main:58] - GENERATED VALUE OF TYPE String = "ttdro"
2021-03-11 20:13:19,114 [main:61] - GENERATED IS CALL =false
2021-03-11 20:13:19,122 [main:67] - randomType = Char
2021-03-11 20:13:19,251 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:13:19,272 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e31e89]
2021-03-11 20:13:19,273 [main:78] - Generated call from random type = ('ᩑ').titlecase()
2021-03-11 20:13:19,274 [main:106] - GETTING String from Int
2021-03-11 20:13:19,304 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@fea99d7], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d4a6f4c]]
2021-03-11 20:13:19,304 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@fea99d7]
2021-03-11 20:13:19,304 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d4a6f4c]
2021-03-11 20:13:19,304 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toByte().toString(A((A(-1435118121, -1465758632).x), 1465758632).x)
2021-03-11 20:13:19,304 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5352fcf1]]
2021-03-11 20:13:19,305 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:13:19,305 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5352fcf1]
2021-03-11 20:13:19,305 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toChar().lowercase()
2021-03-11 20:13:19,305 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25e54512]]
2021-03-11 20:13:19,305 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:13:19,305 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25e54512]
2021-03-11 20:13:19,305 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toChar().uppercase()
2021-03-11 20:13:19,305 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7b71a3ab], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]]
2021-03-11 20:13:19,305 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7b71a3ab]
2021-03-11 20:13:19,438 [main:302] - generating value of type = Long true depth = 0
2021-03-11 20:13:19,442 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]
2021-03-11 20:13:19,442 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).div(2030896030117222079).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
2021-03-11 20:13:19,442 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:13:19,442 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:13:19,568 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:13:19,572 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toString(1955956504)
2021-03-11 20:13:19,572 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@719e1c26], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:13:19,572 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@719e1c26]
2021-03-11 20:13:19,698 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:13:19,702 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:13:19,702 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x))
2021-03-11 20:13:19,702 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@a00b4a6], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]]
2021-03-11 20:13:19,703 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@a00b4a6]
2021-03-11 20:13:19,703 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]
2021-03-11 20:13:19,829 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:13:19,833 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toLong().toString(17666165)
2021-03-11 20:13:19,833 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16972bc5], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa4447]]
2021-03-11 20:13:19,833 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16972bc5]
2021-03-11 20:13:19,833 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa4447]
2021-03-11 20:13:19,958 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:13:19,962 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toShort().toString(-104854716)
2021-03-11 20:13:19,962 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@638e8eca]]
2021-03-11 20:13:19,963 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:13:19,963 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@638e8eca]
2021-03-11 20:13:20,091 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:13:20,095 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toChar().plus("pyjmo")
2021-03-11 20:13:20,095 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e31e89]]
2021-03-11 20:13:20,095 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:13:20,095 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e31e89]
2021-03-11 20:13:20,095 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toChar().titlecase()
2021-03-11 20:13:20,095 [main:114] - replacement of ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).toShort().toString(810477435) + (A((A(-1435118121, -1465758632).x), 1465758632)).x.takeLowestOneBit() of type String is (A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x))
2021-03-11 20:13:20,222 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:13:20,223 [main:66] - Compilation checking started
2021-03-11 20:13:20,787 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 {
            prope4.fu11()
            Kla5().fu11()
        }
    }
    prope4.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
null?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + " has no state-machine " +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in (Kla6).equals("lgrti").compareTo(true)..numberOfSuspensions) {
            if (prope8 != i) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:13:20,789 [main:107] - replacing (Kla6, Kla6)
2021-03-11 20:13:20,791 [main:50] - replacing Kla6 Kla6
2021-03-11 20:13:20,791 [main:54] - Getting value of type Kla6
2021-03-11 20:13:20,937 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 20:13:20,941 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-11 20:13:20,941 [main:58] - GENERATED VALUE OF TYPE Kla6 = Kla6
2021-03-11 20:13:20,941 [main:61] - GENERATED IS CALL =false
2021-03-11 20:13:20,948 [main:67] - randomType = String
2021-03-11 20:13:21,076 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:13:21,105 [main:106] - GETTING Kla6 from A
2021-03-11 20:13:21,111 [main:106] - GETTING Kla6 from A
2021-03-11 20:13:21,112 [main:106] - GETTING Kla6 from A
2021-03-11 20:13:21,113 [main:106] - GETTING Kla6 from Int
2021-03-11 20:13:21,143 [main:106] - GETTING Kla6 from Int
2021-03-11 20:13:21,144 [main:106] - GETTING Kla6 from Char
2021-03-11 20:13:21,162 [main:106] - GETTING Kla6 from Int
2021-03-11 20:13:21,163 [main:106] - GETTING Kla6 from Int
2021-03-11 20:13:21,163 [main:106] - GETTING Kla6 from Int?
2021-03-11 20:13:21,197 [main:106] - GETTING Kla6 from Char
2021-03-11 20:13:21,198 [main:106] - GETTING Kla6 from Int
2021-03-11 20:13:21,198 [main:106] - GETTING Kla6 from Int
2021-03-11 20:13:21,198 [main:114] - replacement of Kla6 of type Kla6 is Kla6
2021-03-11 20:13:21,324 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:13:21,326 [main:107] - replacing (" has no state-machine ", String)
2021-03-11 20:13:21,327 [main:50] - replacing " has no state-machine " String
2021-03-11 20:13:21,327 [main:54] - Getting value of type String
2021-03-11 20:13:21,453 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:13:21,457 [main:58] - GENERATED VALUE OF TYPE String = "kxmlw"
2021-03-11 20:13:21,457 [main:61] - GENERATED IS CALL =false
2021-03-11 20:13:21,604 [main:67] - randomType = Float
2021-03-11 20:13:21,730 [main:302] - generating value of type = Float true depth = 0
2021-03-11 20:13:21,770 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@2abb0e5e]
2021-03-11 20:13:21,770 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@638e8eca]
2021-03-11 20:13:21,905 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:13:21,909 [main:78] - Generated call from random type = (0.21808076f).toChar().plus("yvalj")
2021-03-11 20:13:21,910 [main:106] - GETTING String from Int
2021-03-11 20:13:21,950 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5352fcf1]]
2021-03-11 20:13:21,950 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:13:21,950 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5352fcf1]
2021-03-11 20:13:21,950 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase()
2021-03-11 20:13:21,950 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a33abcd], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:13:21,950 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a33abcd]
2021-03-11 20:13:21,950 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:13:22,081 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:13:22,084 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toInt().toString(-816575822)
2021-03-11 20:13:22,085 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@719e1c26], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:13:22,085 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@719e1c26]
2021-03-11 20:13:22,213 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:13:22,216 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:13:22,217 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).compareTo(1572271395).toString(A(1920083034, 1486922171).x)
2021-03-11 20:13:22,217 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@638e8eca]]
2021-03-11 20:13:22,217 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:13:22,217 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@638e8eca]
2021-03-11 20:13:22,344 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:13:22,348 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().plus("rrahr")
2021-03-11 20:13:22,348 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@fea99d7], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d4a6f4c]]
2021-03-11 20:13:22,348 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@fea99d7]
2021-03-11 20:13:22,348 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d4a6f4c]
2021-03-11 20:13:22,475 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:13:22,479 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toByte().toString(2146151807)
2021-03-11 20:13:22,479 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7b71a3ab], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]]
2021-03-11 20:13:22,479 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7b71a3ab]
2021-03-11 20:13:22,603 [main:302] - generating value of type = Long true depth = 0
2021-03-11 20:13:22,607 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]
2021-03-11 20:13:22,607 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).div(-6960949043797604979).toString(A(-1435118121, -1465758632).x)
2021-03-11 20:13:22,608 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@a00b4a6], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]]
2021-03-11 20:13:22,608 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@a00b4a6]
2021-03-11 20:13:22,608 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]
2021-03-11 20:13:22,744 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:13:22,747 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toLong().toString(193339303)
2021-03-11 20:13:22,748 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25e54512]]
2021-03-11 20:13:22,748 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:13:22,748 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25e54512]
2021-03-11 20:13:22,748 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().uppercase()
2021-03-11 20:13:22,748 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:13:22,748 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:13:22,874 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:13:22,877 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString(-1618908629)
2021-03-11 20:13:22,877 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16972bc5], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa4447]]
2021-03-11 20:13:22,878 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16972bc5]
2021-03-11 20:13:22,878 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa4447]
2021-03-11 20:13:22,878 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toShort().toString(A((A(-1435118121, -1465758632).x), 1465758632).x)
2021-03-11 20:13:22,878 [main:114] - replacement of " has no state-machine " of type String is (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase()
2021-03-11 20:13:23,001 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:13:23,001 [main:66] - Compilation checking started
2021-03-11 20:13:23,627 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 {
            prope4.fu11()
            Kla5().fu11()
        }
    }
    prope4.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
null?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in (Kla6).equals("lgrti").compareTo(true)..numberOfSuspensions) {
            if (prope8 != i) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:13:23,631 [main:107] - replacing (" is not subtype of CoroutineStackFrame", String)
2021-03-11 20:13:23,631 [main:50] - replacing " is not subtype of CoroutineStackFrame" String
2021-03-11 20:13:23,631 [main:54] - Getting value of type String
2021-03-11 20:13:23,780 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:13:23,793 [main:58] - GENERATED VALUE OF TYPE String = "mswab"
2021-03-11 20:13:23,794 [main:61] - GENERATED IS CALL =false
2021-03-11 20:13:23,801 [main:67] - randomType = UInt
2021-03-11 20:13:23,931 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 20:13:23,964 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@4f96836d]
2021-03-11 20:13:23,964 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]
2021-03-11 20:13:23,965 [main:78] - Generated call from random type = (1154587479.toUInt()).toLong().toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
2021-03-11 20:13:23,966 [main:106] - GETTING String from Char
2021-03-11 20:13:23,982 [main:113] - Case = [public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@53b6d9], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d4a6f4c]]
2021-03-11 20:13:23,982 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@53b6d9]
2021-03-11 20:13:23,983 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d4a6f4c]
2021-03-11 20:13:23,983 [main:117] - GENERATED CALL = ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).toByte().toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
2021-03-11 20:13:23,983 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@638e8eca]]
2021-03-11 20:13:23,983 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@638e8eca]
2021-03-11 20:13:24,108 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:13:24,111 [main:117] - GENERATED CALL = ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).plus("xwcqm")
2021-03-11 20:13:24,112 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e31e89]]
2021-03-11 20:13:24,112 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e31e89]
2021-03-11 20:13:24,112 [main:117] - GENERATED CALL = ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).titlecase()
2021-03-11 20:13:24,112 [main:113] - Case = [public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@27446428], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa4447]]
2021-03-11 20:13:24,112 [main:149] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@27446428]
2021-03-11 20:13:24,112 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa4447]
2021-03-11 20:13:24,112 [main:117] - GENERATED CALL = ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).toShort().toString((A((A(-1435118121, -1465758632).x), 1465758632).x))
2021-03-11 20:13:24,112 [main:113] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5170c12d], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]]
2021-03-11 20:13:24,112 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5170c12d]
2021-03-11 20:13:24,113 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]
2021-03-11 20:13:24,237 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:13:24,241 [main:117] - GENERATED CALL = ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).toLong().toString(-999894294)
2021-03-11 20:13:24,241 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5352fcf1]]
2021-03-11 20:13:24,242 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5352fcf1]
2021-03-11 20:13:24,242 [main:117] - GENERATED CALL = ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).lowercase()
2021-03-11 20:13:24,242 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25e54512]]
2021-03-11 20:13:24,242 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25e54512]
2021-03-11 20:13:24,242 [main:117] - GENERATED CALL = ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).uppercase()
2021-03-11 20:13:24,242 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@697b1b46], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:13:24,242 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@697b1b46]
2021-03-11 20:13:24,374 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:13:24,378 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:13:24,378 [main:117] - GENERATED CALL = ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).compareTo('밨').toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
2021-03-11 20:13:24,378 [main:114] - replacement of " is not subtype of CoroutineStackFrame" of type String is ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).uppercase()
2021-03-11 20:13:24,506 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:13:24,507 [main:66] - Compilation checking started
2021-03-11 20:13:25,114 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 {
            prope4.fu11()
            Kla5().fu11()
        }
    }
    prope4.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
null?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error("Continuation " + c + ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).uppercase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in (Kla6).equals("lgrti").compareTo(true)..numberOfSuspensions) {
            if (prope8 != i) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:13:25,117 [main:107] - replacing (null?.let(x), Unit?)
2021-03-11 20:13:25,117 [main:50] - replacing null?.let(x) Unit?
2021-03-11 20:13:25,117 [main:54] - Getting value of type Unit?
2021-03-11 20:13:25,265 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 20:13:25,406 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 20:13:25,411 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 20:13:25,896 [main:302] - generating value of type = Int true depth = 3
2021-03-11 20:13:25,900 [main:302] - generating value of type = Function1<Int, Unit> false depth = 3
2021-03-11 20:13:25,904 [main:302] - generating value of type = Unit false depth = 4
2021-03-11 20:13:26,059 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:13:26,064 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:13:26,381 [main:302] - generating value of type = Boolean true depth = 7
2021-03-11 20:13:26,385 [main:95] - GENERATED = check(false)
2021-03-11 20:13:26,385 [main:95] - GENERATED = repeat(1003709662, {a: Int -> check(false)})
2021-03-11 20:13:26,386 [main:58] - GENERATED VALUE OF TYPE Unit? = repeat(1003709662, {a: Int -> check(false)})
2021-03-11 20:13:26,386 [main:61] - GENERATED IS CALL =true
2021-03-11 20:13:26,893 [main:67] - randomType = HashMap<Float, Byte>
2021-03-11 20:13:27,020 [main:302] - generating value of type = HashMap<Float, Byte> false depth = 0
2021-03-11 20:13:27,155 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Float, Byte>): HashMap<Float, Byte> = TODO()
2021-03-11 20:13:27,160 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Float, Byte>): HashMap<Float, Byte> = TODO()
2021-03-11 20:13:27,298 [main:302] - generating value of type = Pair<Float, Byte> false depth = 3
2021-03-11 20:13:27,431 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Float, second: Byte): Pair<Float, Byte> = TODO()
2021-03-11 20:13:27,435 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Float, second: Byte): Pair<Float, Byte> = TODO()
2021-03-11 20:13:27,570 [main:302] - generating value of type = Float true depth = 6
2021-03-11 20:13:27,574 [main:302] - generating value of type = Byte true depth = 6
2021-03-11 20:13:27,577 [main:95] - GENERATED = Pair<Float, Byte>(0.579355f, 106)
2021-03-11 20:13:27,578 [main:95] - GENERATED = linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))
2021-03-11 20:13:27,685 [main:149] - GENERATING call of type public abstract fun clear(): kotlin.Unit defined in kotlin.collections.MutableSet[DeserializedSimpleFunctionDescriptor@3a014979]
2021-03-11 20:13:27,685 [main:78] - Generated call from random type = (linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
2021-03-11 20:13:27,687 [main:106] - GETTING Unit? from A
2021-03-11 20:13:27,697 [main:106] - GETTING Unit? from Int
2021-03-11 20:13:27,751 [main:106] - GETTING Unit? from A
2021-03-11 20:13:27,752 [main:106] - GETTING Unit? from A
2021-03-11 20:13:27,753 [main:106] - GETTING Unit? from Int?
2021-03-11 20:13:27,801 [main:106] - GETTING Unit? from Char
2021-03-11 20:13:27,819 [main:106] - GETTING Unit? from Char
2021-03-11 20:13:27,820 [main:106] - GETTING Unit? from Int
2021-03-11 20:13:27,821 [main:106] - GETTING Unit? from Int
2021-03-11 20:13:27,822 [main:106] - GETTING Unit? from Int
2021-03-11 20:13:27,823 [main:106] - GETTING Unit? from Int
2021-03-11 20:13:27,824 [main:106] - GETTING Unit? from Int
2021-03-11 20:13:27,824 [main:114] - replacement of null?.let(x) of type Unit? is (linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
2021-03-11 20:13:27,952 [main:33] - Trying to replace Element(SAFE_ACCESS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:13:27,953 [main:66] - Compilation checking started
2021-03-11 20:13:28,802 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 {
            prope4.fu11()
            Kla5().fu11()
        }
    }
    prope4.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error("Continuation " + c + ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).uppercase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in (Kla6).equals("lgrti").compareTo(true)..numberOfSuspensions) {
            if (prope8 != i) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:13:28,807 [main:107] - replacing (x, Function1<Ty0, Unit>)
2021-03-11 20:13:28,808 [main:50] - replacing x Function1<Ty0, Unit>
2021-03-11 20:13:28,808 [main:54] - Getting value of type Function1<Ty0, Unit>
2021-03-11 20:13:28,987 [main:302] - generating value of type = Function1<Ty0, Unit> false depth = 0
2021-03-11 20:13:28,992 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:13:29,153 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:13:29,158 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:13:29,644 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 20:13:29,648 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 20:13:29,652 [main:302] - generating value of type = Any false depth = 5
2021-03-11 20:13:29,652 [main:95] - GENERATED = require(true, { "euzqa"})
2021-03-11 20:13:29,652 [main:58] - GENERATED VALUE OF TYPE Function1<Ty0, Unit> = {a: Ty0 -> require(true, { "euzqa"})}
2021-03-11 20:13:29,652 [main:61] - GENERATED IS CALL =false
2021-03-11 20:13:29,825 [main:67] - randomType = ArrayList<Char>
2021-03-11 20:13:29,981 [main:302] - generating value of type = ArrayList<Char> false depth = 0
2021-03-11 20:13:30,127 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Char> = TODO()
2021-03-11 20:13:30,132 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Char> = TODO()
2021-03-11 20:13:30,282 [main:95] - GENERATED = arrayListOf<Char>()
2021-03-11 20:13:30,405 [main:106] - GETTING Function1<Ty0, Unit> from A
2021-03-11 20:13:30,413 [main:106] - GETTING Function1<Ty0, Unit> from Int
2021-03-11 20:13:30,444 [main:106] - GETTING Function1<Ty0, Unit> from Int
2021-03-11 20:13:30,445 [main:106] - GETTING Function1<Ty0, Unit> from A
2021-03-11 20:13:30,446 [main:106] - GETTING Function1<Ty0, Unit> from Int
2021-03-11 20:13:30,448 [main:106] - GETTING Function1<Ty0, Unit> from Int?
2021-03-11 20:13:30,481 [main:106] - GETTING Function1<Ty0, Unit> from Int
2021-03-11 20:13:30,482 [main:106] - GETTING Function1<Ty0, Unit> from Int
2021-03-11 20:13:30,484 [main:106] - GETTING Function1<Ty0, Unit> from Char
2021-03-11 20:13:30,503 [main:106] - GETTING Function1<Ty0, Unit> from A
2021-03-11 20:13:30,504 [main:106] - GETTING Function1<Ty0, Unit> from Int
2021-03-11 20:13:30,505 [main:106] - GETTING Function1<Ty0, Unit> from Char
2021-03-11 20:13:30,505 [main:114] - replacement of x of type Function1<Ty0, Unit> is {a: Ty0 -> require(true, { "euzqa"})}
2021-03-11 20:13:30,639 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:13:30,640 [main:66] - Compilation checking started
2021-03-11 20:13:31,392 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 {
            prope4.fu11()
            Kla5().fu11()
        }
    }
    prope4.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error("Continuation " + c + ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).uppercase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in (Kla6).equals("lgrti").compareTo(true)..numberOfSuspensions) {
            if (prope8 != i) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:13:31,395 [main:107] - replacing (prope6, Result<Ty0>)
2021-03-11 20:13:31,396 [main:50] - replacing prope6 Result<Ty0>
2021-03-11 20:13:31,396 [main:54] - Getting value of type Result<Ty0>
2021-03-11 20:13:31,559 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-11 20:13:31,716 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 20:13:31,721 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 20:13:32,025 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 20:13:32,025 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-11 20:13:32,193 [main:67] - randomType = List<String>
2021-03-11 20:13:32,195 [main:106] - GETTING Result<Ty0> from Char
2021-03-11 20:13:32,214 [main:106] - GETTING Result<Ty0> from A
2021-03-11 20:13:32,222 [main:106] - GETTING Result<Ty0> from Int?
2021-03-11 20:13:32,255 [main:106] - GETTING Result<Ty0> from A
2021-03-11 20:13:32,256 [main:106] - GETTING Result<Ty0> from Int
2021-03-11 20:13:32,287 [main:106] - GETTING Result<Ty0> from Int
2021-03-11 20:13:32,288 [main:106] - GETTING Result<Ty0> from Int
2021-03-11 20:13:32,290 [main:106] - GETTING Result<Ty0> from Int
2021-03-11 20:13:32,291 [main:106] - GETTING Result<Ty0> from Int
2021-03-11 20:13:32,292 [main:106] - GETTING Result<Ty0> from Char
2021-03-11 20:13:32,293 [main:106] - GETTING Result<Ty0> from A
2021-03-11 20:13:32,294 [main:106] - GETTING Result<Ty0> from Int
2021-03-11 20:13:32,294 [main:111] - Cant find and generate replacement for prope6 type Result<Ty0>
2021-03-11 20:13:32,294 [main:107] - replacing (this, Kla2)
2021-03-11 20:13:32,295 [main:50] - replacing this Kla2
2021-03-11 20:13:32,295 [main:54] - Getting value of type Kla2
2021-03-11 20:13:32,426 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 20:13:32,430 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}
2021-03-11 20:13:32,430 [main:58] - GENERATED VALUE OF TYPE Kla2 = Kla2()
2021-03-11 20:13:32,431 [main:61] - GENERATED IS CALL =true
2021-03-11 20:13:32,439 [main:67] - randomType = UInt
2021-03-11 20:13:32,570 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 20:13:32,602 [main:106] - GETTING Kla2 from Int
2021-03-11 20:13:32,633 [main:106] - GETTING Kla2 from Int
2021-03-11 20:13:32,634 [main:106] - GETTING Kla2 from Int
2021-03-11 20:13:32,634 [main:106] - GETTING Kla2 from Int?
2021-03-11 20:13:32,667 [main:106] - GETTING Kla2 from A
2021-03-11 20:13:32,673 [main:106] - GETTING Kla2 from A
2021-03-11 20:13:32,674 [main:106] - GETTING Kla2 from Char
2021-03-11 20:13:32,692 [main:106] - GETTING Kla2 from Int
2021-03-11 20:13:32,693 [main:106] - GETTING Kla2 from A
2021-03-11 20:13:32,694 [main:106] - GETTING Kla2 from Char
2021-03-11 20:13:32,694 [main:106] - GETTING Kla2 from Int
2021-03-11 20:13:32,695 [main:106] - GETTING Kla2 from Int
2021-03-11 20:13:32,695 [main:114] - replacement of this of type Kla2 is Kla2()
2021-03-11 20:13:32,832 [main:33] - Trying to replace Element(THIS_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:13:32,832 [main:66] - Compilation checking started
2021-03-11 20:13:33,479 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 {
            prope4.fu11()
            Kla5().fu11()
        }
    }
    prope4.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error("Continuation " + c + ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).uppercase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in (Kla6).equals("lgrti").compareTo(true)..numberOfSuspensions) {
            if (prope8 != i) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:13:33,482 [main:107] - replacing ("Wrong state-machine generated: it is not finished yet", String)
2021-03-11 20:13:33,482 [main:50] - replacing "Wrong state-machine generated: it is not finished yet" String
2021-03-11 20:13:33,482 [main:54] - Getting value of type String
2021-03-11 20:13:33,641 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:13:33,645 [main:58] - GENERATED VALUE OF TYPE String = "seeln"
2021-03-11 20:13:33,645 [main:61] - GENERATED IS CALL =false
2021-03-11 20:13:33,806 [main:67] - randomType = Short
2021-03-11 20:13:33,938 [main:302] - generating value of type = Short true depth = 0
2021-03-11 20:13:33,978 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a33abcd]
2021-03-11 20:13:33,978 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:13:33,979 [main:78] - Generated call from random type = (-30534).toInt().toString(A((A(-1435118121, -1465758632).x), 1465758632).x)
2021-03-11 20:13:33,980 [main:106] - GETTING String from Int
2021-03-11 20:13:34,011 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5352fcf1]]
2021-03-11 20:13:34,011 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:13:34,011 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5352fcf1]
2021-03-11 20:13:34,012 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().lowercase()
2021-03-11 20:13:34,012 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@638e8eca]]
2021-03-11 20:13:34,012 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:13:34,012 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@638e8eca]
2021-03-11 20:13:34,145 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:13:34,150 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().plus("wmbdm")
2021-03-11 20:13:34,150 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16972bc5], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa4447]]
2021-03-11 20:13:34,150 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16972bc5]
2021-03-11 20:13:34,150 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa4447]
2021-03-11 20:13:34,151 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632).x).toShort().toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
2021-03-11 20:13:34,151 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@fea99d7], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d4a6f4c]]
2021-03-11 20:13:34,151 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@fea99d7]
2021-03-11 20:13:34,151 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d4a6f4c]
2021-03-11 20:13:34,151 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632).x).toByte().toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
2021-03-11 20:13:34,151 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7b71a3ab], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]]
2021-03-11 20:13:34,151 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7b71a3ab]
2021-03-11 20:13:34,291 [main:302] - generating value of type = Long true depth = 0
2021-03-11 20:13:34,295 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]
2021-03-11 20:13:34,295 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632).x).div(-3599298565552044001).toString(A(-1435118121, -1465758632).x)
2021-03-11 20:13:34,295 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25e54512]]
2021-03-11 20:13:34,295 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:13:34,296 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25e54512]
2021-03-11 20:13:34,296 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().uppercase()
2021-03-11 20:13:34,296 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:13:34,296 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:13:34,435 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:13:34,440 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632).x).toString(-1798061714)
2021-03-11 20:13:34,440 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a33abcd], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:13:34,440 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a33abcd]
2021-03-11 20:13:34,440 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:13:34,441 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632).x).toInt().toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
2021-03-11 20:13:34,441 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@719e1c26], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:13:34,441 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@719e1c26]
2021-03-11 20:13:34,441 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:13:34,441 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632).x).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x)).toString(A((A(-1435118121, -1465758632).x), 1465758632).x)
2021-03-11 20:13:34,441 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@a00b4a6], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]]
2021-03-11 20:13:34,441 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@a00b4a6]
2021-03-11 20:13:34,441 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]
2021-03-11 20:13:34,442 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)
2021-03-11 20:13:34,442 [main:114] - replacement of "Wrong state-machine generated: it is not finished yet" of type String is (A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)
2021-03-11 20:13:34,580 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:13:34,580 [main:66] - Compilation checking started
2021-03-11 20:13:35,243 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 {
            prope4.fu11()
            Kla5().fu11()
        }
    }
    prope4.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error("Continuation " + c + ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).uppercase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in (Kla6).equals("lgrti").compareTo(true)..numberOfSuspensions) {
            if (prope8 != i) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:13:35,246 [main:107] - replacing (c, Continuation<*>)
2021-03-11 20:13:35,246 [main:50] - replacing c Continuation<*>
2021-03-11 20:13:35,246 [main:54] - Getting value of type Continuation<*>
2021-03-11 20:13:35,386 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 20:13:35,530 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:13:35,535 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:13:36,017 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 20:13:36,158 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:13:36,164 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:13:36,476 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 20:13:36,623 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:13:36,628 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:13:37,147 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-11 20:13:37,294 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:13:37,300 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:13:37,780 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 12
2021-03-11 20:13:37,926 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:13:37,931 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:13:38,416 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 15
2021-03-11 20:13:38,562 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:13:38,567 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:13:39,117 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:13:39,117 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:13:39,117 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:13:39,117 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:13:39,117 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:13:39,117 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:13:39,117 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 20:13:39,291 [main:67] - randomType = Kla6?
2021-03-11 20:13:39,423 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 20:13:39,427 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-11 20:13:39,447 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:13:39,478 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:13:39,479 [main:106] - GETTING Continuation<*> from Int?
2021-03-11 20:13:39,511 [main:106] - GETTING Continuation<*> from A
2021-03-11 20:13:39,518 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:13:39,519 [main:106] - GETTING Continuation<*> from Char
2021-03-11 20:13:39,538 [main:106] - GETTING Continuation<*> from Char
2021-03-11 20:13:39,539 [main:106] - GETTING Continuation<*> from A
2021-03-11 20:13:39,539 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:13:39,540 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:13:39,541 [main:106] - GETTING Continuation<*> from A
2021-03-11 20:13:39,542 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:13:39,542 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 20:13:39,542 [main:107] - replacing (it, Continuation<Unit>)
2021-03-11 20:13:39,542 [main:50] - replacing it Continuation<Unit>
2021-03-11 20:13:39,542 [main:54] - Getting value of type Continuation<Unit>
2021-03-11 20:13:39,675 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-11 20:13:39,815 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 20:13:39,820 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 20:13:40,294 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 20:13:40,433 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:13:40,438 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:13:40,746 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 20:13:40,925 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:13:40,931 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:13:41,441 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-11 20:13:41,597 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:13:41,602 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:13:42,091 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 12
2021-03-11 20:13:42,236 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:13:42,241 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:13:42,719 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 15
2021-03-11 20:13:42,861 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:13:42,867 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:13:43,401 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:13:43,401 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:13:43,401 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:13:43,401 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:13:43,401 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:13:43,401 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 20:13:43,401 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-11 20:13:43,409 [main:67] - randomType = Float
2021-03-11 20:13:43,551 [main:302] - generating value of type = Float true depth = 0
2021-03-11 20:13:43,602 [main:106] - GETTING Continuation<Unit> from A
2021-03-11 20:13:43,612 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 20:13:43,653 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 20:13:43,654 [main:106] - GETTING Continuation<Unit> from Char
2021-03-11 20:13:43,676 [main:106] - GETTING Continuation<Unit> from Char
2021-03-11 20:13:43,677 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 20:13:43,678 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 20:13:43,679 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 20:13:43,680 [main:106] - GETTING Continuation<Unit> from A
2021-03-11 20:13:43,681 [main:106] - GETTING Continuation<Unit> from Int?
2021-03-11 20:13:43,715 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 20:13:43,716 [main:106] - GETTING Continuation<Unit> from A
2021-03-11 20:13:43,716 [main:111] - Cant find and generate replacement for it type Continuation<Unit>
2021-03-11 20:13:43,716 [main:107] - replacing (prope4, Kla5)
2021-03-11 20:13:43,716 [main:50] - replacing prope4 Kla5
2021-03-11 20:13:43,716 [main:54] - Getting value of type Kla5
2021-03-11 20:13:43,849 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 20:13:43,853 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in (Kla6).equals("lgrti").compareTo(true)..numberOfSuspensions) {
            if (prope8 != i) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}
2021-03-11 20:13:43,853 [main:58] - GENERATED VALUE OF TYPE Kla5 = Kla5()
2021-03-11 20:13:43,853 [main:61] - GENERATED IS CALL =true
2021-03-11 20:13:43,861 [main:67] - randomType = Float
2021-03-11 20:13:43,995 [main:302] - generating value of type = Float true depth = 0
2021-03-11 20:13:44,039 [main:106] - GETTING Kla5 from Int
2021-03-11 20:13:44,069 [main:106] - GETTING Kla5 from Char
2021-03-11 20:13:44,086 [main:106] - GETTING Kla5 from Char
2021-03-11 20:13:44,087 [main:106] - GETTING Kla5 from Int
2021-03-11 20:13:44,088 [main:106] - GETTING Kla5 from Int
2021-03-11 20:13:44,088 [main:106] - GETTING Kla5 from A
2021-03-11 20:13:44,095 [main:106] - GETTING Kla5 from Int
2021-03-11 20:13:44,095 [main:106] - GETTING Kla5 from Int?
2021-03-11 20:13:44,128 [main:106] - GETTING Kla5 from Int
2021-03-11 20:13:44,128 [main:106] - GETTING Kla5 from A
2021-03-11 20:13:44,129 [main:106] - GETTING Kla5 from A
2021-03-11 20:13:44,130 [main:106] - GETTING Kla5 from Int
2021-03-11 20:13:44,130 [main:114] - replacement of prope4 of type Kla5 is Kla5()
2021-03-11 20:13:44,265 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:13:44,265 [main:66] - Compilation checking started
2021-03-11 20:13:44,988 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 {
            prope4.fu11()
            Kla5().fu11()
        }
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error("Continuation " + c + ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).uppercase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in (Kla6).equals("lgrti").compareTo(true)..numberOfSuspensions) {
            if (prope8 != i) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:13:44,992 [main:107] - replacing ({
            prope4.prope9 = true
        }, Function0<Unit>)
2021-03-11 20:13:44,992 [main:50] - replacing {
            prope4.prope9 = true
        } Function0<Unit>
2021-03-11 20:13:44,993 [main:54] - Getting value of type Function0<Unit>
2021-03-11 20:13:45,172 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 20:13:45,176 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:13:45,185 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 20:13:45,185 [main:61] - GENERATED IS CALL =false
2021-03-11 20:13:45,683 [main:67] - randomType = ArrayDeque<UByte>
2021-03-11 20:13:45,818 [main:302] - generating value of type = ArrayDeque<UByte> false depth = 0
2021-03-11 20:13:45,958 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<UByte> = TODO()
2021-03-11 20:13:45,963 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<UByte> = TODO()
2021-03-11 20:13:46,102 [main:95] - GENERATED = ArrayDeque<UByte>()
2021-03-11 20:13:46,229 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:13:46,260 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:13:46,261 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:13:46,262 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 20:13:46,280 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:13:46,281 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:13:46,282 [main:106] - GETTING Function0<Unit> from A
2021-03-11 20:13:46,290 [main:106] - GETTING Function0<Unit> from Int?
2021-03-11 20:13:46,323 [main:106] - GETTING Function0<Unit> from A
2021-03-11 20:13:46,324 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:13:46,325 [main:106] - GETTING Function0<Unit> from A
2021-03-11 20:13:46,326 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 20:13:46,326 [main:114] - replacement of {
            prope4.prope9 = true
        } of type Function0<Unit> is { println()}
2021-03-11 20:13:46,458 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:13:46,458 [main:66] - Compilation checking started
2021-03-11 20:13:47,097 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 {
            prope4.fu11()
            Kla5().fu11()
        }
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error("Continuation " + c + ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).uppercase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in (Kla6).equals("lgrti").compareTo(true)..numberOfSuspensions) {
            if (prope8 != i) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:13:47,100 [main:107] - replacing (exceptionOrNull(), Throwable?)
2021-03-11 20:13:47,101 [main:50] - replacing exceptionOrNull() Throwable?
2021-03-11 20:13:47,101 [main:54] - Getting value of type Throwable?
2021-03-11 20:13:47,268 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 20:13:47,440 [main:43] - GENERATING CALL OF fun AssertionError(message: kotlin.Any?): Throwable = TODO()
2021-03-11 20:13:47,445 [main:61] - WITHOUT TYPE PARAMS = fun AssertionError(message: kotlin.Any?): Throwable = TODO()
2021-03-11 20:13:47,741 [main:302] - generating value of type = Any false depth = 3
2021-03-11 20:13:47,741 [main:95] - GENERATED = AssertionError("xfjyy")
2021-03-11 20:13:47,741 [main:58] - GENERATED VALUE OF TYPE Throwable? = AssertionError("xfjyy")
2021-03-11 20:13:47,741 [main:61] - GENERATED IS CALL =true
2021-03-11 20:13:47,757 [main:67] - randomType = A
2021-03-11 20:13:47,893 [main:302] - generating value of type = A false depth = 0
2021-03-11 20:13:47,897 [main:112] - generating klass A text = data class A(var x: Int, val z: Int?)
2021-03-11 20:13:48,043 [main:194] - Type params = []
2021-03-11 20:13:48,185 [main:302] - generating value of type = Int true depth = 2
2021-03-11 20:13:48,189 [main:302] - generating value of type = Int true depth = 2
2021-03-11 20:13:48,200 [main:106] - GETTING Throwable? from A
2021-03-11 20:13:48,206 [main:106] - GETTING Throwable? from Int
2021-03-11 20:13:48,236 [main:106] - GETTING Throwable? from Int
2021-03-11 20:13:48,237 [main:106] - GETTING Throwable? from Char
2021-03-11 20:13:48,255 [main:106] - GETTING Throwable? from A
2021-03-11 20:13:48,256 [main:106] - GETTING Throwable? from Char
2021-03-11 20:13:48,257 [main:106] - GETTING Throwable? from Int
2021-03-11 20:13:48,257 [main:106] - GETTING Throwable? from Int
2021-03-11 20:13:48,258 [main:106] - GETTING Throwable? from Int
2021-03-11 20:13:48,259 [main:106] - GETTING Throwable? from Int
2021-03-11 20:13:48,259 [main:106] - GETTING Throwable? from A
2021-03-11 20:13:48,260 [main:106] - GETTING Throwable? from Int?
2021-03-11 20:13:48,292 [main:114] - replacement of exceptionOrNull() of type Throwable? is AssertionError("xfjyy")
2021-03-11 20:13:48,424 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:13:48,427 [main:107] - replacing (c, SuspendFunction0<Unit>)
2021-03-11 20:13:48,427 [main:50] - replacing c SuspendFunction0<Unit>
2021-03-11 20:13:48,427 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-11 20:13:48,560 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-11 20:13:48,564 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:13:48,704 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:13:48,709 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:13:49,168 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 20:13:49,172 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 20:13:49,176 [main:302] - generating value of type = Any false depth = 5
2021-03-11 20:13:49,176 [main:95] - GENERATED = require(false, { "dcqld"})
2021-03-11 20:13:49,176 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { require(false, { "dcqld"})}
2021-03-11 20:13:49,176 [main:61] - GENERATED IS CALL =false
2021-03-11 20:13:49,332 [main:67] - randomType = ULong
2021-03-11 20:13:49,464 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 20:13:49,499 [main:106] - GETTING SuspendFunction0<Unit> from A
2021-03-11 20:13:49,506 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:13:49,536 [main:106] - GETTING SuspendFunction0<Unit> from Char
2021-03-11 20:13:49,560 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:13:49,561 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:13:49,563 [main:106] - GETTING SuspendFunction0<Unit> from A
2021-03-11 20:13:49,564 [main:106] - GETTING SuspendFunction0<Unit> from A
2021-03-11 20:13:49,566 [main:106] - GETTING SuspendFunction0<Unit> from Char
2021-03-11 20:13:49,567 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:13:49,569 [main:106] - GETTING SuspendFunction0<Unit> from Int?
2021-03-11 20:13:49,602 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:13:49,603 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:13:49,603 [main:114] - replacement of c of type SuspendFunction0<Unit> is { require(false, { "dcqld"})}
2021-03-11 20:13:49,734 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:13:49,734 [main:66] - Compilation checking started
2021-03-11 20:13:50,173 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
{ require(false, { "dcqld"})}.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 {
            prope4.fu11()
            Kla5().fu11()
        }
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error("Continuation " + c + ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).uppercase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in (Kla6).equals("lgrti").compareTo(true)..numberOfSuspensions) {
            if (prope8 != i) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:13:50,176 [main:107] - replacing (c, Continuation<*>)
2021-03-11 20:13:50,177 [main:50] - replacing c Continuation<*>
2021-03-11 20:13:50,177 [main:54] - Getting value of type Continuation<*>
2021-03-11 20:13:50,312 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 20:13:50,459 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:13:50,464 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:13:50,984 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 20:13:51,136 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:13:51,143 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:13:51,480 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 20:13:51,643 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:13:51,649 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:13:52,173 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-11 20:13:52,335 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:13:52,341 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:13:52,861 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 12
2021-03-11 20:13:53,017 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:13:53,022 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:13:53,557 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 15
2021-03-11 20:13:53,706 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:13:53,711 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:13:54,192 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 18
2021-03-11 20:13:54,192 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:13:54,193 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:13:54,193 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:13:54,194 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:13:54,194 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:13:54,194 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:13:54,194 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 20:13:54,885 [main:67] - randomType = Triple<Kla1, Short, Byte?>?
2021-03-11 20:13:55,019 [main:302] - generating value of type = Triple<Kla1, Short, Byte?> false depth = 0
2021-03-11 20:13:55,159 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Kla1, second: Short, third: Byte?): Triple<Kla1, Short, Byte?> = TODO()
2021-03-11 20:13:55,165 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Kla1, second: Short, third: Byte?): Triple<Kla1, Short, Byte?> = TODO()
2021-03-11 20:13:55,306 [main:302] - generating value of type = Kla1 false depth = 3
2021-03-11 20:13:55,310 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}
2021-03-11 20:13:55,441 [main:194] - Type params = []
2021-03-11 20:13:55,603 [main:302] - generating value of type = CoroutineContext false depth = 5
2021-03-11 20:13:55,742 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:13:55,747 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:13:56,059 [main:302] - generating value of type = Key<*> false depth = 8
2021-03-11 20:13:56,204 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:13:56,210 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:13:56,678 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:13:56,678 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:13:56,678 [main:302] - generating value of type = Short true depth = 3
2021-03-11 20:13:56,682 [main:302] - generating value of type = Byte true depth = 3
2021-03-11 20:13:56,686 [main:95] - GENERATED = Triple<Kla1, Short, Byte?>(Kla1(), -20622, -86)
2021-03-11 20:13:56,707 [main:106] - GETTING Continuation<*> from Char
2021-03-11 20:13:56,726 [main:106] - GETTING Continuation<*> from A
2021-03-11 20:13:56,733 [main:106] - GETTING Continuation<*> from Int?
2021-03-11 20:13:56,767 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:13:56,801 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:13:56,802 [main:106] - GETTING Continuation<*> from A
2021-03-11 20:13:56,803 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:13:56,804 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:13:56,804 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:13:56,805 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:13:56,806 [main:106] - GETTING Continuation<*> from A
2021-03-11 20:13:56,807 [main:106] - GETTING Continuation<*> from Char
2021-03-11 20:13:56,807 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 20:13:56,807 [main:107] - replacing (prope6.getOrThrow(), Any?)
2021-03-11 20:13:56,807 [main:50] - replacing prope6.getOrThrow() Any?
2021-03-11 20:13:56,807 [main:54] - Getting value of type Any?
2021-03-11 20:13:56,939 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:13:56,939 [main:58] - GENERATED VALUE OF TYPE Any? = "wbuex"
2021-03-11 20:13:56,939 [main:61] - GENERATED IS CALL =false
2021-03-11 20:13:57,436 [main:67] - randomType = HashMap<Kla1, List<Char>>
2021-03-11 20:13:57,566 [main:302] - generating value of type = HashMap<Kla1, List<Char>> false depth = 0
2021-03-11 20:13:57,706 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Kla1, List<Char>>): HashMap<Kla1, List<Char>> = TODO()
2021-03-11 20:13:57,711 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Kla1, List<Char>>): HashMap<Kla1, List<Char>> = TODO()
2021-03-11 20:13:57,854 [main:302] - generating value of type = Pair<Kla1, List<Char>> false depth = 3
2021-03-11 20:13:57,994 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla1, second: List<Char>): Pair<Kla1, List<Char>> = TODO()
2021-03-11 20:13:57,999 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla1, second: List<Char>): Pair<Kla1, List<Char>> = TODO()
2021-03-11 20:13:58,162 [main:302] - generating value of type = Kla1 false depth = 6
2021-03-11 20:13:58,166 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}
2021-03-11 20:13:58,299 [main:194] - Type params = []
2021-03-11 20:13:58,433 [main:302] - generating value of type = CoroutineContext false depth = 8
2021-03-11 20:13:58,571 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:13:58,576 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:13:58,884 [main:302] - generating value of type = Key<*> false depth = 11
2021-03-11 20:13:59,026 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:13:59,031 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:13:59,517 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 14
2021-03-11 20:13:59,665 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:13:59,670 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:14:00,140 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 17
2021-03-11 20:14:00,140 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:14:00,141 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:14:00,141 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:14:00,141 [main:302] - generating value of type = List<Char> false depth = 6
2021-03-11 20:14:00,282 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Char): List<Char> = TODO()
2021-03-11 20:14:00,287 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Char): List<Char> = TODO()
2021-03-11 20:14:00,427 [main:302] - generating value of type = Char true depth = 9
2021-03-11 20:14:00,431 [main:95] - GENERATED = arrayListOf<Char>('캰')
2021-03-11 20:14:00,431 [main:95] - GENERATED = Pair<Kla1, List<Char>>(Kla1(), arrayListOf<Char>('캰'))
2021-03-11 20:14:00,431 [main:95] - GENERATED = linkedMapOf<Kla1, List<Char>>(Pair<Kla1, List<Char>>(Kla1(), arrayListOf<Char>('캰')))
2021-03-11 20:14:00,558 [main:106] - GETTING Any? from Int
2021-03-11 20:14:00,592 [main:106] - GETTING Any? from Int?
2021-03-11 20:14:00,625 [main:106] - GETTING Any? from A
2021-03-11 20:14:00,631 [main:106] - GETTING Any? from Int
2021-03-11 20:14:00,632 [main:106] - GETTING Any? from Char
2021-03-11 20:14:00,651 [main:106] - GETTING Any? from Int
2021-03-11 20:14:00,652 [main:106] - GETTING Any? from Int
2021-03-11 20:14:00,653 [main:106] - GETTING Any? from Char
2021-03-11 20:14:00,654 [main:106] - GETTING Any? from A
2021-03-11 20:14:00,655 [main:106] - GETTING Any? from Int
2021-03-11 20:14:00,656 [main:106] - GETTING Any? from Int
2021-03-11 20:14:00,657 [main:106] - GETTING Any? from A
2021-03-11 20:14:00,657 [main:114] - replacement of prope6.getOrThrow() of type Any? is "wbuex"
2021-03-11 20:14:00,815 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 20:14:00,816 [main:66] - Compilation checking started
2021-03-11 20:14:01,469 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 {
            prope4.fu11()
            Kla5().fu11()
        }
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error("Continuation " + c + ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).uppercase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in (Kla6).equals("lgrti").compareTo(true)..numberOfSuspensions) {
            if (prope8 != i) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:14:01,472 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 20:14:01,472 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 20:14:01,472 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 20:14:01,601 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 20:14:01,608 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 20:14:02,320 [main:67] - randomType = HashMap<Kla5?, Kla3<Kla4>>?
2021-03-11 20:14:02,451 [main:302] - generating value of type = HashMap<Kla5?, Kla3<Kla4>> false depth = 0
2021-03-11 20:14:02,589 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): HashMap<Kla5?, Kla3<Kla4>> = TODO()
2021-03-11 20:14:02,594 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): HashMap<Kla5?, Kla3<Kla4>> = TODO()
2021-03-11 20:14:02,733 [main:95] - GENERATED = linkedMapOf<Kla5?, Kla3<Kla4>>()
2021-03-11 20:14:02,848 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:14:02,878 [main:106] - GETTING EmptyCoroutineContext from Int?
2021-03-11 20:14:02,909 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:14:02,910 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-11 20:14:02,917 [main:106] - GETTING EmptyCoroutineContext from Char
2021-03-11 20:14:02,934 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-11 20:14:02,935 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:14:02,935 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:14:02,936 [main:106] - GETTING EmptyCoroutineContext from Char
2021-03-11 20:14:02,937 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:14:02,937 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:14:02,938 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-11 20:14:02,938 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 20:14:02,938 [main:107] - replacing ("Continuation ", String)
2021-03-11 20:14:02,938 [main:50] - replacing "Continuation " String
2021-03-11 20:14:02,938 [main:54] - Getting value of type String
2021-03-11 20:14:03,068 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:14:03,072 [main:58] - GENERATED VALUE OF TYPE String = "oxobo"
2021-03-11 20:14:03,072 [main:61] - GENERATED IS CALL =false
2021-03-11 20:14:03,227 [main:67] - randomType = Double
2021-03-11 20:14:03,357 [main:302] - generating value of type = Double true depth = 0
2021-03-11 20:14:03,389 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@1a8a462e]
2021-03-11 20:14:03,389 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@638e8eca]
2021-03-11 20:14:03,533 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:14:03,537 [main:78] - Generated call from random type = (0.5312926154168319).toChar().plus("vahej")
2021-03-11 20:14:03,538 [main:106] - GETTING String from A
2021-03-11 20:14:03,545 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@62601b72], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:14:03,545 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:14:03,545 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
2021-03-11 20:14:03,545 [main:114] - replacement of "Continuation " of type String is (0.5312926154168319).toChar().plus("vahej")
2021-03-11 20:14:03,677 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:14:03,677 [main:66] - Compilation checking started
2021-03-11 20:14:04,283 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 {
            prope4.fu11()
            Kla5().fu11()
        }
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((0.5312926154168319).toChar().plus("vahej") + c + ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).uppercase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in (Kla6).equals("lgrti").compareTo(true)..numberOfSuspensions) {
            if (prope8 != i) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:14:04,286 [main:107] - replacing ("OK", String)
2021-03-11 20:14:04,287 [main:50] - replacing "OK" String
2021-03-11 20:14:04,287 [main:54] - Getting value of type String
2021-03-11 20:14:04,422 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:14:04,426 [main:58] - GENERATED VALUE OF TYPE String = "msjez"
2021-03-11 20:14:04,426 [main:61] - GENERATED IS CALL =false
2021-03-11 20:14:04,759 [main:67] - randomType = List<UByte>
2021-03-11 20:14:04,760 [main:106] - GETTING String from Int
2021-03-11 20:14:04,799 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5352fcf1]]
2021-03-11 20:14:04,799 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:14:04,799 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5352fcf1]
2021-03-11 20:14:04,800 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase()
2021-03-11 20:14:04,800 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e31e89]]
2021-03-11 20:14:04,800 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:14:04,800 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e31e89]
2021-03-11 20:14:04,800 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase()
2021-03-11 20:14:04,800 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:14:04,800 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:14:04,800 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
2021-03-11 20:14:04,801 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@fea99d7], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d4a6f4c]]
2021-03-11 20:14:04,801 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@fea99d7]
2021-03-11 20:14:04,801 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d4a6f4c]
2021-03-11 20:14:04,801 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toByte().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)
2021-03-11 20:14:04,801 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@a00b4a6], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]]
2021-03-11 20:14:04,801 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@a00b4a6]
2021-03-11 20:14:04,801 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]
2021-03-11 20:14:04,802 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)
2021-03-11 20:14:04,802 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a33abcd], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:14:04,802 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a33abcd]
2021-03-11 20:14:04,802 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:14:04,802 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toInt().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)
2021-03-11 20:14:04,802 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@719e1c26], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:14:04,802 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@719e1c26]
2021-03-11 20:14:04,936 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:14:04,940 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:14:04,940 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).compareTo(587239470).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
2021-03-11 20:14:04,940 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@638e8eca]]
2021-03-11 20:14:04,940 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:14:04,940 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@638e8eca]
2021-03-11 20:14:05,074 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:14:05,079 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().plus("ibhnr")
2021-03-11 20:14:05,079 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16972bc5], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa4447]]
2021-03-11 20:14:05,079 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16972bc5]
2021-03-11 20:14:05,079 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa4447]
2021-03-11 20:14:05,213 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:14:05,217 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toShort().toString(-648466231)
2021-03-11 20:14:05,217 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7b71a3ab], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]]
2021-03-11 20:14:05,217 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7b71a3ab]
2021-03-11 20:14:05,350 [main:302] - generating value of type = Long true depth = 0
2021-03-11 20:14:05,354 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]
2021-03-11 20:14:05,355 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).div(-2111418367065231272).toString(A((A(-1435118121, -1465758632).x), 1465758632).x)
2021-03-11 20:14:05,355 [main:114] - replacement of "OK" of type String is (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
2021-03-11 20:14:05,495 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:14:05,495 [main:66] - Compilation checking started
2021-03-11 20:14:06,157 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 {
            prope4.fu11()
            Kla5().fu11()
        }
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((0.5312926154168319).toChar().plus("vahej") + c + ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).uppercase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in (Kla6).equals("lgrti").compareTo(true)..numberOfSuspensions) {
            if (prope8 != i) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:14:06,162 [main:107] - replacing (prope6.getOrThrow(), Ty0)
2021-03-11 20:14:06,162 [main:50] - replacing prope6.getOrThrow() Ty0
2021-03-11 20:14:06,162 [main:54] - Getting value of type Ty0
2021-03-11 20:14:06,325 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 20:14:06,332 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 20:14:06,349 [main:67] - randomType = Kla6
2021-03-11 20:14:06,487 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 20:14:06,491 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-11 20:14:06,512 [main:106] - GETTING Ty0 from Char
2021-03-11 20:14:06,545 [main:106] - GETTING Ty0 from Int?
2021-03-11 20:14:06,579 [main:106] - GETTING Ty0 from A
2021-03-11 20:14:06,585 [main:106] - GETTING Ty0 from Char
2021-03-11 20:14:06,586 [main:106] - GETTING Ty0 from Int
2021-03-11 20:14:06,617 [main:106] - GETTING Ty0 from Int
2021-03-11 20:14:06,618 [main:106] - GETTING Ty0 from A
2021-03-11 20:14:06,619 [main:106] - GETTING Ty0 from Int
2021-03-11 20:14:06,619 [main:106] - GETTING Ty0 from Int
2021-03-11 20:14:06,620 [main:106] - GETTING Ty0 from Int
2021-03-11 20:14:06,620 [main:106] - GETTING Ty0 from A
2021-03-11 20:14:06,621 [main:106] - GETTING Ty0 from Int
2021-03-11 20:14:06,621 [main:111] - Cant find and generate replacement for prope6.getOrThrow() type Ty0
2021-03-11 20:14:06,621 [main:107] - replacing (c, Continuation<*>)
2021-03-11 20:14:06,621 [main:50] - replacing c Continuation<*>
2021-03-11 20:14:06,621 [main:54] - Getting value of type Continuation<*>
2021-03-11 20:14:06,760 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 20:14:06,908 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:14:06,913 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:14:07,414 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 20:14:07,562 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:14:07,567 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:14:07,897 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 20:14:08,054 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:14:08,060 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:14:08,561 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-11 20:14:08,715 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:14:08,721 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:14:09,221 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:14:09,221 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:14:09,221 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:14:09,221 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:14:09,221 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 20:14:09,238 [main:67] - randomType = Kla0
2021-03-11 20:14:09,239 [main:106] - GETTING Continuation<*> from Int?
2021-03-11 20:14:09,275 [main:106] - GETTING Continuation<*> from A
2021-03-11 20:14:09,282 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:14:09,331 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:14:09,332 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:14:09,333 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:14:09,334 [main:106] - GETTING Continuation<*> from Char
2021-03-11 20:14:09,357 [main:106] - GETTING Continuation<*> from Char
2021-03-11 20:14:09,358 [main:106] - GETTING Continuation<*> from A
2021-03-11 20:14:09,358 [main:106] - GETTING Continuation<*> from A
2021-03-11 20:14:09,359 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:14:09,360 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:14:09,360 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 20:14:09,360 [main:107] - replacing (getOrThrow(), Ty0)
2021-03-11 20:14:09,360 [main:50] - replacing getOrThrow() Ty0
2021-03-11 20:14:09,360 [main:54] - Getting value of type Ty0
2021-03-11 20:14:09,501 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 20:14:09,508 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 20:14:09,516 [main:67] - randomType = Byte
2021-03-11 20:14:09,658 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:14:09,696 [main:106] - GETTING Ty0 from Char
2021-03-11 20:14:09,716 [main:106] - GETTING Ty0 from A
2021-03-11 20:14:09,723 [main:106] - GETTING Ty0 from Int
2021-03-11 20:14:09,757 [main:106] - GETTING Ty0 from A
2021-03-11 20:14:09,757 [main:106] - GETTING Ty0 from Int
2021-03-11 20:14:09,758 [main:106] - GETTING Ty0 from Int
2021-03-11 20:14:09,758 [main:106] - GETTING Ty0 from Char
2021-03-11 20:14:09,759 [main:106] - GETTING Ty0 from Int
2021-03-11 20:14:09,760 [main:106] - GETTING Ty0 from A
2021-03-11 20:14:09,760 [main:106] - GETTING Ty0 from Int
2021-03-11 20:14:09,761 [main:106] - GETTING Ty0 from Int
2021-03-11 20:14:09,761 [main:106] - GETTING Ty0 from Int?
2021-03-11 20:14:09,796 [main:111] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-11 20:14:09,796 [main:107] - replacing ({
            prope4.fu11()
            Kla5().fu11()
        }, SuspendFunction0<Unit>)
2021-03-11 20:14:09,797 [main:50] - replacing {
            prope4.fu11()
            Kla5().fu11()
        } SuspendFunction0<Unit>
2021-03-11 20:14:09,797 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-11 20:14:09,934 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-11 20:14:09,938 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:14:09,946 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { println()}
2021-03-11 20:14:09,946 [main:61] - GENERATED IS CALL =false
2021-03-11 20:14:09,954 [main:67] - randomType = UInt
2021-03-11 20:14:10,093 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 20:14:10,133 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:14:10,165 [main:106] - GETTING SuspendFunction0<Unit> from A
2021-03-11 20:14:10,171 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:14:10,172 [main:106] - GETTING SuspendFunction0<Unit> from A
2021-03-11 20:14:10,173 [main:106] - GETTING SuspendFunction0<Unit> from Char
2021-03-11 20:14:10,191 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:14:10,192 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:14:10,192 [main:106] - GETTING SuspendFunction0<Unit> from A
2021-03-11 20:14:10,193 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:14:10,194 [main:106] - GETTING SuspendFunction0<Unit> from Int?
2021-03-11 20:14:10,237 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:14:10,238 [main:106] - GETTING SuspendFunction0<Unit> from Char
2021-03-11 20:14:10,238 [main:114] - replacement of {
            prope4.fu11()
            Kla5().fu11()
        } of type SuspendFunction0<Unit> is { println()}
2021-03-11 20:14:10,375 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:14:10,376 [main:66] - Compilation checking started
2021-03-11 20:14:11,025 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((0.5312926154168319).toChar().plus("vahej") + c + ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).uppercase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in (Kla6).equals("lgrti").compareTo(true)..numberOfSuspensions) {
            if (prope8 != i) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:14:11,028 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 20:14:11,028 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 20:14:11,029 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 20:14:11,173 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 20:14:11,180 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 20:14:11,197 [main:67] - randomType = Kla5
2021-03-11 20:14:11,334 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 20:14:11,338 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in (Kla6).equals("lgrti").compareTo(true)..numberOfSuspensions) {
            if (prope8 != i) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}
2021-03-11 20:14:11,347 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:14:11,379 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:14:11,380 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-11 20:14:11,387 [main:106] - GETTING EmptyCoroutineContext from Int?
2021-03-11 20:14:11,421 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:14:11,422 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-11 20:14:11,423 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:14:11,423 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:14:11,424 [main:106] - GETTING EmptyCoroutineContext from Char
2021-03-11 20:14:11,443 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:14:11,444 [main:106] - GETTING EmptyCoroutineContext from Char
2021-03-11 20:14:11,444 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-11 20:14:11,444 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 20:14:11,444 [main:107] - replacing (c, SuspendFunction0<Unit>)
2021-03-11 20:14:11,444 [main:50] - replacing c SuspendFunction0<Unit>
2021-03-11 20:14:11,444 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-11 20:14:11,584 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-11 20:14:11,588 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:14:11,732 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 20:14:11,738 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 20:14:12,240 [main:302] - generating value of type = Int true depth = 4
2021-03-11 20:14:12,244 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 20:14:12,248 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 20:14:12,394 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:14:12,399 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:14:12,708 [main:302] - generating value of type = Any false depth = 8
2021-03-11 20:14:12,709 [main:95] - GENERATED = println("yioai")
2021-03-11 20:14:12,709 [main:95] - GENERATED = repeat(-728367424, {a: Int -> println("yioai")})
2021-03-11 20:14:12,709 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { repeat(-728367424, {a: Int -> println("yioai")})}
2021-03-11 20:14:12,709 [main:61] - GENERATED IS CALL =false
2021-03-11 20:14:12,872 [main:67] - randomType = UShort
2021-03-11 20:14:13,009 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 20:14:13,043 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:14:13,076 [main:106] - GETTING SuspendFunction0<Unit> from Int?
2021-03-11 20:14:13,111 [main:106] - GETTING SuspendFunction0<Unit> from A
2021-03-11 20:14:13,118 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:14:13,119 [main:106] - GETTING SuspendFunction0<Unit> from Char
2021-03-11 20:14:13,140 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:14:13,141 [main:106] - GETTING SuspendFunction0<Unit> from A
2021-03-11 20:14:13,142 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:14:13,143 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:14:13,144 [main:106] - GETTING SuspendFunction0<Unit> from A
2021-03-11 20:14:13,145 [main:106] - GETTING SuspendFunction0<Unit> from Char
2021-03-11 20:14:13,146 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:14:13,146 [main:114] - replacement of c of type SuspendFunction0<Unit> is { repeat(-728367424, {a: Int -> println("yioai")})}
2021-03-11 20:14:13,288 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:14:13,288 [main:66] - Compilation checking started
2021-03-11 20:14:13,718 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
{ repeat(-728367424, {a: Int -> println("yioai")})}.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((0.5312926154168319).toChar().plus("vahej") + c + ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).uppercase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in (Kla6).equals("lgrti").compareTo(true)..numberOfSuspensions) {
            if (prope8 != i) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:14:13,723 [main:107] - replacing ((0.5312926154168319).toChar().plus("vahej") + c, String)
2021-03-11 20:14:13,723 [main:50] - replacing (0.5312926154168319).toChar().plus("vahej") + c String
2021-03-11 20:14:13,723 [main:54] - Getting value of type String
2021-03-11 20:14:13,880 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:14:13,884 [main:58] - GENERATED VALUE OF TYPE String = "tndme"
2021-03-11 20:14:13,884 [main:61] - GENERATED IS CALL =false
2021-03-11 20:14:14,556 [main:67] - randomType = Kla3<Kla3<ULong?>>
2021-03-11 20:14:14,692 [main:302] - generating value of type = Kla3<Kla3<ULong?>> false depth = 0
2021-03-11 20:14:14,696 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 20:14:15,554 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 20:14:15,559 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-11 20:14:15,576 [main:106] - GETTING String from Int?
2021-03-11 20:14:15,607 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@a00b4a6], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]]
2021-03-11 20:14:15,607 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@a00b4a6]
2021-03-11 20:14:15,607 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]
2021-03-11 20:14:15,744 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:14:15,749 [main:117] - GENERATED CALL = (A(1920083034, 1486922171).z).toLong().toString(413470837)
2021-03-11 20:14:15,749 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25e54512]]
2021-03-11 20:14:15,749 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:14:15,749 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25e54512]
2021-03-11 20:14:15,749 [main:117] - GENERATED CALL = (A(1920083034, 1486922171).z).toChar().uppercase()
2021-03-11 20:14:15,749 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@fea99d7], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d4a6f4c]]
2021-03-11 20:14:15,749 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@fea99d7]
2021-03-11 20:14:15,749 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d4a6f4c]
2021-03-11 20:14:15,750 [main:117] - GENERATED CALL = (A(1920083034, 1486922171).z).toByte().toString(A((A(-1435118121, -1465758632).x), 1465758632).x)
2021-03-11 20:14:15,750 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e31e89]]
2021-03-11 20:14:15,750 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:14:15,750 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e31e89]
2021-03-11 20:14:15,750 [main:117] - GENERATED CALL = (A(1920083034, 1486922171).z).toChar().titlecase()
2021-03-11 20:14:15,750 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16972bc5], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa4447]]
2021-03-11 20:14:15,750 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16972bc5]
2021-03-11 20:14:15,750 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa4447]
2021-03-11 20:14:15,886 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:14:15,893 [main:117] - GENERATED CALL = (A(1920083034, 1486922171).z).toShort().toString(-999237939)
2021-03-11 20:14:15,893 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7b71a3ab], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]]
2021-03-11 20:14:15,893 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7b71a3ab]
2021-03-11 20:14:16,031 [main:302] - generating value of type = Long true depth = 0
2021-03-11 20:14:16,035 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]
2021-03-11 20:14:16,171 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:14:16,176 [main:117] - GENERATED CALL = (A(1920083034, 1486922171).z).div(-5180972945843892702).toString(-1990496525)
2021-03-11 20:14:16,176 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a33abcd], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:14:16,176 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a33abcd]
2021-03-11 20:14:16,176 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:14:16,177 [main:117] - GENERATED CALL = (A(1920083034, 1486922171).z).toInt().toString(A(-1435118121, -1465758632).x)
2021-03-11 20:14:16,177 [main:113] - Case = [public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ae52aa2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:14:16,177 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ae52aa2]
2021-03-11 20:14:16,177 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:14:16,177 [main:117] - GENERATED CALL = (A(1920083034, 1486922171).z).and(A(-1435118121, -1465758632).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
2021-03-11 20:14:16,177 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@719e1c26], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:14:16,177 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@719e1c26]
2021-03-11 20:14:16,177 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:14:16,314 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:14:16,318 [main:117] - GENERATED CALL = (A(1920083034, 1486922171).z).compareTo(A((A(-1435118121, -1465758632).x), 1465758632).x).toString(233645322)
2021-03-11 20:14:16,319 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5352fcf1]]
2021-03-11 20:14:16,319 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:14:16,319 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5352fcf1]
2021-03-11 20:14:16,319 [main:117] - GENERATED CALL = (A(1920083034, 1486922171).z).toChar().lowercase()
2021-03-11 20:14:16,319 [main:114] - replacement of (0.5312926154168319).toChar().plus("vahej") + c of type String is (A(1920083034, 1486922171).z).toChar().lowercase()
2021-03-11 20:14:16,456 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:14:16,456 [main:66] - Compilation checking started
2021-03-11 20:14:16,868 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A(1920083034, 1486922171).z).toChar().lowercase() + ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).uppercase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in (Kla6).equals("lgrti").compareTo(true)..numberOfSuspensions) {
            if (prope8 != i) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:14:16,872 [main:107] - replacing (prope10, Function0<Unit>)
2021-03-11 20:14:16,872 [main:50] - replacing prope10 Function0<Unit>
2021-03-11 20:14:16,872 [main:54] - Getting value of type Function0<Unit>
2021-03-11 20:14:17,009 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 20:14:17,013 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:14:17,160 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 20:14:17,165 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 20:14:17,480 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 20:14:17,484 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 20:14:17,628 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:14:17,634 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:14:17,965 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 20:14:17,970 [main:95] - GENERATED = check(true)
2021-03-11 20:14:17,970 [main:95] - GENERATED = contract({ check(true)})
2021-03-11 20:14:17,970 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ check(true)})}
2021-03-11 20:14:17,970 [main:61] - GENERATED IS CALL =false
2021-03-11 20:14:18,158 [main:67] - randomType = Kla3<Kla5>
2021-03-11 20:14:18,293 [main:302] - generating value of type = Kla3<Kla5> false depth = 0
2021-03-11 20:14:18,297 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 20:14:19,467 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 20:14:19,471 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-11 20:14:19,485 [main:106] - GETTING Function0<Unit> from Int?
2021-03-11 20:14:19,517 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 20:14:19,535 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:14:19,564 [main:106] - GETTING Function0<Unit> from A
2021-03-11 20:14:19,571 [main:106] - GETTING Function0<Unit> from A
2021-03-11 20:14:19,572 [main:106] - GETTING Function0<Unit> from A
2021-03-11 20:14:19,573 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:14:19,573 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:14:19,574 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:14:19,575 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 20:14:19,576 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:14:19,577 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:14:19,577 [main:114] - replacement of prope10 of type Function0<Unit> is { contract({ check(true)})}
2021-03-11 20:14:19,711 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:14:19,712 [main:66] - Compilation checking started
2021-03-11 20:14:20,161 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((0.5312926154168319).toChar().plus("vahej") + c + ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).uppercase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in (Kla6).equals("lgrti").compareTo(true)..numberOfSuspensions) {
            if (prope8 != i) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        { contract({ check(true)})}()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:14:20,164 [main:107] - replacing (prope6.AssertionError("xfjyy")!!, Throwable)
2021-03-11 20:14:20,164 [main:50] - replacing prope6.AssertionError("xfjyy")!! Throwable
2021-03-11 20:14:20,164 [main:54] - Getting value of type Throwable
2021-03-11 20:14:20,307 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 20:14:20,460 [main:43] - GENERATING CALL OF fun NullPointerException(message: kotlin.String?): Throwable = TODO()
2021-03-11 20:14:20,466 [main:61] - WITHOUT TYPE PARAMS = fun NullPointerException(message: kotlin.String?): Throwable = TODO()
2021-03-11 20:14:20,806 [main:302] - generating value of type = String true depth = 3
2021-03-11 20:14:20,810 [main:95] - GENERATED = NullPointerException("oxzwk")
2021-03-11 20:14:20,810 [main:58] - GENERATED VALUE OF TYPE Throwable = NullPointerException("oxzwk")
2021-03-11 20:14:20,810 [main:61] - GENERATED IS CALL =true
2021-03-11 20:14:21,482 [main:67] - randomType = Set<Kla3<UByte?>>
2021-03-11 20:14:21,484 [main:106] - GETTING Throwable from Int
2021-03-11 20:14:21,533 [main:106] - GETTING Throwable from Int?
2021-03-11 20:14:21,568 [main:106] - GETTING Throwable from Int
2021-03-11 20:14:21,569 [main:106] - GETTING Throwable from Int
2021-03-11 20:14:21,570 [main:106] - GETTING Throwable from Int
2021-03-11 20:14:21,571 [main:106] - GETTING Throwable from Char
2021-03-11 20:14:21,589 [main:106] - GETTING Throwable from Char
2021-03-11 20:14:21,590 [main:106] - GETTING Throwable from A
2021-03-11 20:14:21,597 [main:106] - GETTING Throwable from Int
2021-03-11 20:14:21,598 [main:106] - GETTING Throwable from A
2021-03-11 20:14:21,599 [main:106] - GETTING Throwable from A
2021-03-11 20:14:21,600 [main:106] - GETTING Throwable from Int
2021-03-11 20:14:21,600 [main:114] - replacement of prope6.AssertionError("xfjyy")!! of type Throwable is NullPointerException("oxzwk")
2021-03-11 20:14:21,739 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:14:21,742 [main:107] - replacing (c !is CoroutineStackFrame, Boolean)
2021-03-11 20:14:21,742 [main:50] - replacing c !is CoroutineStackFrame Boolean
2021-03-11 20:14:21,742 [main:54] - Getting value of type Boolean
2021-03-11 20:14:21,881 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:14:21,886 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 20:14:21,886 [main:61] - GENERATED IS CALL =false
2021-03-11 20:14:21,902 [main:67] - randomType = Kla6
2021-03-11 20:14:22,041 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 20:14:22,045 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-11 20:14:22,069 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla6[DeserializedSimpleFunctionDescriptor@2e10a70a]
2021-03-11 20:14:22,209 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:14:22,209 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6bca329b]
2021-03-11 20:14:22,350 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:14:22,354 [main:78] - Generated call from random type = (Kla6).equals("bapqc").and(false)
2021-03-11 20:14:22,355 [main:106] - GETTING Boolean from Int
2021-03-11 20:14:22,396 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@682d5403], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@3bc00b46]]
2021-03-11 20:14:22,397 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@682d5403]
2021-03-11 20:14:22,537 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:14:22,541 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@3bc00b46]
2021-03-11 20:14:22,682 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:14:22,682 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).rangeTo(127).equals("bjghh")
2021-03-11 20:14:22,682 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a9668d7]]
2021-03-11 20:14:22,682 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:14:22,682 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a9668d7]
2021-03-11 20:14:22,683 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toChar().isHighSurrogate()
2021-03-11 20:14:22,683 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f46b57]]
2021-03-11 20:14:22,683 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:14:22,683 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f46b57]
2021-03-11 20:14:22,683 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toChar().isDigit()
2021-03-11 20:14:22,683 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66ade11]]
2021-03-11 20:14:22,683 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:14:22,683 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66ade11]
2021-03-11 20:14:22,683 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toChar().isDefined()
2021-03-11 20:14:22,683 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f971e3d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@1953167e]]
2021-03-11 20:14:22,683 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f971e3d]
2021-03-11 20:14:22,683 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@1953167e]
2021-03-11 20:14:22,823 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:14:22,824 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toFloat().equals("gojue")
2021-03-11 20:14:22,824 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@a00b4a6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@4c4e0700]]
2021-03-11 20:14:22,824 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@a00b4a6]
2021-03-11 20:14:22,824 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@4c4e0700]
2021-03-11 20:14:22,965 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:14:22,965 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toLong().equals("byebf")
2021-03-11 20:14:22,965 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e6d437]]
2021-03-11 20:14:22,965 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:14:22,965 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e6d437]
2021-03-11 20:14:22,965 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toChar().isLowSurrogate()
2021-03-11 20:14:22,966 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@fea99d7], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2a45c12]]
2021-03-11 20:14:22,966 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@fea99d7]
2021-03-11 20:14:22,966 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2a45c12]
2021-03-11 20:14:23,107 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:14:23,107 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toByte().equals("mesfg")
2021-03-11 20:14:23,107 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57ba1828], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@13f065ac]]
2021-03-11 20:14:23,107 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57ba1828]
2021-03-11 20:14:23,254 [main:302] - generating value of type = Double true depth = 0
2021-03-11 20:14:23,258 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@13f065ac]
2021-03-11 20:14:23,259 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).div(0.10834391702932078).isInfinite()
2021-03-11 20:14:23,259 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@220c529a], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@572d41a1]]
2021-03-11 20:14:23,259 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@220c529a]
2021-03-11 20:14:23,424 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:14:23,424 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@572d41a1]
2021-03-11 20:14:23,424 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).equals("iowye").not()
2021-03-11 20:14:23,425 [main:114] - replacement of c !is CoroutineStackFrame of type Boolean is (A(-1435118121, -1465758632).x).toChar().isHighSurrogate()
2021-03-11 20:14:23,562 [main:33] - Trying to replace Element(IS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:14:23,562 [main:66] - Compilation checking started
2021-03-11 20:14:23,987 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if ((A(-1435118121, -1465758632).x).toChar().isHighSurrogate()) error((0.5312926154168319).toChar().plus("vahej") + c + ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).uppercase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in (Kla6).equals("lgrti").compareTo(true)..numberOfSuspensions) {
            if (prope8 != i) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:14:23,990 [main:107] - replacing (c, SuspendFunction0<Unit>)
2021-03-11 20:14:23,991 [main:50] - replacing c SuspendFunction0<Unit>
2021-03-11 20:14:23,991 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-11 20:14:24,127 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-11 20:14:24,131 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:14:24,275 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:14:24,281 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:14:24,588 [main:302] - generating value of type = Any false depth = 4
2021-03-11 20:14:24,588 [main:95] - GENERATED = println("ljcqo")
2021-03-11 20:14:24,588 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { println("ljcqo")}
2021-03-11 20:14:24,588 [main:61] - GENERATED IS CALL =false
2021-03-11 20:14:24,605 [main:67] - randomType = A
2021-03-11 20:14:24,741 [main:302] - generating value of type = A false depth = 0
2021-03-11 20:14:24,745 [main:112] - generating klass A text = data class A(var x: Int, val z: Int?)
2021-03-11 20:14:24,884 [main:194] - Type params = []
2021-03-11 20:14:25,021 [main:302] - generating value of type = Int true depth = 2
2021-03-11 20:14:25,025 [main:302] - generating value of type = Int true depth = 2
2021-03-11 20:14:25,039 [main:106] - GETTING SuspendFunction0<Unit> from Char
2021-03-11 20:14:25,059 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:14:25,090 [main:106] - GETTING SuspendFunction0<Unit> from Int?
2021-03-11 20:14:25,123 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:14:25,124 [main:106] - GETTING SuspendFunction0<Unit> from A
2021-03-11 20:14:25,130 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:14:25,131 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:14:25,132 [main:106] - GETTING SuspendFunction0<Unit> from A
2021-03-11 20:14:25,133 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:14:25,134 [main:106] - GETTING SuspendFunction0<Unit> from Char
2021-03-11 20:14:25,135 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:14:25,136 [main:106] - GETTING SuspendFunction0<Unit> from A
2021-03-11 20:14:25,136 [main:114] - replacement of c of type SuspendFunction0<Unit> is { println("ljcqo")}
2021-03-11 20:14:25,275 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:14:25,276 [main:66] - Compilation checking started
2021-03-11 20:14:25,957 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((0.5312926154168319).toChar().plus("vahej") + c + ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).uppercase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in (Kla6).equals("lgrti").compareTo(true)..numberOfSuspensions) {
            if (prope8 != i) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:14:25,962 [main:107] - replacing (prope10, Function0<Unit>)
2021-03-11 20:14:25,962 [main:50] - replacing prope10 Function0<Unit>
2021-03-11 20:14:25,962 [main:54] - Getting value of type Function0<Unit>
2021-03-11 20:14:26,129 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 20:14:26,133 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:14:26,276 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 20:14:26,282 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 20:14:26,625 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 20:14:26,629 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 20:14:26,775 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:14:26,781 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:14:27,094 [main:302] - generating value of type = Any false depth = 8
2021-03-11 20:14:27,094 [main:95] - GENERATED = print("cwwrl")
2021-03-11 20:14:27,094 [main:95] - GENERATED = contract({ print("cwwrl")})
2021-03-11 20:14:27,094 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ print("cwwrl")})}
2021-03-11 20:14:27,094 [main:61] - GENERATED IS CALL =false
2021-03-11 20:14:27,103 [main:67] - randomType = Boolean
2021-03-11 20:14:27,250 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:14:27,267 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:14:27,303 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:14:27,304 [main:106] - GETTING Function0<Unit> from A
2021-03-11 20:14:27,311 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:14:27,312 [main:106] - GETTING Function0<Unit> from A
2021-03-11 20:14:27,313 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 20:14:27,333 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:14:27,334 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 20:14:27,335 [main:106] - GETTING Function0<Unit> from Int?
2021-03-11 20:14:27,368 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:14:27,369 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:14:27,370 [main:106] - GETTING Function0<Unit> from A
2021-03-11 20:14:27,370 [main:114] - replacement of prope10 of type Function0<Unit> is { contract({ print("cwwrl")})}
2021-03-11 20:14:27,508 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:14:27,509 [main:66] - Compilation checking started
2021-03-11 20:14:27,924 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((0.5312926154168319).toChar().plus("vahej") + c + ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).uppercase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in (Kla6).equals("lgrti").compareTo(true)..numberOfSuspensions) {
            if (prope8 != i) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            { contract({ print("cwwrl")})}()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:14:27,927 [main:107] - replacing ((Kla6).equals("lgrti").compareTo(true)..numberOfSuspensions, IntRange)
2021-03-11 20:14:27,927 [main:50] - replacing (Kla6).equals("lgrti").compareTo(true)..numberOfSuspensions IntRange
2021-03-11 20:14:27,927 [main:54] - Getting value of type IntRange
2021-03-11 20:14:28,065 [main:302] - generating value of type = IntRange false depth = 0
2021-03-11 20:14:28,210 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-11 20:14:28,215 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-11 20:14:28,690 [main:302] - generating value of type = Int true depth = 3
2021-03-11 20:14:28,694 [main:302] - generating value of type = Int true depth = 3
2021-03-11 20:14:28,699 [main:95] - GENERATED = IntRange(1955819359, -189209087)
2021-03-11 20:14:28,700 [main:58] - GENERATED VALUE OF TYPE IntRange = IntRange(1955819359, -189209087)
2021-03-11 20:14:28,700 [main:61] - GENERATED IS CALL =true
2021-03-11 20:14:29,075 [main:67] - randomType = HashMap<Kla5?, Double>
2021-03-11 20:14:29,212 [main:302] - generating value of type = HashMap<Kla5?, Double> false depth = 0
2021-03-11 20:14:29,385 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): HashMap<Kla5?, Double> = TODO()
2021-03-11 20:14:29,391 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): HashMap<Kla5?, Double> = TODO()
2021-03-11 20:14:29,538 [main:95] - GENERATED = linkedMapOf<Kla5?, Double>()
2021-03-11 20:14:29,658 [main:78] - Generated call from random type = (linkedMapOf<Kla5?, Double>()).values.indices
2021-03-11 20:14:29,659 [main:106] - GETTING IntRange from A
2021-03-11 20:14:29,667 [main:113] - Case = [public final val z: kotlin.Int? defined in A[PropertyDescriptorImpl@6ea53851], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@682d5403]]
2021-03-11 20:14:29,667 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@682d5403]
2021-03-11 20:14:29,806 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:14:29,810 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632)).z?.rangeTo(98)
2021-03-11 20:14:29,810 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@62601b72], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@ced8cc7]]
2021-03-11 20:14:29,810 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@ced8cc7]
2021-03-11 20:14:29,951 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:14:29,955 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)
2021-03-11 20:14:29,955 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@62601b72], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@682d5403]]
2021-03-11 20:14:29,955 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@682d5403]
2021-03-11 20:14:30,095 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:14:30,100 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632)).x.rangeTo(-25)
2021-03-11 20:14:30,100 [main:114] - replacement of (Kla6).equals("lgrti").compareTo(true)..numberOfSuspensions of type IntRange is (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)
2021-03-11 20:14:30,249 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:14:30,250 [main:66] - Compilation checking started
2021-03-11 20:14:30,895 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((0.5312926154168319).toChar().plus("vahej") + c + ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).uppercase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != i) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:14:30,898 [main:107] - replacing (true, Boolean)
2021-03-11 20:14:30,899 [main:50] - replacing true Boolean
2021-03-11 20:14:30,899 [main:54] - Getting value of type Boolean
2021-03-11 20:14:31,044 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:14:31,048 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 20:14:31,048 [main:61] - GENERATED IS CALL =false
2021-03-11 20:14:31,228 [main:67] - randomType = Boolean?
2021-03-11 20:14:31,377 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:14:31,396 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@572d41a1]
2021-03-11 20:14:31,396 [main:78] - Generated call from random type = (false)?.not()
2021-03-11 20:14:31,396 [main:114] - replacement of true of type Boolean is (false)?.not()
2021-03-11 20:14:31,537 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 20:14:31,538 [main:66] - Compilation checking started
2021-03-11 20:14:32,206 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((0.5312926154168319).toChar().plus("vahej") + c + ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).uppercase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != i) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:14:32,210 [main:107] - replacing (Kla2().prope6, Any?)
2021-03-11 20:14:32,210 [main:50] - replacing Kla2().prope6 Any?
2021-03-11 20:14:32,210 [main:54] - Getting value of type Any?
2021-03-11 20:14:32,363 [main:58] - GENERATED VALUE OF TYPE Any? = null
2021-03-11 20:14:32,363 [main:61] - GENERATED IS CALL =false
2021-03-11 20:14:32,573 [main:67] - randomType = Kla4?
2021-03-11 20:14:32,723 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 20:14:32,727 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((0.5312926154168319).toChar().plus("vahej") + c + ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).uppercase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}
2021-03-11 20:14:32,735 [main:106] - GETTING Any? from Int?
2021-03-11 20:14:32,790 [main:106] - GETTING Any? from Char
2021-03-11 20:14:32,821 [main:106] - GETTING Any? from Int
2021-03-11 20:14:32,882 [main:106] - GETTING Any? from Int
2021-03-11 20:14:32,884 [main:106] - GETTING Any? from Int
2021-03-11 20:14:32,885 [main:106] - GETTING Any? from A
2021-03-11 20:14:32,900 [main:106] - GETTING Any? from A
2021-03-11 20:14:32,901 [main:106] - GETTING Any? from Int
2021-03-11 20:14:32,903 [main:106] - GETTING Any? from Int
2021-03-11 20:14:32,904 [main:106] - GETTING Any? from Char
2021-03-11 20:14:32,905 [main:106] - GETTING Any? from A
2021-03-11 20:14:32,906 [main:106] - GETTING Any? from Int
2021-03-11 20:14:32,906 [main:114] - replacement of Kla2().prope6 of type Any? is null
2021-03-11 20:14:33,067 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(NULL)
2021-03-11 20:14:33,067 [main:66] - Compilation checking started
2021-03-11 20:14:33,493 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
null = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((0.5312926154168319).toChar().plus("vahej") + c + ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).uppercase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != i) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:14:33,496 [main:107] - replacing (it?.methodName?.startsWith(method) == true, Boolean)
2021-03-11 20:14:33,497 [main:50] - replacing it?.methodName?.startsWith(method) == true Boolean
2021-03-11 20:14:33,497 [main:54] - Getting value of type Boolean
2021-03-11 20:14:33,634 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:14:33,638 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 20:14:33,638 [main:61] - GENERATED IS CALL =false
2021-03-11 20:14:33,815 [main:67] - randomType = Kla6?
2021-03-11 20:14:33,953 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 20:14:33,957 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-11 20:14:33,977 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@68753202]
2021-03-11 20:14:34,115 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:14:34,116 [main:78] - Generated call from random type = (Kla6)?.context.equals("cbnqs")
2021-03-11 20:14:34,117 [main:106] - GETTING Boolean from Int
2021-03-11 20:14:34,148 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5e6956fa], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3cd0df14]]
2021-03-11 20:14:34,148 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5e6956fa]
2021-03-11 20:14:34,148 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3cd0df14]
2021-03-11 20:14:34,148 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toDouble().isFinite()
2021-03-11 20:14:34,148 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@fea99d7], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2a45c12]]
2021-03-11 20:14:34,148 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@fea99d7]
2021-03-11 20:14:34,148 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2a45c12]
2021-03-11 20:14:34,287 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:14:34,288 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toByte().equals("akncg")
2021-03-11 20:14:34,288 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f46b57]]
2021-03-11 20:14:34,288 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:14:34,288 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f46b57]
2021-03-11 20:14:34,288 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().isDigit()
2021-03-11 20:14:34,288 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@521a6cab]]
2021-03-11 20:14:34,288 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:14:34,288 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@521a6cab]
2021-03-11 20:14:34,288 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().isLowerCase()
2021-03-11 20:14:34,288 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@540774de]]
2021-03-11 20:14:34,288 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:14:34,288 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@540774de]
2021-03-11 20:14:34,288 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().isSurrogate()
2021-03-11 20:14:34,289 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57ba1828], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6395aed6]]
2021-03-11 20:14:34,289 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57ba1828]
2021-03-11 20:14:34,427 [main:302] - generating value of type = Double true depth = 0
2021-03-11 20:14:34,431 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6395aed6]
2021-03-11 20:14:34,431 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).div(0.36749045056573093).isNaN()
2021-03-11 20:14:34,431 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f344b89]]
2021-03-11 20:14:34,431 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:14:34,432 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f344b89]
2021-03-11 20:14:34,432 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().isISOControl()
2021-03-11 20:14:34,432 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e6d437]]
2021-03-11 20:14:34,432 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:14:34,432 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e6d437]
2021-03-11 20:14:34,432 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().isLowSurrogate()
2021-03-11 20:14:34,432 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57ba1828], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3cd0df14]]
2021-03-11 20:14:34,432 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57ba1828]
2021-03-11 20:14:34,575 [main:302] - generating value of type = Double true depth = 0
2021-03-11 20:14:34,579 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3cd0df14]
2021-03-11 20:14:34,580 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).div(0.8937094849249915).isFinite()
2021-03-11 20:14:34,580 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@220c529a], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@572d41a1]]
2021-03-11 20:14:34,580 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@220c529a]
2021-03-11 20:14:34,722 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:14:34,722 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@572d41a1]
2021-03-11 20:14:34,722 [main:117] - GENERATED CALL = (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).equals("aukbm").not()
2021-03-11 20:14:34,722 [main:114] - replacement of it?.methodName?.startsWith(method) == true of type Boolean is false
2021-03-11 20:14:34,865 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-11 20:14:34,866 [main:66] - Compilation checking started
2021-03-11 20:14:35,512 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((0.5312926154168319).toChar().plus("vahej") + c + ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).uppercase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != i) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:14:35,516 [main:107] - replacing (i, Int)
2021-03-11 20:14:35,517 [main:50] - replacing i Int
2021-03-11 20:14:35,517 [main:54] - Getting value of type Int
2021-03-11 20:14:35,704 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:14:35,708 [main:58] - GENERATED VALUE OF TYPE Int = 296357011
2021-03-11 20:14:35,708 [main:61] - GENERATED IS CALL =false
2021-03-11 20:14:35,889 [main:67] - randomType = Kla1?
2021-03-11 20:14:36,029 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 20:14:36,033 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}
2021-03-11 20:14:36,172 [main:194] - Type params = []
2021-03-11 20:14:36,312 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 20:14:36,459 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:14:36,464 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:14:36,798 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 20:14:36,947 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:14:36,953 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:14:37,447 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 8
2021-03-11 20:14:37,598 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:14:37,603 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:14:38,096 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 11
2021-03-11 20:14:38,253 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:14:38,259 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:14:38,827 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 14
2021-03-11 20:14:38,977 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:14:38,982 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:14:39,475 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:14:39,475 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:14:39,475 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:14:39,475 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:14:39,475 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:14:39,490 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@6669b027]
2021-03-11 20:14:39,629 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:14:39,630 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@355a0cfb]
2021-03-11 20:14:39,782 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:14:39,786 [main:78] - Generated call from random type = (Kla1())?.equals("soqvc").compareTo(false)
2021-03-11 20:14:39,786 [main:114] - replacement of i of type Int is (Kla1())?.equals("soqvc").compareTo(false)
2021-03-11 20:14:39,926 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:14:39,926 [main:66] - Compilation checking started
2021-03-11 20:14:40,547 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((0.5312926154168319).toChar().plus("vahej") + c + ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).uppercase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:14:40,551 [main:107] - replacing (c !is CoroutineStackFrame, Boolean)
2021-03-11 20:14:40,551 [main:50] - replacing c !is CoroutineStackFrame Boolean
2021-03-11 20:14:40,551 [main:54] - Getting value of type Boolean
2021-03-11 20:14:40,691 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:14:40,695 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 20:14:40,695 [main:61] - GENERATED IS CALL =false
2021-03-11 20:14:40,704 [main:67] - randomType = String
2021-03-11 20:14:40,844 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:14:40,875 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6d11f8c8]
2021-03-11 20:14:40,875 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@540774de]
2021-03-11 20:14:40,875 [main:78] - Generated call from random type = ("gqqbh").get(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).isSurrogate()
2021-03-11 20:14:40,876 [main:114] - replacement of c !is CoroutineStackFrame of type Boolean is ("gqqbh").get(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).isSurrogate()
2021-03-11 20:14:41,015 [main:33] - Trying to replace Element(IS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:14:41,016 [main:66] - Compilation checking started
2021-03-11 20:14:41,432 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (("gqqbh").get(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).isSurrogate()) error((0.5312926154168319).toChar().plus("vahej") + c + ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).uppercase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:14:41,437 [main:107] - replacing (c, Continuation<Unit>)
2021-03-11 20:14:41,437 [main:50] - replacing c Continuation<Unit>
2021-03-11 20:14:41,437 [main:54] - Getting value of type Continuation<Unit>
2021-03-11 20:14:41,623 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-11 20:14:41,772 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 20:14:41,778 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 20:14:42,279 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 20:14:42,426 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:14:42,431 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:14:42,754 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 20:14:42,905 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:14:42,911 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:14:43,408 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:14:43,408 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:14:43,408 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 20:14:43,408 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-11 20:14:43,753 [main:67] - randomType = Kla3<UShort>
2021-03-11 20:14:43,892 [main:302] - generating value of type = Kla3<UShort> false depth = 0
2021-03-11 20:14:43,896 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 20:14:44,727 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-11 20:14:44,732 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-11 20:14:44,751 [main:106] - GETTING Continuation<Unit> from Char
2021-03-11 20:14:44,769 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 20:14:44,799 [main:106] - GETTING Continuation<Unit> from A
2021-03-11 20:14:44,805 [main:106] - GETTING Continuation<Unit> from Char
2021-03-11 20:14:44,806 [main:106] - GETTING Continuation<Unit> from A
2021-03-11 20:14:44,807 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 20:14:44,808 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 20:14:44,809 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 20:14:44,809 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 20:14:44,810 [main:106] - GETTING Continuation<Unit> from Int?
2021-03-11 20:14:44,843 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 20:14:44,844 [main:106] - GETTING Continuation<Unit> from A
2021-03-11 20:14:44,844 [main:111] - Cant find and generate replacement for c type Continuation<Unit>
2021-03-11 20:14:44,844 [main:107] - replacing (Kla2().prope6, Any?)
2021-03-11 20:14:44,844 [main:50] - replacing Kla2().prope6 Any?
2021-03-11 20:14:44,844 [main:54] - Getting value of type Any?
2021-03-11 20:14:44,982 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:14:44,982 [main:58] - GENERATED VALUE OF TYPE Any? = "xiush"
2021-03-11 20:14:44,983 [main:61] - GENERATED IS CALL =false
2021-03-11 20:14:44,999 [main:67] - randomType = Kla1
2021-03-11 20:14:45,138 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 20:14:45,142 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}
2021-03-11 20:14:45,284 [main:194] - Type params = []
2021-03-11 20:14:45,430 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 20:14:45,579 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:14:45,584 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:14:45,918 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 20:14:46,073 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:14:46,078 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:14:46,588 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:14:46,588 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:14:46,608 [main:106] - GETTING Any? from Int
2021-03-11 20:14:46,645 [main:106] - GETTING Any? from Int
2021-03-11 20:14:46,646 [main:106] - GETTING Any? from Int
2021-03-11 20:14:46,646 [main:106] - GETTING Any? from A
2021-03-11 20:14:46,654 [main:106] - GETTING Any? from Char
2021-03-11 20:14:46,673 [main:106] - GETTING Any? from A
2021-03-11 20:14:46,674 [main:106] - GETTING Any? from A
2021-03-11 20:14:46,674 [main:106] - GETTING Any? from Int
2021-03-11 20:14:46,675 [main:106] - GETTING Any? from Int
2021-03-11 20:14:46,676 [main:106] - GETTING Any? from Char
2021-03-11 20:14:46,676 [main:106] - GETTING Any? from Int
2021-03-11 20:14:46,677 [main:106] - GETTING Any? from Int?
2021-03-11 20:14:46,711 [main:114] - replacement of Kla2().prope6 of type Any? is "xiush"
2021-03-11 20:14:46,852 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 20:14:46,853 [main:66] - Compilation checking started
2021-03-11 20:14:47,282 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"xiush" = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((0.5312926154168319).toChar().plus("vahej") + c + ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).uppercase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:14:47,285 [main:107] - replacing (prope10, Function0<Unit>)
2021-03-11 20:14:47,285 [main:50] - replacing prope10 Function0<Unit>
2021-03-11 20:14:47,285 [main:54] - Getting value of type Function0<Unit>
2021-03-11 20:14:47,429 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 20:14:47,433 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:14:47,591 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:14:47,597 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:14:47,927 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 20:14:47,932 [main:95] - GENERATED = check(false)
2021-03-11 20:14:47,932 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false)}
2021-03-11 20:14:47,932 [main:61] - GENERATED IS CALL =false
2021-03-11 20:14:47,948 [main:67] - randomType = Kla0
2021-03-11 20:14:47,949 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 20:14:47,970 [main:106] - GETTING Function0<Unit> from Int?
2021-03-11 20:14:48,002 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:14:48,033 [main:106] - GETTING Function0<Unit> from A
2021-03-11 20:14:48,041 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 20:14:48,042 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:14:48,043 [main:106] - GETTING Function0<Unit> from A
2021-03-11 20:14:48,044 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:14:48,045 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:14:48,046 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:14:48,047 [main:106] - GETTING Function0<Unit> from A
2021-03-11 20:14:48,048 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:14:48,048 [main:114] - replacement of prope10 of type Function0<Unit> is { check(false)}
2021-03-11 20:14:48,186 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:14:48,186 [main:66] - Compilation checking started
2021-03-11 20:14:48,638 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((0.5312926154168319).toChar().plus("vahej") + c + ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).uppercase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        { check(false)} = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:14:48,641 [main:107] - replacing (prope10, Function0<Unit>)
2021-03-11 20:14:48,641 [main:50] - replacing prope10 Function0<Unit>
2021-03-11 20:14:48,641 [main:54] - Getting value of type Function0<Unit>
2021-03-11 20:14:48,778 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 20:14:48,782 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:14:48,927 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 20:14:48,932 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 20:14:49,246 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 20:14:49,251 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 20:14:49,398 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:14:49,403 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:14:49,714 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 20:14:49,718 [main:95] - GENERATED = require(true)
2021-03-11 20:14:49,719 [main:95] - GENERATED = contract({ require(true)})
2021-03-11 20:14:49,719 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ require(true)})}
2021-03-11 20:14:49,719 [main:61] - GENERATED IS CALL =false
2021-03-11 20:14:49,735 [main:67] - randomType = Kla1
2021-03-11 20:14:49,874 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 20:14:49,879 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}
2021-03-11 20:14:50,016 [main:194] - Type params = []
2021-03-11 20:14:50,153 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 20:14:50,296 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:14:50,302 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:14:50,621 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 20:14:50,769 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:14:50,774 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:14:51,299 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-11 20:14:51,452 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:14:51,458 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:14:51,961 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:14:51,961 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:14:51,961 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:14:51,976 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:14:52,009 [main:106] - GETTING Function0<Unit> from A
2021-03-11 20:14:52,017 [main:106] - GETTING Function0<Unit> from Int?
2021-03-11 20:14:52,051 [main:106] - GETTING Function0<Unit> from A
2021-03-11 20:14:52,052 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:14:52,053 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:14:52,054 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:14:52,055 [main:106] - GETTING Function0<Unit> from A
2021-03-11 20:14:52,056 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 20:14:52,075 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 20:14:52,076 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:14:52,077 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:14:52,077 [main:114] - replacement of prope10 of type Function0<Unit> is { contract({ require(true)})}
2021-03-11 20:14:52,216 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:14:52,217 [main:66] - Compilation checking started
2021-03-11 20:14:52,646 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((0.5312926154168319).toChar().plus("vahej") + c + ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).uppercase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().{ contract({ require(true)})} = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:14:52,649 [main:107] - replacing (false, Boolean)
2021-03-11 20:14:52,649 [main:50] - replacing false Boolean
2021-03-11 20:14:52,649 [main:54] - Getting value of type Boolean
2021-03-11 20:14:52,802 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:14:52,806 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 20:14:52,806 [main:61] - GENERATED IS CALL =false
2021-03-11 20:14:52,823 [main:67] - randomType = Kla1
2021-03-11 20:14:52,971 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 20:14:52,975 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}
2021-03-11 20:14:53,120 [main:194] - Type params = []
2021-03-11 20:14:53,266 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 20:14:53,414 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:14:53,420 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:14:53,752 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 20:14:53,910 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:14:53,916 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:14:54,453 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-11 20:14:54,609 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:14:54,614 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:14:55,126 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 11
2021-03-11 20:14:55,284 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:14:55,289 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:14:55,799 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 14
2021-03-11 20:14:55,950 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:14:55,955 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:14:56,449 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 17
2021-03-11 20:14:56,449 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:14:56,450 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:14:56,450 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:14:56,450 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:14:56,450 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:14:56,462 [main:149] - GENERATING call of type public open fun resumeWith(prope6: kotlin.Result<kotlin.Any?>): kotlin.Unit defined in Kla1[SimpleFunctionDescriptorImpl@446a81f5]
2021-03-11 20:14:56,600 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-11 20:14:56,744 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 20:14:56,750 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 20:14:57,062 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-11 20:14:57,067 [main:302] - generating value of type = Any false depth = 4
2021-03-11 20:14:57,067 [main:95] - GENERATED = runCatching<Any?>({ "rrjkd"})
2021-03-11 20:14:57,067 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@7e809a87]
2021-03-11 20:14:57,229 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:14:57,229 [main:78] - Generated call from random type = (Kla1()).resumeWith(runCatching<Any?>({ "rrjkd"})).equals("eqmmy")
2021-03-11 20:14:57,230 [main:106] - GETTING Boolean from Int
2021-03-11 20:14:57,262 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@fea99d7], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2a45c12]]
2021-03-11 20:14:57,262 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@fea99d7]
2021-03-11 20:14:57,262 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2a45c12]
2021-03-11 20:14:57,400 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:14:57,400 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toByte().equals("ykwaf")
2021-03-11 20:14:57,400 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@521a6cab]]
2021-03-11 20:14:57,400 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:14:57,400 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@521a6cab]
2021-03-11 20:14:57,401 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toChar().isLowerCase()
2021-03-11 20:14:57,401 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@220c529a], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@572d41a1]]
2021-03-11 20:14:57,401 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@220c529a]
2021-03-11 20:14:57,538 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:14:57,538 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@572d41a1]
2021-03-11 20:14:57,538 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).equals("aphii").not()
2021-03-11 20:14:57,538 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@719e1c26], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@220c529a]]
2021-03-11 20:14:57,538 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@719e1c26]
2021-03-11 20:14:57,538 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@220c529a]
2021-03-11 20:14:57,676 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:14:57,676 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).compareTo((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).equals("nkqor")
2021-03-11 20:14:57,676 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@220c529a], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6f2d3666]]
2021-03-11 20:14:57,676 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@220c529a]
2021-03-11 20:14:57,814 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:14:57,815 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6f2d3666]
2021-03-11 20:14:57,952 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:14:57,957 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).equals("xrvgv").xor(false)
2021-03-11 20:14:57,957 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f971e3d], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3ea6cb23]]
2021-03-11 20:14:57,957 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f971e3d]
2021-03-11 20:14:57,957 [main:149] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3ea6cb23]
2021-03-11 20:14:57,957 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toFloat().isFinite()
2021-03-11 20:14:57,957 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@682d5403], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@3bc00b46]]
2021-03-11 20:14:57,957 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@682d5403]
2021-03-11 20:14:58,095 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:14:58,099 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@3bc00b46]
2021-03-11 20:14:58,239 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:14:58,239 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).rangeTo(3).equals("flxgz")
2021-03-11 20:14:58,239 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5e6956fa], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3cd0df14]]
2021-03-11 20:14:58,239 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5e6956fa]
2021-03-11 20:14:58,239 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3cd0df14]
2021-03-11 20:14:58,239 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toDouble().isFinite()
2021-03-11 20:14:58,239 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@641ccc76]]
2021-03-11 20:14:58,239 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:14:58,239 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@641ccc76]
2021-03-11 20:14:58,240 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toChar().isTitleCase()
2021-03-11 20:14:58,240 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5e6956fa], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6395aed6]]
2021-03-11 20:14:58,240 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5e6956fa]
2021-03-11 20:14:58,240 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6395aed6]
2021-03-11 20:14:58,240 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toDouble().isNaN()
2021-03-11 20:14:58,240 [main:114] - replacement of false of type Boolean is (A(-1435118121, -1465758632).x).equals("aphii").not()
2021-03-11 20:14:58,377 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:14:58,378 [main:66] - Compilation checking started
2021-03-11 20:14:59,033 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((0.5312926154168319).toChar().plus("vahej") + c + ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).uppercase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:14:59,037 [main:107] - replacing (prope8, Int)
2021-03-11 20:14:59,037 [main:50] - replacing prope8 Int
2021-03-11 20:14:59,037 [main:54] - Getting value of type Int
2021-03-11 20:14:59,182 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:14:59,186 [main:58] - GENERATED VALUE OF TYPE Int = 1144661218
2021-03-11 20:14:59,187 [main:61] - GENERATED IS CALL =false
2021-03-11 20:14:59,195 [main:67] - randomType = Long
2021-03-11 20:14:59,337 [main:302] - generating value of type = Long true depth = 0
2021-03-11 20:14:59,371 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@a00b4a6]
2021-03-11 20:14:59,371 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5f022340]
2021-03-11 20:14:59,372 [main:78] - Generated call from random type = (-4652095502264204564).toLong().countTrailingZeroBits()
2021-03-11 20:14:59,372 [main:106] - GETTING Int from Int
2021-03-11 20:14:59,401 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@682d5403], public final val step: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@2c14eb95]]
2021-03-11 20:14:59,402 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@682d5403]
2021-03-11 20:14:59,540 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:14:59,545 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).rangeTo(37).step
2021-03-11 20:14:59,545 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@fea99d7], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1b3ea198]]
2021-03-11 20:14:59,545 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@fea99d7]
2021-03-11 20:14:59,545 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1b3ea198]
2021-03-11 20:14:59,545 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toByte().unaryPlus()
2021-03-11 20:14:59,545 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16972bc5], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@18505e39]]
2021-03-11 20:14:59,545 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16972bc5]
2021-03-11 20:14:59,545 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@18505e39]
2021-03-11 20:14:59,546 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toShort().countTrailingZeroBits()
2021-03-11 20:14:59,546 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@fea99d7], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7257cbce]]
2021-03-11 20:14:59,546 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@fea99d7]
2021-03-11 20:14:59,546 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7257cbce]
2021-03-11 20:14:59,685 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:14:59,689 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toByte().rem(-64)
2021-03-11 20:14:59,689 [main:113] - Case = [public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4226618c]]
2021-03-11 20:14:59,689 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4226618c]
2021-03-11 20:14:59,827 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:14:59,832 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).div(47)
2021-03-11 20:14:59,832 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7909e8d7]]
2021-03-11 20:14:59,832 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:14:59,832 [main:149] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7909e8d7]
2021-03-11 20:14:59,832 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toChar().digitToInt()
2021-03-11 20:14:59,832 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a33abcd], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4226618c]]
2021-03-11 20:14:59,832 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a33abcd]
2021-03-11 20:14:59,832 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4226618c]
2021-03-11 20:14:59,970 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:14:59,974 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toInt().div(54)
2021-03-11 20:14:59,974 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@399a4cd1]]
2021-03-11 20:14:59,974 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:14:59,975 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@399a4cd1]
2021-03-11 20:15:00,112 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:15:00,117 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).toChar().minus('硸')
2021-03-11 20:15:00,117 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@747a393e]]
2021-03-11 20:15:00,117 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@747a393e]
2021-03-11 20:15:00,255 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:15:00,259 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).compareTo(-13)
2021-03-11 20:15:00,260 [main:113] - Case = [public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@a29be6f]]
2021-03-11 20:15:00,260 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@a29be6f]
2021-03-11 20:15:00,260 [main:117] - GENERATED CALL = (A(-1435118121, -1465758632).x).inc()
2021-03-11 20:15:00,260 [main:114] - replacement of prope8 of type Int is 1144661218
2021-03-11 20:15:00,398 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 20:15:00,399 [main:66] - Compilation checking started
2021-03-11 20:15:00,868 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((0.5312926154168319).toChar().plus("vahej") + c + ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).uppercase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
1144661218 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:00,872 [main:107] - replacing (prope6, Result<Ty0>)
2021-03-11 20:15:00,872 [main:50] - replacing prope6 Result<Ty0>
2021-03-11 20:15:00,872 [main:54] - Getting value of type Result<Ty0>
2021-03-11 20:15:01,018 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-11 20:15:01,163 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 20:15:01,168 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 20:15:01,487 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 20:15:01,489 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-11 20:15:01,498 [main:67] - randomType = Char
2021-03-11 20:15:01,637 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:15:01,664 [main:106] - GETTING Result<Ty0> from Int?
2021-03-11 20:15:01,696 [main:106] - GETTING Result<Ty0> from Int
2021-03-11 20:15:01,726 [main:106] - GETTING Result<Ty0> from Int
2021-03-11 20:15:01,727 [main:106] - GETTING Result<Ty0> from A
2021-03-11 20:15:01,734 [main:106] - GETTING Result<Ty0> from A
2021-03-11 20:15:01,735 [main:106] - GETTING Result<Ty0> from A
2021-03-11 20:15:01,736 [main:106] - GETTING Result<Ty0> from Int
2021-03-11 20:15:01,738 [main:106] - GETTING Result<Ty0> from Int
2021-03-11 20:15:01,739 [main:106] - GETTING Result<Ty0> from Int
2021-03-11 20:15:01,740 [main:106] - GETTING Result<Ty0> from Char
2021-03-11 20:15:01,758 [main:106] - GETTING Result<Ty0> from Char
2021-03-11 20:15:01,759 [main:106] - GETTING Result<Ty0> from Int
2021-03-11 20:15:01,759 [main:111] - Cant find and generate replacement for prope6 type Result<Ty0>
2021-03-11 20:15:01,759 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 20:15:01,759 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 20:15:01,759 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 20:15:01,898 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 20:15:01,905 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 20:15:01,914 [main:67] - randomType = Float
2021-03-11 20:15:02,052 [main:302] - generating value of type = Float true depth = 0
2021-03-11 20:15:02,090 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:15:02,119 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:15:02,120 [main:106] - GETTING EmptyCoroutineContext from Int?
2021-03-11 20:15:02,153 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-11 20:15:02,159 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-11 20:15:02,159 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:15:02,160 [main:106] - GETTING EmptyCoroutineContext from Char
2021-03-11 20:15:02,178 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:15:02,178 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:15:02,179 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-11 20:15:02,180 [main:106] - GETTING EmptyCoroutineContext from Char
2021-03-11 20:15:02,180 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:15:02,180 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 20:15:02,180 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 20:15:02,180 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 20:15:02,180 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-11 20:15:02,319 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 20:15:02,327 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 20:15:02,515 [main:67] - randomType = ArrayList<Int?>
2021-03-11 20:15:02,660 [main:302] - generating value of type = ArrayList<Int?> false depth = 0
2021-03-11 20:15:02,810 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Int?> = TODO()
2021-03-11 20:15:02,816 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Int?> = TODO()
2021-03-11 20:15:02,973 [main:95] - GENERATED = arrayListOf<Int?>()
2021-03-11 20:15:03,129 [main:106] - GETTING EmptyCoroutineContext from Char
2021-03-11 20:15:03,146 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:15:03,175 [main:106] - GETTING EmptyCoroutineContext from Char
2021-03-11 20:15:03,176 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:15:03,176 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-11 20:15:03,183 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:15:03,184 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:15:03,184 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-11 20:15:03,185 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:15:03,185 [main:106] - GETTING EmptyCoroutineContext from Int?
2021-03-11 20:15:03,217 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-11 20:15:03,218 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-11 20:15:03,218 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 20:15:03,218 [main:107] - replacing ((0.5312926154168319).toChar().plus("vahej") + c + ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).uppercase(), String)
2021-03-11 20:15:03,218 [main:50] - replacing (0.5312926154168319).toChar().plus("vahej") + c + ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).uppercase() String
2021-03-11 20:15:03,218 [main:54] - Getting value of type String
2021-03-11 20:15:03,360 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:15:03,364 [main:58] - GENERATED VALUE OF TYPE String = "kegsf"
2021-03-11 20:15:03,365 [main:61] - GENERATED IS CALL =false
2021-03-11 20:15:03,373 [main:67] - randomType = UInt
2021-03-11 20:15:03,517 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 20:15:03,565 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@44ddaad4]
2021-03-11 20:15:03,565 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]
2021-03-11 20:15:03,565 [main:78] - Generated call from random type = (730236991.toUInt()).toLong().toString((A((A(-1435118121, -1465758632).x), 1465758632).x))
2021-03-11 20:15:03,566 [main:106] - GETTING String from A
2021-03-11 20:15:03,573 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@62601b72], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:15:03,573 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:15:03,574 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
2021-03-11 20:15:03,574 [main:114] - replacement of (0.5312926154168319).toChar().plus("vahej") + c + ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).uppercase() of type String is (A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
2021-03-11 20:15:03,716 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:15:03,716 [main:66] - Compilation checking started
2021-03-11 20:15:04,325 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:04,328 [main:107] - replacing (((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions, Boolean)
2021-03-11 20:15:04,329 [main:50] - replacing ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions Boolean
2021-03-11 20:15:04,329 [main:54] - Getting value of type Boolean
2021-03-11 20:15:04,469 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:15:04,473 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 20:15:04,473 [main:61] - GENERATED IS CALL =false
2021-03-11 20:15:04,490 [main:67] - randomType = Kla6
2021-03-11 20:15:04,628 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 20:15:04,632 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-11 20:15:04,656 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla6[DeserializedSimpleFunctionDescriptor@797acfd8]
2021-03-11 20:15:04,792 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:15:04,792 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@277b0e94]
2021-03-11 20:15:04,932 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:15:04,932 [main:78] - Generated call from random type = (Kla6).equals("trbgj").equals("rkeiz")
2021-03-11 20:15:04,933 [main:106] - GETTING Boolean from A
2021-03-11 20:15:04,943 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[SimpleFunctionDescriptorImpl@495e4cbb], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@32f5a26b]]
2021-03-11 20:15:04,943 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[SimpleFunctionDescriptorImpl@495e4cbb]
2021-03-11 20:15:05,081 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@32f5a26b]
2021-03-11 20:15:05,223 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:15:05,227 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632)).equals(null).or(true)
2021-03-11 20:15:05,228 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[SimpleFunctionDescriptorImpl@495e4cbb], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@572d41a1]]
2021-03-11 20:15:05,228 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[SimpleFunctionDescriptorImpl@495e4cbb]
2021-03-11 20:15:05,368 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:15:05,368 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@572d41a1]
2021-03-11 20:15:05,368 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632)).equals("kifgg").not()
2021-03-11 20:15:05,369 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[SimpleFunctionDescriptorImpl@495e4cbb], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@277b0e94]]
2021-03-11 20:15:05,369 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[SimpleFunctionDescriptorImpl@495e4cbb]
2021-03-11 20:15:05,507 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:15:05,508 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@277b0e94]
2021-03-11 20:15:05,655 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:15:05,655 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632)).equals("wnuwd").equals("zwtjl")
2021-03-11 20:15:05,655 [main:113] - Case = [public final val z: kotlin.Int? defined in A[PropertyDescriptorImpl@6ea53851], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@220c529a]]
2021-03-11 20:15:05,655 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@220c529a]
2021-03-11 20:15:05,793 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:15:05,794 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632)).z?.equals("qqunx")
2021-03-11 20:15:05,794 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[SimpleFunctionDescriptorImpl@495e4cbb], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6bca329b]]
2021-03-11 20:15:05,794 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[SimpleFunctionDescriptorImpl@495e4cbb]
2021-03-11 20:15:05,934 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:15:05,934 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6bca329b]
2021-03-11 20:15:06,072 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:15:06,077 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632)).equals("yulss").and(true)
2021-03-11 20:15:06,077 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[SimpleFunctionDescriptorImpl@495e4cbb], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6f2d3666]]
2021-03-11 20:15:06,077 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[SimpleFunctionDescriptorImpl@495e4cbb]
2021-03-11 20:15:06,216 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:15:06,216 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6f2d3666]
2021-03-11 20:15:06,356 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:15:06,360 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632)).equals("ivuet").xor(false)
2021-03-11 20:15:06,360 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[SimpleFunctionDescriptorImpl@495e4cbb]]
2021-03-11 20:15:06,360 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[SimpleFunctionDescriptorImpl@495e4cbb]
2021-03-11 20:15:06,499 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:15:06,499 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632)).equals("bsezi")
2021-03-11 20:15:06,499 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@62601b72], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@220c529a]]
2021-03-11 20:15:06,499 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@220c529a]
2021-03-11 20:15:06,641 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:15:06,642 [main:117] - GENERATED CALL = (A((A(-1435118121, -1465758632).x), 1465758632)).x.equals("aarvk")
2021-03-11 20:15:06,642 [main:114] - replacement of ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toLong().countLeadingZeroBits() != numberOfSuspensions of type Boolean is true
2021-03-11 20:15:06,780 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-11 20:15:06,780 [main:66] - Compilation checking started
2021-03-11 20:15:07,405 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:07,408 [main:107] - replacing (prope10, Function0<Unit>)
2021-03-11 20:15:07,409 [main:50] - replacing prope10 Function0<Unit>
2021-03-11 20:15:07,409 [main:54] - Getting value of type Function0<Unit>
2021-03-11 20:15:07,547 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 20:15:07,551 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:15:07,690 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 20:15:07,695 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 20:15:08,156 [main:302] - generating value of type = Int true depth = 4
2021-03-11 20:15:08,160 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 20:15:08,164 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 20:15:08,171 [main:95] - GENERATED = repeat(-1430140015, {a: Int -> println()})
2021-03-11 20:15:08,171 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(-1430140015, {a: Int -> println()})}
2021-03-11 20:15:08,172 [main:61] - GENERATED IS CALL =false
2021-03-11 20:15:08,332 [main:67] - randomType = Double
2021-03-11 20:15:08,465 [main:302] - generating value of type = Double true depth = 0
2021-03-11 20:15:08,498 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:15:08,527 [main:106] - GETTING Function0<Unit> from A
2021-03-11 20:15:08,534 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:15:08,535 [main:106] - GETTING Function0<Unit> from Int?
2021-03-11 20:15:08,566 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:15:08,567 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 20:15:08,585 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:15:08,586 [main:106] - GETTING Function0<Unit> from A
2021-03-11 20:15:08,587 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 20:15:08,588 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:15:08,588 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:15:08,589 [main:106] - GETTING Function0<Unit> from A
2021-03-11 20:15:08,589 [main:114] - replacement of prope10 of type Function0<Unit> is { repeat(-1430140015, {a: Int -> println()})}
2021-03-11 20:15:08,722 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 20:15:08,722 [main:66] - Compilation checking started
2021-03-11 20:15:09,128 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        { repeat(-1430140015, {a: Int -> println()})} = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(1647168141) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:09,273 [main:141] - TRYING TO REPLACE CONSTANT 1647168141
2021-03-11 20:15:09,406 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:15:09,407 [main:66] - Compilation checking started
2021-03-11 20:15:10,009 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(542154729.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:10,009 [main:141] - TRYING TO REPLACE CONSTANT 542154729
2021-03-11 20:15:10,143 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 20:15:10,144 [main:66] - Compilation checking started
2021-03-11 20:15:10,764 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:10,764 [main:141] - TRYING TO REPLACE CONSTANT 1435118121
2021-03-11 20:15:10,901 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 20:15:10,901 [main:66] - Compilation checking started
2021-03-11 20:15:11,493 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(-1435118121, -1465758632).x), 1465758632).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:11,493 [main:141] - TRYING TO REPLACE CONSTANT 1465758632
2021-03-11 20:15:11,650 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PARENTHESIZED)
2021-03-11 20:15:11,650 [main:66] - Compilation checking started
2021-03-11 20:15:12,305 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(-1435118121, -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:12,305 [main:141] - TRYING TO REPLACE CONSTANT 1435118121
2021-03-11 20:15:12,440 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:15:12,441 [main:66] - Compilation checking started
2021-03-11 20:15:13,071 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:13,072 [main:141] - TRYING TO REPLACE CONSTANT 1465758632
2021-03-11 20:15:13,217 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:15:13,218 [main:66] - Compilation checking started
2021-03-11 20:15:13,659 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), x).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:13,660 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-11 20:15:13,824 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 20:15:13,825 [main:141] - TRYING TO REPLACE CONSTANT 1435118121
2021-03-11 20:15:13,984 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:15:13,985 [main:66] - Compilation checking started
2021-03-11 20:15:14,611 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:14,611 [main:141] - TRYING TO REPLACE CONSTANT 1435118121
2021-03-11 20:15:14,752 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-11 20:15:14,752 [main:66] - Compilation checking started
2021-03-11 20:15:15,352 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(-1435118121, -1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:15,353 [main:141] - TRYING TO REPLACE CONSTANT 1465758632
2021-03-11 20:15:15,489 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 20:15:15,490 [main:141] - TRYING TO REPLACE CONSTANT 1465758632
2021-03-11 20:15:15,628 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 20:15:15,629 [main:141] - TRYING TO REPLACE CONSTANT 1435118121
2021-03-11 20:15:15,766 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:15:15,767 [main:66] - Compilation checking started
2021-03-11 20:15:16,375 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, -1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:16,375 [main:141] - TRYING TO REPLACE CONSTANT 1465758632
2021-03-11 20:15:16,516 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 20:15:16,516 [main:66] - Compilation checking started
2021-03-11 20:15:17,118 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:17,119 [main:141] - TRYING TO REPLACE CONSTANT 1435118121
2021-03-11 20:15:17,260 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 20:15:17,261 [main:66] - Compilation checking started
2021-03-11 20:15:17,918 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ('㹹').toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:17,918 [main:141] - TRYING TO REPLACE CONSTANT 1465758632
2021-03-11 20:15:18,062 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 20:15:18,063 [main:141] - TRYING TO REPLACE CONSTANT '㹹'
2021-03-11 20:15:18,206 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:15:18,207 [main:66] - Compilation checking started
2021-03-11 20:15:18,819 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(553017313)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:18,819 [main:141] - TRYING TO REPLACE CONSTANT 553017313
2021-03-11 20:15:18,960 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 20:15:18,961 [main:66] - Compilation checking started
2021-03-11 20:15:19,596 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴').toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:19,596 [main:141] - TRYING TO REPLACE CONSTANT '崴'
2021-03-11 20:15:19,741 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:15:19,741 [main:66] - Compilation checking started
2021-03-11 20:15:20,334 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:20,335 [main:141] - TRYING TO REPLACE CONSTANT 1465758632
2021-03-11 20:15:20,476 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 20:15:20,477 [main:66] - Compilation checking started
2021-03-11 20:15:21,110 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(-1435118121, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:21,110 [main:141] - TRYING TO REPLACE CONSTANT 1435118121
2021-03-11 20:15:21,273 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:15:21,274 [main:66] - Compilation checking started
2021-03-11 20:15:21,912 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:21,913 [main:141] - TRYING TO REPLACE CONSTANT 1465758632
2021-03-11 20:15:22,053 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:15:22,054 [main:66] - Compilation checking started
2021-03-11 20:15:22,480 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, x).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(-1435118121, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:22,481 [main:141] - TRYING TO REPLACE CONSTANT 1515288359
2021-03-11 20:15:22,623 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 20:15:22,623 [main:66] - Compilation checking started
2021-03-11 20:15:23,242 [main:141] - TRYING TO REPLACE CONSTANT 1435118121
2021-03-11 20:15:23,387 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:15:23,387 [main:66] - Compilation checking started
2021-03-11 20:15:24,016 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1465758632).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:24,016 [main:141] - TRYING TO REPLACE CONSTANT 1465758632
2021-03-11 20:15:24,157 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 20:15:24,157 [main:66] - Compilation checking started
2021-03-11 20:15:24,753 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:24,753 [main:141] - TRYING TO REPLACE CONSTANT 1465758632
2021-03-11 20:15:24,919 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:15:24,920 [main:66] - Compilation checking started
2021-03-11 20:15:25,361 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, -1465758632).x), x).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:25,362 [main:141] - TRYING TO REPLACE CONSTANT 1435118121
2021-03-11 20:15:25,508 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:15:25,509 [main:66] - Compilation checking started
2021-03-11 20:15:25,947 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(x, -1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:25,948 [main:141] - TRYING TO REPLACE CONSTANT 1465758632
2021-03-11 20:15:26,093 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 20:15:26,094 [main:66] - Compilation checking started
2021-03-11 20:15:26,690 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:26,691 [main:141] - TRYING TO REPLACE CONSTANT 1435118121
2021-03-11 20:15:26,860 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 20:15:26,860 [main:66] - Compilation checking started
2021-03-11 20:15:27,469 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:27,470 [main:141] - TRYING TO REPLACE CONSTANT 1465758632
2021-03-11 20:15:27,623 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-11 20:15:27,623 [main:66] - Compilation checking started
2021-03-11 20:15:28,276 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(-1435118121, -1465758632).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:28,276 [main:141] - TRYING TO REPLACE CONSTANT 1435118121
2021-03-11 20:15:28,444 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:15:28,444 [main:66] - Compilation checking started
2021-03-11 20:15:29,062 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:29,062 [main:141] - TRYING TO REPLACE CONSTANT 1465758632
2021-03-11 20:15:29,204 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:15:29,205 [main:66] - Compilation checking started
2021-03-11 20:15:29,822 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:29,822 [main:141] - TRYING TO REPLACE CONSTANT 0.579355f
2021-03-11 20:15:30,000 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(FLOAT_CONSTANT)
2021-03-11 20:15:30,001 [main:66] - Compilation checking started
2021-03-11 20:15:30,604 [main:141] - TRYING TO REPLACE CONSTANT 106
2021-03-11 20:15:30,759 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-11 20:15:30,760 [main:66] - Compilation checking started
2021-03-11 20:15:31,193 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(true, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, toByte()))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:31,193 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-11 20:15:31,336 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 20:15:31,337 [main:66] - Compilation checking started
2021-03-11 20:15:31,955 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:31,955 [main:141] - TRYING TO REPLACE CONSTANT 1465758632
2021-03-11 20:15:32,123 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:15:32,123 [main:66] - Compilation checking started
2021-03-11 20:15:32,567 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), x).x).toLong().toString(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:32,567 [main:141] - TRYING TO REPLACE CONSTANT 1435118121
2021-03-11 20:15:32,711 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:15:32,712 [main:66] - Compilation checking started
2021-03-11 20:15:33,395 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(-1435118121, -1465758632).x), 1465758632).x).toLong().toString(A(prope8, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:33,395 [main:141] - TRYING TO REPLACE CONSTANT 1435118121
2021-03-11 20:15:33,541 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 20:15:33,542 [main:66] - Compilation checking started
2021-03-11 20:15:34,169 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, -1465758632).x), 1465758632).x).toLong().toString(A(prope8, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:34,170 [main:141] - TRYING TO REPLACE CONSTANT 1465758632
2021-03-11 20:15:34,314 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PARENTHESIZED)
2021-03-11 20:15:34,314 [main:66] - Compilation checking started
2021-03-11 20:15:34,920 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:34,920 [main:141] - TRYING TO REPLACE CONSTANT 1465758632
2021-03-11 20:15:35,066 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PARENTHESIZED)
2021-03-11 20:15:35,066 [main:66] - Compilation checking started
2021-03-11 20:15:35,671 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(-1435118121, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:35,672 [main:141] - TRYING TO REPLACE CONSTANT 1435118121
2021-03-11 20:15:35,850 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:15:35,851 [main:66] - Compilation checking started
2021-03-11 20:15:36,455 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:36,456 [main:141] - TRYING TO REPLACE CONSTANT 1465758632
2021-03-11 20:15:36,605 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 20:15:36,606 [main:141] - TRYING TO REPLACE CONSTANT 1435118121
2021-03-11 20:15:36,752 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 20:15:36,752 [main:66] - Compilation checking started
2021-03-11 20:15:37,396 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(2, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:37,396 [main:141] - TRYING TO REPLACE CONSTANT 1435118121
2021-03-11 20:15:37,544 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:15:37,545 [main:66] - Compilation checking started
2021-03-11 20:15:38,191 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(2, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(A(1920083034, 1486922171).x, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:38,191 [main:141] - TRYING TO REPLACE CONSTANT 1465758632
2021-03-11 20:15:38,339 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 20:15:38,340 [main:141] - TRYING TO REPLACE CONSTANT 1465758632
2021-03-11 20:15:38,487 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 20:15:38,488 [main:66] - Compilation checking started
2021-03-11 20:15:39,129 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(2, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString((A(A(1920083034, 1486922171).x, (A((A(-1435118121, -1465758632).x), 1).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:39,130 [main:141] - TRYING TO REPLACE CONSTANT 1435118121
2021-03-11 20:15:39,292 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PARENTHESIZED)
2021-03-11 20:15:39,292 [main:66] - Compilation checking started
2021-03-11 20:15:39,966 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x).toString((A(A(1920083034, 1486922171).x, (A((A(-1435118121, -1465758632).x), 1).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:39,966 [main:141] - TRYING TO REPLACE CONSTANT 1465758632
2021-03-11 20:15:40,117 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:15:40,117 [main:66] - Compilation checking started
2021-03-11 20:15:40,568 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), x).x), 1465758632).x)).x).toString((A(A(1920083034, 1486922171).x, (A((A(-1435118121, -1465758632).x), 1).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:40,568 [main:141] - TRYING TO REPLACE CONSTANT 1435118121
2021-03-11 20:15:40,714 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 20:15:40,715 [main:66] - Compilation checking started
2021-03-11 20:15:41,323 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x).toString((A(A(1920083034, 1486922171).x, (A((A(1465758632, -1465758632).x), 1).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:41,324 [main:141] - TRYING TO REPLACE CONSTANT 1465758632
2021-03-11 20:15:41,472 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 20:15:41,472 [main:66] - Compilation checking started
2021-03-11 20:15:42,082 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x).toString((A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(2)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:42,083 [main:141] - TRYING TO REPLACE CONSTANT 2
2021-03-11 20:15:42,237 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(POSTFIX_EXPRESSION)
2021-03-11 20:15:42,237 [main:66] - Compilation checking started
2021-03-11 20:15:42,850 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x).toString((A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), 1465758632)).x.until(prope8++)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:42,851 [main:141] - TRYING TO REPLACE CONSTANT 1465758632
2021-03-11 20:15:43,016 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PARENTHESIZED)
2021-03-11 20:15:43,016 [main:66] - Compilation checking started
2021-03-11 20:15:43,649 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x).toString((A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(-1435118121, -1465758632).x), (A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x))).x.until(prope8++)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:43,650 [main:141] - TRYING TO REPLACE CONSTANT 1435118121
2021-03-11 20:15:43,817 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 20:15:43,817 [main:66] - Compilation checking started
2021-03-11 20:15:44,500 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x).toString((A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(1, -1465758632).x), (A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x))).x.until(prope8++)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:44,500 [main:141] - TRYING TO REPLACE CONSTANT 1465758632
2021-03-11 20:15:44,673 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 20:15:44,673 [main:66] - Compilation checking started
2021-03-11 20:15:45,308 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x).toString((A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(1, 1465758632).x), (A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x))).x.until(prope8++)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:45,309 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-11 20:15:45,458 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BINARY_EXPRESSION)
2021-03-11 20:15:45,458 [main:66] - Compilation checking started
2021-03-11 20:15:45,885 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x).toString((A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (prope11 != null)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(1, 1465758632).x), (A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x))).x.until(prope8++)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(false)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:45,886 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-11 20:15:46,036 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:15:46,037 [main:66] - Compilation checking started
2021-03-11 20:15:46,655 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x).toString((A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A(-1435118121, -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(1, 1465758632).x), (A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x))).x.until(prope8++)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(prope9)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:46,655 [main:141] - TRYING TO REPLACE CONSTANT 1435118121
2021-03-11 20:15:46,835 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PARENTHESIZED)
2021-03-11 20:15:46,835 [main:66] - Compilation checking started
2021-03-11 20:15:47,471 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x).toString((A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(1, 1465758632).x), (A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x))).x.until(prope8++)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(prope9)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:47,471 [main:141] - TRYING TO REPLACE CONSTANT 1465758632
2021-03-11 20:15:47,626 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 20:15:47,627 [main:66] - Compilation checking started
2021-03-11 20:15:48,248 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x).toString((A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(1, 1465758632).x), (A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x))).x.until(prope8++)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(prope9)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:48,248 [main:141] - TRYING TO REPLACE CONSTANT 1465758632
2021-03-11 20:15:48,397 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 20:15:48,398 [main:141] - TRYING TO REPLACE CONSTANT 1435118121
2021-03-11 20:15:48,546 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-11 20:15:48,546 [main:66] - Compilation checking started
2021-03-11 20:15:49,156 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x).toString((A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1435118121, -1465758632).x), 1465758632)).x.toString((A(-1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(1, 1465758632).x), (A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x))).x.until(prope8++)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(prope9)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:49,156 [main:141] - TRYING TO REPLACE CONSTANT 1435118121
2021-03-11 20:15:49,313 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 20:15:49,313 [main:66] - Compilation checking started
2021-03-11 20:15:49,962 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x).toString((A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1465758632, -1465758632).x), 1465758632)).x.toString((A(-1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(1, 1465758632).x), (A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x))).x.until(prope8++)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(prope9)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:49,962 [main:141] - TRYING TO REPLACE CONSTANT 1465758632
2021-03-11 20:15:50,116 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PARENTHESIZED)
2021-03-11 20:15:50,117 [main:66] - Compilation checking started
2021-03-11 20:15:50,811 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x).toString((A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1465758632, (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x)).x), 1465758632)).x.toString((A(-1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(1, 1465758632).x), (A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x))).x.until(prope8++)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(prope9)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:50,811 [main:141] - TRYING TO REPLACE CONSTANT 1465758632
2021-03-11 20:15:50,973 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-11 20:15:50,974 [main:66] - Compilation checking started
2021-03-11 20:15:51,424 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x).toString((A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1465758632, (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x)).x), 1465758632)).x.toString((A(-1465758632, (A((A(-1435118121, -1465758632).x), x).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(1, 1465758632).x), (A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x))).x.until(prope8++)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(prope9)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:51,425 [main:141] - TRYING TO REPLACE CONSTANT 1435118121
2021-03-11 20:15:51,594 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 20:15:51,595 [main:66] - Compilation checking started
2021-03-11 20:15:52,218 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x).toString((A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1465758632, (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x)).x), 1465758632)).x.toString((A(-1465758632, (A((A(-1465758632, -1465758632).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(1, 1465758632).x), (A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x))).x.until(prope8++)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(prope9)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:52,219 [main:141] - TRYING TO REPLACE CONSTANT 1465758632
2021-03-11 20:15:52,379 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:15:52,379 [main:66] - Compilation checking started
2021-03-11 20:15:53,005 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x).toString((A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1465758632, (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x)).x), 1465758632)).x.toString((A(-1465758632, (A((A(-1465758632, A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(1, 1465758632).x), (A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x))).x.until(prope8++)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(prope9)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:53,005 [main:41] - AFTER TRY 2 res = 
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x).toString((A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1465758632, (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x)).x), 1465758632)).x.toString((A(-1465758632, (A((A(-1465758632, A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(1, 1465758632).x), (A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x))).x.until(prope8++)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(prope9)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:15:53,325 [main:112] - generating klass A text = data class A(var x: Int, val z: Int?)
2021-03-11 20:15:53,480 [main:194] - Type params = []
2021-03-11 20:15:53,632 [main:302] - generating value of type = Int true depth = 1
2021-03-11 20:15:53,639 [main:302] - generating value of type = Int true depth = 1
2021-03-11 20:15:53,646 [main:112] - generating klass Kla0 text = interface Kla0 {
    suspend fun fu4()
}
2021-03-11 20:15:53,977 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}
2021-03-11 20:15:54,155 [main:194] - Type params = []
2021-03-11 20:15:54,311 [main:302] - generating value of type = CoroutineContext false depth = 1
2021-03-11 20:15:54,473 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:15:54,482 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:15:54,859 [main:302] - generating value of type = Key<*> false depth = 4
2021-03-11 20:15:55,030 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:15:55,039 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:15:55,627 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 7
2021-03-11 20:15:55,798 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:15:55,807 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:15:56,392 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 10
2021-03-11 20:15:56,563 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:15:56,572 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:15:57,160 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 13
2021-03-11 20:15:57,333 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:15:57,342 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:15:58,010 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 16
2021-03-11 20:15:58,010 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:15:58,010 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 20:15:58,010 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 20:15:58,010 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:15:58,010 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:15:58,011 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}
2021-03-11 20:15:58,011 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 20:15:58,577 [main:302] - generating value of type = Kla6 false depth = 1
2021-03-11 20:15:58,584 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-11 20:15:58,585 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1465758632, (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x)).x), 1465758632)).x.toString((A(-1465758632, (A((A(-1465758632, A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}
2021-03-11 20:15:58,585 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(1, 1465758632).x), (A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x))).x.until(prope8++)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(prope9)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}
2021-03-11 20:15:58,585 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-11 20:15:58,585 [main:112] - generating klass null text = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}
2021-03-11 20:15:58,585 [main:112] - generating klass null text = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}
2021-03-11 20:15:58,586 [main:112] - generating klass Kla7 text = companion object Kla7 : Kla1()
2021-03-11 20:15:58,586 [main:112] - generating klass null text = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
2021-03-11 20:15:58,955 [main:43] - GENERATING CALL OF suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}
2021-03-11 20:15:58,962 [main:61] - WITHOUT TYPE PARAMS = suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}
2021-03-11 20:15:59,343 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 1
2021-03-11 20:15:59,351 [main:302] - generating value of type = Unit false depth = 2
2021-03-11 20:15:59,361 [main:95] - GENERATED = fu0({ println()})
2021-03-11 20:15:59,520 [main:43] - GENERATING CALL OF fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}
2021-03-11 20:15:59,527 [main:61] - WITHOUT TYPE PARAMS = fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}
2021-03-11 20:15:59,907 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 1
2021-03-11 20:15:59,914 [main:302] - generating value of type = Unit false depth = 2
2021-03-11 20:16:00,080 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:16:00,089 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:16:00,662 [main:302] - generating value of type = Boolean true depth = 5
2021-03-11 20:16:00,669 [main:302] - generating value of type = Function0<Any> false depth = 5
2021-03-11 20:16:00,676 [main:302] - generating value of type = Any false depth = 6
2021-03-11 20:16:00,676 [main:95] - GENERATED = check(true, { "wnpyk"})
2021-03-11 20:16:00,677 [main:95] - GENERATED = fu1({ check(true, { "wnpyk"})})
2021-03-11 20:16:00,832 [main:43] - GENERATING CALL OF fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}
2021-03-11 20:16:01,035 [main:61] - WITHOUT TYPE PARAMS = fun <Ty0> fu2(x: (Short) -> Unit): Continuation<Short> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}
2021-03-11 20:16:01,441 [main:302] - generating value of type = Function1<Short, Unit> false depth = 1
2021-03-11 20:16:01,448 [main:302] - generating value of type = Unit false depth = 2
2021-03-11 20:16:01,616 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 20:16:01,625 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 20:16:02,194 [main:302] - generating value of type = Int true depth = 5
2021-03-11 20:16:02,201 [main:302] - generating value of type = Function1<Int, Unit> false depth = 5
2021-03-11 20:16:02,208 [main:302] - generating value of type = Unit false depth = 6
2021-03-11 20:16:02,378 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:16:02,386 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:16:02,748 [main:95] - GENERATED = println(null)
2021-03-11 20:16:02,748 [main:95] - GENERATED = repeat(-1665456207, {a: Int -> println(null)})
2021-03-11 20:16:02,749 [main:95] - GENERATED = fu2<Short>({a: Short -> repeat(-1665456207, {a: Int -> println(null)})})
2021-03-11 20:16:02,903 [main:43] - GENERATING CALL OF fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}
2021-03-11 20:16:02,910 [main:61] - WITHOUT TYPE PARAMS = fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}
2021-03-11 20:16:03,285 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 1
2021-03-11 20:16:03,293 [main:302] - generating value of type = Unit false depth = 2
2021-03-11 20:16:03,460 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:16:03,468 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 20:16:03,833 [main:302] - generating value of type = Any false depth = 5
2021-03-11 20:16:03,833 [main:95] - GENERATED = println("jfolf")
2021-03-11 20:16:03,833 [main:95] - GENERATED = fu3({a: Throwable -> println("jfolf")})
2021-03-11 20:16:04,029 [main:43] - Try №2
2021-03-11 20:16:10,536 [main:48] - Already checked
2021-03-11 20:16:10,689 [main:48] - Already checked
2021-03-11 20:16:13,747 [main:69] - Trying to insert override fun resumeWith(prope12: Result<Ty1>) {
        x(prope12.getOrThrow())
    }
2021-03-11 20:16:13,852 [main:66] - Compilation checking started
2021-03-11 20:16:15,334 [main:103] - Trying to change 192 nodes
2021-03-11 20:16:15,334 [main:107] - replacing (false, Boolean)
2021-03-11 20:16:15,334 [main:50] - replacing false Boolean
2021-03-11 20:16:15,334 [main:54] - Getting value of type Boolean
2021-03-11 20:16:15,543 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:16:15,554 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 20:16:15,554 [main:61] - GENERATED IS CALL =false
2021-03-11 20:16:16,165 [main:67] - randomType = LinkedHashMap<Kla14, ArrayList<Int>>
2021-03-11 20:16:16,362 [main:302] - generating value of type = LinkedHashMap<Kla14, ArrayList<Int>> false depth = 0
2021-03-11 20:16:16,578 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Kla14, ArrayList<Int>> = TODO()
2021-03-11 20:16:16,591 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Kla14, ArrayList<Int>> = TODO()
2021-03-11 20:16:16,851 [main:95] - GENERATED = linkedMapOf<Kla14, ArrayList<Int>>()
2021-03-11 20:16:17,017 [main:149] - GENERATING call of type public abstract fun containsAll(elements: kotlin.collections.Collection<kotlin.collections.ArrayList<kotlin.Int>>): kotlin.Boolean defined in kotlin.collections.MutableCollection[DeserializedSimpleFunctionDescriptor@662fcaf0]
2021-03-11 20:16:17,211 [main:302] - generating value of type = Collection<ArrayList<Int>> false depth = 0
2021-03-11 20:16:17,426 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): Collection<ArrayList<Int>> = TODO()
2021-03-11 20:16:17,438 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): Collection<ArrayList<Int>> = TODO()
2021-03-11 20:16:17,646 [main:95] - GENERATED = linkedSetOf<ArrayList<Int>>()
2021-03-11 20:16:17,647 [main:78] - Generated call from random type = (linkedMapOf<Kla14, ArrayList<Int>>()).values.containsAll(linkedSetOf<ArrayList<Int>>())
2021-03-11 20:16:17,648 [main:106] - GETTING Boolean from Char
2021-03-11 20:16:17,665 [main:113] - Case = [public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f344b89]]
2021-03-11 20:16:17,665 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f344b89]
2021-03-11 20:16:17,665 [main:117] - GENERATED CALL = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).isISOControl()
2021-03-11 20:16:17,665 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6ac301e], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6bca329b]]
2021-03-11 20:16:17,665 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6ac301e]
2021-03-11 20:16:17,665 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6bca329b]
2021-03-11 20:16:17,665 [main:117] - GENERATED CALL = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).equals(Kla2().prope6).and(Kla5().prope9)
2021-03-11 20:16:17,665 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@697b1b46], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@220c529a]]
2021-03-11 20:16:17,665 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@697b1b46]
2021-03-11 20:16:17,666 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@220c529a]
2021-03-11 20:16:17,666 [main:117] - GENERATED CALL = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).equals(Kla2().prope6)
2021-03-11 20:16:17,666 [main:113] - Case = [public final fun toFloat(): kotlin.Float defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5b3ab554], public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@5987e28d]]
2021-03-11 20:16:17,666 [main:149] - GENERATING call of type public final fun toFloat(): kotlin.Float defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5b3ab554]
2021-03-11 20:16:17,666 [main:149] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@5987e28d]
2021-03-11 20:16:17,666 [main:117] - GENERATED CALL = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toFloat().isInfinite()
2021-03-11 20:16:17,666 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6ac301e], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6f2d3666]]
2021-03-11 20:16:17,666 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6ac301e]
2021-03-11 20:16:17,666 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6f2d3666]
2021-03-11 20:16:17,667 [main:117] - GENERATED CALL = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).equals(Kla2().prope6).xor(Kla5().prope9)
2021-03-11 20:16:17,667 [main:113] - Case = [public final fun toDouble(): kotlin.Double defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@142c4dd6], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3cd0df14]]
2021-03-11 20:16:17,667 [main:149] - GENERATING call of type public final fun toDouble(): kotlin.Double defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@142c4dd6]
2021-03-11 20:16:17,667 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3cd0df14]
2021-03-11 20:16:17,667 [main:117] - GENERATED CALL = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toDouble().isFinite()
2021-03-11 20:16:17,667 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Char): kotlin.ranges.CharRange defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6b4483a4], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.CharRange[DeserializedSimpleFunctionDescriptor@47f31ca0]]
2021-03-11 20:16:17,667 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Char): kotlin.ranges.CharRange defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6b4483a4]
2021-03-11 20:16:17,667 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.CharRange[DeserializedSimpleFunctionDescriptor@47f31ca0]
2021-03-11 20:16:17,858 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:16:17,859 [main:117] - GENERATED CALL = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).rangeTo((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar()).equals("fkedp")
2021-03-11 20:16:17,859 [main:113] - Case = [public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@521a6cab]]
2021-03-11 20:16:17,859 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@521a6cab]
2021-03-11 20:16:17,859 [main:117] - GENERATED CALL = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).isLowerCase()
2021-03-11 20:16:17,859 [main:113] - Case = [public final fun toDouble(): kotlin.Double defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@142c4dd6], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6395aed6]]
2021-03-11 20:16:17,859 [main:149] - GENERATING call of type public final fun toDouble(): kotlin.Double defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@142c4dd6]
2021-03-11 20:16:17,859 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6395aed6]
2021-03-11 20:16:17,860 [main:117] - GENERATED CALL = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toDouble().isNaN()
2021-03-11 20:16:17,860 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6ac301e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@277b0e94]]
2021-03-11 20:16:17,860 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@6ac301e]
2021-03-11 20:16:18,064 [main:302] - generating value of type = Any false depth = 0
2021-03-11 20:16:18,064 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@277b0e94]
2021-03-11 20:16:18,064 [main:117] - GENERATED CALL = ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).equals("trimy").equals(Kla2().prope6)
2021-03-11 20:16:18,065 [main:114] - replacement of false of type Boolean is (linkedMapOf<Kla14, ArrayList<Int>>()).values.containsAll(linkedSetOf<ArrayList<Int>>())
2021-03-11 20:16:18,259 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:16:18,260 [main:66] - Compilation checking started
2021-03-11 20:16:19,227 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x).toString((A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1465758632, (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x)).x), 1465758632)).x.toString((A(-1465758632, (A((A(-1465758632, A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(1, 1465758632).x), (A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x))).x.until(prope8++)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(prope9)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

var prope12 = "FAIL"

fun fu13(prope13: suspend () -> Unit) {
    prope13.startCoroutine(fu16 {
        prope12 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla8(val s: Any)

var prope13: Continuation<Any>? = null

suspend fun <Ty1> fu14(): Ty1 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope13 = it as Continuation<Any>
}

interface Kla9 {
    suspend fun fu17(): Any
}

class Kla10() : Kla9 {

    override suspend fun fu17(): Kla8 = fu14()

    suspend fun fu18(): String {
        val prope20: Kla9 = this
        return (prope20.fu17() as Kla8).s as String
    }

    suspend fun fu19(): String = fu17().s as String
}

fun box246(): String {
    fu13 {
        Kla10().fu18()
    }
    prope13?.resumeWithException(IllegalStateException("OK"))
    if (prope12 != "OK") return "FAIL 1 $prope12"

    prope12 = "FAIL2 "
    fu13 {
        Kla10().fu19()
    }
    prope13?.resumeWithException(IllegalStateException("OK"))
    if (prope12 != "OK") return "FAIL 2 $prope12"

    return prope12
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        x(prope12.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.exceptionOrNull()?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            resumeWithException(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope16 = arrayListOf<StackTraceElement?>()

    suspend fun fu22() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu22(it)
    }

    fun fu22(prope13: Continuation<*>) {
        if (prope13 !is CoroutineStackFrame) error("Continuation " + prope13 + " is not subtype of CoroutineStackFrame")
        prope16.clear()
        var prope21: CoroutineStackFrame? = prope13
        while (prope21 != null) {
            prope16.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu23(method: String) {
        prope16.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope16.joinToString(separator = "\n")) }
    }

    fun fu24(method: String) {
        prope16.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope16.joinToString(separator = "\n"))
    }
}

val prope14 = Kla14()

class Kla15 {
    private var prope17 = 0
    var prope18 = (linkedMapOf<Kla14, ArrayList<Int>>()).values.containsAll(linkedSetOf<ArrayList<Int>>())

    var prope19: () -> Unit = {}

    fun fu25() {
        prope17 = 0
        prope18 = false
        prope19 = {}
    }

    suspend fun fu26() = suspendCoroutine<Unit> { prope13 ->
        prope17++
        prope19 = { prope13.resume(Unit) }
    }

    fun fu27(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope17 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope17)
            prope19()
        }
        if (prope17 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope17)
        if (prope18) error("Wrong state-machine generated: it is finished early")
        prope19()
        if (checkFinished && !prope18) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope15 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope15.prope19 = {
            prope15.prope18 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:16:19,230 [main:107] - replacing ("\n", String)
2021-03-11 20:16:19,231 [main:50] - replacing "\n" String
2021-03-11 20:16:19,231 [main:54] - Getting value of type String
2021-03-11 20:16:19,438 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:16:19,448 [main:58] - GENERATED VALUE OF TYPE String = "cfwee"
2021-03-11 20:16:19,448 [main:61] - GENERATED IS CALL =false
2021-03-11 20:16:19,491 [main:67] - randomType = Kla10
2021-03-11 20:16:19,692 [main:302] - generating value of type = Kla10 false depth = 0
2021-03-11 20:16:19,703 [main:112] - generating klass Kla10 text = class Kla10() : Kla9 {

    override suspend fun fu17(): Kla8 = fu14()

    suspend fun fu18(): String {
        val prope20: Kla9 = this
        return (prope20.fu17() as Kla8).s as String
    }

    suspend fun fu19(): String = fu17().s as String
}
2021-03-11 20:16:19,900 [main:194] - Type params = []
2021-03-11 20:16:20,120 [main:149] - GENERATING call of type public final suspend fun fu18(): kotlin.String defined in Kla10[SimpleFunctionDescriptorImpl@b4885ae]
2021-03-11 20:16:20,120 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a795caf]
2021-03-11 20:16:20,120 [main:78] - Generated call from random type = (Kla10()).fu18().trimStart()
2021-03-11 20:16:20,121 [main:106] - GETTING String from A
2021-03-11 20:16:20,128 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@263876a7], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:16:20,128 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:16:20,128 [main:117] - GENERATED CALL = (A(1465758632, 1435118121)).x.toString(A(1284219886, 1309414067).x)
2021-03-11 20:16:20,128 [main:114] - replacement of "\n" of type String is (Kla10()).fu18().trimStart()
2021-03-11 20:16:20,327 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:16:20,327 [main:66] - Compilation checking started
2021-03-11 20:16:20,940 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x).toString((A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1465758632, (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x)).x), 1465758632)).x.toString((A(-1465758632, (A((A(-1465758632, A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(1, 1465758632).x), (A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x))).x.until(prope8++)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(prope9)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

var prope12 = "FAIL"

fun fu13(prope13: suspend () -> Unit) {
    prope13.startCoroutine(fu16 {
        prope12 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla8(val s: Any)

var prope13: Continuation<Any>? = null

suspend fun <Ty1> fu14(): Ty1 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope13 = it as Continuation<Any>
}

interface Kla9 {
    suspend fun fu17(): Any
}

class Kla10() : Kla9 {

    override suspend fun fu17(): Kla8 = fu14()

    suspend fun fu18(): String {
        val prope20: Kla9 = this
        return (prope20.fu17() as Kla8).s as String
    }

    suspend fun fu19(): String = fu17().s as String
}

fun box246(): String {
    fu13 {
        Kla10().fu18()
    }
    prope13?.resumeWithException(IllegalStateException("OK"))
    if (prope12 != "OK") return "FAIL 1 $prope12"

    prope12 = "FAIL2 "
    fu13 {
        Kla10().fu19()
    }
    prope13?.resumeWithException(IllegalStateException("OK"))
    if (prope12 != "OK") return "FAIL 2 $prope12"

    return prope12
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        x(prope12.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.exceptionOrNull()?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            resumeWithException(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope16 = arrayListOf<StackTraceElement?>()

    suspend fun fu22() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu22(it)
    }

    fun fu22(prope13: Continuation<*>) {
        if (prope13 !is CoroutineStackFrame) error("Continuation " + prope13 + " is not subtype of CoroutineStackFrame")
        prope16.clear()
        var prope21: CoroutineStackFrame? = prope13
        while (prope21 != null) {
            prope16.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu23(method: String) {
        prope16.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope16.joinToString(separator = "\n")) }
    }

    fun fu24(method: String) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
prope16.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope16.joinToString(separator = (Kla10()).fu18().trimStart()))
    }
}

val prope14 = Kla14()

class Kla15 {
    private var prope17 = 0
    var prope18 = (linkedMapOf<Kla14, ArrayList<Int>>()).values.containsAll(linkedSetOf<ArrayList<Int>>())

    var prope19: () -> Unit = {}

    fun fu25() {
        prope17 = 0
        prope18 = false
        prope19 = {}
    }

    suspend fun fu26() = suspendCoroutine<Unit> { prope13 ->
        prope17++
        prope19 = { prope13.resume(Unit) }
    }

    fun fu27(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope17 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope17)
            prope19()
        }
        if (prope17 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope17)
        if (prope18) error("Wrong state-machine generated: it is finished early")
        prope19()
        if (checkFinished && !prope18) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope15 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope15.prope19 = {
            prope15.prope18 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:16:20,942 [main:107] - replacing (prope19, Function0<Unit>)
2021-03-11 20:16:20,944 [main:50] - replacing prope19 Function0<Unit>
2021-03-11 20:16:20,944 [main:54] - Getting value of type Function0<Unit>
2021-03-11 20:16:21,217 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 20:16:21,228 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:16:21,243 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 20:16:21,243 [main:61] - GENERATED IS CALL =false
2021-03-11 20:16:21,508 [main:67] - randomType = ULong
2021-03-11 20:16:21,706 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 20:16:21,748 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 20:16:21,777 [main:106] - GETTING Function0<Unit> from Continuation<Any?>
2021-03-11 20:16:21,785 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-11 20:16:21,794 [main:106] - GETTING Function0<Unit> from A
2021-03-11 20:16:21,807 [main:106] - GETTING Function0<Unit> from Kla5
2021-03-11 20:16:21,820 [main:113] - Case = [public final var prope10: () -> kotlin.Unit defined in Kla5[PropertyDescriptorImpl@4512abe2]]
2021-03-11 20:16:21,821 [main:117] - GENERATED CALL = (Kla5()).prope10
2021-03-11 20:16:21,821 [main:114] - replacement of prope19 of type Function0<Unit> is (Kla5()).prope10
2021-03-11 20:16:22,039 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:16:22,040 [main:66] - Compilation checking started
2021-03-11 20:16:22,980 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x).toString((A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1465758632, (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x)).x), 1465758632)).x.toString((A(-1465758632, (A((A(-1465758632, A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(1, 1465758632).x), (A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x))).x.until(prope8++)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(prope9)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

var prope12 = "FAIL"

fun fu13(prope13: suspend () -> Unit) {
    prope13.startCoroutine(fu16 {
        prope12 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla8(val s: Any)

var prope13: Continuation<Any>? = null

suspend fun <Ty1> fu14(): Ty1 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope13 = it as Continuation<Any>
}

interface Kla9 {
    suspend fun fu17(): Any
}

class Kla10() : Kla9 {

    override suspend fun fu17(): Kla8 = fu14()

    suspend fun fu18(): String {
        val prope20: Kla9 = this
        return (prope20.fu17() as Kla8).s as String
    }

    suspend fun fu19(): String = fu17().s as String
}

fun box246(): String {
    fu13 {
        Kla10().fu18()
    }
    prope13?.resumeWithException(IllegalStateException("OK"))
    if (prope12 != "OK") return "FAIL 1 $prope12"

    prope12 = "FAIL2 "
    fu13 {
        Kla10().fu19()
    }
    prope13?.resumeWithException(IllegalStateException("OK"))
    if (prope12 != "OK") return "FAIL 2 $prope12"

    return prope12
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        x(prope12.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.exceptionOrNull()?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            resumeWithException(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope16 = arrayListOf<StackTraceElement?>()

    suspend fun fu22() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu22(it)
    }

    fun fu22(prope13: Continuation<*>) {
        if (prope13 !is CoroutineStackFrame) error("Continuation " + prope13 + " is not subtype of CoroutineStackFrame")
        prope16.clear()
        var prope21: CoroutineStackFrame? = prope13
        while (prope21 != null) {
            prope16.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu23(method: String) {
        prope16.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope16.joinToString(separator = "\n")) }
    }

    fun fu24(method: String) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
prope16.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope16.joinToString(separator = "\n"))
    }
}

val prope14 = Kla14()

class Kla15 {
    private var prope17 = 0
    var prope18 = (linkedMapOf<Kla14, ArrayList<Int>>()).values.containsAll(linkedSetOf<ArrayList<Int>>())

    var prope19: () -> Unit = {}

    fun fu25() {
        prope17 = 0
        prope18 = false
        prope19 = {}
    }

    suspend fun fu26() = suspendCoroutine<Unit> { prope13 ->
        prope17++
        prope19 = { prope13.resume(Unit) }
    }

    fun fu27(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope17 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope17)
            (Kla5()).prope10()
        }
        if (prope17 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope17)
        if (prope18) error("Wrong state-machine generated: it is finished early")
        prope19()
        if (checkFinished && !prope18) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope15 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope15.prope19 = {
            prope15.prope18 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:16:22,982 [main:107] - replacing (" has no state-machine ", String)
2021-03-11 20:16:22,982 [main:50] - replacing " has no state-machine " String
2021-03-11 20:16:22,982 [main:54] - Getting value of type String
2021-03-11 20:16:23,193 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:16:23,204 [main:58] - GENERATED VALUE OF TYPE String = "ropdy"
2021-03-11 20:16:23,204 [main:61] - GENERATED IS CALL =false
2021-03-11 20:16:23,558 [main:67] - randomType = Function1<Kla15, Kla8>
2021-03-11 20:16:23,559 [main:106] - GETTING String from Int
2021-03-11 20:16:23,591 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a33abcd], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:16:23,591 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a33abcd]
2021-03-11 20:16:23,592 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:16:23,592 [main:117] - GENERATED CALL = (A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x).toInt().toString(A(1284219886, 1309414067).x)
2021-03-11 20:16:23,592 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16972bc5], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa4447]]
2021-03-11 20:16:23,592 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16972bc5]
2021-03-11 20:16:23,592 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa4447]
2021-03-11 20:16:23,787 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:16:23,799 [main:117] - GENERATED CALL = (A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x).toShort().toString(1889936783)
2021-03-11 20:16:23,799 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e31e89]]
2021-03-11 20:16:23,799 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:16:23,799 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e31e89]
2021-03-11 20:16:23,799 [main:117] - GENERATED CALL = (A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x).toChar().titlecase()
2021-03-11 20:16:23,799 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25e54512]]
2021-03-11 20:16:23,799 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:16:23,799 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25e54512]
2021-03-11 20:16:23,800 [main:117] - GENERATED CALL = (A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x).toChar().uppercase()
2021-03-11 20:16:23,800 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@fea99d7], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d4a6f4c]]
2021-03-11 20:16:23,800 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@fea99d7]
2021-03-11 20:16:23,800 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d4a6f4c]
2021-03-11 20:16:23,800 [main:117] - GENERATED CALL = (A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x).toByte().toString(A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x)
2021-03-11 20:16:23,801 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@a00b4a6], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]]
2021-03-11 20:16:23,801 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@a00b4a6]
2021-03-11 20:16:23,801 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]
2021-03-11 20:16:23,801 [main:117] - GENERATED CALL = (A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x).toLong().toString((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x))
2021-03-11 20:16:23,801 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@638e8eca]]
2021-03-11 20:16:23,801 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:16:23,801 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@638e8eca]
2021-03-11 20:16:23,999 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:16:24,010 [main:117] - GENERATED CALL = (A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x).toChar().plus("jzjqs")
2021-03-11 20:16:24,010 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5352fcf1]]
2021-03-11 20:16:24,010 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:16:24,011 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5352fcf1]
2021-03-11 20:16:24,011 [main:117] - GENERATED CALL = (A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x).toChar().lowercase()
2021-03-11 20:16:24,011 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@719e1c26], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:16:24,011 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@719e1c26]
2021-03-11 20:16:24,011 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:16:24,012 [main:117] - GENERATED CALL = (A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x).compareTo(A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toString(A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x)
2021-03-11 20:16:24,012 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:16:24,012 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:16:24,012 [main:117] - GENERATED CALL = (A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x).toString(A((A(1465758632, 1435118121).x), 1).x)
2021-03-11 20:16:24,012 [main:114] - replacement of " has no state-machine " of type String is (A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x).toInt().toString(A(1284219886, 1309414067).x)
2021-03-11 20:16:24,205 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:16:24,206 [main:66] - Compilation checking started
2021-03-11 20:16:25,108 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x).toString((A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1465758632, (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x)).x), 1465758632)).x.toString((A(-1465758632, (A((A(-1465758632, A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(1, 1465758632).x), (A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x))).x.until(prope8++)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(prope9)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

var prope12 = "FAIL"

fun fu13(prope13: suspend () -> Unit) {
    prope13.startCoroutine(fu16 {
        prope12 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla8(val s: Any)

var prope13: Continuation<Any>? = null

suspend fun <Ty1> fu14(): Ty1 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope13 = it as Continuation<Any>
}

interface Kla9 {
    suspend fun fu17(): Any
}

class Kla10() : Kla9 {

    override suspend fun fu17(): Kla8 = fu14()

    suspend fun fu18(): String {
        val prope20: Kla9 = this
        return (prope20.fu17() as Kla8).s as String
    }

    suspend fun fu19(): String = fu17().s as String
}

fun box246(): String {
    fu13 {
        Kla10().fu18()
    }
    prope13?.resumeWithException(IllegalStateException("OK"))
    if (prope12 != "OK") return "FAIL 1 $prope12"

    prope12 = "FAIL2 "
    fu13 {
        Kla10().fu19()
    }
    prope13?.resumeWithException(IllegalStateException("OK"))
    if (prope12 != "OK") return "FAIL 2 $prope12"

    return prope12
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        x(prope12.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.exceptionOrNull()?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            resumeWithException(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope16 = arrayListOf<StackTraceElement?>()

    suspend fun fu22() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu22(it)
    }

    fun fu22(prope13: Continuation<*>) {
        if (prope13 !is CoroutineStackFrame) error("Continuation " + prope13 + " is not subtype of CoroutineStackFrame")
        prope16.clear()
        var prope21: CoroutineStackFrame? = prope13
        while (prope21 != null) {
            prope16.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu23(method: String) {
        prope16.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope16.joinToString(separator = "\n")) }
    }

    fun fu24(method: String) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
prope16.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x).toInt().toString(A(1284219886, 1309414067).x) +
                prope16.joinToString(separator = "\n"))
    }
}

val prope14 = Kla14()

class Kla15 {
    private var prope17 = 0
    var prope18 = (linkedMapOf<Kla14, ArrayList<Int>>()).values.containsAll(linkedSetOf<ArrayList<Int>>())

    var prope19: () -> Unit = {}

    fun fu25() {
        prope17 = 0
        prope18 = false
        prope19 = {}
    }

    suspend fun fu26() = suspendCoroutine<Unit> { prope13 ->
        prope17++
        prope19 = { prope13.resume(Unit) }
    }

    fun fu27(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope17 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope17)
            (Kla5()).prope10()
        }
        if (prope17 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope17)
        if (prope18) error("Wrong state-machine generated: it is finished early")
        prope19()
        if (checkFinished && !prope18) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope15 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope15.prope19 = {
            prope15.prope18 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:16:25,111 [main:107] - replacing (prope13, Continuation<*>)
2021-03-11 20:16:25,112 [main:50] - replacing prope13 Continuation<*>
2021-03-11 20:16:25,113 [main:54] - Getting value of type Continuation<*>
2021-03-11 20:16:25,349 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 20:16:25,567 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:16:25,580 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:16:26,406 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 20:16:26,623 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:16:26,637 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:16:27,148 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 20:16:27,375 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:16:27,388 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:16:28,198 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:16:28,199 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:16:28,199 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 20:16:28,199 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 20:16:28,221 [main:67] - randomType = Int
2021-03-11 20:16:28,422 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:16:28,464 [main:106] - GETTING Continuation<*> from Any?
2021-03-11 20:16:28,467 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:16:28,497 [main:106] - GETTING Continuation<*> from Function0<Unit>
2021-03-11 20:16:28,506 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:16:28,507 [main:106] - GETTING Continuation<*> from A
2021-03-11 20:16:28,513 [main:106] - GETTING Continuation<*> from A
2021-03-11 20:16:28,514 [main:106] - GETTING Continuation<*> from A
2021-03-11 20:16:28,515 [main:106] - GETTING Continuation<*> from Char
2021-03-11 20:16:28,533 [main:106] - GETTING Continuation<*> from Boolean
2021-03-11 20:16:28,541 [main:106] - GETTING Continuation<*> from A
2021-03-11 20:16:28,542 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:16:28,543 [main:106] - GETTING Continuation<*> from A
2021-03-11 20:16:28,544 [main:106] - GETTING Continuation<*> from A
2021-03-11 20:16:28,545 [main:106] - GETTING Continuation<*> from Kla5
2021-03-11 20:16:28,552 [main:106] - GETTING Continuation<*> from A
2021-03-11 20:16:28,553 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:16:28,554 [main:106] - GETTING Continuation<*> from A
2021-03-11 20:16:28,555 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:16:28,556 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:16:28,556 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:16:28,557 [main:106] - GETTING Continuation<*> from EmptyCoroutineContext
2021-03-11 20:16:28,573 [main:106] - GETTING Continuation<*> from A
2021-03-11 20:16:28,574 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-11 20:16:28,581 [main:106] - GETTING Continuation<*> from Continuation<Short>
2021-03-11 20:16:28,589 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:16:28,590 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:16:28,591 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:16:28,591 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:16:28,592 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-11 20:16:28,593 [main:106] - GETTING Continuation<*> from Continuation<Any?>
2021-03-11 20:16:28,601 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:16:28,602 [main:106] - GETTING Continuation<*> from Int?
2021-03-11 20:16:28,634 [main:106] - GETTING Continuation<*> from A
2021-03-11 20:16:28,635 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:16:28,635 [main:106] - GETTING Continuation<*> from CoroutineContext
2021-03-11 20:16:28,636 [main:106] - GETTING Continuation<*> from A
2021-03-11 20:16:28,637 [main:106] - GETTING Continuation<*> from Char
2021-03-11 20:16:28,638 [main:106] - GETTING Continuation<*> from A
2021-03-11 20:16:28,639 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:16:28,639 [main:106] - GETTING Continuation<*> from Int
2021-03-11 20:16:28,640 [main:111] - Cant find and generate replacement for prope13 type Continuation<*>
2021-03-11 20:16:28,640 [main:107] - replacing ({
        Kla10().fu18()
    }, SuspendFunction0<Unit>)
2021-03-11 20:16:28,641 [main:50] - replacing {
        Kla10().fu18()
    } SuspendFunction0<Unit>
2021-03-11 20:16:28,641 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-11 20:16:28,841 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-11 20:16:28,852 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 20:16:29,064 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 20:16:29,077 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 20:16:29,580 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 20:16:29,592 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 20:16:29,863 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:16:29,876 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 20:16:30,642 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 20:16:30,654 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-11 20:16:30,666 [main:302] - generating value of type = Any false depth = 9
2021-03-11 20:16:30,666 [main:95] - GENERATED = check(false, { "ewmvl"})
2021-03-11 20:16:30,666 [main:95] - GENERATED = contract({ check(false, { "ewmvl"})})
2021-03-11 20:16:30,666 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { contract({ check(false, { "ewmvl"})})}
2021-03-11 20:16:30,666 [main:61] - GENERATED IS CALL =false
2021-03-11 20:16:31,546 [main:67] - randomType = Function1<ULong, HashSet<Kla8>>
2021-03-11 20:16:31,547 [main:106] - GETTING SuspendFunction0<Unit> from A
2021-03-11 20:16:31,558 [main:106] - GETTING SuspendFunction0<Unit> from A
2021-03-11 20:16:31,559 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:16:31,597 [main:106] - GETTING SuspendFunction0<Unit> from Int?
2021-03-11 20:16:31,631 [main:106] - GETTING SuspendFunction0<Unit> from Any?
2021-03-11 20:16:31,635 [main:106] - GETTING SuspendFunction0<Unit> from A
2021-03-11 20:16:31,636 [main:106] - GETTING SuspendFunction0<Unit> from CoroutineContext
2021-03-11 20:16:31,645 [main:106] - GETTING SuspendFunction0<Unit> from Function0<Unit>
2021-03-11 20:16:31,658 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:16:31,659 [main:106] - GETTING SuspendFunction0<Unit> from CoroutineContext
2021-03-11 20:16:31,660 [main:106] - GETTING SuspendFunction0<Unit> from Continuation<Any?>
2021-03-11 20:16:31,669 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:16:31,670 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:16:31,671 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:16:31,672 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:16:31,673 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:16:31,674 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:16:31,675 [main:106] - GETTING SuspendFunction0<Unit> from A
2021-03-11 20:16:31,675 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:16:31,676 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:16:31,677 [main:106] - GETTING SuspendFunction0<Unit> from A
2021-03-11 20:16:31,678 [main:106] - GETTING SuspendFunction0<Unit> from A
2021-03-11 20:16:31,679 [main:106] - GETTING SuspendFunction0<Unit> from CoroutineContext
2021-03-11 20:16:31,680 [main:106] - GETTING SuspendFunction0<Unit> from A
2021-03-11 20:16:31,681 [main:106] - GETTING SuspendFunction0<Unit> from A
2021-03-11 20:16:31,682 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:16:31,682 [main:106] - GETTING SuspendFunction0<Unit> from A
2021-03-11 20:16:31,683 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:16:31,684 [main:106] - GETTING SuspendFunction0<Unit> from Boolean
2021-03-11 20:16:31,694 [main:106] - GETTING SuspendFunction0<Unit> from A
2021-03-11 20:16:31,695 [main:106] - GETTING SuspendFunction0<Unit> from Continuation<Short>
2021-03-11 20:16:31,703 [main:106] - GETTING SuspendFunction0<Unit> from Kla5
2021-03-11 20:16:31,711 [main:106] - GETTING SuspendFunction0<Unit> from A
2021-03-11 20:16:31,712 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:16:31,714 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:16:31,715 [main:106] - GETTING SuspendFunction0<Unit> from Char
2021-03-11 20:16:31,755 [main:106] - GETTING SuspendFunction0<Unit> from A
2021-03-11 20:16:31,756 [main:106] - GETTING SuspendFunction0<Unit> from Char
2021-03-11 20:16:31,758 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 20:16:31,760 [main:106] - GETTING SuspendFunction0<Unit> from EmptyCoroutineContext
2021-03-11 20:16:31,788 [main:114] - replacement of {
        Kla10().fu18()
    } of type SuspendFunction0<Unit> is { contract({ check(false, { "ewmvl"})})}
2021-03-11 20:16:31,999 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:16:32,000 [main:66] - Compilation checking started
2021-03-11 20:16:32,622 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x).toString((A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1465758632, (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x)).x), 1465758632)).x.toString((A(-1465758632, (A((A(-1465758632, A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(1, 1465758632).x), (A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x))).x.until(prope8++)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(prope9)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

var prope12 = "FAIL"

fun fu13(prope13: suspend () -> Unit) {
    prope13.startCoroutine(fu16 {
        prope12 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla8(val s: Any)

var prope13: Continuation<Any>? = null

suspend fun <Ty1> fu14(): Ty1 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope13 = it as Continuation<Any>
}

interface Kla9 {
    suspend fun fu17(): Any
}

class Kla10() : Kla9 {

    override suspend fun fu17(): Kla8 = fu14()

    suspend fun fu18(): String {
        val prope20: Kla9 = this
        return (prope20.fu17() as Kla8).s as String
    }

    suspend fun fu19(): String = fu17().s as String
}

fun box246(): String {
    val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
fu13 { contract({ check(false, { "ewmvl"})})}
    prope13?.resumeWithException(IllegalStateException("OK"))
    if (prope12 != "OK") return "FAIL 1 $prope12"

    prope12 = "FAIL2 "
    fu13 {
        Kla10().fu19()
    }
    prope13?.resumeWithException(IllegalStateException("OK"))
    if (prope12 != "OK") return "FAIL 2 $prope12"

    return prope12
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        x(prope12.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.exceptionOrNull()?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            resumeWithException(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope16 = arrayListOf<StackTraceElement?>()

    suspend fun fu22() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu22(it)
    }

    fun fu22(prope13: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
if (prope13 !is CoroutineStackFrame) error("Continuation " + prope13 + " is not subtype of CoroutineStackFrame")
        prope16.clear()
        var prope21: CoroutineStackFrame? = prope13
        while (prope21 != null) {
            prope16.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu23(method: String) {
        prope16.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope16.joinToString(separator = "\n")) }
    }

    fun fu24(method: String) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
prope16.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x).toInt().toString(A(1284219886, 1309414067).x) +
                prope16.joinToString(separator = "\n"))
    }
}

val prope14 = Kla14()

class Kla15 {
    private var prope17 = 0
    var prope18 = (linkedMapOf<Kla14, ArrayList<Int>>()).values.containsAll(linkedSetOf<ArrayList<Int>>())

    var prope19: () -> Unit = {}

    fun fu25() {
        prope17 = 0
        prope18 = false
        prope19 = {}
    }

    suspend fun fu26() = suspendCoroutine<Unit> { prope13 ->
        prope17++
        prope19 = { prope13.resume(Unit) }
    }

    fun fu27(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope17 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope17)
            (Kla5()).prope10()
        }
        if (prope17 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope17)
        if (prope18) error("Wrong state-machine generated: it is finished early")
        prope19()
        if (checkFinished && !prope18) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope15 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope15.prope19 = {
            prope15.prope18 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:16:32,625 [main:107] - replacing (", got ", String)
2021-03-11 20:16:32,625 [main:50] - replacing ", got " String
2021-03-11 20:16:32,625 [main:54] - Getting value of type String
2021-03-11 20:16:32,844 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:16:32,856 [main:58] - GENERATED VALUE OF TYPE String = "diqps"
2021-03-11 20:16:32,856 [main:61] - GENERATED IS CALL =false
2021-03-11 20:16:33,164 [main:67] - randomType = Set<Kla12>
2021-03-11 20:16:33,165 [main:106] - GETTING String from CoroutineContext
2021-03-11 20:16:33,171 [main:106] - GETTING String from Int
2021-03-11 20:16:33,203 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@719e1c26], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:16:33,203 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@719e1c26]
2021-03-11 20:16:33,204 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:16:33,204 [main:117] - GENERATED CALL = (A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x).compareTo(A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x).toString(A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x)
2021-03-11 20:16:33,205 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e31e89]]
2021-03-11 20:16:33,205 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:16:33,205 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e31e89]
2021-03-11 20:16:33,205 [main:117] - GENERATED CALL = (A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x).toChar().titlecase()
2021-03-11 20:16:33,205 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7b71a3ab], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]]
2021-03-11 20:16:33,205 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7b71a3ab]
2021-03-11 20:16:33,416 [main:302] - generating value of type = Long true depth = 0
2021-03-11 20:16:33,428 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]
2021-03-11 20:16:33,429 [main:117] - GENERATED CALL = (A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x).div(8458318722364459437).toString((A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x))
2021-03-11 20:16:33,429 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@638e8eca]]
2021-03-11 20:16:33,429 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:16:33,429 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@638e8eca]
2021-03-11 20:16:33,633 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:16:33,645 [main:117] - GENERATED CALL = (A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x).toChar().plus("kaifg")
2021-03-11 20:16:33,645 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@a00b4a6], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]]
2021-03-11 20:16:33,645 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@a00b4a6]
2021-03-11 20:16:33,645 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]
2021-03-11 20:16:33,645 [main:117] - GENERATED CALL = (A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x).toLong().toString(A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x)
2021-03-11 20:16:33,645 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@fea99d7], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d4a6f4c]]
2021-03-11 20:16:33,646 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@fea99d7]
2021-03-11 20:16:33,646 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d4a6f4c]
2021-03-11 20:16:33,646 [main:117] - GENERATED CALL = (A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x).toByte().toString(A((A(1465758632, 1435118121).x), 1).x)
2021-03-11 20:16:33,646 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16972bc5], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa4447]]
2021-03-11 20:16:33,646 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16972bc5]
2021-03-11 20:16:33,646 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa4447]
2021-03-11 20:16:33,646 [main:117] - GENERATED CALL = (A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x).toShort().toString((A((A(-1435118121, -1465758632).x), 1465758632).x))
2021-03-11 20:16:33,646 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a33abcd], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:16:33,647 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a33abcd]
2021-03-11 20:16:33,647 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:16:33,885 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:16:33,897 [main:117] - GENERATED CALL = (A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x).toInt().toString(-1865410725)
2021-03-11 20:16:33,897 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:16:33,897 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:16:34,100 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:16:34,112 [main:117] - GENERATED CALL = (A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x).toString(-1311800467)
2021-03-11 20:16:34,112 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25e54512]]
2021-03-11 20:16:34,112 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:16:34,112 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25e54512]
2021-03-11 20:16:34,113 [main:117] - GENERATED CALL = (A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x).toChar().uppercase()
2021-03-11 20:16:34,113 [main:114] - replacement of ", got " of type String is (A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x).div(8458318722364459437).toString((A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x))
2021-03-11 20:16:34,312 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:16:34,312 [main:66] - Compilation checking started
2021-03-11 20:16:35,219 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x).toString((A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1465758632, (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x)).x), 1465758632)).x.toString((A(-1465758632, (A((A(-1465758632, A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(1, 1465758632).x), (A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x))).x.until(prope8++)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(prope9)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

var prope12 = "FAIL"

fun fu13(prope13: suspend () -> Unit) {
    prope13.startCoroutine(fu16 {
        prope12 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla8(val s: Any)

var prope13: Continuation<Any>? = null

suspend fun <Ty1> fu14(): Ty1 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope13 = it as Continuation<Any>
}

interface Kla9 {
    suspend fun fu17(): Any
}

class Kla10() : Kla9 {

    override suspend fun fu17(): Kla8 = fu14()

    suspend fun fu18(): String {
        val prope20: Kla9 = this
        return (prope20.fu17() as Kla8).s as String
    }

    suspend fun fu19(): String = fu17().s as String
}

fun box246(): String {
    val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
fu13 {
        Kla10().fu18()
    }
    prope13?.resumeWithException(IllegalStateException("OK"))
    if (prope12 != "OK") return "FAIL 1 $prope12"

    prope12 = "FAIL2 "
    fu13 {
        Kla10().fu19()
    }
    prope13?.resumeWithException(IllegalStateException("OK"))
    if (prope12 != "OK") return "FAIL 2 $prope12"

    return prope12
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        x(prope12.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.exceptionOrNull()?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            resumeWithException(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope16 = arrayListOf<StackTraceElement?>()

    suspend fun fu22() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu22(it)
    }

    fun fu22(prope13: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
if (prope13 !is CoroutineStackFrame) error("Continuation " + prope13 + " is not subtype of CoroutineStackFrame")
        prope16.clear()
        var prope21: CoroutineStackFrame? = prope13
        while (prope21 != null) {
            prope16.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu23(method: String) {
        prope16.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope16.joinToString(separator = "\n")) }
    }

    fun fu24(method: String) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
prope16.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x).toInt().toString(A(1284219886, 1309414067).x) +
                prope16.joinToString(separator = "\n"))
    }
}

val prope14 = Kla14()

class Kla15 {
    private var prope17 = 0
    var prope18 = (linkedMapOf<Kla14, ArrayList<Int>>()).values.containsAll(linkedSetOf<ArrayList<Int>>())

    var prope19: () -> Unit = {}

    fun fu25() {
        prope17 = 0
        prope18 = false
        prope19 = {}
    }

    suspend fun fu26() = suspendCoroutine<Unit> { prope13 ->
        prope17++
        prope19 = { prope13.resume(Unit) }
    }

    fun fu27(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope17 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x).div(8458318722364459437).toString((A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x)) + prope17)
            (Kla5()).prope10()
        }
        if (prope17 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope17)
        if (prope18) error("Wrong state-machine generated: it is finished early")
        prope19()
        if (checkFinished && !prope18) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope15 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope15.prope19 = {
            prope15.prope18 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:16:35,224 [main:107] - replacing ({ it?.methodName?.startsWith(method) == true }, Function0<Boolean>)
2021-03-11 20:16:35,226 [main:50] - replacing { it?.methodName?.startsWith(method) == true } Function0<Boolean>
2021-03-11 20:16:35,226 [main:54] - Getting value of type Function0<Boolean>
2021-03-11 20:16:35,442 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 20:16:35,456 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 20:16:35,469 [main:58] - GENERATED VALUE OF TYPE Function0<Boolean> = { false}
2021-03-11 20:16:35,470 [main:61] - GENERATED IS CALL =false
2021-03-11 20:16:35,497 [main:67] - randomType = Char
2021-03-11 20:16:35,702 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:16:35,733 [main:106] - GETTING Function0<Boolean> from A
2021-03-11 20:16:35,741 [main:106] - GETTING Function0<Boolean> from Int
2021-03-11 20:16:35,771 [main:106] - GETTING Function0<Boolean> from CoroutineContext
2021-03-11 20:16:35,777 [main:106] - GETTING Function0<Boolean> from A
2021-03-11 20:16:35,778 [main:106] - GETTING Function0<Boolean> from Int
2021-03-11 20:16:35,779 [main:106] - GETTING Function0<Boolean> from Int
2021-03-11 20:16:35,780 [main:106] - GETTING Function0<Boolean> from A
2021-03-11 20:16:35,781 [main:106] - GETTING Function0<Boolean> from A
2021-03-11 20:16:35,782 [main:106] - GETTING Function0<Boolean> from Int
2021-03-11 20:16:35,783 [main:106] - GETTING Function0<Boolean> from A
2021-03-11 20:16:35,784 [main:106] - GETTING Function0<Boolean> from Int
2021-03-11 20:16:35,785 [main:106] - GETTING Function0<Boolean> from Int
2021-03-11 20:16:35,786 [main:106] - GETTING Function0<Boolean> from Continuation<Short>
2021-03-11 20:16:35,793 [main:106] - GETTING Function0<Boolean> from Int
2021-03-11 20:16:35,794 [main:106] - GETTING Function0<Boolean> from EmptyCoroutineContext
2021-03-11 20:16:35,809 [main:106] - GETTING Function0<Boolean> from Int
2021-03-11 20:16:35,810 [main:106] - GETTING Function0<Boolean> from A
2021-03-11 20:16:35,811 [main:106] - GETTING Function0<Boolean> from Any?
2021-03-11 20:16:35,815 [main:106] - GETTING Function0<Boolean> from Continuation<Any?>
2021-03-11 20:16:35,822 [main:106] - GETTING Function0<Boolean> from Function0<Unit>
2021-03-11 20:16:35,830 [main:106] - GETTING Function0<Boolean> from Int
2021-03-11 20:16:35,832 [main:106] - GETTING Function0<Boolean> from Int
2021-03-11 20:16:35,832 [main:106] - GETTING Function0<Boolean> from Kla5
2021-03-11 20:16:35,840 [main:106] - GETTING Function0<Boolean> from Int
2021-03-11 20:16:35,841 [main:106] - GETTING Function0<Boolean> from A
2021-03-11 20:16:35,842 [main:106] - GETTING Function0<Boolean> from A
2021-03-11 20:16:35,843 [main:106] - GETTING Function0<Boolean> from Int
2021-03-11 20:16:35,844 [main:106] - GETTING Function0<Boolean> from A
2021-03-11 20:16:35,845 [main:106] - GETTING Function0<Boolean> from Char
2021-03-11 20:16:35,863 [main:106] - GETTING Function0<Boolean> from Int
2021-03-11 20:16:35,864 [main:106] - GETTING Function0<Boolean> from Char
2021-03-11 20:16:35,865 [main:106] - GETTING Function0<Boolean> from A
2021-03-11 20:16:35,866 [main:106] - GETTING Function0<Boolean> from Int
2021-03-11 20:16:35,867 [main:106] - GETTING Function0<Boolean> from A
2021-03-11 20:16:35,868 [main:106] - GETTING Function0<Boolean> from Int
2021-03-11 20:16:35,869 [main:106] - GETTING Function0<Boolean> from CoroutineContext
2021-03-11 20:16:35,870 [main:106] - GETTING Function0<Boolean> from CoroutineContext
2021-03-11 20:16:35,871 [main:106] - GETTING Function0<Boolean> from Int?
2021-03-11 20:16:35,904 [main:106] - GETTING Function0<Boolean> from Boolean
2021-03-11 20:16:35,913 [main:106] - GETTING Function0<Boolean> from A
2021-03-11 20:16:35,914 [main:114] - replacement of { it?.methodName?.startsWith(method) == true } of type Function0<Boolean> is { false}
2021-03-11 20:16:36,119 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 20:16:36,120 [main:66] - Compilation checking started
2021-03-11 20:16:36,983 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x).toString((A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1465758632, (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x)).x), 1465758632)).x.toString((A(-1465758632, (A((A(-1465758632, A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(1, 1465758632).x), (A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x))).x.until(prope8++)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(prope9)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

var prope12 = "FAIL"

fun fu13(prope13: suspend () -> Unit) {
    prope13.startCoroutine(fu16 {
        prope12 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla8(val s: Any)

var prope13: Continuation<Any>? = null

suspend fun <Ty1> fu14(): Ty1 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope13 = it as Continuation<Any>
}

interface Kla9 {
    suspend fun fu17(): Any
}

class Kla10() : Kla9 {

    override suspend fun fu17(): Kla8 = fu14()

    suspend fun fu18(): String {
        val prope20: Kla9 = this
        return (prope20.fu17() as Kla8).s as String
    }

    suspend fun fu19(): String = fu17().s as String
}

fun box246(): String {
    val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
fu13 {
        Kla10().fu18()
    }
    prope13?.resumeWithException(IllegalStateException("OK"))
    if (prope12 != "OK") return "FAIL 1 $prope12"

    prope12 = "FAIL2 "
    fu13 {
        Kla10().fu19()
    }
    prope13?.resumeWithException(IllegalStateException("OK"))
    if (prope12 != "OK") return "FAIL 2 $prope12"

    return prope12
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        x(prope12.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.exceptionOrNull()?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            resumeWithException(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope16 = arrayListOf<StackTraceElement?>()

    suspend fun fu22() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu22(it)
    }

    fun fu22(prope13: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
if (prope13 !is CoroutineStackFrame) error("Continuation " + prope13 + " is not subtype of CoroutineStackFrame")
        prope16.clear()
        var prope21: CoroutineStackFrame? = prope13
        while (prope21 != null) {
            prope16.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu23(method: String) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
prope16.find { false}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope16.joinToString(separator = "\n")) }
    }

    fun fu24(method: String) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
prope16.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x).toInt().toString(A(1284219886, 1309414067).x) +
                prope16.joinToString(separator = "\n"))
    }
}

val prope14 = Kla14()

class Kla15 {
    private var prope17 = 0
    var prope18 = (linkedMapOf<Kla14, ArrayList<Int>>()).values.containsAll(linkedSetOf<ArrayList<Int>>())

    var prope19: () -> Unit = {}

    fun fu25() {
        prope17 = 0
        prope18 = false
        prope19 = {}
    }

    suspend fun fu26() = suspendCoroutine<Unit> { prope13 ->
        prope17++
        prope19 = { prope13.resume(Unit) }
    }

    fun fu27(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope17 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x).div(8458318722364459437).toString((A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x)) + prope17)
            (Kla5()).prope10()
        }
        if (prope17 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope17)
        if (prope18) error("Wrong state-machine generated: it is finished early")
        prope19()
        if (checkFinished && !prope18) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope15 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope15.prope19 = {
            prope15.prope18 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:16:36,986 [main:107] - replacing (let(x), Unit?)
2021-03-11 20:16:36,987 [main:50] - replacing let(x) Unit?
2021-03-11 20:16:36,987 [main:54] - Getting value of type Unit?
2021-03-11 20:16:37,202 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 20:16:37,428 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:16:37,445 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 20:16:37,987 [main:302] - generating value of type = Boolean true depth = 3
2021-03-11 20:16:38,000 [main:95] - GENERATED = check(true)
2021-03-11 20:16:38,000 [main:58] - GENERATED VALUE OF TYPE Unit? = check(true)
2021-03-11 20:16:38,000 [main:61] - GENERATED IS CALL =true
2021-03-11 20:16:38,939 [main:67] - randomType = HashMap<Kla1, Short?>
2021-03-11 20:16:39,143 [main:302] - generating value of type = HashMap<Kla1, Short?> false depth = 0
2021-03-11 20:16:39,368 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Kla1, Short?>): HashMap<Kla1, Short?> = TODO()
2021-03-11 20:16:39,384 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Kla1, Short?>): HashMap<Kla1, Short?> = TODO()
2021-03-11 20:16:39,614 [main:302] - generating value of type = Pair<Kla1, Short?> false depth = 3
2021-03-11 20:16:39,837 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla1, second: Short?): Pair<Kla1, Short?> = TODO()
2021-03-11 20:16:39,853 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla1, second: Short?): Pair<Kla1, Short?> = TODO()
2021-03-11 20:16:40,089 [main:302] - generating value of type = Kla1 false depth = 6
2021-03-11 20:16:40,102 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}
2021-03-11 20:16:40,309 [main:194] - Type params = []
2021-03-11 20:16:40,515 [main:302] - generating value of type = CoroutineContext false depth = 8
2021-03-11 20:16:40,737 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:16:40,753 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:16:41,302 [main:302] - generating value of type = Key<*> false depth = 11
2021-03-11 20:16:41,543 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:16:41,558 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:16:42,477 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:16:42,477 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:16:42,477 [main:302] - generating value of type = Short true depth = 6
2021-03-11 20:16:42,491 [main:95] - GENERATED = Pair<Kla1, Short?>(Kla1(), 668)
2021-03-11 20:16:42,491 [main:95] - GENERATED = linkedMapOf<Kla1, Short?>(Pair<Kla1, Short?>(Kla1(), 668))
2021-03-11 20:16:42,593 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun <K, V> kotlin.collections.MutableMap<in K, in V>.plusAssign(pairs: kotlin.Array<out kotlin.Pair<K, V>>): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@77c037db]
2021-03-11 20:16:42,800 [main:302] - generating value of type = Array<out Pair<K, V>> false depth = 0
2021-03-11 20:16:43,032 [main:43] - GENERATING CALL OF fun <T> enumValues(): Array<Pair<K, V>> = TODO()
2021-03-11 20:16:43,048 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValues(): Array<Pair<K, V>> = TODO()
2021-03-11 20:16:43,274 [main:95] - GENERATED = enumValues<Pair<K, V>>()
2021-03-11 20:16:43,275 [main:78] - Generated call from random type = (linkedMapOf<Kla1, Short?>(Pair<Kla1, Short?>(Kla1(), 668))).plusAssign(enumValues<Pair<K, V>>())
2021-03-11 20:16:43,279 [main:106] - GETTING Unit? from Int
2021-03-11 20:16:43,312 [main:106] - GETTING Unit? from Int
2021-03-11 20:16:43,313 [main:106] - GETTING Unit? from Char
2021-03-11 20:16:43,332 [main:106] - GETTING Unit? from CoroutineContext
2021-03-11 20:16:43,338 [main:106] - GETTING Unit? from Int
2021-03-11 20:16:43,339 [main:106] - GETTING Unit? from A
2021-03-11 20:16:43,347 [main:106] - GETTING Unit? from Int
2021-03-11 20:16:43,348 [main:106] - GETTING Unit? from Int
2021-03-11 20:16:43,349 [main:106] - GETTING Unit? from A
2021-03-11 20:16:43,349 [main:106] - GETTING Unit? from Continuation<Any?>
2021-03-11 20:16:43,357 [main:113] - Case = [public abstract fun resumeWith(result: kotlin.Result<kotlin.Any?>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3215e3ac]]
2021-03-11 20:16:43,357 [main:149] - GENERATING call of type public abstract fun resumeWith(result: kotlin.Result<kotlin.Any?>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3215e3ac]
2021-03-11 20:16:43,563 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-11 20:16:43,785 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 20:16:43,800 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 20:16:44,323 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-11 20:16:44,336 [main:302] - generating value of type = Any false depth = 4
2021-03-11 20:16:44,336 [main:95] - GENERATED = runCatching<Any?>({ "fwbvp"})
2021-03-11 20:16:44,337 [main:117] - GENERATED CALL = (fu3({a: Throwable -> println("jfolf")}))?.resumeWith(runCatching<Any?>({ "fwbvp"}))
2021-03-11 20:16:44,337 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.coroutines.Continuation<T>.resumeWithException(exception: kotlin.Throwable): kotlin.Unit defined in kotlin.coroutines[DeserializedSimpleFunctionDescriptor@309b4b89]]
2021-03-11 20:16:44,337 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.coroutines.Continuation<T>.resumeWithException(exception: kotlin.Throwable): kotlin.Unit defined in kotlin.coroutines[DeserializedSimpleFunctionDescriptor@309b4b89]
2021-03-11 20:16:44,551 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 20:16:44,769 [main:43] - GENERATING CALL OF fun IllegalArgumentException(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 20:16:44,785 [main:61] - WITHOUT TYPE PARAMS = fun IllegalArgumentException(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 20:16:45,289 [main:302] - generating value of type = Throwable false depth = 3
2021-03-11 20:16:45,306 [main:95] - GENERATED = IllegalArgumentException(NoSuchElementException())
2021-03-11 20:16:45,306 [main:117] - GENERATED CALL = (fu3({a: Throwable -> println("jfolf")}))?.resumeWithException(IllegalArgumentException(NoSuchElementException()))
2021-03-11 20:16:45,306 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.coroutines.Continuation<T>.resume(value: T): kotlin.Unit defined in kotlin.coroutines[DeserializedSimpleFunctionDescriptor@2cfbb062]]
2021-03-11 20:16:45,306 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.coroutines.Continuation<T>.resume(value: T): kotlin.Unit defined in kotlin.coroutines[DeserializedSimpleFunctionDescriptor@2cfbb062]
2021-03-11 20:16:45,509 [main:302] - generating value of type = T false depth = 0
2021-03-11 20:16:46,070 [main:43] - GENERATING CALL OF fun <T> minOf(a: Float?, b: Float?, comparator: kotlin.Comparator<Float?>): T = TODO()
2021-03-11 20:16:46,087 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: Float?, b: Float?, comparator: kotlin.Comparator<Float?>): T = TODO()
2021-03-11 20:16:46,626 [main:302] - generating value of type = Float true depth = 3
2021-03-11 20:16:46,640 [main:302] - generating value of type = Float true depth = 3
2021-03-11 20:16:46,653 [main:302] - generating value of type = Comparator<Float?> false depth = 3
2021-03-11 20:16:47,506 [main:43] - GENERATING CALL OF fun <T, K> compareByDescending(comparator: kotlin.Comparator<List<Kla2?>>, selector: (Float?)->List<Kla2?>): Comparator<Float?> = TODO()
2021-03-11 20:16:47,522 [main:61] - WITHOUT TYPE PARAMS = fun <T, K> compareByDescending(comparator: kotlin.Comparator<List<Kla2?>>, selector: (Float?)->List<Kla2?>): Comparator<Float?> = TODO()
2021-03-11 20:16:48,380 [main:302] - generating value of type = Comparator<List<Kla2?>> false depth = 6
2021-03-11 20:16:48,605 [main:43] - GENERATING CALL OF fun <T> compareBy(selectors: Function1<List<Kla2?>, Comparable<*>?>): Comparator<List<Kla2?>> = TODO()
2021-03-11 20:16:48,621 [main:61] - WITHOUT TYPE PARAMS = fun <T> compareBy(selectors: Function1<List<Kla2?>, Comparable<*>?>): Comparator<List<Kla2?>> = TODO()
2021-03-11 20:16:48,854 [main:302] - generating value of type = Function1<List<Kla2?>, Comparable<*>?> false depth = 9
2021-03-11 20:16:48,867 [main:302] - generating value of type = Comparable<*> false depth = 10
2021-03-11 20:16:49,105 [main:43] - GENERATING CALL OF fun <E> Enum(name: kotlin.String, ordinal: kotlin.Int): Comparable<*> = TODO()
2021-03-11 20:16:49,121 [main:61] - WITHOUT TYPE PARAMS = fun <E> Enum(name: kotlin.String, ordinal: kotlin.Int): Comparable<*> = TODO()
2021-03-11 20:16:49,910 [main:302] - generating value of type = String true depth = 13
2021-03-11 20:16:49,924 [main:302] - generating value of type = Int true depth = 13
2021-03-11 20:16:49,937 [main:95] - GENERATED = Enum<Enum<E>>("nnfca", 811198715)
2021-03-11 20:16:49,938 [main:95] - GENERATED = compareBy<List<Kla2?>>({a: List<Kla2?> -> Enum<Enum<E>>("nnfca", 811198715)})
2021-03-11 20:16:49,938 [main:302] - generating value of type = Function1<Float?, List<Kla2?>> false depth = 6
2021-03-11 20:16:49,951 [main:302] - generating value of type = List<Kla2?> false depth = 7
2021-03-11 20:16:50,171 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Kla2?): List<Kla2?> = TODO()
2021-03-11 20:16:50,234 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Kla2?): List<Kla2?> = TODO()
2021-03-11 20:16:50,462 [main:302] - generating value of type = Kla2 false depth = 10
2021-03-11 20:16:50,476 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}
2021-03-11 20:16:50,476 [main:95] - GENERATED = arrayListOf<Kla2?>(Kla2())
2021-03-11 20:16:50,477 [main:95] - GENERATED = compareByDescending<Float?, List<Kla2?>>(compareBy<List<Kla2?>>({a: List<Kla2?> -> Enum<Enum<E>>("nnfca", 811198715)}), {a: Float? -> arrayListOf<Kla2?>(Kla2())})
2021-03-11 20:16:50,477 [main:95] - GENERATED = minOf<Float?>(0.48518372f, 0.48271918f, compareByDescending<Float?, List<Kla2?>>(compareBy<List<Kla2?>>({a: List<Kla2?> -> Enum<Enum<E>>("nnfca", 811198715)}), {a: Float? -> arrayListOf<Kla2?>(Kla2())}))
2021-03-11 20:16:50,477 [main:117] - GENERATED CALL = (fu3({a: Throwable -> println("jfolf")}))?.resume(minOf<Float?>(0.48518372f, 0.48271918f, compareByDescending<Float?, List<Kla2?>>(compareBy<List<Kla2?>>({a: List<Kla2?> -> Enum<Enum<E>>("nnfca", 811198715)}), {a: Float? -> arrayListOf<Kla2?>(Kla2())})))
2021-03-11 20:16:50,477 [main:114] - replacement of let(x) of type Unit? is (fu3({a: Throwable -> println("jfolf")}))?.resume(minOf<Float?>(0.48518372f, 0.48271918f, compareByDescending<Float?, List<Kla2?>>(compareBy<List<Kla2?>>({a: List<Kla2?> -> Enum<Enum<E>>("nnfca", 811198715)}), {a: Float? -> arrayListOf<Kla2?>(Kla2())})))
2021-03-11 20:16:50,687 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 20:16:50,688 [main:66] - Compilation checking started
2021-03-11 20:16:51,380 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x).toString((A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1465758632, (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x)).x), 1465758632)).x.toString((A(-1465758632, (A((A(-1465758632, A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(1, 1465758632).x), (A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x))).x.until(prope8++)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(prope9)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

var prope12 = "FAIL"

fun fu13(prope13: suspend () -> Unit) {
    prope13.startCoroutine(fu16 {
        prope12 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla8(val s: Any)

var prope13: Continuation<Any>? = null

suspend fun <Ty1> fu14(): Ty1 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope13 = it as Continuation<Any>
}

interface Kla9 {
    suspend fun fu17(): Any
}

class Kla10() : Kla9 {

    override suspend fun fu17(): Kla8 = fu14()

    suspend fun fu18(): String {
        val prope20: Kla9 = this
        return (prope20.fu17() as Kla8).s as String
    }

    suspend fun fu19(): String = fu17().s as String
}

fun box246(): String {
    val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
fu13 {
        Kla10().fu18()
    }
    prope13?.resumeWithException(IllegalStateException("OK"))
    if (prope12 != "OK") return "FAIL 1 $prope12"

    prope12 = "FAIL2 "
    fu13 {
        Kla10().fu19()
    }
    prope13?.resumeWithException(IllegalStateException("OK"))
    if (prope12 != "OK") return "FAIL 2 $prope12"

    return prope12
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        x(prope12.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
prope12.exceptionOrNull()?.(fu3({a: Throwable -> println("jfolf")}))?.resume(minOf<Float?>(0.48518372f, 0.48271918f, compareByDescending<Float?, List<Kla2?>>(compareBy<List<Kla2?>>({a: List<Kla2?> -> Enum<Enum<E>>("nnfca", 811198715)}), {a: Float? -> arrayListOf<Kla2?>(Kla2())})))
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            resumeWithException(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope16 = arrayListOf<StackTraceElement?>()

    suspend fun fu22() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu22(it)
    }

    fun fu22(prope13: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
if (prope13 !is CoroutineStackFrame) error("Continuation " + prope13 + " is not subtype of CoroutineStackFrame")
        prope16.clear()
        var prope21: CoroutineStackFrame? = prope13
        while (prope21 != null) {
            prope16.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu23(method: String) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
prope16.find { false}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope16.joinToString(separator = "\n")) }
    }

    fun fu24(method: String) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
prope16.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x).toInt().toString(A(1284219886, 1309414067).x) +
                prope16.joinToString(separator = "\n"))
    }
}

val prope14 = Kla14()

class Kla15 {
    private var prope17 = 0
    var prope18 = (linkedMapOf<Kla14, ArrayList<Int>>()).values.containsAll(linkedSetOf<ArrayList<Int>>())

    var prope19: () -> Unit = {}

    fun fu25() {
        prope17 = 0
        prope18 = false
        prope19 = {}
    }

    suspend fun fu26() = suspendCoroutine<Unit> { prope13 ->
        prope17++
        prope19 = { prope13.resume(Unit) }
    }

    fun fu27(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope17 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x).div(8458318722364459437).toString((A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x)) + prope17)
            (Kla5()).prope10()
        }
        if (prope17 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope17)
        if (prope18) error("Wrong state-machine generated: it is finished early")
        prope19()
        if (checkFinished && !prope18) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope15 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope15.prope19 = {
            prope15.prope18 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:16:51,384 [main:107] - replacing (Kla15(), Kla15)
2021-03-11 20:16:51,384 [main:50] - replacing Kla15() Kla15
2021-03-11 20:16:51,384 [main:54] - Getting value of type Kla15
2021-03-11 20:16:51,622 [main:302] - generating value of type = Kla15 false depth = 0
2021-03-11 20:16:51,637 [main:112] - generating klass Kla15 text = class Kla15 {
    private var prope17 = 0
    var prope18 = (linkedMapOf<Kla14, ArrayList<Int>>()).values.containsAll(linkedSetOf<ArrayList<Int>>())

    var prope19: () -> Unit = {}

    fun fu25() {
        prope17 = 0
        prope18 = false
        prope19 = {}
    }

    suspend fun fu26() = suspendCoroutine<Unit> { prope13 ->
        prope17++
        prope19 = { prope13.resume(Unit) }
    }

    fun fu27(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope17 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x).div(8458318722364459437).toString((A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x)) + prope17)
            (Kla5()).prope10()
        }
        if (prope17 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope17)
        if (prope18) error("Wrong state-machine generated: it is finished early")
        prope19()
        if (checkFinished && !prope18) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 20:16:51,638 [main:58] - GENERATED VALUE OF TYPE Kla15 = Kla15()
2021-03-11 20:16:51,638 [main:61] - GENERATED IS CALL =true
2021-03-11 20:16:51,692 [main:67] - randomType = A
2021-03-11 20:16:51,910 [main:302] - generating value of type = A false depth = 0
2021-03-11 20:16:51,923 [main:112] - generating klass A text = data class A(var x: Int, val z: Int?)
2021-03-11 20:16:52,148 [main:194] - Type params = []
2021-03-11 20:16:52,371 [main:302] - generating value of type = Int true depth = 2
2021-03-11 20:16:52,385 [main:302] - generating value of type = Int true depth = 2
2021-03-11 20:16:52,409 [main:106] - GETTING Kla15 from CoroutineContext
2021-03-11 20:16:52,417 [main:106] - GETTING Kla15 from EmptyCoroutineContext
2021-03-11 20:16:52,430 [main:106] - GETTING Kla15 from Int
2021-03-11 20:16:52,459 [main:106] - GETTING Kla15 from Int
2021-03-11 20:16:52,460 [main:106] - GETTING Kla15 from Function0<Unit>
2021-03-11 20:16:52,469 [main:106] - GETTING Kla15 from A
2021-03-11 20:16:52,475 [main:106] - GETTING Kla15 from A
2021-03-11 20:16:52,475 [main:106] - GETTING Kla15 from Int
2021-03-11 20:16:52,476 [main:106] - GETTING Kla15 from A
2021-03-11 20:16:52,477 [main:106] - GETTING Kla15 from A
2021-03-11 20:16:52,477 [main:106] - GETTING Kla15 from A
2021-03-11 20:16:52,478 [main:106] - GETTING Kla15 from Char
2021-03-11 20:16:52,495 [main:106] - GETTING Kla15 from Kla5
2021-03-11 20:16:52,502 [main:106] - GETTING Kla15 from Int
2021-03-11 20:16:52,503 [main:106] - GETTING Kla15 from A
2021-03-11 20:16:52,504 [main:106] - GETTING Kla15 from Int
2021-03-11 20:16:52,504 [main:106] - GETTING Kla15 from Continuation<Short>
2021-03-11 20:16:52,511 [main:106] - GETTING Kla15 from CoroutineContext
2021-03-11 20:16:52,512 [main:106] - GETTING Kla15 from Int
2021-03-11 20:16:52,513 [main:106] - GETTING Kla15 from A
2021-03-11 20:16:52,513 [main:106] - GETTING Kla15 from Int
2021-03-11 20:16:52,514 [main:106] - GETTING Kla15 from A
2021-03-11 20:16:52,514 [main:106] - GETTING Kla15 from A
2021-03-11 20:16:52,515 [main:106] - GETTING Kla15 from Int
2021-03-11 20:16:52,516 [main:106] - GETTING Kla15 from Int?
2021-03-11 20:16:52,548 [main:106] - GETTING Kla15 from Int
2021-03-11 20:16:52,549 [main:106] - GETTING Kla15 from A
2021-03-11 20:16:52,549 [main:106] - GETTING Kla15 from Int
2021-03-11 20:16:52,550 [main:106] - GETTING Kla15 from A
2021-03-11 20:16:52,550 [main:106] - GETTING Kla15 from Boolean
2021-03-11 20:16:52,559 [main:106] - GETTING Kla15 from Int
2021-03-11 20:16:52,559 [main:106] - GETTING Kla15 from Int
2021-03-11 20:16:52,560 [main:106] - GETTING Kla15 from Int
2021-03-11 20:16:52,561 [main:106] - GETTING Kla15 from Char
2021-03-11 20:16:52,561 [main:106] - GETTING Kla15 from Continuation<Any?>
2021-03-11 20:16:52,570 [main:106] - GETTING Kla15 from A
2021-03-11 20:16:52,570 [main:106] - GETTING Kla15 from Any?
2021-03-11 20:16:52,573 [main:106] - GETTING Kla15 from CoroutineContext
2021-03-11 20:16:52,574 [main:106] - GETTING Kla15 from Int
2021-03-11 20:16:52,575 [main:106] - GETTING Kla15 from Int
2021-03-11 20:16:52,575 [main:114] - replacement of Kla15() of type Kla15 is Kla15()
2021-03-11 20:16:52,785 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:16:52,788 [main:107] - replacing (prope12, String)
2021-03-11 20:16:52,788 [main:50] - replacing prope12 String
2021-03-11 20:16:52,788 [main:54] - Getting value of type String
2021-03-11 20:16:53,000 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:16:53,013 [main:58] - GENERATED VALUE OF TYPE String = "vpedw"
2021-03-11 20:16:53,014 [main:61] - GENERATED IS CALL =false
2021-03-11 20:16:53,649 [main:67] - randomType = ArrayList<Kla14>
2021-03-11 20:16:53,860 [main:302] - generating value of type = ArrayList<Kla14> false depth = 0
2021-03-11 20:16:54,083 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Kla14): ArrayList<Kla14> = TODO()
2021-03-11 20:16:54,099 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Kla14): ArrayList<Kla14> = TODO()
2021-03-11 20:16:54,325 [main:302] - generating value of type = Kla14 false depth = 3
2021-03-11 20:16:54,338 [main:112] - generating klass Kla14 text = class Kla14 {
    private val prope16 = arrayListOf<StackTraceElement?>()

    suspend fun fu22() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu22(it)
    }

    fun fu22(prope13: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
if (prope13 !is CoroutineStackFrame) error("Continuation " + prope13 + " is not subtype of CoroutineStackFrame")
        prope16.clear()
        var prope21: CoroutineStackFrame? = prope13
        while (prope21 != null) {
            prope16.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu23(method: String) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
prope16.find { false}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope16.joinToString(separator = "\n")) }
    }

    fun fu24(method: String) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
prope16.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x).toInt().toString(A(1284219886, 1309414067).x) +
                prope16.joinToString(separator = "\n"))
    }
}
2021-03-11 20:16:54,338 [main:95] - GENERATED = arrayListOf<Kla14>(Kla14())
2021-03-11 20:16:54,479 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:16:54,479 [main:78] - Generated call from random type = (arrayListOf<Kla14>(Kla14())).size.toString(A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)
2021-03-11 20:16:54,480 [main:106] - GETTING String from Int
2021-03-11 20:16:54,509 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@719e1c26], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:16:54,509 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@719e1c26]
2021-03-11 20:16:54,510 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:16:54,510 [main:117] - GENERATED CALL = (A((A(1465758632, 1435118121).x), 1).x).compareTo((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).toString(A(1284219886, 1309414067).x)
2021-03-11 20:16:54,510 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:16:54,510 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:16:54,510 [main:117] - GENERATED CALL = (A((A(1465758632, 1435118121).x), 1).x).toString(A(-1435118121, -1465758632).x)
2021-03-11 20:16:54,510 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25e54512]]
2021-03-11 20:16:54,511 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:16:54,511 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25e54512]
2021-03-11 20:16:54,511 [main:117] - GENERATED CALL = (A((A(1465758632, 1435118121).x), 1).x).toChar().uppercase()
2021-03-11 20:16:54,511 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@638e8eca]]
2021-03-11 20:16:54,511 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:16:54,511 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@638e8eca]
2021-03-11 20:16:54,720 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:16:54,734 [main:117] - GENERATED CALL = (A((A(1465758632, 1435118121).x), 1).x).toChar().plus("myimg")
2021-03-11 20:16:54,734 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7b71a3ab], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]]
2021-03-11 20:16:54,734 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7b71a3ab]
2021-03-11 20:16:54,946 [main:302] - generating value of type = Long true depth = 0
2021-03-11 20:16:54,959 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]
2021-03-11 20:16:55,110 [main:117] - GENERATED CALL = (A((A(1465758632, 1435118121).x), 1).x).div(948162077366620457).toString(A(1284219886, 1309414067).x)
2021-03-11 20:16:55,111 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16972bc5], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa4447]]
2021-03-11 20:16:55,111 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16972bc5]
2021-03-11 20:16:55,111 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa4447]
2021-03-11 20:16:55,327 [main:302] - generating value of type = Int true depth = 0
2021-03-11 20:16:55,341 [main:117] - GENERATED CALL = (A((A(1465758632, 1435118121).x), 1).x).toShort().toString(1562019039)
2021-03-11 20:16:55,341 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5352fcf1]]
2021-03-11 20:16:55,341 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:16:55,341 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5352fcf1]
2021-03-11 20:16:55,341 [main:117] - GENERATED CALL = (A((A(1465758632, 1435118121).x), 1).x).toChar().lowercase()
2021-03-11 20:16:55,341 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e31e89]]
2021-03-11 20:16:55,341 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:16:55,342 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44e31e89]
2021-03-11 20:16:55,342 [main:117] - GENERATED CALL = (A((A(1465758632, 1435118121).x), 1).x).toChar().titlecase()
2021-03-11 20:16:55,342 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a33abcd], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:16:55,342 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2a33abcd]
2021-03-11 20:16:55,342 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:16:55,342 [main:117] - GENERATED CALL = (A((A(1465758632, 1435118121).x), 1).x).toInt().toString((A((A(-1435118121, -1465758632).x), 1465758632).x))
2021-03-11 20:16:55,342 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@a00b4a6], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]]
2021-03-11 20:16:55,342 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@a00b4a6]
2021-03-11 20:16:55,342 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]
2021-03-11 20:16:55,343 [main:117] - GENERATED CALL = (A((A(1465758632, 1435118121).x), 1).x).toLong().toString(A(1284219886, 1309414067).x)
2021-03-11 20:16:55,343 [main:114] - replacement of prope12 of type String is (A((A(1465758632, 1435118121).x), 1).x).toChar().titlecase()
2021-03-11 20:16:55,557 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:16:55,558 [main:66] - Compilation checking started
2021-03-11 20:16:56,511 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x).toString((A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1465758632, (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x)).x), 1465758632)).x.toString((A(-1465758632, (A((A(-1465758632, A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(1, 1465758632).x), (A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x))).x.until(prope8++)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(prope9)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

var prope12 = "FAIL"

fun fu13(prope13: suspend () -> Unit) {
    prope13.startCoroutine(fu16 {
        prope12 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla8(val s: Any)

var prope13: Continuation<Any>? = null

suspend fun <Ty1> fu14(): Ty1 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope13 = it as Continuation<Any>
}

interface Kla9 {
    suspend fun fu17(): Any
}

class Kla10() : Kla9 {

    override suspend fun fu17(): Kla8 = fu14()

    suspend fun fu18(): String {
        val prope20: Kla9 = this
        return (prope20.fu17() as Kla8).s as String
    }

    suspend fun fu19(): String = fu17().s as String
}

fun box246(): String {
    val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
fu13 {
        Kla10().fu18()
    }
    prope13?.resumeWithException(IllegalStateException("OK"))
    if (prope12 != "OK") return "FAIL 1 $prope12"

    prope12 = "FAIL2 "
    fu13 {
        Kla10().fu19()
    }
    prope13?.resumeWithException(IllegalStateException("OK"))
    if ((A((A(1465758632, 1435118121).x), 1).x).toChar().titlecase() != "OK") return "FAIL 2 $prope12"

    return prope12
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        x(prope12.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
prope12.exceptionOrNull()?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            resumeWithException(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope16 = arrayListOf<StackTraceElement?>()

    suspend fun fu22() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu22(it)
    }

    fun fu22(prope13: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
if (prope13 !is CoroutineStackFrame) error("Continuation " + prope13 + " is not subtype of CoroutineStackFrame")
        prope16.clear()
        var prope21: CoroutineStackFrame? = prope13
        while (prope21 != null) {
            prope16.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu23(method: String) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
prope16.find { false}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope16.joinToString(separator = "\n")) }
    }

    fun fu24(method: String) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
prope16.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x).toInt().toString(A(1284219886, 1309414067).x) +
                prope16.joinToString(separator = "\n"))
    }
}

val prope14 = Kla14()

class Kla15 {
    private var prope17 = 0
    var prope18 = (linkedMapOf<Kla14, ArrayList<Int>>()).values.containsAll(linkedSetOf<ArrayList<Int>>())

    var prope19: () -> Unit = {}

    fun fu25() {
        prope17 = 0
        prope18 = false
        prope19 = {}
    }

    suspend fun fu26() = suspendCoroutine<Unit> { prope13 ->
        prope17++
        prope19 = { prope13.resume(Unit) }
    }

    fun fu27(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope17 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x).div(8458318722364459437).toString((A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x)) + prope17)
            (Kla5()).prope10()
        }
        if (prope17 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope17)
        if (prope18) error("Wrong state-machine generated: it is finished early")
        prope19()
        if (checkFinished && !prope18) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope15 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope15.prope19 = {
            prope15.prope18 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:16:56,514 [main:107] - replacing ("UNCHECKED_CAST", String)
2021-03-11 20:16:56,514 [main:50] - replacing "UNCHECKED_CAST" String
2021-03-11 20:16:56,514 [main:54] - Getting value of type String
2021-03-11 20:16:56,729 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:16:56,743 [main:58] - GENERATED VALUE OF TYPE String = "raauu"
2021-03-11 20:16:56,743 [main:61] - GENERATED IS CALL =false
2021-03-11 20:16:56,770 [main:67] - randomType = Char
2021-03-11 20:16:56,979 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:16:57,011 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@53b6d9]
2021-03-11 20:16:57,011 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d4a6f4c]
2021-03-11 20:16:57,012 [main:78] - Generated call from random type = ('એ').toByte().toString(A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)
2021-03-11 20:16:57,012 [main:114] - replacement of "UNCHECKED_CAST" of type String is ('એ').toByte().toString(A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)
2021-03-11 20:16:57,219 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:16:57,220 [main:66] - Compilation checking started
2021-03-11 20:16:57,884 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x).toString((A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1465758632, (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x)).x), 1465758632)).x.toString((A(-1465758632, (A((A(-1465758632, A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(1, 1465758632).x), (A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x))).x.until(prope8++)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(prope9)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

var prope12 = "FAIL"

fun fu13(prope13: suspend () -> Unit) {
    prope13.startCoroutine(fu16 {
        prope12 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla8(val s: Any)

var prope13: Continuation<Any>? = null

suspend fun <Ty1> fu14(): Ty1 = suspendCoroutine {
    @Suppress(('એ').toByte().toString(A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x))
    prope13 = it as Continuation<Any>
}

interface Kla9 {
    suspend fun fu17(): Any
}

class Kla10() : Kla9 {

    override suspend fun fu17(): Kla8 = fu14()

    suspend fun fu18(): String {
        val prope20: Kla9 = this
        return (prope20.fu17() as Kla8).s as String
    }

    suspend fun fu19(): String = fu17().s as String
}

fun box246(): String {
    val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
fu13 {
        Kla10().fu18()
    }
    prope13?.resumeWithException(IllegalStateException("OK"))
    if (prope12 != "OK") return "FAIL 1 $prope12"

    prope12 = "FAIL2 "
    fu13 {
        Kla10().fu19()
    }
    prope13?.resumeWithException(IllegalStateException("OK"))
    if ((A((A(1465758632, 1435118121).x), 1).x).toChar().titlecase() != "OK") return "FAIL 2 $prope12"

    return prope12
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        x(prope12.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
prope12.exceptionOrNull()?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            resumeWithException(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope16 = arrayListOf<StackTraceElement?>()

    suspend fun fu22() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu22(it)
    }

    fun fu22(prope13: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
if (prope13 !is CoroutineStackFrame) error("Continuation " + prope13 + " is not subtype of CoroutineStackFrame")
        prope16.clear()
        var prope21: CoroutineStackFrame? = prope13
        while (prope21 != null) {
            prope16.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu23(method: String) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
prope16.find { false}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope16.joinToString(separator = "\n")) }
    }

    fun fu24(method: String) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
prope16.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x).toInt().toString(A(1284219886, 1309414067).x) +
                prope16.joinToString(separator = "\n"))
    }
}

val prope14 = Kla14()

class Kla15 {
    private var prope17 = 0
    var prope18 = (linkedMapOf<Kla14, ArrayList<Int>>()).values.containsAll(linkedSetOf<ArrayList<Int>>())

    var prope19: () -> Unit = {}

    fun fu25() {
        prope17 = 0
        prope18 = false
        prope19 = {}
    }

    suspend fun fu26() = suspendCoroutine<Unit> { prope13 ->
        prope17++
        prope19 = { prope13.resume(Unit) }
    }

    fun fu27(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope17 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x).div(8458318722364459437).toString((A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x)) + prope17)
            (Kla5()).prope10()
        }
        if (prope17 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope17)
        if (prope18) error("Wrong state-machine generated: it is finished early")
        prope19()
        if (checkFinished && !prope18) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope15 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope15.prope19 = {
            prope15.prope18 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:16:57,887 [main:107] - replacing ("tail-call optimization hit: method " + method + (A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x).toInt().toString(A(1284219886, 1309414067).x), String)
2021-03-11 20:16:57,888 [main:50] - replacing "tail-call optimization hit: method " + method + (A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x).toInt().toString(A(1284219886, 1309414067).x) String
2021-03-11 20:16:57,888 [main:54] - Getting value of type String
2021-03-11 20:16:58,097 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:16:58,110 [main:58] - GENERATED VALUE OF TYPE String = "xcxin"
2021-03-11 20:16:58,110 [main:61] - GENERATED IS CALL =false
2021-03-11 20:16:58,137 [main:67] - randomType = Boolean
2021-03-11 20:16:58,346 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:16:58,368 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@355a0cfb]
2021-03-11 20:16:58,368 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:16:58,368 [main:78] - Generated call from random type = (false).compareTo(Kla5().prope9).toString((A((A(-1435118121, -1465758632).x), 1465758632).x))
2021-03-11 20:16:58,369 [main:106] - GETTING String from A
2021-03-11 20:16:58,377 [main:113] - Case = [public final var x: kotlin.Int defined in A[PropertyDescriptorImpl@263876a7], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]]
2021-03-11 20:16:58,377 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e1212f4]
2021-03-11 20:16:58,377 [main:117] - GENERATED CALL = (A(1465758632, 1435118121)).x.toString((A((A(-1435118121, -1465758632).x), 1465758632).x))
2021-03-11 20:16:58,377 [main:114] - replacement of "tail-call optimization hit: method " + method + (A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x).toInt().toString(A(1284219886, 1309414067).x) of type String is "xcxin"
2021-03-11 20:16:58,585 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 20:16:58,586 [main:66] - Compilation checking started
2021-03-11 20:16:59,574 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x).toString((A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1465758632, (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x)).x), 1465758632)).x.toString((A(-1465758632, (A((A(-1465758632, A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(1, 1465758632).x), (A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x))).x.until(prope8++)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(prope9)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

var prope12 = "FAIL"

fun fu13(prope13: suspend () -> Unit) {
    prope13.startCoroutine(fu16 {
        prope12 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla8(val s: Any)

var prope13: Continuation<Any>? = null

suspend fun <Ty1> fu14(): Ty1 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope13 = it as Continuation<Any>
}

interface Kla9 {
    suspend fun fu17(): Any
}

class Kla10() : Kla9 {

    override suspend fun fu17(): Kla8 = fu14()

    suspend fun fu18(): String {
        val prope20: Kla9 = this
        return (prope20.fu17() as Kla8).s as String
    }

    suspend fun fu19(): String = fu17().s as String
}

fun box246(): String {
    val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
fu13 {
        Kla10().fu18()
    }
    prope13?.resumeWithException(IllegalStateException("OK"))
    if (prope12 != "OK") return "FAIL 1 $prope12"

    prope12 = "FAIL2 "
    fu13 {
        Kla10().fu19()
    }
    prope13?.resumeWithException(IllegalStateException("OK"))
    if ((A((A(1465758632, 1435118121).x), 1).x).toChar().titlecase() != "OK") return "FAIL 2 $prope12"

    return prope12
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        x(prope12.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
prope12.exceptionOrNull()?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            resumeWithException(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope16 = arrayListOf<StackTraceElement?>()

    suspend fun fu22() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu22(it)
    }

    fun fu22(prope13: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
if (prope13 !is CoroutineStackFrame) error("Continuation " + prope13 + " is not subtype of CoroutineStackFrame")
        prope16.clear()
        var prope21: CoroutineStackFrame? = prope13
        while (prope21 != null) {
            prope16.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu23(method: String) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
prope16.find { false}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope16.joinToString(separator = "\n")) }
    }

    fun fu24(method: String) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
prope16.find { it?.methodName?.startsWith(method) == true } ?: error("xcxin" +
                prope16.joinToString(separator = "\n"))
    }
}

val prope14 = Kla14()

class Kla15 {
    private var prope17 = 0
    var prope18 = (linkedMapOf<Kla14, ArrayList<Int>>()).values.containsAll(linkedSetOf<ArrayList<Int>>())

    var prope19: () -> Unit = {}

    fun fu25() {
        prope17 = 0
        prope18 = false
        prope19 = {}
    }

    suspend fun fu26() = suspendCoroutine<Unit> { prope13 ->
        prope17++
        prope19 = { prope13.resume(Unit) }
    }

    fun fu27(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope17 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x).div(8458318722364459437).toString((A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x)) + prope17)
            (Kla5()).prope10()
        }
        if (prope17 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope17)
        if (prope18) error("Wrong state-machine generated: it is finished early")
        prope19()
        if (checkFinished && !prope18) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope15 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope15.prope19 = {
            prope15.prope18 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:16:59,579 [main:107] - replacing (prope13, Continuation<Any>?)
2021-03-11 20:16:59,579 [main:50] - replacing prope13 Continuation<Any>?
2021-03-11 20:16:59,579 [main:54] - Getting value of type Continuation<Any>?
2021-03-11 20:16:59,798 [main:302] - generating value of type = Continuation<Any> false depth = 0
2021-03-11 20:17:00,022 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any>)->kotlin.Unit): Contuation<Any> = TODO()
2021-03-11 20:17:00,038 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any>)->kotlin.Unit): Contuation<Any> = TODO()
2021-03-11 20:17:00,900 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 20:17:01,123 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:17:01,139 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:17:01,690 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 20:17:01,924 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:17:01,939 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:17:02,787 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:17:02,787 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:17:02,787 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any>)->kotlin.Unit): Contuation<Any> = TODO()
2021-03-11 20:17:02,787 [main:58] - GENERATED VALUE OF TYPE Continuation<Any>? = 
2021-03-11 20:17:03,424 [main:67] - randomType = ArrayList<List<Char>>
2021-03-11 20:17:03,625 [main:302] - generating value of type = ArrayList<List<Char>> false depth = 0
2021-03-11 20:17:03,843 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<List<Char>> = TODO()
2021-03-11 20:17:03,859 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<List<Char>> = TODO()
2021-03-11 20:17:04,090 [main:95] - GENERATED = arrayListOf<List<Char>>()
2021-03-11 20:17:04,235 [main:106] - GETTING Continuation<Any>? from Char
2021-03-11 20:17:04,254 [main:106] - GETTING Continuation<Any>? from Int
2021-03-11 20:17:04,285 [main:106] - GETTING Continuation<Any>? from A
2021-03-11 20:17:04,291 [main:106] - GETTING Continuation<Any>? from CoroutineContext
2021-03-11 20:17:04,297 [main:106] - GETTING Continuation<Any>? from Boolean
2021-03-11 20:17:04,305 [main:106] - GETTING Continuation<Any>? from CoroutineContext
2021-03-11 20:17:04,306 [main:106] - GETTING Continuation<Any>? from A
2021-03-11 20:17:04,307 [main:106] - GETTING Continuation<Any>? from Int
2021-03-11 20:17:04,308 [main:106] - GETTING Continuation<Any>? from Continuation<Any?>
2021-03-11 20:17:04,316 [main:106] - GETTING Continuation<Any>? from Int
2021-03-11 20:17:04,317 [main:106] - GETTING Continuation<Any>? from A
2021-03-11 20:17:04,318 [main:106] - GETTING Continuation<Any>? from Int
2021-03-11 20:17:04,319 [main:106] - GETTING Continuation<Any>? from A
2021-03-11 20:17:04,320 [main:106] - GETTING Continuation<Any>? from Int
2021-03-11 20:17:04,321 [main:106] - GETTING Continuation<Any>? from A
2021-03-11 20:17:04,322 [main:106] - GETTING Continuation<Any>? from Any?
2021-03-11 20:17:04,327 [main:106] - GETTING Continuation<Any>? from A
2021-03-11 20:17:04,328 [main:106] - GETTING Continuation<Any>? from A
2021-03-11 20:17:04,329 [main:106] - GETTING Continuation<Any>? from Int
2021-03-11 20:17:04,330 [main:106] - GETTING Continuation<Any>? from CoroutineContext
2021-03-11 20:17:04,331 [main:106] - GETTING Continuation<Any>? from Int?
2021-03-11 20:17:04,363 [main:106] - GETTING Continuation<Any>? from EmptyCoroutineContext
2021-03-11 20:17:04,377 [main:106] - GETTING Continuation<Any>? from Int
2021-03-11 20:17:04,378 [main:106] - GETTING Continuation<Any>? from Kla5
2021-03-11 20:17:04,385 [main:106] - GETTING Continuation<Any>? from A
2021-03-11 20:17:04,386 [main:106] - GETTING Continuation<Any>? from Int
2021-03-11 20:17:04,387 [main:106] - GETTING Continuation<Any>? from Int
2021-03-11 20:17:04,388 [main:106] - GETTING Continuation<Any>? from A
2021-03-11 20:17:04,389 [main:106] - GETTING Continuation<Any>? from Function0<Unit>
2021-03-11 20:17:04,399 [main:106] - GETTING Continuation<Any>? from Char
2021-03-11 20:17:04,400 [main:106] - GETTING Continuation<Any>? from A
2021-03-11 20:17:04,401 [main:106] - GETTING Continuation<Any>? from Int
2021-03-11 20:17:04,402 [main:106] - GETTING Continuation<Any>? from Int
2021-03-11 20:17:04,403 [main:106] - GETTING Continuation<Any>? from Continuation<Short>
2021-03-11 20:17:04,410 [main:106] - GETTING Continuation<Any>? from Int
2021-03-11 20:17:04,411 [main:106] - GETTING Continuation<Any>? from A
2021-03-11 20:17:04,412 [main:106] - GETTING Continuation<Any>? from Int
2021-03-11 20:17:04,413 [main:106] - GETTING Continuation<Any>? from Int
2021-03-11 20:17:04,414 [main:106] - GETTING Continuation<Any>? from Int
2021-03-11 20:17:04,415 [main:106] - GETTING Continuation<Any>? from A
2021-03-11 20:17:04,415 [main:111] - Cant find and generate replacement for prope13 type Continuation<Any>?
2021-03-11 20:17:04,415 [main:107] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x).div(8458318722364459437).toString((A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x)) + prope17, String)
2021-03-11 20:17:04,416 [main:50] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x).div(8458318722364459437).toString((A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x)) + prope17 String
2021-03-11 20:17:04,416 [main:54] - Getting value of type String
2021-03-11 20:17:04,617 [main:302] - generating value of type = String true depth = 0
2021-03-11 20:17:04,631 [main:58] - GENERATED VALUE OF TYPE String = "pynvi"
2021-03-11 20:17:04,631 [main:61] - GENERATED IS CALL =false
2021-03-11 20:17:06,586 [main:67] - randomType = Triple<Long, Pair<Double, Kla9?>, Short>?
2021-03-11 20:17:06,794 [main:302] - generating value of type = Triple<Long, Pair<Double, Kla9?>, Short> false depth = 0
2021-03-11 20:17:07,022 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Long, second: Pair<Double, Kla9?>, third: Short): Triple<Long, Pair<Double, Kla9?>, Short> = TODO()
2021-03-11 20:17:07,038 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Long, second: Pair<Double, Kla9?>, third: Short): Triple<Long, Pair<Double, Kla9?>, Short> = TODO()
2021-03-11 20:17:07,301 [main:302] - generating value of type = Long true depth = 3
2021-03-11 20:17:07,314 [main:302] - generating value of type = Pair<Double, Kla9?> false depth = 3
2021-03-11 20:17:07,540 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Double, second: Kla9?): Pair<Double, Kla9?> = TODO()
2021-03-11 20:17:07,555 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Double, second: Kla9?): Pair<Double, Kla9?> = TODO()
2021-03-11 20:17:07,777 [main:302] - generating value of type = Double true depth = 6
2021-03-11 20:17:07,791 [main:302] - generating value of type = Kla9 false depth = 6
2021-03-11 20:17:07,804 [main:112] - generating klass Kla9 text = interface Kla9 {
    suspend fun fu17(): Any
}
2021-03-11 20:17:08,266 [main:302] - generating value of type = Kla10 false depth = 8
2021-03-11 20:17:08,280 [main:112] - generating klass Kla10 text = class Kla10() : Kla9 {

    override suspend fun fu17(): Kla8 = fu14()

    suspend fun fu18(): String {
        val prope20: Kla9 = this
        return (prope20.fu17() as Kla8).s as String
    }

    suspend fun fu19(): String = fu17().s as String
}
2021-03-11 20:17:08,502 [main:194] - Type params = []
2021-03-11 20:17:08,716 [main:95] - GENERATED = Pair<Double, Kla9?>(0.20303821836935942, Kla10())
2021-03-11 20:17:08,716 [main:302] - generating value of type = Short true depth = 3
2021-03-11 20:17:08,729 [main:95] - GENERATED = Triple<Long, Pair<Double, Kla9?>, Short>(3142513209635848175, Pair<Double, Kla9?>(0.20303821836935942, Kla10()), 27225)
2021-03-11 20:17:08,755 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76a285c4]
2021-03-11 20:17:08,756 [main:78] - Generated call from random type = (Triple<Long, Pair<Double, Kla9?>, Short>(3142513209635848175, Pair<Double, Kla9?>(0.20303821836935942, Kla10()), 27225))?.first.toString(A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x)
2021-03-11 20:17:08,756 [main:114] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x).div(8458318722364459437).toString((A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x)) + prope17 of type String is (Triple<Long, Pair<Double, Kla9?>, Short>(3142513209635848175, Pair<Double, Kla9?>(0.20303821836935942, Kla10()), 27225))?.first.toString(A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x)
2021-03-11 20:17:08,967 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:17:08,968 [main:66] - Compilation checking started
2021-03-11 20:17:09,870 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x).toString((A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1465758632, (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x)).x), 1465758632)).x.toString((A(-1465758632, (A((A(-1465758632, A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(1, 1465758632).x), (A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x))).x.until(prope8++)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(prope9)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

var prope12 = "FAIL"

fun fu13(prope13: suspend () -> Unit) {
    prope13.startCoroutine(fu16 {
        prope12 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla8(val s: Any)

var prope13: Continuation<Any>? = null

suspend fun <Ty1> fu14(): Ty1 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope13 = it as Continuation<Any>
}

interface Kla9 {
    suspend fun fu17(): Any
}

class Kla10() : Kla9 {

    override suspend fun fu17(): Kla8 = fu14()

    suspend fun fu18(): String {
        val prope20: Kla9 = this
        return (prope20.fu17() as Kla8).s as String
    }

    suspend fun fu19(): String = fu17().s as String
}

fun box246(): String {
    val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
fu13 {
        Kla10().fu18()
    }
    prope13?.resumeWithException(IllegalStateException("OK"))
    if (prope12 != "OK") return "FAIL 1 $prope12"

    prope12 = "FAIL2 "
    fu13 {
        Kla10().fu19()
    }
    prope13?.resumeWithException(IllegalStateException("OK"))
    if ((A((A(1465758632, 1435118121).x), 1).x).toChar().titlecase() != "OK") return "FAIL 2 $prope12"

    return prope12
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        x(prope12.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
prope12.exceptionOrNull()?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            resumeWithException(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope16 = arrayListOf<StackTraceElement?>()

    suspend fun fu22() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu22(it)
    }

    fun fu22(prope13: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
if (prope13 !is CoroutineStackFrame) error("Continuation " + prope13 + " is not subtype of CoroutineStackFrame")
        prope16.clear()
        var prope21: CoroutineStackFrame? = prope13
        while (prope21 != null) {
            prope16.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu23(method: String) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
prope16.find { false}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope16.joinToString(separator = "\n")) }
    }

    fun fu24(method: String) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
prope16.find { it?.methodName?.startsWith(method) == true } ?: error("xcxin" +
                prope16.joinToString(separator = "\n"))
    }
}

val prope14 = Kla14()

class Kla15 {
    private var prope17 = 0
    var prope18 = (linkedMapOf<Kla14, ArrayList<Int>>()).values.containsAll(linkedSetOf<ArrayList<Int>>())

    var prope19: () -> Unit = {}

    fun fu25() {
        prope17 = 0
        prope18 = false
        prope19 = {}
    }

    suspend fun fu26() = suspendCoroutine<Unit> { prope13 ->
        prope17++
        prope19 = { prope13.resume(Unit) }
    }

    fun fu27(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope17 != i) error((Triple<Long, Pair<Double, Kla9?>, Short>(3142513209635848175, Pair<Double, Kla9?>(0.20303821836935942, Kla10()), 27225))?.first.toString(A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x))
            (Kla5()).prope10()
        }
        if (prope17 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope17)
        if (prope18) error("Wrong state-machine generated: it is finished early")
        prope19()
        if (checkFinished && !prope18) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope15 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope15.prope19 = {
            prope15.prope18 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:17:09,874 [main:107] - replacing (exceptionOrNull(), Throwable?)
2021-03-11 20:17:09,876 [main:50] - replacing exceptionOrNull() Throwable?
2021-03-11 20:17:09,876 [main:54] - Getting value of type Throwable?
2021-03-11 20:17:10,086 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 20:17:10,102 [main:58] - GENERATED VALUE OF TYPE Throwable? = Exception()
2021-03-11 20:17:10,102 [main:61] - GENERATED IS CALL =true
2021-03-11 20:17:10,432 [main:67] - randomType = Kla11?
2021-03-11 20:17:10,636 [main:302] - generating value of type = Kla11 false depth = 0
2021-03-11 20:17:10,649 [main:112] - generating klass Kla11 text = open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}
2021-03-11 20:17:10,863 [main:194] - Type params = []
2021-03-11 20:17:11,069 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 20:17:11,297 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:17:11,312 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:17:11,909 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 20:17:12,145 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:17:12,160 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:17:13,023 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 20:17:13,024 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 20:17:13,044 [main:106] - GETTING Throwable? from Char
2021-03-11 20:17:13,065 [main:106] - GETTING Throwable? from A
2021-03-11 20:17:13,073 [main:106] - GETTING Throwable? from Int
2021-03-11 20:17:13,104 [main:106] - GETTING Throwable? from Int
2021-03-11 20:17:13,105 [main:106] - GETTING Throwable? from CoroutineContext
2021-03-11 20:17:13,111 [main:106] - GETTING Throwable? from CoroutineContext
2021-03-11 20:17:13,112 [main:106] - GETTING Throwable? from A
2021-03-11 20:17:13,113 [main:106] - GETTING Throwable? from A
2021-03-11 20:17:13,113 [main:106] - GETTING Throwable? from Int?
2021-03-11 20:17:13,148 [main:106] - GETTING Throwable? from A
2021-03-11 20:17:13,149 [main:106] - GETTING Throwable? from Any?
2021-03-11 20:17:13,153 [main:106] - GETTING Throwable? from Int
2021-03-11 20:17:13,154 [main:106] - GETTING Throwable? from Int
2021-03-11 20:17:13,155 [main:106] - GETTING Throwable? from Int
2021-03-11 20:17:13,155 [main:106] - GETTING Throwable? from CoroutineContext
2021-03-11 20:17:13,156 [main:106] - GETTING Throwable? from Int
2021-03-11 20:17:13,157 [main:106] - GETTING Throwable? from A
2021-03-11 20:17:13,157 [main:106] - GETTING Throwable? from Int
2021-03-11 20:17:13,158 [main:106] - GETTING Throwable? from EmptyCoroutineContext
2021-03-11 20:17:13,173 [main:106] - GETTING Throwable? from A
2021-03-11 20:17:13,174 [main:106] - GETTING Throwable? from Int
2021-03-11 20:17:13,175 [main:106] - GETTING Throwable? from A
2021-03-11 20:17:13,175 [main:106] - GETTING Throwable? from Int
2021-03-11 20:17:13,176 [main:106] - GETTING Throwable? from Int
2021-03-11 20:17:13,177 [main:106] - GETTING Throwable? from A
2021-03-11 20:17:13,177 [main:106] - GETTING Throwable? from Kla5
2021-03-11 20:17:13,185 [main:106] - GETTING Throwable? from A
2021-03-11 20:17:13,186 [main:106] - GETTING Throwable? from A
2021-03-11 20:17:13,186 [main:106] - GETTING Throwable? from Continuation<Any?>
2021-03-11 20:17:13,194 [main:106] - GETTING Throwable? from A
2021-03-11 20:17:13,195 [main:106] - GETTING Throwable? from Int
2021-03-11 20:17:13,196 [main:106] - GETTING Throwable? from Boolean
2021-03-11 20:17:13,206 [main:106] - GETTING Throwable? from A
2021-03-11 20:17:13,206 [main:106] - GETTING Throwable? from Int
2021-03-11 20:17:13,207 [main:106] - GETTING Throwable? from Int
2021-03-11 20:17:13,208 [main:106] - GETTING Throwable? from Int
2021-03-11 20:17:13,208 [main:106] - GETTING Throwable? from Continuation<Short>
2021-03-11 20:17:13,216 [main:106] - GETTING Throwable? from Char
2021-03-11 20:17:13,217 [main:106] - GETTING Throwable? from Int
2021-03-11 20:17:13,217 [main:106] - GETTING Throwable? from Function0<Unit>
2021-03-11 20:17:13,226 [main:114] - replacement of exceptionOrNull() of type Throwable? is Exception()
2021-03-11 20:17:13,439 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:17:13,440 [main:66] - Compilation checking started
2021-03-11 20:17:14,099 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x).toString((A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1465758632, (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x)).x), 1465758632)).x.toString((A(-1465758632, (A((A(-1465758632, A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(1, 1465758632).x), (A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x))).x.until(prope8++)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(prope9)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

var prope12 = "FAIL"

fun fu13(prope13: suspend () -> Unit) {
    prope13.startCoroutine(fu16 {
        prope12 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla8(val s: Any)

var prope13: Continuation<Any>? = null

suspend fun <Ty1> fu14(): Ty1 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope13 = it as Continuation<Any>
}

interface Kla9 {
    suspend fun fu17(): Any
}

class Kla10() : Kla9 {

    override suspend fun fu17(): Kla8 = fu14()

    suspend fun fu18(): String {
        val prope20: Kla9 = this
        return (prope20.fu17() as Kla8).s as String
    }

    suspend fun fu19(): String = fu17().s as String
}

fun box246(): String {
    val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
fu13 {
        Kla10().fu18()
    }
    prope13?.resumeWithException(IllegalStateException("OK"))
    if (prope12 != "OK") return "FAIL 1 $prope12"

    prope12 = "FAIL2 "
    fu13 {
        Kla10().fu19()
    }
    prope13?.resumeWithException(IllegalStateException("OK"))
    if ((A((A(1465758632, 1435118121).x), 1).x).toChar().titlecase() != "OK") return "FAIL 2 $prope12"

    return prope12
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        x(prope12.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
prope12.exceptionOrNull()?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            resumeWithException(prope12.Exception()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope16 = arrayListOf<StackTraceElement?>()

    suspend fun fu22() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu22(it)
    }

    fun fu22(prope13: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
if (prope13 !is CoroutineStackFrame) error("Continuation " + prope13 + " is not subtype of CoroutineStackFrame")
        prope16.clear()
        var prope21: CoroutineStackFrame? = prope13
        while (prope21 != null) {
            prope16.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu23(method: String) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
prope16.find { false}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope16.joinToString(separator = "\n")) }
    }

    fun fu24(method: String) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
prope16.find { it?.methodName?.startsWith(method) == true } ?: error("xcxin" +
                prope16.joinToString(separator = "\n"))
    }
}

val prope14 = Kla14()

class Kla15 {
    private var prope17 = 0
    var prope18 = (linkedMapOf<Kla14, ArrayList<Int>>()).values.containsAll(linkedSetOf<ArrayList<Int>>())

    var prope19: () -> Unit = {}

    fun fu25() {
        prope17 = 0
        prope18 = false
        prope19 = {}
    }

    suspend fun fu26() = suspendCoroutine<Unit> { prope13 ->
        prope17++
        prope19 = { prope13.resume(Unit) }
    }

    fun fu27(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope17 != i) error((Triple<Long, Pair<Double, Kla9?>, Short>(3142513209635848175, Pair<Double, Kla9?>(0.20303821836935942, Kla10()), 27225))?.first.toString(A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x))
            (Kla5()).prope10()
        }
        if (prope17 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope17)
        if (prope18) error("Wrong state-machine generated: it is finished early")
        prope19()
        if (checkFinished && !prope18) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope15 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope15.prope19 = {
            prope15.prope18 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:17:14,103 [main:107] - replacing (true, Boolean)
2021-03-11 20:17:14,105 [main:50] - replacing true Boolean
2021-03-11 20:17:14,105 [main:54] - Getting value of type Boolean
2021-03-11 20:17:14,348 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 20:17:14,362 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 20:17:14,362 [main:61] - GENERATED IS CALL =false
2021-03-11 20:17:14,763 [main:67] - randomType = MutableMap<Float, Kla14>
2021-03-11 20:17:14,764 [main:106] - GETTING Boolean from Int
2021-03-11 20:17:14,798 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f971e3d], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6b629e54]]
2021-03-11 20:17:14,799 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5f971e3d]
2021-03-11 20:17:14,799 [main:149] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6b629e54]
2021-03-11 20:17:14,799 [main:117] - GENERATED CALL = (A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x).toFloat().isNaN()
2021-03-11 20:17:14,799 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f344b89]]
2021-03-11 20:17:14,799 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:17:14,799 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f344b89]
2021-03-11 20:17:14,799 [main:117] - GENERATED CALL = (A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x).toChar().isISOControl()
2021-03-11 20:17:14,799 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3348cc8b]]
2021-03-11 20:17:14,799 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:17:14,799 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3348cc8b]
2021-03-11 20:17:14,800 [main:117] - GENERATED CALL = (A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x).toChar().isLetterOrDigit()
2021-03-11 20:17:14,800 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ea9efde]]
2021-03-11 20:17:14,800 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:17:14,800 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ea9efde]
2021-03-11 20:17:14,800 [main:117] - GENERATED CALL = (A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x).toChar().isUpperCase()
2021-03-11 20:17:14,800 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57ba1828], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@13f065ac]]
2021-03-11 20:17:14,800 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57ba1828]
2021-03-11 20:17:15,021 [main:302] - generating value of type = Double true depth = 0
2021-03-11 20:17:15,034 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@13f065ac]
2021-03-11 20:17:15,034 [main:117] - GENERATED CALL = (A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x).div(0.19061064674304118).isInfinite()
2021-03-11 20:17:15,034 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@682d5403], public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@128f0a3c]]
2021-03-11 20:17:15,035 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@682d5403]
2021-03-11 20:17:15,245 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 20:17:15,259 [main:149] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@128f0a3c]
2021-03-11 20:17:15,259 [main:117] - GENERATED CALL = (A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x).rangeTo(20).isEmpty()
2021-03-11 20:17:15,259 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40b6c5e7]]
2021-03-11 20:17:15,259 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:17:15,259 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40b6c5e7]
2021-03-11 20:17:15,259 [main:117] - GENERATED CALL = (A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x).toChar().isWhitespace()
2021-03-11 20:17:15,259 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57ba1828], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3cd0df14]]
2021-03-11 20:17:15,259 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57ba1828]
2021-03-11 20:17:15,478 [main:302] - generating value of type = Double true depth = 0
2021-03-11 20:17:15,491 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3cd0df14]
2021-03-11 20:17:15,492 [main:117] - GENERATED CALL = (A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x).div(0.1386818858322615).isFinite()
2021-03-11 20:17:15,492 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b2cb434]]
2021-03-11 20:17:15,492 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3f0d2a97]
2021-03-11 20:17:15,492 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b2cb434]
2021-03-11 20:17:15,492 [main:117] - GENERATED CALL = (A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x).toChar().equals((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar(), Kla5().prope9)
2021-03-11 20:17:15,492 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@220c529a], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@572d41a1]]
2021-03-11 20:17:15,492 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@220c529a]
2021-03-11 20:17:15,493 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@572d41a1]
2021-03-11 20:17:15,493 [main:117] - GENERATED CALL = (A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x).equals(Kla2().prope6).not()
2021-03-11 20:17:15,493 [main:114] - replacement of true of type Boolean is (A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x).equals(Kla2().prope6).not()
2021-03-11 20:17:15,704 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 20:17:15,705 [main:66] - Compilation checking started
2021-03-11 20:17:16,831 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x).toString((A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1465758632, (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x)).x), 1465758632)).x.toString((A(-1465758632, (A((A(-1465758632, A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(1, 1465758632).x), (A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x))).x.until(prope8++)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(prope9)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

var prope12 = "FAIL"

fun fu13(prope13: suspend () -> Unit) {
    prope13.startCoroutine(fu16 {
        prope12 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla8(val s: Any)

var prope13: Continuation<Any>? = null

suspend fun <Ty1> fu14(): Ty1 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope13 = it as Continuation<Any>
}

interface Kla9 {
    suspend fun fu17(): Any
}

class Kla10() : Kla9 {

    override suspend fun fu17(): Kla8 = fu14()

    suspend fun fu18(): String {
        val prope20: Kla9 = this
        return (prope20.fu17() as Kla8).s as String
    }

    suspend fun fu19(): String = fu17().s as String
}

fun box246(): String {
    val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
fu13 {
        Kla10().fu18()
    }
    prope13?.resumeWithException(IllegalStateException("OK"))
    if (prope12 != "OK") return "FAIL 1 $prope12"

    prope12 = "FAIL2 "
    fu13 {
        Kla10().fu19()
    }
    prope13?.resumeWithException(IllegalStateException("OK"))
    if ((A((A(1465758632, 1435118121).x), 1).x).toChar().titlecase() != "OK") return "FAIL 2 $prope12"

    return prope12
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        x(prope12.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
prope12.exceptionOrNull()?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            resumeWithException(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope16 = arrayListOf<StackTraceElement?>()

    suspend fun fu22() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu22(it)
    }

    fun fu22(prope13: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
if (prope13 !is CoroutineStackFrame) error("Continuation " + prope13 + " is not subtype of CoroutineStackFrame")
        prope16.clear()
        var prope21: CoroutineStackFrame? = prope13
        while (prope21 != null) {
            prope16.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu23(method: String) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
prope16.find { false}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope16.joinToString(separator = "\n")) }
    }

    fun fu24(method: String) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
prope16.find { it?.methodName?.startsWith(method) == true } ?: error("xcxin" +
                prope16.joinToString(separator = "\n"))
    }
}

val prope14 = Kla14()

class Kla15 {
    private var prope17 = 0
    var prope18 = (linkedMapOf<Kla14, ArrayList<Int>>()).values.containsAll(linkedSetOf<ArrayList<Int>>())

    var prope19: () -> Unit = {}

    fun fu25() {
        prope17 = 0
        prope18 = false
        prope19 = {}
    }

    suspend fun fu26() = suspendCoroutine<Unit> { prope13 ->
        prope17++
        prope19 = { prope13.resume(Unit) }
    }

    fun fu27(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope17 != i) error((Triple<Long, Pair<Double, Kla9?>, Short>(3142513209635848175, Pair<Double, Kla9?>(0.20303821836935942, Kla10()), 27225))?.first.toString(A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x))
            (Kla5()).prope10()
        }
        if (prope17 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope17)
        if (prope18) error("Wrong state-machine generated: it is finished early")
        prope19()
        if (checkFinished && !prope18) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope15 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
prope15.prope19 = {
            prope15.prope18 = (A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x).equals(Kla2().prope6).not()
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:17:16,834 [main:107] - replacing (this, Kla12)
2021-03-11 20:17:16,835 [main:50] - replacing this Kla12
2021-03-11 20:17:16,835 [main:54] - Getting value of type Kla12
2021-03-11 20:17:17,052 [main:302] - generating value of type = Kla12 false depth = 0
2021-03-11 20:17:17,064 [main:112] - generating klass Kla12 text = class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
this.prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}
2021-03-11 20:17:17,065 [main:58] - GENERATED VALUE OF TYPE Kla12 = Kla12()
2021-03-11 20:17:17,065 [main:61] - GENERATED IS CALL =true
2021-03-11 20:17:17,090 [main:67] - randomType = Char
2021-03-11 20:17:17,301 [main:302] - generating value of type = Char true depth = 0
2021-03-11 20:17:17,339 [main:106] - GETTING Kla12 from Int
2021-03-11 20:17:17,381 [main:106] - GETTING Kla12 from Int
2021-03-11 20:17:17,382 [main:106] - GETTING Kla12 from Int
2021-03-11 20:17:17,383 [main:106] - GETTING Kla12 from EmptyCoroutineContext
2021-03-11 20:17:17,406 [main:106] - GETTING Kla12 from Int
2021-03-11 20:17:17,406 [main:106] - GETTING Kla12 from Int
2021-03-11 20:17:17,407 [main:106] - GETTING Kla12 from A
2021-03-11 20:17:17,417 [main:106] - GETTING Kla12 from CoroutineContext
2021-03-11 20:17:17,424 [main:106] - GETTING Kla12 from Int
2021-03-11 20:17:17,425 [main:106] - GETTING Kla12 from Char
2021-03-11 20:17:17,444 [main:106] - GETTING Kla12 from Char
2021-03-11 20:17:17,445 [main:106] - GETTING Kla12 from Kla5
2021-03-11 20:17:17,452 [main:106] - GETTING Kla12 from Int
2021-03-11 20:17:17,453 [main:106] - GETTING Kla12 from A
2021-03-11 20:17:17,454 [main:106] - GETTING Kla12 from Int
2021-03-11 20:17:17,454 [main:106] - GETTING Kla12 from Int
2021-03-11 20:17:17,455 [main:106] - GETTING Kla12 from A
2021-03-11 20:17:17,456 [main:106] - GETTING Kla12 from Any?
2021-03-11 20:17:17,459 [main:106] - GETTING Kla12 from A
2021-03-11 20:17:17,460 [main:106] - GETTING Kla12 from A
2021-03-11 20:17:17,461 [main:106] - GETTING Kla12 from A
2021-03-11 20:17:17,461 [main:106] - GETTING Kla12 from CoroutineContext
2021-03-11 20:17:17,462 [main:106] - GETTING Kla12 from A
2021-03-11 20:17:17,462 [main:106] - GETTING Kla12 from A
2021-03-11 20:17:17,463 [main:106] - GETTING Kla12 from Int
2021-03-11 20:17:17,464 [main:106] - GETTING Kla12 from Int?
2021-03-11 20:17:17,497 [main:106] - GETTING Kla12 from Function0<Unit>
2021-03-11 20:17:17,506 [main:106] - GETTING Kla12 from Int
2021-03-11 20:17:17,506 [main:106] - GETTING Kla12 from Int
2021-03-11 20:17:17,507 [main:106] - GETTING Kla12 from CoroutineContext
2021-03-11 20:17:17,507 [main:106] - GETTING Kla12 from A
2021-03-11 20:17:17,508 [main:106] - GETTING Kla12 from Int
2021-03-11 20:17:17,509 [main:106] - GETTING Kla12 from A
2021-03-11 20:17:17,509 [main:106] - GETTING Kla12 from Continuation<Short>
2021-03-11 20:17:17,518 [main:106] - GETTING Kla12 from Int
2021-03-11 20:17:17,518 [main:106] - GETTING Kla12 from Int
2021-03-11 20:17:17,519 [main:106] - GETTING Kla12 from Continuation<Any?>
2021-03-11 20:17:17,526 [main:106] - GETTING Kla12 from A
2021-03-11 20:17:17,526 [main:106] - GETTING Kla12 from Boolean
2021-03-11 20:17:17,534 [main:106] - GETTING Kla12 from A
2021-03-11 20:17:17,535 [main:114] - replacement of this of type Kla12 is Kla12()
2021-03-11 20:17:17,747 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 20:17:17,747 [main:66] - Compilation checking started
2021-03-11 20:17:18,680 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
data class A(var x: Int, val z: Int?)

fun box(): String {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}

fun box535(): String {
    val a = A(1, null)
val prope0 = { }
    val prope1 = (Runnable(prope0) as Object).getClass()
    val prope2 = (Runnable({ check((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit(), { "xdvef"})}) as Object).getClass()

    return if ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar().isDigit()) (A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).toChar().titlecase() else "$prope1 $prope2"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope5 = object : Kla0 {
        override suspend fun fu4() {
            val a = A(1, null)
val prope0 = { }
{ println("ljcqo")}()
            c()
        }
    }
    prope5.fu4()
    prope5.fu4()
}

fun fu1(c: suspend () -> Unit) {
    val a = A(1, null)
val prope0 = { }
c.startCoroutine(Kla6)
}

fun box727(): String {
    val a = A(1, null)
val prope0 = { }
fu1 {
        fu0 { println()}
    }
    Kla5().fu12(numberOfSuspensions = 8)
    return (A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x).toString((A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x))
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        val a = A(1, null)
val prope0 = { }
{a: Ty0 -> require(false, { "euzqa"})}(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
(linkedMapOf<Float, Byte>(Pair<Float, Byte>(0.579355f, 106))).keys.clear()
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
"czqdy"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
Kla2().prope6 = "wbuex"
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu5(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
if (c !is CoroutineStackFrame) error((A((A(-1465758632, (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x)).x), 1465758632)).x.toString((A(-1465758632, (A((A(-1465758632, A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x).x), 1465758632).x)).x)))
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu8(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { true}?.let { TODO()}
    }

    fun fu9(method: String) {
        val a = A(1, null)
val prope0 = { }
prope7.find { false } ?: error((A(A((A(-1435118121, -1465758632).x), 1465758632).x, (A((A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x), 1465758632).x))).x.toString((A(-1435118121, (A((A(1465758632, -1465758632).x), 1465758632).x)).x)) + (A(1, (A((A(A(-1435118121, -1465758632).x, A((A(-1435118121, -1465758632).x), 1465758632).x).x), -1465758632).x)).x).toChar().lowercase() +
                prope7.joinToString(separator = ((A((A(A(-1435118121, -1465758632).x, -1465758632).x), 1).x).toChar()).compareTo((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toString(0)))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu10() {
        val a = A(1, null)
val prope0 = { }
prope8 = 0
        prope9 = (A((A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1).x).equals("aphii").not()
        prope10 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (false)?.not()) {
        val a = A(1, null)
val prope0 = { }
for (i in (A((A(1, 1465758632).x), (A(A((A(-1435118121, -1465758632).x), 1465758632).x, 1465758632).x))).x.until(prope8++)) {
            if (prope8 != (Kla1())?.equals("soqvc").compareTo(prope9)) error((A(A(1435118121, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x, -1435118121).x).compareTo(1515288359).toString((A((A(-1435118121, 1465758632).x), 1465758632).x)))
            prope10()
        }
        if (true)
            error((Pair<UInt, Kla2>(1.toUInt(), Kla2())).first.toString(A((A(-1435118121, -1465758632).x), 1465758632).x) + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((A(1, (A((A(((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).compareTo('崴'), -1465758632).x), (A(-1435118121, -1465758632).x)).x))).equals("qnjxh").not() && ((A((A(-1435118121, -1465758632).x), 1465758632).x).toChar()).toByte().equals("wxecj")) error((A((A(1465758632, (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), 1465758632).x).toLong().toString(A(prope8, (A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x)).x))
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
Kla5().prope10 = { println()}
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}

var prope12 = "FAIL"

fun fu13(prope13: suspend () -> Unit) {
    prope13.startCoroutine(fu16 {
        prope12 = it.message!!
    })
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla8(val s: Any)

var prope13: Continuation<Any>? = null

suspend fun <Ty1> fu14(): Ty1 = suspendCoroutine {
    @Suppress("UNCHECKED_CAST")
    prope13 = it as Continuation<Any>
}

interface Kla9 {
    suspend fun fu17(): Any
}

class Kla10() : Kla9 {

    override suspend fun fu17(): Kla8 = fu14()

    suspend fun fu18(): String {
        val prope20: Kla9 = this
        return (prope20.fu17() as Kla8).s as String
    }

    suspend fun fu19(): String = fu17().s as String
}

fun box246(): String {
    val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
fu13 {
        Kla10().fu18()
    }
    prope13?.resumeWithException(IllegalStateException("OK"))
    if (prope12 != "OK") return "FAIL 1 $prope12"

    prope12 = "FAIL2 "
    fu13 {
        Kla10().fu19()
    }
    prope13?.resumeWithException(IllegalStateException("OK"))
    if ((A((A(1465758632, 1435118121).x), 1).x).toChar().titlecase() != "OK") return "FAIL 2 $prope12"

    return prope12
}

fun <Ty1> fu15(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        x(prope12.getOrThrow())
    }
}

fun fu16(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
prope12.exceptionOrNull()?.let(x)
    }
}

open class Kla11(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla17 : Kla11()
    override fun resumeWith(prope12: Result<Any?>) {
        prope12.getOrThrow()
    }
}

class Kla12 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Any?>) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
Kla12().prope12 = prope12.getOrThrow()
    }

    var prope12: Any? = null
}

abstract class Kla13<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope12: Result<Ty1>) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
if (prope12.isSuccess) {
            resume(prope12.getOrThrow())
        } else {
            resumeWithException(prope12.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla14 {
    private val prope16 = arrayListOf<StackTraceElement?>()

    suspend fun fu22() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu22(it)
    }

    fun fu22(prope13: Continuation<*>) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
if (prope13 !is CoroutineStackFrame) error("Continuation " + prope13 + " is not subtype of CoroutineStackFrame")
        prope16.clear()
        var prope21: CoroutineStackFrame? = prope13
        while (prope21 != null) {
            prope16.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu23(method: String) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
prope16.find { false}?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope16.joinToString(separator = "\n")) }
    }

    fun fu24(method: String) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
prope16.find { it?.methodName?.startsWith(method) == true } ?: error("xcxin" +
                prope16.joinToString(separator = "\n"))
    }
}

val prope14 = Kla14()

class Kla15 {
    private var prope17 = 0
    var prope18 = (linkedMapOf<Kla14, ArrayList<Int>>()).values.containsAll(linkedSetOf<ArrayList<Int>>())

    var prope19: () -> Unit = {}

    fun fu25() {
        prope17 = 0
        prope18 = false
        prope19 = {}
    }

    suspend fun fu26() = suspendCoroutine<Unit> { prope13 ->
        prope17++
        prope19 = { prope13.resume(Unit) }
    }

    fun fu27(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
for (i in 1..numberOfSuspensions) {
            if (prope17 != i) error((Triple<Long, Pair<Double, Kla9?>, Short>(3142513209635848175, Pair<Double, Kla9?>(0.20303821836935942, Kla10()), 27225))?.first.toString(A(2, (A((A((A((A(A(-1435118121, -1465758632).x, -1465758632).x), (A((A(-1435118121, -1465758632).x), 1465758632).x)).x), -1465758632).x), 1465758632).x)).x))
            (Kla5()).prope10()
        }
        if (prope17 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope17)
        if (prope18) error("Wrong state-machine generated: it is finished early")
        prope19()
        if (checkFinished && !prope18) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope15 = Kla15()

object Kla16: Kla13<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val a = A(1, null)
val prope0 = { }
val prope3 = Kla4()
val prope4 = Kla5()
prope15.prope19 = {
            prope15.prope18 = (A(A(1920083034, 1486922171).x, (A((A(1465758632, 1435118121).x), 1).x)).x).equals(Kla2().prope6).not()
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 20:17:18,683 [main:107] - replacing ({ prope13 ->
        prope17++
        prope19 = { prope13.resume(Unit) }
    }, Function1<Continuation<Unit>, Unit>)
2021-03-11 20:17:18,683 [main:50] - replacing { prope13 ->
        prope17++
        prope19 = { prope13.resume(Unit) }
    } Function1<Continuation<Unit>, Unit>
2021-03-11 20:17:18,683 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
