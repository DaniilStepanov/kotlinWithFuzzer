2021-03-11 23:30:01,264 [main:66] - Compilation checking started
2021-03-11 23:30:02,455 [main:112] - generating klass A text = interface A {
    val str: String
        get() = "OK"
}
2021-03-11 23:30:03,230 [main:302] - generating value of type = B false depth = 1
2021-03-11 23:30:03,231 [main:112] - generating klass B text = interface B : A
2021-03-11 23:30:03,463 [main:302] - generating value of type = Impl false depth = 3
2021-03-11 23:30:03,464 [main:112] - generating klass Impl text = class Impl : B
2021-03-11 23:30:03,468 [main:112] - generating klass B text = interface B : A
2021-03-11 23:30:03,711 [main:302] - generating value of type = Impl false depth = 1
2021-03-11 23:30:03,712 [main:112] - generating klass Impl text = class Impl : B
2021-03-11 23:30:03,713 [main:112] - generating klass Impl text = class Impl : B
2021-03-11 23:30:03,937 [main:45] - Trying to change 1 nodes
2021-03-11 23:30:04,066 [main:41] - AFTER TRY 0 res = interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str
2021-03-11 23:30:04,261 [main:112] - generating klass A text = interface A {
    val str: String
        get() = "OK"
}
2021-03-11 23:30:04,458 [main:302] - generating value of type = B false depth = 1
2021-03-11 23:30:04,458 [main:112] - generating klass B text = interface B : A
2021-03-11 23:30:04,622 [main:302] - generating value of type = Impl false depth = 3
2021-03-11 23:30:04,622 [main:112] - generating klass Impl text = class Impl : B
2021-03-11 23:30:04,624 [main:112] - generating klass B text = interface B : A
2021-03-11 23:30:04,787 [main:302] - generating value of type = Impl false depth = 1
2021-03-11 23:30:04,788 [main:112] - generating klass Impl text = class Impl : B
2021-03-11 23:30:04,788 [main:112] - generating klass Impl text = class Impl : B
2021-03-11 23:30:05,004 [main:43] - Try â„–0
2021-03-11 23:30:07,175 [main:69] - Trying to insert fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = fieldAccessedInsideChild
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    (0..4).map { Kla1() }
            }
        }
    )

    return "OK"
}
2021-03-11 23:30:07,261 [main:66] - Compilation checking started
2021-03-11 23:30:07,936 [main:103] - Trying to change 13 nodes
2021-03-11 23:30:07,936 [main:107] - replacing (4, Int)
2021-03-11 23:30:07,936 [main:50] - replacing 4 Int
2021-03-11 23:30:07,937 [main:54] - Getting value of type Int
2021-03-11 23:30:08,052 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:30:08,054 [main:58] - GENERATED VALUE OF TYPE Int = 1272444191
2021-03-11 23:30:08,055 [main:61] - GENERATED IS CALL =false
2021-03-11 23:30:08,549 [main:67] - randomType = LinkedHashMap<Impl, HashSet<Impl>>?
2021-03-11 23:30:08,646 [main:302] - generating value of type = LinkedHashMap<Impl, HashSet<Impl>> false depth = 0
2021-03-11 23:30:08,760 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Impl, HashSet<Impl>> = TODO()
2021-03-11 23:30:08,762 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Impl, HashSet<Impl>> = TODO()
2021-03-11 23:30:08,862 [main:95] - GENERATED = linkedMapOf<Impl, HashSet<Impl>>()
2021-03-11 23:30:09,166 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7a3a7f99]
2021-03-11 23:30:09,258 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:30:09,259 [main:78] - Generated call from random type = (linkedMapOf<Impl, HashSet<Impl>>())?.size.rotateRight(-129551631)
2021-03-11 23:30:09,261 [main:106] - GETTING Int from Impl
2021-03-11 23:30:09,282 [main:113] - Case = [public open val str: kotlin.String defined in Impl[PropertyDescriptorImpl@47f8088], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@145898f5]]
2021-03-11 23:30:09,282 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@145898f5]
2021-03-11 23:30:09,283 [main:117] - GENERATED CALL = (Impl()).str.toInt()
2021-03-11 23:30:09,283 [main:113] - Case = [public open val str: kotlin.String defined in Impl[PropertyDescriptorImpl@47f8088], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f7956b4]]
2021-03-11 23:30:09,283 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f7956b4]
2021-03-11 23:30:09,437 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:30:09,438 [main:117] - GENERATED CALL = (Impl()).str.compareTo(Impl().str, true)
2021-03-11 23:30:09,438 [main:113] - Case = [public open val str: kotlin.String defined in Impl[PropertyDescriptorImpl@47f8088], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@196845dd]]
2021-03-11 23:30:09,439 [main:117] - GENERATED CALL = (Impl()).str.length
2021-03-11 23:30:09,439 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Impl[DeserializedSimpleFunctionDescriptor@7f2717b3], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@168bf170]]
2021-03-11 23:30:09,439 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Impl[DeserializedSimpleFunctionDescriptor@7f2717b3]
2021-03-11 23:30:09,533 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:30:09,535 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@168bf170]
2021-03-11 23:30:09,631 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:30:09,632 [main:117] - GENERATED CALL = (Impl()).equals("ezhrx").compareTo(false)
2021-03-11 23:30:09,632 [main:114] - replacement of 4 of type Int is (Impl()).str.toInt()
2021-03-11 23:30:09,722 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:30:09,723 [main:66] - Compilation checking started
2021-03-11 23:30:10,148 [main:53] - Result = true
Text:
interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str

class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)

fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = fieldAccessedInsideChild
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    (0..(Impl()).str.toInt()).map { Kla1() }
            }
        }
    )

    return "OK"
}


2021-03-11 23:30:10,148 [main:107] - replacing (0..(Impl()).str.toInt(), IntRange)
2021-03-11 23:30:10,149 [main:50] - replacing 0..(Impl()).str.toInt() IntRange
2021-03-11 23:30:10,149 [main:54] - Getting value of type IntRange
2021-03-11 23:30:10,278 [main:302] - generating value of type = IntRange false depth = 0
2021-03-11 23:30:10,417 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-11 23:30:10,421 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-11 23:30:10,731 [main:302] - generating value of type = Int true depth = 3
2021-03-11 23:30:10,731 [main:302] - generating value of type = Int true depth = 3
2021-03-11 23:30:10,732 [main:95] - GENERATED = IntRange(110728388, -254628884)
2021-03-11 23:30:10,732 [main:58] - GENERATED VALUE OF TYPE IntRange = IntRange(110728388, -254628884)
2021-03-11 23:30:10,732 [main:61] - GENERATED IS CALL =true
2021-03-11 23:30:11,269 [main:67] - randomType = ArrayList<LinkedHashSet<Collection<String>>?>
2021-03-11 23:30:11,360 [main:302] - generating value of type = ArrayList<LinkedHashSet<Collection<String>>?> false depth = 0
2021-03-11 23:30:11,480 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: LinkedHashSet<Collection<String>>?): ArrayList<LkedHashSet<Collection<Strg>>?> = TODO()
2021-03-11 23:30:11,482 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: LinkedHashSet<Collection<String>>?): ArrayList<LkedHashSet<Collection<Strg>>?> = TODO()
2021-03-11 23:30:11,590 [main:302] - generating value of type = LinkedHashSet<Collection<String>> false depth = 3
2021-03-11 23:30:11,688 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Collection<String>): LkedHashSet<Collection<Strg>> = TODO()
2021-03-11 23:30:11,691 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Collection<String>): LkedHashSet<Collection<Strg>> = TODO()
2021-03-11 23:30:11,796 [main:302] - generating value of type = Collection<String> false depth = 6
2021-03-11 23:30:11,936 [main:43] - GENERATING CALL OF fun <E> buildList(builderAction: kotlin.collections.MutableList<String>.()->kotlin.Unit): Collection<Strg> = TODO()
2021-03-11 23:30:11,938 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildList(builderAction: kotlin.collections.MutableList<String>.()->kotlin.Unit): Collection<Strg> = TODO()
2021-03-11 23:30:12,173 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableList<String>, Unit> false depth = 9
2021-03-11 23:30:12,174 [main:302] - generating value of type = Unit false depth = 10
2021-03-11 23:30:12,289 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 23:30:12,291 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 23:30:12,480 [main:302] - generating value of type = Boolean true depth = 13
2021-03-11 23:30:12,480 [main:95] - GENERATED = require(true)
2021-03-11 23:30:12,481 [main:95] - GENERATED = buildList<String>({ require(true)})
2021-03-11 23:30:12,481 [main:95] - GENERATED = linkedSetOf<Collection<String>>(buildList<String>({ require(true)}))
2021-03-11 23:30:12,481 [main:95] - GENERATED = arrayListOf<LinkedHashSet<Collection<String>>?>(linkedSetOf<Collection<String>>(buildList<String>({ require(true)})))
2021-03-11 23:30:12,745 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@64d05e02]
2021-03-11 23:30:12,848 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:30:12,849 [main:78] - Generated call from random type = (arrayListOf<LinkedHashSet<Collection<String>>?>(linkedSetOf<Collection<String>>(buildList<String>({ require(true)})))).modCount.until(-97)
2021-03-11 23:30:12,850 [main:106] - GETTING IntRange from Impl
2021-03-11 23:30:12,873 [main:106] - GETTING IntRange from String
2021-03-11 23:30:12,903 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@196845dd], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@64d05e02]]
2021-03-11 23:30:12,904 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@64d05e02]
2021-03-11 23:30:12,995 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:30:12,996 [main:117] - GENERATED CALL = (Impl().str).length.until(58)
2021-03-11 23:30:12,996 [main:113] - Case = [public val kotlin.CharSequence.indices: kotlin.ranges.IntRange defined in kotlin.text[DeserializedPropertyDescriptor@2a2eb82e]]
2021-03-11 23:30:12,996 [main:117] - GENERATED CALL = (Impl().str).indices
2021-03-11 23:30:12,996 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@fe2822f], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@64d05e02]]
2021-03-11 23:30:12,996 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@fe2822f]
2021-03-11 23:30:13,086 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:30:13,087 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@64d05e02]
2021-03-11 23:30:13,174 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:30:13,175 [main:117] - GENERATED CALL = (Impl().str).compareTo("rnvvs").until(-63)
2021-03-11 23:30:13,175 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@fe2822f], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cc86309]]
2021-03-11 23:30:13,175 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@fe2822f]
2021-03-11 23:30:13,176 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cc86309]
2021-03-11 23:30:13,265 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:30:13,266 [main:117] - GENERATED CALL = (Impl().str).compareTo(Impl().str).rangeTo(-119)
2021-03-11 23:30:13,266 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@196845dd], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cc86309]]
2021-03-11 23:30:13,266 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cc86309]
2021-03-11 23:30:13,358 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:30:13,359 [main:117] - GENERATED CALL = (Impl().str).length.rangeTo(-84)
2021-03-11 23:30:13,359 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2024788a], public val kotlin.CharSequence.indices: kotlin.ranges.IntRange defined in kotlin.text[DeserializedPropertyDescriptor@2a2eb82e]]
2021-03-11 23:30:13,359 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2024788a]
2021-03-11 23:30:13,462 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:30:13,600 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:30:13,602 [main:117] - GENERATED CALL = (Impl().str).subSequence(1457230300, 1927393797).indices
2021-03-11 23:30:13,602 [main:114] - replacement of 0..(Impl()).str.toInt() of type IntRange is (Impl().str).length.until(58)
2021-03-11 23:30:13,718 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:30:13,719 [main:66] - Compilation checking started
2021-03-11 23:30:14,082 [main:53] - Result = true
Text:
interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str

class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)

fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = fieldAccessedInsideChild
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until(58)).map { Kla1() }
            }
        }
    )

    return "OK"
}


2021-03-11 23:30:14,082 [main:107] - replacing (fieldAccessedInsideChild, Int)
2021-03-11 23:30:14,082 [main:50] - replacing fieldAccessedInsideChild Int
2021-03-11 23:30:14,082 [main:54] - Getting value of type Int
2021-03-11 23:30:14,169 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:30:14,170 [main:58] - GENERATED VALUE OF TYPE Int = -2044548507
2021-03-11 23:30:14,170 [main:61] - GENERATED IS CALL =false
2021-03-11 23:30:14,171 [main:67] - randomType = A
2021-03-11 23:30:14,172 [main:106] - GETTING Int from Impl
2021-03-11 23:30:14,192 [main:113] - Case = [public open val str: kotlin.String defined in Impl[PropertyDescriptorImpl@47f8088], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@196845dd]]
2021-03-11 23:30:14,192 [main:117] - GENERATED CALL = (Impl()).str.length
2021-03-11 23:30:14,193 [main:113] - Case = [public open val str: kotlin.String defined in Impl[PropertyDescriptorImpl@47f8088], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f7956b4]]
2021-03-11 23:30:14,193 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f7956b4]
2021-03-11 23:30:14,281 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:30:14,390 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:30:14,391 [main:117] - GENERATED CALL = (Impl()).str.compareTo("wspii", true)
2021-03-11 23:30:14,391 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Impl[DeserializedSimpleFunctionDescriptor@7f2717b3], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@168bf170]]
2021-03-11 23:30:14,392 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Impl[DeserializedSimpleFunctionDescriptor@7f2717b3]
2021-03-11 23:30:14,495 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:30:14,496 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@168bf170]
2021-03-11 23:30:14,591 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:30:14,592 [main:117] - GENERATED CALL = (Impl()).equals("xcqma").compareTo(true)
2021-03-11 23:30:14,592 [main:113] - Case = [public open val str: kotlin.String defined in Impl[PropertyDescriptorImpl@47f8088], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@145898f5]]
2021-03-11 23:30:14,592 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@145898f5]
2021-03-11 23:30:14,593 [main:117] - GENERATED CALL = (Impl()).str.toInt()
2021-03-11 23:30:14,593 [main:114] - replacement of fieldAccessedInsideChild of type Int is (Impl()).str.toInt()
2021-03-11 23:30:14,681 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:30:14,682 [main:66] - Compilation checking started
2021-03-11 23:30:15,097 [main:53] - Result = true
Text:
interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str

class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)

fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until(58)).map { Kla1() }
            }
        }
    )

    return "OK"
}


2021-03-11 23:30:15,098 [main:107] - replacing (Kla1(), Kla1)
2021-03-11 23:30:15,098 [main:50] - replacing Kla1() Kla1
2021-03-11 23:30:15,098 [main:54] - Getting value of type Kla1
2021-03-11 23:30:15,207 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 23:30:15,207 [main:112] - generating klass Kla1 text = class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
2021-03-11 23:30:15,207 [main:58] - GENERATED VALUE OF TYPE Kla1 = 
2021-03-11 23:30:15,751 [main:67] - randomType = Function2<Char, Char?, Long>
2021-03-11 23:30:15,752 [main:106] - GETTING Kla1 from Impl
2021-03-11 23:30:15,776 [main:106] - GETTING Kla1 from String
2021-03-11 23:30:15,809 [main:111] - Cant find and generate replacement for Kla1() type Kla1
2021-03-11 23:30:15,810 [main:107] - replacing ("OK", String)
2021-03-11 23:30:15,810 [main:50] - replacing "OK" String
2021-03-11 23:30:15,810 [main:54] - Getting value of type String
2021-03-11 23:30:15,904 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:30:15,904 [main:58] - GENERATED VALUE OF TYPE String = "dlgsz"
2021-03-11 23:30:15,905 [main:61] - GENERATED IS CALL =false
2021-03-11 23:30:16,109 [main:67] - randomType = Short?
2021-03-11 23:30:16,213 [main:302] - generating value of type = Short true depth = 0
2021-03-11 23:30:16,276 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1b69ef9e]
2021-03-11 23:30:16,277 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d16cf46]
2021-03-11 23:30:16,277 [main:78] - Generated call from random type = (-23089)?.toChar().lowercase()
2021-03-11 23:30:16,277 [main:114] - replacement of "OK" of type String is (-23089)?.toChar().lowercase()
2021-03-11 23:30:16,362 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:30:16,362 [main:66] - Compilation checking started
2021-03-11 23:30:16,794 [main:53] - Result = true
Text:
interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str

class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)

fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until(58)).map { Kla1() }
            }
        }
    )

    return (-23089)?.toChar().lowercase()
}


2021-03-11 23:30:16,894 [main:141] - TRYING TO REPLACE CONSTANT 58
2021-03-11 23:30:16,987 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PARENTHESIZED)
2021-03-11 23:30:16,988 [main:66] - Compilation checking started
2021-03-11 23:30:17,330 [main:53] - Result = true
Text:
interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str

class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)

fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
            }
        }
    )

    return (-23089)?.toChar().lowercase()
}


2021-03-11 23:30:17,330 [main:141] - TRYING TO REPLACE CONSTANT 23089
2021-03-11 23:30:17,423 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 23:30:17,424 [main:66] - Compilation checking started
2021-03-11 23:30:17,640 [main:49] - Result = false
Text:
interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str

class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)

fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
            }
        }
    )

    return (length)?.toChar().lowercase()
}


2021-03-11 23:30:17,641 [main:41] - AFTER TRY 1 res = interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str

class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)

fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
            }
        }
    )

    return (-23089)?.toChar().lowercase()
}


2021-03-11 23:30:17,833 [main:112] - generating klass A text = interface A {
    val str: String
        get() = "OK"
}
2021-03-11 23:30:18,063 [main:112] - generating klass B text = interface B : A
2021-03-11 23:30:18,269 [main:302] - generating value of type = Impl false depth = 1
2021-03-11 23:30:18,269 [main:112] - generating klass Impl text = class Impl : B
2021-03-11 23:30:18,270 [main:112] - generating klass Impl text = class Impl : B
2021-03-11 23:30:18,270 [main:112] - generating klass Kla0 text = class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)
2021-03-11 23:30:18,357 [main:194] - Type params = []
2021-03-11 23:30:18,443 [main:302] - generating value of type = Int true depth = 1
2021-03-11 23:30:18,443 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Kla0, Unit> false depth = 1
2021-03-11 23:30:18,443 [main:302] - generating value of type = Unit false depth = 2
2021-03-11 23:30:18,534 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 23:30:18,536 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 23:30:18,813 [main:302] - generating value of type = Int true depth = 5
2021-03-11 23:30:18,813 [main:302] - generating value of type = Function1<Int, Unit> false depth = 5
2021-03-11 23:30:18,814 [main:302] - generating value of type = Unit false depth = 6
2021-03-11 23:30:18,932 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 23:30:18,934 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 23:30:19,231 [main:302] - generating value of type = Boolean true depth = 9
2021-03-11 23:30:19,232 [main:302] - generating value of type = Function0<Any> false depth = 9
2021-03-11 23:30:19,232 [main:302] - generating value of type = Any false depth = 10
2021-03-11 23:30:19,232 [main:95] - GENERATED = require(true, { "fmsqw"})
2021-03-11 23:30:19,233 [main:95] - GENERATED = repeat(2056142132, {a: Int -> require(true, { "fmsqw"})})
2021-03-11 23:30:19,235 [main:112] - generating klass Kla1 text = class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
2021-03-11 23:30:19,235 [main:112] - generating klass Kla2 text = class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
            }
2021-03-11 23:30:19,465 [main:43] - Try â„–1
2021-03-11 23:30:38,224 [main:48] - Already checked
2021-03-11 23:30:43,905 [main:69] - Trying to insert override fun resumeWith(prope6: Result<Any?>) {
        prope6.exceptionOrNull()?.let(x)
    }
2021-03-11 23:30:44,004 [main:66] - Compilation checking started
2021-03-11 23:30:45,216 [main:103] - Trying to change 309 nodes
2021-03-11 23:30:45,216 [main:107] - replacing (prope4, String)
2021-03-11 23:30:45,218 [main:50] - replacing prope4 String
2021-03-11 23:30:45,218 [main:54] - Getting value of type String
2021-03-11 23:30:45,400 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:30:45,405 [main:58] - GENERATED VALUE OF TYPE String = "xianz"
2021-03-11 23:30:45,405 [main:61] - GENERATED IS CALL =false
2021-03-11 23:30:45,848 [main:67] - randomType = LinkedHashMap<Int, Char?>
2021-03-11 23:30:46,048 [main:302] - generating value of type = LinkedHashMap<Int, Char?> false depth = 0
2021-03-11 23:30:46,290 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Int, Char?> = TODO()
2021-03-11 23:30:46,302 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Int, Char?> = TODO()
2021-03-11 23:30:46,485 [main:95] - GENERATED = linkedMapOf<Int, Char?>()
2021-03-11 23:30:46,657 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]
2021-03-11 23:30:46,837 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:30:46,842 [main:78] - Generated call from random type = (linkedMapOf<Int, Char?>()).size.toString(1191725013)
2021-03-11 23:30:46,844 [main:106] - GETTING String from Impl
2021-03-11 23:30:46,865 [main:113] - Case = [public open val str: kotlin.String defined in Impl[PropertyDescriptorImpl@7fda194f], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b702497]]
2021-03-11 23:30:46,865 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b702497]
2021-03-11 23:30:46,865 [main:117] - GENERATED CALL = (Impl()).str.trimEnd()
2021-03-11 23:30:46,866 [main:113] - Case = [public open val str: kotlin.String defined in Impl[PropertyDescriptorImpl@7fda194f], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79e488ae]]
2021-03-11 23:30:46,866 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79e488ae]
2021-03-11 23:30:46,866 [main:117] - GENERATED CALL = (Impl()).str.toLowerCase()
2021-03-11 23:30:46,866 [main:113] - Case = [public open val str: kotlin.String defined in Impl[PropertyDescriptorImpl@7fda194f], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cf45d40]]
2021-03-11 23:30:46,866 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cf45d40]
2021-03-11 23:30:46,866 [main:117] - GENERATED CALL = (Impl()).str.capitalize()
2021-03-11 23:30:46,866 [main:113] - Case = [public open val str: kotlin.String defined in Impl[PropertyDescriptorImpl@7fda194f], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c9e5158]]
2021-03-11 23:30:46,866 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c9e5158]
2021-03-11 23:30:46,867 [main:117] - GENERATED CALL = (Impl()).str.take((-23089))
2021-03-11 23:30:46,867 [main:113] - Case = [public open val str: kotlin.String defined in Impl[PropertyDescriptorImpl@7fda194f], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a11e51f]]
2021-03-11 23:30:46,867 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a11e51f]
2021-03-11 23:30:47,034 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:30:47,039 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:30:47,044 [main:117] - GENERATED CALL = (Impl()).str.dropWhile({a: Char -> false})
2021-03-11 23:30:47,044 [main:113] - Case = [public open val str: kotlin.String defined in Impl[PropertyDescriptorImpl@7fda194f], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56689ac7]]
2021-03-11 23:30:47,044 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56689ac7]
2021-03-11 23:30:47,044 [main:117] - GENERATED CALL = (Impl()).str.substringBeforeLast((-23089)?.toChar(), (Impl()).str)
2021-03-11 23:30:47,044 [main:113] - Case = [public open val str: kotlin.String defined in Impl[PropertyDescriptorImpl@7fda194f], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fb8b61e]]
2021-03-11 23:30:47,044 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fb8b61e]
2021-03-11 23:30:47,206 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:30:47,448 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:30:47,617 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 23:30:47,623 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 23:30:47,990 [main:302] - generating value of type = Int true depth = 3
2021-03-11 23:30:47,994 [main:95] - GENERATED = StringBuilder(988116539)
2021-03-11 23:30:47,995 [main:117] - GENERATED CALL = (Impl()).str.replaceRange(-2070122306, val prope0 = (Impl()).str.toInt()
2021-03-11 23:30:47,995 [main:113] - Case = [public open val str: kotlin.String defined in Impl[PropertyDescriptorImpl@7fda194f], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46d6a8ee]]
2021-03-11 23:30:47,996 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46d6a8ee]
2021-03-11 23:30:48,162 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:30:48,167 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:30:48,172 [main:117] - GENERATED CALL = (Impl()).str.filter({a: Char -> true})
2021-03-11 23:30:48,173 [main:113] - Case = [public open val str: kotlin.String defined in Impl[PropertyDescriptorImpl@7fda194f], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d388326]]
2021-03-11 23:30:48,173 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d388326]
2021-03-11 23:30:48,173 [main:117] - GENERATED CALL = (Impl()).str.decapitalize()
2021-03-11 23:30:48,173 [main:113] - Case = [public open val str: kotlin.String defined in Impl[PropertyDescriptorImpl@7fda194f], public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bfe9b5a]]
2021-03-11 23:30:48,173 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bfe9b5a]
2021-03-11 23:30:48,174 [main:117] - GENERATED CALL = (Impl()).str.drop((Impl().str).length)
2021-03-11 23:30:48,174 [main:114] - replacement of prope4 of type String is (Impl()).str.capitalize()
2021-03-11 23:30:48,340 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:30:48,340 [main:66] - Compilation checking started
2021-03-11 23:30:48,814 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str

class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)

fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
            }
        }
    )

    return (-23089)?.toChar().lowercase()
}

interface Kla3 {
    suspend fun fu4()
}

class Kla4 {
    var prope4 = "FAIL 1"

    suspend inline fun fu5(noinline c: suspend Kla4.() -> Unit)  {
        val prope11 : suspend Kla4.() -> Unit = { c() }
        prope11()
    }

    suspend inline fun fu6(noinline c: suspend Kla4.() -> Unit) {
        c.startCoroutine(this, Kla5)
    }

    suspend inline fun fu7(noinline c: suspend Kla4.() -> Unit) {
        c()
    }

    suspend inline fun fu8(noinline c: suspend Kla4.() -> Unit) {
        val prope12 = object: Kla3 {
            override suspend fun fu4() {
                c()
            }
        }
        prope12.fu4()
    }
}

fun fu0(prope5: Kla4, c: suspend Kla4.() -> Unit) {
    c.startCoroutine(prope5, Kla5)
}

suspend fun fu1() = "OK"

fun box843(): String {
    val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
val prope5 = Kla4()
    fu0(prope5) {
        fu5 {
            prope4 = fu1()
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 2"
    fu0(prope5) {
        fu6 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 3"
    fu0(prope5) {
        fu7 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 4"
    fu0(prope5) {
        fu8 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 5"
    fu0(prope5) {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 6"
    fu0(prope5) {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 7"
    fu0(prope5) {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 8"
    fu0(prope5) {
        fu8 {
            fu8 {
                fu8 {
                    fu8 {
                        fu8 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.(Impl()).str.capitalize()
    prope5.prope4 = "FAIL 9"
    fu0(prope5) {
        fu5 {
            fu6 {
                fu7 {
                    fu8 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope5.prope4
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu9(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope13: CoroutineStackFrame? = c
        while (prope13 != null) {
            prope7.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope2 = Kla8()

class Kla9 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu14() {
        prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope10 = {
            prope3.prope9 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:30:48,818 [main:107] - replacing ({
                fu7 {
                    fu7 {
                        fu7 {
                            prope4 = fu1()
                        }
                    }
                }
            }, [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit>)
2021-03-11 23:30:48,819 [main:50] - replacing {
                fu7 {
                    fu7 {
                        fu7 {
                            prope4 = fu1()
                        }
                    }
                }
            } [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit>
2021-03-11 23:30:48,819 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit>
2021-03-11 23:30:48,994 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> false depth = 0
2021-03-11 23:30:48,999 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:30:49,168 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 23:30:49,174 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 23:30:49,673 [main:302] - generating value of type = Any false depth = 4
2021-03-11 23:30:49,673 [main:95] - GENERATED = print("pnsdq")
2021-03-11 23:30:49,674 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> = {a: Kla4 -> print("pnsdq")}
2021-03-11 23:30:49,674 [main:61] - GENERATED IS CALL =false
2021-03-11 23:30:49,929 [main:67] - randomType = HashMap<Kla5, Int>
2021-03-11 23:30:50,093 [main:302] - generating value of type = HashMap<Kla5, Int> false depth = 0
2021-03-11 23:30:50,302 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(): HashMap<Kla5, Int> = TODO()
2021-03-11 23:30:50,308 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(): HashMap<Kla5, Int> = TODO()
2021-03-11 23:30:50,505 [main:95] - GENERATED = hashMapOf<Kla5, Int>()
2021-03-11 23:30:50,635 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from Int
2021-03-11 23:30:50,690 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from [@kotlin.ExtensionFunctionType] Function1<Kla0, Unit>
2021-03-11 23:30:50,721 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from Int
2021-03-11 23:30:50,725 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from Impl
2021-03-11 23:30:50,747 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from IntRange
2021-03-11 23:30:50,780 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from Int
2021-03-11 23:30:50,784 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from Kla0
2021-03-11 23:30:50,808 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from Int
2021-03-11 23:30:50,812 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from Char
2021-03-11 23:30:50,854 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from String
2021-03-11 23:30:50,894 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from IntRange
2021-03-11 23:30:50,898 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from Impl
2021-03-11 23:30:50,902 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from String
2021-03-11 23:30:50,903 [main:114] - replacement of {
                fu7 {
                    fu7 {
                        fu7 {
                            prope4 = fu1()
                        }
                    }
                }
            } of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> is {a: Kla4 -> print("pnsdq")}
2021-03-11 23:30:51,089 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 23:30:51,089 [main:66] - Compilation checking started
2021-03-11 23:30:51,565 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str

class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)

fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
            }
        }
    )

    return (-23089)?.toChar().lowercase()
}

interface Kla3 {
    suspend fun fu4()
}

class Kla4 {
    var prope4 = "FAIL 1"

    suspend inline fun fu5(noinline c: suspend Kla4.() -> Unit)  {
        val prope11 : suspend Kla4.() -> Unit = { c() }
        prope11()
    }

    suspend inline fun fu6(noinline c: suspend Kla4.() -> Unit) {
        c.startCoroutine(this, Kla5)
    }

    suspend inline fun fu7(noinline c: suspend Kla4.() -> Unit) {
        c()
    }

    suspend inline fun fu8(noinline c: suspend Kla4.() -> Unit) {
        val prope12 = object: Kla3 {
            override suspend fun fu4() {
                c()
            }
        }
        prope12.fu4()
    }
}

fun fu0(prope5: Kla4, c: suspend Kla4.() -> Unit) {
    c.startCoroutine(prope5, Kla5)
}

suspend fun fu1() = "OK"

fun box843(): String {
    val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
val prope5 = Kla4()
    fu0(prope5) {
        fu5 {
            prope4 = fu1()
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 2"
    fu0(prope5) {
        fu6 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 3"
    fu0(prope5) {
        fu7 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 4"
    fu0(prope5) {
        fu8 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 5"
    fu0(prope5) {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 6"
    fu0(prope5) {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 7"
    fu0(prope5) {
        fu7 {
            fu7 {a: Kla4 -> print("pnsdq")}
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 8"
    fu0(prope5) {
        fu8 {
            fu8 {
                fu8 {
                    fu8 {
                        fu8 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 9"
    fu0(prope5) {
        fu5 {
            fu6 {
                fu7 {
                    fu8 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope5.prope4
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu9(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope13: CoroutineStackFrame? = c
        while (prope13 != null) {
            prope7.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope2 = Kla8()

class Kla9 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu14() {
        prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope10 = {
            prope3.prope9 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:30:51,569 [main:107] - replacing (checkFinished, Boolean)
2021-03-11 23:30:51,570 [main:50] - replacing checkFinished Boolean
2021-03-11 23:30:51,570 [main:54] - Getting value of type Boolean
2021-03-11 23:30:51,798 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:30:51,806 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 23:30:51,806 [main:61] - GENERATED IS CALL =false
2021-03-11 23:30:52,116 [main:67] - randomType = ULong
2021-03-11 23:30:52,311 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 23:30:52,360 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.ULong): kotlin.ranges.ULongRange defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@339a0be4]
2021-03-11 23:30:52,567 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 23:30:52,575 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.ULongRange[DeserializedSimpleFunctionDescriptor@32a26649]
2021-03-11 23:30:52,798 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:30:52,799 [main:78] - Generated call from random type = (84512992933685150.toULong()).rangeTo(6135207752124642704.toULong()).equals("mrcdy")
2021-03-11 23:30:52,801 [main:106] - GETTING Boolean from Int
2021-03-11 23:30:52,859 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@160f519d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@595f1b3b]]
2021-03-11 23:30:52,860 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@160f519d]
2021-03-11 23:30:53,110 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:30:53,115 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@595f1b3b]
2021-03-11 23:30:53,300 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:30:53,300 [main:117] - GENERATED CALL = ((Impl().str).length).compareTo(-530796461).equals("duzmj")
2021-03-11 23:30:53,300 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@fd5b66d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1189b5f2]]
2021-03-11 23:30:53,300 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@fd5b66d]
2021-03-11 23:30:53,300 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1189b5f2]
2021-03-11 23:30:53,497 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:30:53,497 [main:117] - GENERATED CALL = ((Impl().str).length).toLong().equals("ajnph")
2021-03-11 23:30:53,497 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@229de6de], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e505177]]
2021-03-11 23:30:53,498 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@229de6de]
2021-03-11 23:30:53,498 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e505177]
2021-03-11 23:30:53,498 [main:117] - GENERATED CALL = ((Impl().str).length).toChar().isISOControl()
2021-03-11 23:30:53,498 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1953f27f], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@d3c5171]]
2021-03-11 23:30:53,498 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1953f27f]
2021-03-11 23:30:53,498 [main:149] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@d3c5171]
2021-03-11 23:30:53,498 [main:117] - GENERATED CALL = ((Impl().str).length).toFloat().isNaN()
2021-03-11 23:30:53,498 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@595f1b3b], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@51c48682]]
2021-03-11 23:30:53,498 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@595f1b3b]
2021-03-11 23:30:53,694 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:30:53,695 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@51c48682]
2021-03-11 23:30:53,863 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:30:53,868 [main:117] - GENERATED CALL = ((Impl().str).length).equals("czuvv").and(false)
2021-03-11 23:30:53,868 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5bb3e0ad], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6dce0d29]]
2021-03-11 23:30:53,868 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5bb3e0ad]
2021-03-11 23:30:54,065 [main:302] - generating value of type = Double true depth = 0
2021-03-11 23:30:54,071 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6dce0d29]
2021-03-11 23:30:54,231 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:30:54,232 [main:117] - GENERATED CALL = ((Impl().str).length).div(0.9135147798113009).equals("pnrmg")
2021-03-11 23:30:54,232 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5bb3e0ad], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@720bb379]]
2021-03-11 23:30:54,232 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5bb3e0ad]
2021-03-11 23:30:54,418 [main:302] - generating value of type = Double true depth = 0
2021-03-11 23:30:54,423 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@720bb379]
2021-03-11 23:30:54,424 [main:117] - GENERATED CALL = ((Impl().str).length).div(0.1990263973814036).isInfinite()
2021-03-11 23:30:54,424 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@753cd6fc], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@b382c22]]
2021-03-11 23:30:54,424 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@753cd6fc]
2021-03-11 23:30:54,424 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@b382c22]
2021-03-11 23:30:54,424 [main:117] - GENERATED CALL = ((Impl().str).length).toDouble().isNaN()
2021-03-11 23:30:54,424 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5af1fa64], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@4b8a7fff]]
2021-03-11 23:30:54,424 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5af1fa64]
2021-03-11 23:30:54,424 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@4b8a7fff]
2021-03-11 23:30:54,673 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:30:54,673 [main:117] - GENERATED CALL = ((Impl().str).length).toByte().equals("rshrx")
2021-03-11 23:30:54,673 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@753cd6fc], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@29318337]]
2021-03-11 23:30:54,674 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@753cd6fc]
2021-03-11 23:30:54,674 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@29318337]
2021-03-11 23:30:54,674 [main:117] - GENERATED CALL = ((Impl().str).length).toDouble().isFinite()
2021-03-11 23:30:54,674 [main:114] - replacement of checkFinished of type Boolean is ((Impl().str).length).toDouble().isFinite()
2021-03-11 23:30:54,888 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:30:54,889 [main:66] - Compilation checking started
2021-03-11 23:30:55,393 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str

class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)

fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
            }
        }
    )

    return (-23089)?.toChar().lowercase()
}

interface Kla3 {
    suspend fun fu4()
}

class Kla4 {
    var prope4 = "FAIL 1"

    suspend inline fun fu5(noinline c: suspend Kla4.() -> Unit)  {
        val prope11 : suspend Kla4.() -> Unit = { c() }
        prope11()
    }

    suspend inline fun fu6(noinline c: suspend Kla4.() -> Unit) {
        c.startCoroutine(this, Kla5)
    }

    suspend inline fun fu7(noinline c: suspend Kla4.() -> Unit) {
        c()
    }

    suspend inline fun fu8(noinline c: suspend Kla4.() -> Unit) {
        val prope12 = object: Kla3 {
            override suspend fun fu4() {
                c()
            }
        }
        prope12.fu4()
    }
}

fun fu0(prope5: Kla4, c: suspend Kla4.() -> Unit) {
    c.startCoroutine(prope5, Kla5)
}

suspend fun fu1() = "OK"

fun box843(): String {
    val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
val prope5 = Kla4()
    fu0(prope5) {
        fu5 {
            prope4 = fu1()
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 2"
    fu0(prope5) {
        fu6 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 3"
    fu0(prope5) {
        fu7 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 4"
    fu0(prope5) {
        fu8 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 5"
    fu0(prope5) {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 6"
    fu0(prope5) {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 7"
    fu0(prope5) {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 8"
    fu0(prope5) {
        fu8 {
            fu8 {
                fu8 {
                    fu8 {
                        fu8 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 9"
    fu0(prope5) {
        fu5 {
            fu6 {
                fu7 {
                    fu8 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope5.prope4
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu9(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope13: CoroutineStackFrame? = c
        while (prope13 != null) {
            prope7.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope2 = Kla8()

class Kla9 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu14() {
        prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (((Impl().str).length).toDouble().isFinite() && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope10 = {
            prope3.prope9 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:30:55,397 [main:107] - replacing (prope5.prope4, String)
2021-03-11 23:30:55,399 [main:50] - replacing prope5.prope4 String
2021-03-11 23:30:55,399 [main:54] - Getting value of type String
2021-03-11 23:30:55,589 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:30:55,594 [main:58] - GENERATED VALUE OF TYPE String = "zlcod"
2021-03-11 23:30:55,594 [main:61] - GENERATED IS CALL =false
2021-03-11 23:30:56,835 [main:67] - randomType = Function1<Pair<UByte, Int>, Sequence<Float>>
2021-03-11 23:30:56,835 [main:106] - GETTING String from String
2021-03-11 23:30:56,864 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2024788a], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29eb90f]]
2021-03-11 23:30:56,865 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2024788a]
2021-03-11 23:30:57,046 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:30:57,051 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29eb90f]
2021-03-11 23:30:57,217 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 23:30:57,418 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 23:30:57,424 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 23:30:58,126 [main:302] - generating value of type = String true depth = 3
2021-03-11 23:30:58,131 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-11 23:30:58,326 [main:43] - GENERATING CALL OF fun <T> setOfNotNull(element: RegexOption): Set<RegexOption> = TODO()
2021-03-11 23:30:58,334 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOfNotNull(element: RegexOption): Set<RegexOption> = TODO()
2021-03-11 23:30:58,526 [main:302] - generating value of type = RegexOption false depth = 6
2021-03-11 23:30:58,534 [main:95] - GENERATED = setOfNotNull<RegexOption>(kotlin.text.RegexOption.MULTILINE)
2021-03-11 23:30:58,535 [main:95] - GENERATED = Regex("njnqa", setOfNotNull<RegexOption>(kotlin.text.RegexOption.MULTILINE))
2021-03-11 23:30:58,716 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-11 23:30:58,721 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 23:30:58,922 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 23:30:58,929 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 23:30:59,281 [main:302] - generating value of type = CharSequence false depth = 4
2021-03-11 23:30:59,289 [main:95] - GENERATED = StringBuilder("yvkxs")
2021-03-11 23:30:59,290 [main:117] - GENERATED CALL = ((Impl()).str).subSequence((-23089), 1159750785).replace(Regex("njnqa", setOfNotNull<RegexOption>(kotlin.text.RegexOption.MULTILINE)), {a: MatchResult -> StringBuilder("yvkxs")})
2021-03-11 23:30:59,290 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@196845dd], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]]
2021-03-11 23:30:59,290 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]
2021-03-11 23:30:59,290 [main:117] - GENERATED CALL = ((Impl()).str).length.toString(-23089)
2021-03-11 23:30:59,291 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ce1087]]
2021-03-11 23:30:59,291 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ce1087]
2021-03-11 23:30:59,291 [main:117] - GENERATED CALL = ((Impl()).str).replaceAfterLast((-23089)?.toChar(), (Impl().str), (Impl()).str)
2021-03-11 23:30:59,291 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54ce64a]]
2021-03-11 23:30:59,291 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54ce64a]
2021-03-11 23:30:59,445 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:30:59,453 [main:117] - GENERATED CALL = ((Impl()).str).removePrefix("pwkqb")
2021-03-11 23:30:59,453 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21d963f8]]
2021-03-11 23:30:59,453 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21d963f8]
2021-03-11 23:30:59,603 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:30:59,611 [main:117] - GENERATED CALL = ((Impl()).str).removeSuffix(StringBuilder())
2021-03-11 23:30:59,611 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@fe2822f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]]
2021-03-11 23:30:59,611 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@fe2822f]
2021-03-11 23:30:59,611 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]
2021-03-11 23:30:59,612 [main:117] - GENERATED CALL = ((Impl()).str).compareTo((Impl().str)).toString(val prope0 = (Impl()).str.toInt()
2021-03-11 23:30:59,612 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2024788a], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74cc81b8]]
2021-03-11 23:30:59,612 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2024788a]
2021-03-11 23:30:59,768 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:30:59,773 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74cc81b8]
2021-03-11 23:30:59,924 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:30:59,929 [main:117] - GENERATED CALL = ((Impl()).str).subSequence((-23089), -2025987173).substring(-48000145, -23089)
2021-03-11 23:30:59,930 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@403d5314]]
2021-03-11 23:30:59,930 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@403d5314]
2021-03-11 23:31:00,097 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:31:00,275 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:31:00,281 [main:117] - GENERATED CALL = ((Impl()).str).replaceBeforeLast('ë‰»', (Impl()).str, "ftgmx")
2021-03-11 23:31:00,281 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f00803f]]
2021-03-11 23:31:00,281 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f00803f]
2021-03-11 23:31:00,456 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:31:00,463 [main:117] - GENERATED CALL = ((Impl()).str).replaceAfter((-23089)?.toChar(), "wqyiv", (Impl()).str)
2021-03-11 23:31:00,463 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@726216bd]]
2021-03-11 23:31:00,463 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@726216bd]
2021-03-11 23:31:00,640 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:31:00,646 [main:117] - GENERATED CALL = ((Impl()).str).replaceIndent("mwfvt")
2021-03-11 23:31:00,647 [main:114] - replacement of prope5.prope4 of type String is ((Impl()).str).compareTo((Impl().str)).toString(val prope0 = (Impl()).str.toInt()
2021-03-11 23:31:00,796 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 23:31:00,796 [main:66] - Compilation checking started
2021-03-11 23:31:00,804 [main:71] - Wrong syntax or breaks conditions
2021-03-11 23:31:00,805 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str

class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)

fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
            }
        }
    )

    return (-23089)?.toChar().lowercase()
}

interface Kla3 {
    suspend fun fu4()
}

class Kla4 {
    var prope4 = "FAIL 1"

    suspend inline fun fu5(noinline c: suspend Kla4.() -> Unit)  {
        val prope11 : suspend Kla4.() -> Unit = { c() }
        prope11()
    }

    suspend inline fun fu6(noinline c: suspend Kla4.() -> Unit) {
        c.startCoroutine(this, Kla5)
    }

    suspend inline fun fu7(noinline c: suspend Kla4.() -> Unit) {
        c()
    }

    suspend inline fun fu8(noinline c: suspend Kla4.() -> Unit) {
        val prope12 = object: Kla3 {
            override suspend fun fu4() {
                c()
            }
        }
        prope12.fu4()
    }
}

fun fu0(prope5: Kla4, c: suspend Kla4.() -> Unit) {
    c.startCoroutine(prope5, Kla5)
}

suspend fun fu1() = "OK"

fun box843(): String {
    val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
val prope5 = Kla4()
    fu0(prope5) {
        fu5 {
            prope4 = fu1()
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 2"
    fu0(prope5) {
        fu6 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 3"
    fu0(prope5) {
        fu7 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return ((Impl()).str).compareTo((Impl().str)).toString(val prope0 = (Impl()).str.toInt()
    prope5.prope4 = "FAIL 4"
    fu0(prope5) {
        fu8 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 5"
    fu0(prope5) {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 6"
    fu0(prope5) {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 7"
    fu0(prope5) {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 8"
    fu0(prope5) {
        fu8 {
            fu8 {
                fu8 {
                    fu8 {
                        fu8 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 9"
    fu0(prope5) {
        fu5 {
            fu6 {
                fu7 {
                    fu8 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope5.prope4
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu9(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope13: CoroutineStackFrame? = c
        while (prope13 != null) {
            prope7.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope2 = Kla8()

class Kla9 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu14() {
        prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope10 = {
            prope3.prope9 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:31:00,808 [main:107] - replacing (Kla9(), Kla9)
2021-03-11 23:31:00,808 [main:50] - replacing Kla9() Kla9
2021-03-11 23:31:00,808 [main:54] - Getting value of type Kla9
2021-03-11 23:31:00,968 [main:302] - generating value of type = Kla9 false depth = 0
2021-03-11 23:31:00,972 [main:112] - generating klass Kla9 text = class Kla9 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu14() {
        prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 23:31:00,973 [main:58] - GENERATED VALUE OF TYPE Kla9 = Kla9()
2021-03-11 23:31:00,973 [main:61] - GENERATED IS CALL =true
2021-03-11 23:31:00,983 [main:67] - randomType = Int
2021-03-11 23:31:01,130 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:31:01,174 [main:106] - GETTING Kla9 from [@kotlin.ExtensionFunctionType] Function1<Kla0, Unit>
2021-03-11 23:31:01,193 [main:106] - GETTING Kla9 from Int
2021-03-11 23:31:01,225 [main:106] - GETTING Kla9 from IntRange
2021-03-11 23:31:01,248 [main:106] - GETTING Kla9 from Impl
2021-03-11 23:31:01,260 [main:106] - GETTING Kla9 from Int
2021-03-11 23:31:01,260 [main:106] - GETTING Kla9 from String
2021-03-11 23:31:01,277 [main:106] - GETTING Kla9 from Int
2021-03-11 23:31:01,278 [main:106] - GETTING Kla9 from Impl
2021-03-11 23:31:01,278 [main:106] - GETTING Kla9 from IntRange
2021-03-11 23:31:01,279 [main:106] - GETTING Kla9 from String
2021-03-11 23:31:01,280 [main:106] - GETTING Kla9 from Kla0
2021-03-11 23:31:01,298 [main:106] - GETTING Kla9 from Char
2021-03-11 23:31:01,318 [main:106] - GETTING Kla9 from Int
2021-03-11 23:31:01,318 [main:114] - replacement of Kla9() of type Kla9 is Kla9()
2021-03-11 23:31:01,462 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 23:31:01,466 [main:107] - replacing (0, Int)
2021-03-11 23:31:01,467 [main:50] - replacing 0 Int
2021-03-11 23:31:01,467 [main:54] - Getting value of type Int
2021-03-11 23:31:01,628 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:31:01,634 [main:58] - GENERATED VALUE OF TYPE Int = 1025208302
2021-03-11 23:31:01,634 [main:61] - GENERATED IS CALL =false
2021-03-11 23:31:02,651 [main:67] - randomType = Kla7<Array<Kla5?>?>?
2021-03-11 23:31:02,811 [main:302] - generating value of type = Kla7<Array<Kla5?>?> false depth = 0
2021-03-11 23:31:02,816 [main:112] - generating klass Kla7 text = abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu9(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 23:31:03,341 [main:302] - generating value of type = Kla10 false depth = 2
2021-03-11 23:31:03,346 [main:112] - generating klass Kla10 text = object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope10 = {
            prope3.prope9 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}
2021-03-11 23:31:03,368 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla7[DeserializedSimpleFunctionDescriptor@23618b4f]
2021-03-11 23:31:03,564 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:31:03,564 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@168bf170]
2021-03-11 23:31:03,714 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:31:03,719 [main:78] - Generated call from random type = (Kla10)?.equals("nsgbn").compareTo(true)
2021-03-11 23:31:03,720 [main:106] - GETTING Int from IntRange
2021-03-11 23:31:03,742 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@1ad4f4dc], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7a3a7f99]]
2021-03-11 23:31:03,743 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7a3a7f99]
2021-03-11 23:31:03,890 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:31:03,895 [main:117] - GENERATED CALL = ((Impl().str).length.until((-23089))).first.rotateRight(-214980426)
2021-03-11 23:31:03,895 [main:113] - Case = [public final val step: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@47100ad2]]
2021-03-11 23:31:03,895 [main:117] - GENERATED CALL = ((Impl().str).length.until((-23089))).step
2021-03-11 23:31:03,896 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@1ad4f4dc], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@22f62839]]
2021-03-11 23:31:03,896 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@22f62839]
2021-03-11 23:31:03,896 [main:117] - GENERATED CALL = ((Impl().str).length.until((-23089))).first.countTrailingZeroBits()
2021-03-11 23:31:03,896 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@728312a3]]
2021-03-11 23:31:03,896 [main:117] - GENERATED CALL = ((Impl().str).length.until((-23089))).first
2021-03-11 23:31:03,897 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.max(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@47096141]]
2021-03-11 23:31:03,897 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.max(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@47096141]
2021-03-11 23:31:03,897 [main:117] - GENERATED CALL = ((Impl().str).length.until((-23089))).max()
2021-03-11 23:31:03,897 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@1ad4f4dc], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@499a74c4]]
2021-03-11 23:31:03,897 [main:117] - GENERATED CALL = ((Impl().str).length.until((-23089))).first.absoluteValue
2021-03-11 23:31:03,897 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@1ad4f4dc], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1526b9cd]]
2021-03-11 23:31:03,897 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1526b9cd]
2021-03-11 23:31:03,898 [main:117] - GENERATED CALL = ((Impl().str).length.until((-23089))).first.inc()
2021-03-11 23:31:03,898 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@587b1309], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@21bfe97]]
2021-03-11 23:31:03,898 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@21bfe97]
2021-03-11 23:31:04,051 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 23:31:04,056 [main:117] - GENERATED CALL = ((Impl().str).length.until((-23089))).endInclusive.plus(-127)
2021-03-11 23:31:04,056 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@587b1309], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61b1bb0e]]
2021-03-11 23:31:04,056 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61b1bb0e]
2021-03-11 23:31:04,057 [main:117] - GENERATED CALL = ((Impl().str).length.until((-23089))).endInclusive.unaryMinus()
2021-03-11 23:31:04,057 [main:113] - Case = [public open val start: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@47f3ba7e]]
2021-03-11 23:31:04,057 [main:117] - GENERATED CALL = ((Impl().str).length.until((-23089))).start
2021-03-11 23:31:04,057 [main:114] - replacement of 0 of type Int is ((Impl().str).length.until((-23089))).first
2021-03-11 23:31:04,205 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:31:04,205 [main:66] - Compilation checking started
2021-03-11 23:31:04,804 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str

class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)

fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
            }
        }
    )

    return (-23089)?.toChar().lowercase()
}

interface Kla3 {
    suspend fun fu4()
}

class Kla4 {
    var prope4 = "FAIL 1"

    suspend inline fun fu5(noinline c: suspend Kla4.() -> Unit)  {
        val prope11 : suspend Kla4.() -> Unit = { c() }
        prope11()
    }

    suspend inline fun fu6(noinline c: suspend Kla4.() -> Unit) {
        c.startCoroutine(this, Kla5)
    }

    suspend inline fun fu7(noinline c: suspend Kla4.() -> Unit) {
        c()
    }

    suspend inline fun fu8(noinline c: suspend Kla4.() -> Unit) {
        val prope12 = object: Kla3 {
            override suspend fun fu4() {
                c()
            }
        }
        prope12.fu4()
    }
}

fun fu0(prope5: Kla4, c: suspend Kla4.() -> Unit) {
    c.startCoroutine(prope5, Kla5)
}

suspend fun fu1() = "OK"

fun box843(): String {
    val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
val prope5 = Kla4()
    fu0(prope5) {
        fu5 {
            prope4 = fu1()
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 2"
    fu0(prope5) {
        fu6 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 3"
    fu0(prope5) {
        fu7 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 4"
    fu0(prope5) {
        fu8 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 5"
    fu0(prope5) {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 6"
    fu0(prope5) {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 7"
    fu0(prope5) {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 8"
    fu0(prope5) {
        fu8 {
            fu8 {
                fu8 {
                    fu8 {
                        fu8 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 9"
    fu0(prope5) {
        fu5 {
            fu6 {
                fu7 {
                    fu8 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope5.prope4
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu9(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope13: CoroutineStackFrame? = c
        while (prope13 != null) {
            prope7.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope2 = Kla8()

class Kla9 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu14() {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope8 = ((Impl().str).length.until((-23089))).first
        prope9 = false
        prope10 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope10 = {
            prope3.prope9 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:31:04,808 [main:107] - replacing (prope4, String)
2021-03-11 23:31:04,809 [main:50] - replacing prope4 String
2021-03-11 23:31:04,809 [main:54] - Getting value of type String
2021-03-11 23:31:04,963 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:31:04,968 [main:58] - GENERATED VALUE OF TYPE String = "yxdtu"
2021-03-11 23:31:04,968 [main:61] - GENERATED IS CALL =false
2021-03-11 23:31:04,987 [main:67] - randomType = Kla5
2021-03-11 23:31:05,144 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 23:31:05,149 [main:112] - generating klass Kla5 text = open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}
2021-03-11 23:31:05,295 [main:194] - Type params = []
2021-03-11 23:31:05,439 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 23:31:05,632 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 23:31:05,641 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 23:31:06,137 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 23:31:06,390 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 23:31:06,397 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 23:31:07,193 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 23:31:07,193 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 23:31:07,214 [main:106] - GETTING String from Int
2021-03-11 23:31:07,261 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]]
2021-03-11 23:31:07,261 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]
2021-03-11 23:31:07,262 [main:117] - GENERATED CALL = (-23089).toString(Kla0(-1235192173, { repeat(2056142132, {a: Int -> require(true, { "fmsqw"})})}).fieldAccessedInsideChild)
2021-03-11 23:31:07,262 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@cd86a35], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1710257f]]
2021-03-11 23:31:07,262 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@cd86a35]
2021-03-11 23:31:07,441 [main:302] - generating value of type = Long true depth = 0
2021-03-11 23:31:07,448 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1710257f]
2021-03-11 23:31:07,448 [main:117] - GENERATED CALL = (-23089).div(-5697363130748078259).toString((Impl().str).length)
2021-03-11 23:31:07,448 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@229de6de], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c35d4e4]]
2021-03-11 23:31:07,448 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@229de6de]
2021-03-11 23:31:07,449 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c35d4e4]
2021-03-11 23:31:07,449 [main:117] - GENERATED CALL = (-23089).toChar().uppercase()
2021-03-11 23:31:07,449 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@fd5b66d], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1710257f]]
2021-03-11 23:31:07,449 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@fd5b66d]
2021-03-11 23:31:07,449 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1710257f]
2021-03-11 23:31:07,450 [main:117] - GENERATED CALL = (-23089).toLong().toString(Kla0(-1235192173, { repeat(2056142132, {a: Int -> require(true, { "fmsqw"})})}).fieldAccessedInsideChild)
2021-03-11 23:31:07,450 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@229de6de], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@759a1323]]
2021-03-11 23:31:07,450 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@229de6de]
2021-03-11 23:31:07,450 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@759a1323]
2021-03-11 23:31:07,614 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:31:07,622 [main:117] - GENERATED CALL = (-23089).toChar().plus("bhbrx")
2021-03-11 23:31:07,622 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@160f519d], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]]
2021-03-11 23:31:07,622 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@160f519d]
2021-03-11 23:31:07,803 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:31:07,809 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]
2021-03-11 23:31:07,809 [main:117] - GENERATED CALL = (-23089).compareTo(1365677371).toString(Kla0(-1235192173, { repeat(2056142132, {a: Int -> require(true, { "fmsqw"})})}).fieldAccessedInsideChild)
2021-03-11 23:31:07,809 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cc6239], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]]
2021-03-11 23:31:07,809 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cc6239]
2021-03-11 23:31:07,810 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]
2021-03-11 23:31:07,976 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:31:07,984 [main:117] - GENERATED CALL = (-23089).toInt().toString(-1208372051)
2021-03-11 23:31:07,984 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@229de6de], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d1d6183]]
2021-03-11 23:31:07,984 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@229de6de]
2021-03-11 23:31:07,984 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d1d6183]
2021-03-11 23:31:07,984 [main:117] - GENERATED CALL = (-23089).toChar().titlecase()
2021-03-11 23:31:07,984 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5af1fa64], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@429a1aac]]
2021-03-11 23:31:07,985 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5af1fa64]
2021-03-11 23:31:07,985 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@429a1aac]
2021-03-11 23:31:07,985 [main:117] - GENERATED CALL = (-23089).toByte().toString(-23089)
2021-03-11 23:31:07,985 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@bd65915], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a616737]]
2021-03-11 23:31:07,985 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@bd65915]
2021-03-11 23:31:07,985 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a616737]
2021-03-11 23:31:08,165 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:31:08,170 [main:117] - GENERATED CALL = (-23089).toShort().toString(-483077386)
2021-03-11 23:31:08,170 [main:114] - replacement of prope4 of type String is (-23089).toLong().toString(Kla0(-1235192173, { repeat(2056142132, {a: Int -> require(true, { "fmsqw"})})}).fieldAccessedInsideChild)
2021-03-11 23:31:08,342 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:31:08,342 [main:66] - Compilation checking started
2021-03-11 23:31:08,791 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str

class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)

fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
            }
        }
    )

    return (-23089)?.toChar().lowercase()
}

interface Kla3 {
    suspend fun fu4()
}

class Kla4 {
    var prope4 = "FAIL 1"

    suspend inline fun fu5(noinline c: suspend Kla4.() -> Unit)  {
        val prope11 : suspend Kla4.() -> Unit = { c() }
        prope11()
    }

    suspend inline fun fu6(noinline c: suspend Kla4.() -> Unit) {
        c.startCoroutine(this, Kla5)
    }

    suspend inline fun fu7(noinline c: suspend Kla4.() -> Unit) {
        c()
    }

    suspend inline fun fu8(noinline c: suspend Kla4.() -> Unit) {
        val prope12 = object: Kla3 {
            override suspend fun fu4() {
                c()
            }
        }
        prope12.fu4()
    }
}

fun fu0(prope5: Kla4, c: suspend Kla4.() -> Unit) {
    c.startCoroutine(prope5, Kla5)
}

suspend fun fu1() = "OK"

fun box843(): String {
    val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
val prope5 = Kla4()
    fu0(prope5) {
        fu5 {
            prope4 = fu1()
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 2"
    fu0(prope5) {
        fu6 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 3"
    fu0(prope5) {
        fu7 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 4"
    fu0(prope5) {
        fu8 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 5"
    fu0(prope5) {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 6"
    fu0(prope5) {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 7"
    fu0(prope5) {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 8"
    fu0(prope5) {
        fu8 {
            fu8 {
                fu8 {
                    fu8 {
                        fu8 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 9"
    fu0(prope5) {
        fu5 {
            fu6 {
                fu7 {
                    fu8 {
                        fu5 {
                            (-23089).toLong().toString(Kla0(-1235192173, { repeat(2056142132, {a: Int -> require(true, { "fmsqw"})})}).fieldAccessedInsideChild) = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope5.prope4
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu9(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope13: CoroutineStackFrame? = c
        while (prope13 != null) {
            prope7.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope2 = Kla8()

class Kla9 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu14() {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope10 = {
            prope3.prope9 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:31:08,795 [main:107] - replacing ({}, Function0<Unit>)
2021-03-11 23:31:08,795 [main:50] - replacing {} Function0<Unit>
2021-03-11 23:31:08,795 [main:54] - Getting value of type Function0<Unit>
2021-03-11 23:31:08,986 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 23:31:08,991 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:31:09,153 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 23:31:09,160 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 23:31:09,787 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 23:31:09,792 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 23:31:09,797 [main:302] - generating value of type = Any false depth = 5
2021-03-11 23:31:09,798 [main:95] - GENERATED = check(true, { "ygacu"})
2021-03-11 23:31:09,798 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true, { "ygacu"})}
2021-03-11 23:31:09,798 [main:61] - GENERATED IS CALL =false
2021-03-11 23:31:10,020 [main:67] - randomType = ULong
2021-03-11 23:31:10,178 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 23:31:10,213 [main:106] - GETTING Function0<Unit> from String
2021-03-11 23:31:10,234 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 23:31:10,267 [main:106] - GETTING Function0<Unit> from IntRange
2021-03-11 23:31:10,293 [main:106] - GETTING Function0<Unit> from String
2021-03-11 23:31:10,294 [main:106] - GETTING Function0<Unit> from Impl
2021-03-11 23:31:10,310 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 23:31:10,328 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 23:31:10,329 [main:106] - GETTING Function0<Unit> from IntRange
2021-03-11 23:31:10,330 [main:106] - GETTING Function0<Unit> from Impl
2021-03-11 23:31:10,331 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 23:31:10,332 [main:106] - GETTING Function0<Unit> from [@kotlin.ExtensionFunctionType] Function1<Kla0, Unit>
2021-03-11 23:31:10,351 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 23:31:10,352 [main:106] - GETTING Function0<Unit> from Kla0
2021-03-11 23:31:10,370 [main:114] - replacement of {} of type Function0<Unit> is { check(true, { "ygacu"})}
2021-03-11 23:31:10,551 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 23:31:10,552 [main:66] - Compilation checking started
2021-03-11 23:31:10,991 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str

class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)

fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
            }
        }
    )

    return (-23089)?.toChar().lowercase()
}

interface Kla3 {
    suspend fun fu4()
}

class Kla4 {
    var prope4 = "FAIL 1"

    suspend inline fun fu5(noinline c: suspend Kla4.() -> Unit)  {
        val prope11 : suspend Kla4.() -> Unit = { c() }
        prope11()
    }

    suspend inline fun fu6(noinline c: suspend Kla4.() -> Unit) {
        c.startCoroutine(this, Kla5)
    }

    suspend inline fun fu7(noinline c: suspend Kla4.() -> Unit) {
        c()
    }

    suspend inline fun fu8(noinline c: suspend Kla4.() -> Unit) {
        val prope12 = object: Kla3 {
            override suspend fun fu4() {
                c()
            }
        }
        prope12.fu4()
    }
}

fun fu0(prope5: Kla4, c: suspend Kla4.() -> Unit) {
    c.startCoroutine(prope5, Kla5)
}

suspend fun fu1() = "OK"

fun box843(): String {
    val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
val prope5 = Kla4()
    fu0(prope5) {
        fu5 {
            prope4 = fu1()
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 2"
    fu0(prope5) {
        fu6 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 3"
    fu0(prope5) {
        fu7 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 4"
    fu0(prope5) {
        fu8 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 5"
    fu0(prope5) {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 6"
    fu0(prope5) {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 7"
    fu0(prope5) {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 8"
    fu0(prope5) {
        fu8 {
            fu8 {
                fu8 {
                    fu8 {
                        fu8 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 9"
    fu0(prope5) {
        fu5 {
            fu6 {
                fu7 {
                    fu8 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope5.prope4
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu9(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope13: CoroutineStackFrame? = c
        while (prope13 != null) {
            prope7.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope2 = Kla8()

class Kla9 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = { check(true, { "ygacu"})}

    fun fu14() {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope10 = {
            prope3.prope9 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:31:10,994 [main:107] - replacing ("OK", String)
2021-03-11 23:31:10,996 [main:50] - replacing "OK" String
2021-03-11 23:31:10,996 [main:54] - Getting value of type String
2021-03-11 23:31:11,173 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:31:11,178 [main:58] - GENERATED VALUE OF TYPE String = "csxtu"
2021-03-11 23:31:11,178 [main:61] - GENERATED IS CALL =false
2021-03-11 23:31:11,209 [main:67] - randomType = Impl
2021-03-11 23:31:11,361 [main:302] - generating value of type = Impl false depth = 0
2021-03-11 23:31:11,366 [main:112] - generating klass Impl text = class Impl : B
2021-03-11 23:31:11,379 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b702497]
2021-03-11 23:31:11,379 [main:78] - Generated call from random type = (Impl()).str.trimEnd()
2021-03-11 23:31:11,380 [main:106] - GETTING String from Int
2021-03-11 23:31:11,421 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@fd5b66d], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1710257f]]
2021-03-11 23:31:11,421 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@fd5b66d]
2021-03-11 23:31:11,421 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1710257f]
2021-03-11 23:31:11,422 [main:117] - GENERATED CALL = (Kla0(-1235192173, { repeat(2056142132, {a: Int -> require(true, { "fmsqw"})})}).fieldAccessedInsideChild).toLong().toString(val prope0 = (Impl()).str.toInt()
2021-03-11 23:31:11,422 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5af1fa64], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@429a1aac]]
2021-03-11 23:31:11,422 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5af1fa64]
2021-03-11 23:31:11,422 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@429a1aac]
2021-03-11 23:31:11,422 [main:117] - GENERATED CALL = (Kla0(-1235192173, { repeat(2056142132, {a: Int -> require(true, { "fmsqw"})})}).fieldAccessedInsideChild).toByte().toString((Impl().str).length)
2021-03-11 23:31:11,422 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]]
2021-03-11 23:31:11,422 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]
2021-03-11 23:31:11,423 [main:117] - GENERATED CALL = (Kla0(-1235192173, { repeat(2056142132, {a: Int -> require(true, { "fmsqw"})})}).fieldAccessedInsideChild).toString(-23089)
2021-03-11 23:31:11,423 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@cd86a35], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1710257f]]
2021-03-11 23:31:11,423 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@cd86a35]
2021-03-11 23:31:11,610 [main:302] - generating value of type = Long true depth = 0
2021-03-11 23:31:11,615 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1710257f]
2021-03-11 23:31:11,616 [main:117] - GENERATED CALL = (Kla0(-1235192173, { repeat(2056142132, {a: Int -> require(true, { "fmsqw"})})}).fieldAccessedInsideChild).div(1029228598366712735).toString(-23089)
2021-03-11 23:31:11,616 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@229de6de], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c35d4e4]]
2021-03-11 23:31:11,616 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@229de6de]
2021-03-11 23:31:11,616 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c35d4e4]
2021-03-11 23:31:11,616 [main:117] - GENERATED CALL = (Kla0(-1235192173, { repeat(2056142132, {a: Int -> require(true, { "fmsqw"})})}).fieldAccessedInsideChild).toChar().uppercase()
2021-03-11 23:31:11,616 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@229de6de], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d1d6183]]
2021-03-11 23:31:11,617 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@229de6de]
2021-03-11 23:31:11,617 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d1d6183]
2021-03-11 23:31:11,617 [main:117] - GENERATED CALL = (Kla0(-1235192173, { repeat(2056142132, {a: Int -> require(true, { "fmsqw"})})}).fieldAccessedInsideChild).toChar().titlecase()
2021-03-11 23:31:11,617 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@bd65915], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a616737]]
2021-03-11 23:31:11,617 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@bd65915]
2021-03-11 23:31:11,617 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a616737]
2021-03-11 23:31:11,784 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:31:11,789 [main:117] - GENERATED CALL = (Kla0(-1235192173, { repeat(2056142132, {a: Int -> require(true, { "fmsqw"})})}).fieldAccessedInsideChild).toShort().toString(1085874859)
2021-03-11 23:31:11,790 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@229de6de], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@759a1323]]
2021-03-11 23:31:11,790 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@229de6de]
2021-03-11 23:31:11,790 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@759a1323]
2021-03-11 23:31:11,964 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:31:11,969 [main:117] - GENERATED CALL = (Kla0(-1235192173, { repeat(2056142132, {a: Int -> require(true, { "fmsqw"})})}).fieldAccessedInsideChild).toChar().plus("trjsr")
2021-03-11 23:31:11,969 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@160f519d], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]]
2021-03-11 23:31:11,969 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@160f519d]
2021-03-11 23:31:11,970 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]
2021-03-11 23:31:12,121 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:31:12,126 [main:117] - GENERATED CALL = (Kla0(-1235192173, { repeat(2056142132, {a: Int -> require(true, { "fmsqw"})})}).fieldAccessedInsideChild).compareTo((Impl().str).length).toString(-377192391)
2021-03-11 23:31:12,127 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@229de6de], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d16cf46]]
2021-03-11 23:31:12,127 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@229de6de]
2021-03-11 23:31:12,127 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d16cf46]
2021-03-11 23:31:12,127 [main:117] - GENERATED CALL = (Kla0(-1235192173, { repeat(2056142132, {a: Int -> require(true, { "fmsqw"})})}).fieldAccessedInsideChild).toChar().lowercase()
2021-03-11 23:31:12,127 [main:114] - replacement of "OK" of type String is (Kla0(-1235192173, { repeat(2056142132, {a: Int -> require(true, { "fmsqw"})})}).fieldAccessedInsideChild).compareTo((Impl().str).length).toString(-377192391)
2021-03-11 23:31:12,303 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:31:12,303 [main:66] - Compilation checking started
2021-03-11 23:31:12,747 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str

class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)

fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
            }
        }
    )

    return (-23089)?.toChar().lowercase()
}

interface Kla3 {
    suspend fun fu4()
}

class Kla4 {
    var prope4 = "FAIL 1"

    suspend inline fun fu5(noinline c: suspend Kla4.() -> Unit)  {
        val prope11 : suspend Kla4.() -> Unit = { c() }
        prope11()
    }

    suspend inline fun fu6(noinline c: suspend Kla4.() -> Unit) {
        c.startCoroutine(this, Kla5)
    }

    suspend inline fun fu7(noinline c: suspend Kla4.() -> Unit) {
        c()
    }

    suspend inline fun fu8(noinline c: suspend Kla4.() -> Unit) {
        val prope12 = object: Kla3 {
            override suspend fun fu4() {
                c()
            }
        }
        prope12.fu4()
    }
}

fun fu0(prope5: Kla4, c: suspend Kla4.() -> Unit) {
    c.startCoroutine(prope5, Kla5)
}

suspend fun fu1() = "OK"

fun box843(): String {
    val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
val prope5 = Kla4()
    fu0(prope5) {
        fu5 {
            prope4 = fu1()
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 2"
    fu0(prope5) {
        fu6 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 3"
    fu0(prope5) {
        fu7 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 4"
    fu0(prope5) {
        fu8 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 5"
    fu0(prope5) {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != (Kla0(-1235192173, { repeat(2056142132, {a: Int -> require(true, { "fmsqw"})})}).fieldAccessedInsideChild).compareTo((Impl().str).length).toString(-377192391)) return prope5.prope4
    prope5.prope4 = "FAIL 6"
    fu0(prope5) {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 7"
    fu0(prope5) {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 8"
    fu0(prope5) {
        fu8 {
            fu8 {
                fu8 {
                    fu8 {
                        fu8 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 9"
    fu0(prope5) {
        fu5 {
            fu6 {
                fu7 {
                    fu8 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope5.prope4
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu9(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope13: CoroutineStackFrame? = c
        while (prope13 != null) {
            prope7.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope2 = Kla8()

class Kla9 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu14() {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope10 = {
            prope3.prope9 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:31:12,752 [main:107] - replacing (fu1(), String)
2021-03-11 23:31:12,755 [main:50] - replacing fu1() String
2021-03-11 23:31:12,755 [main:54] - Getting value of type String
2021-03-11 23:31:12,962 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:31:12,967 [main:58] - GENERATED VALUE OF TYPE String = "fwhtu"
2021-03-11 23:31:12,968 [main:61] - GENERATED IS CALL =false
2021-03-11 23:31:13,449 [main:67] - randomType = Pair<Kla6?, B>
2021-03-11 23:31:13,597 [main:302] - generating value of type = Pair<Kla6?, B> false depth = 0
2021-03-11 23:31:13,792 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla6?, second: B): Pair<Kla6?, B> = TODO()
2021-03-11 23:31:13,798 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla6?, second: B): Pair<Kla6?, B> = TODO()
2021-03-11 23:31:13,955 [main:302] - generating value of type = Kla6 false depth = 3
2021-03-11 23:31:13,960 [main:112] - generating klass Kla6 text = class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}
2021-03-11 23:31:13,960 [main:302] - generating value of type = B false depth = 3
2021-03-11 23:31:13,965 [main:112] - generating klass B text = interface B : A
2021-03-11 23:31:14,315 [main:302] - generating value of type = Impl false depth = 5
2021-03-11 23:31:14,320 [main:112] - generating klass Impl text = class Impl : B
2021-03-11 23:31:14,321 [main:95] - GENERATED = Pair<Kla6?, B>(Kla6(), Impl())
2021-03-11 23:31:14,336 [main:78] - Generated call from random type = (Pair<Kla6?, B>(Kla6(), Impl())).second.str
2021-03-11 23:31:14,337 [main:106] - GETTING String from Char
2021-03-11 23:31:14,361 [main:113] - Case = [public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5c441aa3], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a616737]]
2021-03-11 23:31:14,361 [main:149] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5c441aa3]
2021-03-11 23:31:14,361 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a616737]
2021-03-11 23:31:14,361 [main:117] - GENERATED CALL = ((-23089)?.toChar()).toShort().toString((Impl().str).length)
2021-03-11 23:31:14,361 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5058a8e2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]]
2021-03-11 23:31:14,361 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5058a8e2]
2021-03-11 23:31:14,544 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:31:14,549 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]
2021-03-11 23:31:14,550 [main:117] - GENERATED CALL = ((-23089)?.toChar()).compareTo('î¹œ').toString(-23089)
2021-03-11 23:31:14,550 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d1d6183]]
2021-03-11 23:31:14,550 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d1d6183]
2021-03-11 23:31:14,550 [main:117] - GENERATED CALL = ((-23089)?.toChar()).titlecase()
2021-03-11 23:31:14,550 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@759a1323]]
2021-03-11 23:31:14,551 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@759a1323]
2021-03-11 23:31:14,551 [main:117] - GENERATED CALL = ((-23089)?.toChar()).plus((Impl()).str)
2021-03-11 23:31:14,551 [main:113] - Case = [public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@790a2e28], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@429a1aac]]
2021-03-11 23:31:14,551 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@790a2e28]
2021-03-11 23:31:14,551 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@429a1aac]
2021-03-11 23:31:14,552 [main:117] - GENERATED CALL = ((-23089)?.toChar()).toByte().toString(val prope0 = (Impl()).str.toInt()
2021-03-11 23:31:14,552 [main:113] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@47f6a166], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1710257f]]
2021-03-11 23:31:14,552 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@47f6a166]
2021-03-11 23:31:14,552 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1710257f]
2021-03-11 23:31:14,552 [main:117] - GENERATED CALL = ((-23089)?.toChar()).toLong().toString(val prope0 = (Impl()).str.toInt()
2021-03-11 23:31:14,552 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d16cf46]]
2021-03-11 23:31:14,552 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d16cf46]
2021-03-11 23:31:14,553 [main:117] - GENERATED CALL = ((-23089)?.toChar()).lowercase()
2021-03-11 23:31:14,553 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c35d4e4]]
2021-03-11 23:31:14,553 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c35d4e4]
2021-03-11 23:31:14,553 [main:117] - GENERATED CALL = ((-23089)?.toChar()).uppercase()
2021-03-11 23:31:14,553 [main:114] - replacement of fu1() of type String is ((-23089)?.toChar()).compareTo('î¹œ').toString(-23089)
2021-03-11 23:31:14,707 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:31:14,707 [main:66] - Compilation checking started
2021-03-11 23:31:15,166 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str

class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)

fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
            }
        }
    )

    return (-23089)?.toChar().lowercase()
}

interface Kla3 {
    suspend fun fu4()
}

class Kla4 {
    var prope4 = "FAIL 1"

    suspend inline fun fu5(noinline c: suspend Kla4.() -> Unit)  {
        val prope11 : suspend Kla4.() -> Unit = { c() }
        prope11()
    }

    suspend inline fun fu6(noinline c: suspend Kla4.() -> Unit) {
        c.startCoroutine(this, Kla5)
    }

    suspend inline fun fu7(noinline c: suspend Kla4.() -> Unit) {
        c()
    }

    suspend inline fun fu8(noinline c: suspend Kla4.() -> Unit) {
        val prope12 = object: Kla3 {
            override suspend fun fu4() {
                c()
            }
        }
        prope12.fu4()
    }
}

fun fu0(prope5: Kla4, c: suspend Kla4.() -> Unit) {
    c.startCoroutine(prope5, Kla5)
}

suspend fun fu1() = "OK"

fun box843(): String {
    val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
val prope5 = Kla4()
    fu0(prope5) {
        fu5 {
            prope4 = fu1()
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 2"
    fu0(prope5) {
        fu6 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 3"
    fu0(prope5) {
        fu7 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 4"
    fu0(prope5) {
        fu8 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 5"
    fu0(prope5) {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 6"
    fu0(prope5) {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 7"
    fu0(prope5) {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 8"
    fu0(prope5) {
        fu8 {
            fu8 {
                fu8 {
                    fu8 {
                        fu8 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 9"
    fu0(prope5) {
        fu5 {
            fu6 {
                fu7 {
                    fu8 {
                        fu5 {
                            prope4 = ((-23089)?.toChar()).compareTo('î¹œ').toString(-23089)
                        }
                    }
                }
            }
        }
    }
    return prope5.prope4
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu9(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope13: CoroutineStackFrame? = c
        while (prope13 != null) {
            prope7.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope2 = Kla8()

class Kla9 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu14() {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope10 = {
            prope3.prope9 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:31:15,170 [main:107] - replacing (prope5.prope4, String)
2021-03-11 23:31:15,172 [main:50] - replacing prope5.prope4 String
2021-03-11 23:31:15,172 [main:54] - Getting value of type String
2021-03-11 23:31:15,349 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:31:15,354 [main:58] - GENERATED VALUE OF TYPE String = "ciujw"
2021-03-11 23:31:15,354 [main:61] - GENERATED IS CALL =false
2021-03-11 23:31:16,087 [main:67] - randomType = Function1<Set<Kla9?>, Impl>
2021-03-11 23:31:16,089 [main:106] - GETTING String from Int
2021-03-11 23:31:16,139 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@229de6de], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@759a1323]]
2021-03-11 23:31:16,139 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@229de6de]
2021-03-11 23:31:16,139 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@759a1323]
2021-03-11 23:31:16,140 [main:117] - GENERATED CALL = ((-23089)).toChar().plus((Impl().str))
2021-03-11 23:31:16,140 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]]
2021-03-11 23:31:16,140 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]
2021-03-11 23:31:16,318 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:31:16,323 [main:117] - GENERATED CALL = ((-23089)).toString(-320258527)
2021-03-11 23:31:16,324 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@229de6de], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d16cf46]]
2021-03-11 23:31:16,324 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@229de6de]
2021-03-11 23:31:16,324 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d16cf46]
2021-03-11 23:31:16,324 [main:117] - GENERATED CALL = ((-23089)).toChar().lowercase()
2021-03-11 23:31:16,324 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@229de6de], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c35d4e4]]
2021-03-11 23:31:16,324 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@229de6de]
2021-03-11 23:31:16,324 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c35d4e4]
2021-03-11 23:31:16,325 [main:117] - GENERATED CALL = ((-23089)).toChar().uppercase()
2021-03-11 23:31:16,325 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@160f519d], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]]
2021-03-11 23:31:16,325 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@160f519d]
2021-03-11 23:31:16,325 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]
2021-03-11 23:31:16,473 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:31:16,478 [main:117] - GENERATED CALL = ((-23089)).compareTo(-23089).toString(-266790995)
2021-03-11 23:31:16,479 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5af1fa64], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@429a1aac]]
2021-03-11 23:31:16,479 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5af1fa64]
2021-03-11 23:31:16,479 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@429a1aac]
2021-03-11 23:31:16,479 [main:117] - GENERATED CALL = ((-23089)).toByte().toString(Kla0(-1235192173, { repeat(2056142132, {a: Int -> require(true, { "fmsqw"})})}).fieldAccessedInsideChild)
2021-03-11 23:31:16,479 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@fd5b66d], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1710257f]]
2021-03-11 23:31:16,479 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@fd5b66d]
2021-03-11 23:31:16,480 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1710257f]
2021-03-11 23:31:16,480 [main:117] - GENERATED CALL = ((-23089)).toLong().toString(Kla0(-1235192173, { repeat(2056142132, {a: Int -> require(true, { "fmsqw"})})}).fieldAccessedInsideChild)
2021-03-11 23:31:16,480 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@229de6de], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d1d6183]]
2021-03-11 23:31:16,480 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@229de6de]
2021-03-11 23:31:16,480 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d1d6183]
2021-03-11 23:31:16,480 [main:117] - GENERATED CALL = ((-23089)).toChar().titlecase()
2021-03-11 23:31:16,480 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cc6239], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]]
2021-03-11 23:31:16,480 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cc6239]
2021-03-11 23:31:16,480 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]
2021-03-11 23:31:16,675 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:31:16,680 [main:117] - GENERATED CALL = ((-23089)).toInt().toString(-1915308721)
2021-03-11 23:31:16,680 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@bd65915], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a616737]]
2021-03-11 23:31:16,680 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@bd65915]
2021-03-11 23:31:16,680 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a616737]
2021-03-11 23:31:16,829 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:31:16,834 [main:117] - GENERATED CALL = ((-23089)).toShort().toString(1976344986)
2021-03-11 23:31:16,834 [main:114] - replacement of prope5.prope4 of type String is ((-23089)).compareTo(-23089).toString(-266790995)
2021-03-11 23:31:17,025 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:31:17,026 [main:66] - Compilation checking started
2021-03-11 23:31:17,469 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str

class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)

fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
            }
        }
    )

    return (-23089)?.toChar().lowercase()
}

interface Kla3 {
    suspend fun fu4()
}

class Kla4 {
    var prope4 = "FAIL 1"

    suspend inline fun fu5(noinline c: suspend Kla4.() -> Unit)  {
        val prope11 : suspend Kla4.() -> Unit = { c() }
        prope11()
    }

    suspend inline fun fu6(noinline c: suspend Kla4.() -> Unit) {
        c.startCoroutine(this, Kla5)
    }

    suspend inline fun fu7(noinline c: suspend Kla4.() -> Unit) {
        c()
    }

    suspend inline fun fu8(noinline c: suspend Kla4.() -> Unit) {
        val prope12 = object: Kla3 {
            override suspend fun fu4() {
                c()
            }
        }
        prope12.fu4()
    }
}

fun fu0(prope5: Kla4, c: suspend Kla4.() -> Unit) {
    c.startCoroutine(prope5, Kla5)
}

suspend fun fu1() = "OK"

fun box843(): String {
    val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
val prope5 = Kla4()
    fu0(prope5) {
        fu5 {
            prope4 = fu1()
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 2"
    fu0(prope5) {
        fu6 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 3"
    fu0(prope5) {
        fu7 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 4"
    fu0(prope5) {
        fu8 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    ((-23089)).compareTo(-23089).toString(-266790995) = "FAIL 5"
    fu0(prope5) {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 6"
    fu0(prope5) {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 7"
    fu0(prope5) {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 8"
    fu0(prope5) {
        fu8 {
            fu8 {
                fu8 {
                    fu8 {
                        fu8 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 9"
    fu0(prope5) {
        fu5 {
            fu6 {
                fu7 {
                    fu8 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope5.prope4
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu9(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope13: CoroutineStackFrame? = c
        while (prope13 != null) {
            prope7.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope2 = Kla8()

class Kla9 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu14() {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope10 = {
            prope3.prope9 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:31:17,473 [main:107] - replacing ("FAIL 3", String)
2021-03-11 23:31:17,475 [main:50] - replacing "FAIL 3" String
2021-03-11 23:31:17,475 [main:54] - Getting value of type String
2021-03-11 23:31:17,649 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:31:17,654 [main:58] - GENERATED VALUE OF TYPE String = "vvlop"
2021-03-11 23:31:17,655 [main:61] - GENERATED IS CALL =false
2021-03-11 23:31:17,836 [main:67] - randomType = UByte
2021-03-11 23:31:18,037 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 23:31:18,081 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@7928e47a]
2021-03-11 23:31:18,257 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 23:31:18,262 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d80091a]
2021-03-11 23:31:18,263 [main:78] - Generated call from random type = (25.toUByte()).div(101.toUByte()).toString(Kla0(-1235192173, { repeat(2056142132, {a: Int -> require(true, { "fmsqw"})})}).fieldAccessedInsideChild)
2021-03-11 23:31:18,264 [main:106] - GETTING String from Int
2021-03-11 23:31:18,309 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cc6239], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]]
2021-03-11 23:31:18,309 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cc6239]
2021-03-11 23:31:18,310 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]
2021-03-11 23:31:18,310 [main:117] - GENERATED CALL = (-23089).toInt().toString((Impl().str).length)
2021-03-11 23:31:18,310 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@fd5b66d], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1710257f]]
2021-03-11 23:31:18,310 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@fd5b66d]
2021-03-11 23:31:18,310 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1710257f]
2021-03-11 23:31:18,477 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:31:18,483 [main:117] - GENERATED CALL = (-23089).toLong().toString(2044092417)
2021-03-11 23:31:18,483 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@cd86a35], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1710257f]]
2021-03-11 23:31:18,483 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@cd86a35]
2021-03-11 23:31:18,646 [main:302] - generating value of type = Long true depth = 0
2021-03-11 23:31:18,651 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1710257f]
2021-03-11 23:31:18,822 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:31:18,828 [main:117] - GENERATED CALL = (-23089).div(5463839593007116274).toString(-1030515413)
2021-03-11 23:31:18,828 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@bd65915], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a616737]]
2021-03-11 23:31:18,828 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@bd65915]
2021-03-11 23:31:18,828 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a616737]
2021-03-11 23:31:18,828 [main:117] - GENERATED CALL = (-23089).toShort().toString(val prope0 = (Impl()).str.toInt()
2021-03-11 23:31:18,828 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@160f519d], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]]
2021-03-11 23:31:18,828 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@160f519d]
2021-03-11 23:31:18,829 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]
2021-03-11 23:31:18,829 [main:117] - GENERATED CALL = (-23089).compareTo(Kla0(-1235192173, { repeat(2056142132, {a: Int -> require(true, { "fmsqw"})})}).fieldAccessedInsideChild).toString(-23089)
2021-03-11 23:31:18,829 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@229de6de], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@759a1323]]
2021-03-11 23:31:18,829 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@229de6de]
2021-03-11 23:31:18,829 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@759a1323]
2021-03-11 23:31:18,829 [main:117] - GENERATED CALL = (-23089).toChar().plus((Impl()).str)
2021-03-11 23:31:18,830 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5af1fa64], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@429a1aac]]
2021-03-11 23:31:18,830 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5af1fa64]
2021-03-11 23:31:18,830 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@429a1aac]
2021-03-11 23:31:18,830 [main:117] - GENERATED CALL = (-23089).toByte().toString(-23089)
2021-03-11 23:31:18,830 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]]
2021-03-11 23:31:18,830 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]
2021-03-11 23:31:18,830 [main:117] - GENERATED CALL = (-23089).toString((-23089))
2021-03-11 23:31:18,830 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@229de6de], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d16cf46]]
2021-03-11 23:31:18,830 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@229de6de]
2021-03-11 23:31:18,830 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d16cf46]
2021-03-11 23:31:18,830 [main:117] - GENERATED CALL = (-23089).toChar().lowercase()
2021-03-11 23:31:18,831 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@229de6de], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d1d6183]]
2021-03-11 23:31:18,831 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@229de6de]
2021-03-11 23:31:18,831 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d1d6183]
2021-03-11 23:31:18,831 [main:117] - GENERATED CALL = (-23089).toChar().titlecase()
2021-03-11 23:31:18,831 [main:114] - replacement of "FAIL 3" of type String is (-23089).toLong().toString(2044092417)
2021-03-11 23:31:18,984 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:31:18,984 [main:66] - Compilation checking started
2021-03-11 23:31:19,412 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str

class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)

fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
            }
        }
    )

    return (-23089)?.toChar().lowercase()
}

interface Kla3 {
    suspend fun fu4()
}

class Kla4 {
    var prope4 = "FAIL 1"

    suspend inline fun fu5(noinline c: suspend Kla4.() -> Unit)  {
        val prope11 : suspend Kla4.() -> Unit = { c() }
        prope11()
    }

    suspend inline fun fu6(noinline c: suspend Kla4.() -> Unit) {
        c.startCoroutine(this, Kla5)
    }

    suspend inline fun fu7(noinline c: suspend Kla4.() -> Unit) {
        c()
    }

    suspend inline fun fu8(noinline c: suspend Kla4.() -> Unit) {
        val prope12 = object: Kla3 {
            override suspend fun fu4() {
                c()
            }
        }
        prope12.fu4()
    }
}

fun fu0(prope5: Kla4, c: suspend Kla4.() -> Unit) {
    c.startCoroutine(prope5, Kla5)
}

suspend fun fu1() = "OK"

fun box843(): String {
    val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
val prope5 = Kla4()
    fu0(prope5) {
        fu5 {
            prope4 = fu1()
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 2"
    fu0(prope5) {
        fu6 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = (-23089).toLong().toString(2044092417)
    fu0(prope5) {
        fu7 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 4"
    fu0(prope5) {
        fu8 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 5"
    fu0(prope5) {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 6"
    fu0(prope5) {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 7"
    fu0(prope5) {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 8"
    fu0(prope5) {
        fu8 {
            fu8 {
                fu8 {
                    fu8 {
                        fu8 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 9"
    fu0(prope5) {
        fu5 {
            fu6 {
                fu7 {
                    fu8 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope5.prope4
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu9(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope13: CoroutineStackFrame? = c
        while (prope13 != null) {
            prope7.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope2 = Kla8()

class Kla9 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu14() {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope10 = {
            prope3.prope9 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:31:19,416 [main:107] - replacing ({
                        fu7 {
                            prope4 = fu1()
                        }
                    }, [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit>)
2021-03-11 23:31:19,417 [main:50] - replacing {
                        fu7 {
                            prope4 = fu1()
                        }
                    } [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit>
2021-03-11 23:31:19,417 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit>
2021-03-11 23:31:19,602 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> false depth = 0
2021-03-11 23:31:19,607 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:31:19,764 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 23:31:19,770 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 23:31:20,351 [main:302] - generating value of type = Int true depth = 4
2021-03-11 23:31:20,356 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 23:31:20,361 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 23:31:20,519 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 23:31:20,525 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 23:31:20,902 [main:302] - generating value of type = Any false depth = 8
2021-03-11 23:31:20,902 [main:95] - GENERATED = println("gujbu")
2021-03-11 23:31:20,903 [main:95] - GENERATED = repeat(-1686720842, {a: Int -> println("gujbu")})
2021-03-11 23:31:20,903 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> = {a: Kla4 -> repeat(-1686720842, {a: Int -> println("gujbu")})}
2021-03-11 23:31:20,903 [main:61] - GENERATED IS CALL =false
2021-03-11 23:31:21,570 [main:67] - randomType = Sequence<LinkedHashMap<Char, Long>>
2021-03-11 23:31:21,574 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from IntRange
2021-03-11 23:31:21,615 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from String
2021-03-11 23:31:21,643 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from Char
2021-03-11 23:31:21,664 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from Int
2021-03-11 23:31:21,698 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from Int
2021-03-11 23:31:21,702 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from IntRange
2021-03-11 23:31:21,706 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from Impl
2021-03-11 23:31:21,721 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from Int
2021-03-11 23:31:21,725 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from String
2021-03-11 23:31:21,729 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from Int
2021-03-11 23:31:21,732 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from Impl
2021-03-11 23:31:21,736 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from Kla0
2021-03-11 23:31:21,758 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from [@kotlin.ExtensionFunctionType] Function1<Kla0, Unit>
2021-03-11 23:31:21,776 [main:114] - replacement of {
                        fu7 {
                            prope4 = fu1()
                        }
                    } of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> is {a: Kla4 -> repeat(-1686720842, {a: Int -> println("gujbu")})}
2021-03-11 23:31:21,947 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 23:31:21,947 [main:66] - Compilation checking started
2021-03-11 23:31:22,383 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str

class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)

fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
            }
        }
    )

    return (-23089)?.toChar().lowercase()
}

interface Kla3 {
    suspend fun fu4()
}

class Kla4 {
    var prope4 = "FAIL 1"

    suspend inline fun fu5(noinline c: suspend Kla4.() -> Unit)  {
        val prope11 : suspend Kla4.() -> Unit = { c() }
        prope11()
    }

    suspend inline fun fu6(noinline c: suspend Kla4.() -> Unit) {
        c.startCoroutine(this, Kla5)
    }

    suspend inline fun fu7(noinline c: suspend Kla4.() -> Unit) {
        c()
    }

    suspend inline fun fu8(noinline c: suspend Kla4.() -> Unit) {
        val prope12 = object: Kla3 {
            override suspend fun fu4() {
                c()
            }
        }
        prope12.fu4()
    }
}

fun fu0(prope5: Kla4, c: suspend Kla4.() -> Unit) {
    c.startCoroutine(prope5, Kla5)
}

suspend fun fu1() = "OK"

fun box843(): String {
    val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
val prope5 = Kla4()
    fu0(prope5) {
        fu5 {
            prope4 = fu1()
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 2"
    fu0(prope5) {
        fu6 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 3"
    fu0(prope5) {
        fu7 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 4"
    fu0(prope5) {
        fu8 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 5"
    fu0(prope5) {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 6"
    fu0(prope5) {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 7"
    fu0(prope5) {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {a: Kla4 -> repeat(-1686720842, {a: Int -> println("gujbu")})}
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 8"
    fu0(prope5) {
        fu8 {
            fu8 {
                fu8 {
                    fu8 {
                        fu8 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 9"
    fu0(prope5) {
        fu5 {
            fu6 {
                fu7 {
                    fu8 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope5.prope4
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu9(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope13: CoroutineStackFrame? = c
        while (prope13 != null) {
            prope7.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope2 = Kla8()

class Kla9 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu14() {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope10 = {
            prope3.prope9 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:31:22,387 [main:107] - replacing ("FAIL 9", String)
2021-03-11 23:31:22,388 [main:50] - replacing "FAIL 9" String
2021-03-11 23:31:22,388 [main:54] - Getting value of type String
2021-03-11 23:31:22,597 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:31:22,602 [main:58] - GENERATED VALUE OF TYPE String = "whrli"
2021-03-11 23:31:22,602 [main:61] - GENERATED IS CALL =false
2021-03-11 23:31:22,807 [main:67] - randomType = UShort
2021-03-11 23:31:22,952 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 23:31:22,988 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@75f5d240]
2021-03-11 23:31:22,989 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1710257f]
2021-03-11 23:31:22,989 [main:78] - Generated call from random type = (24339.toUShort()).toLong().toString((-23089))
2021-03-11 23:31:22,990 [main:106] - GETTING String from Int
2021-03-11 23:31:23,019 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@229de6de], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c35d4e4]]
2021-03-11 23:31:23,019 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@229de6de]
2021-03-11 23:31:23,020 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c35d4e4]
2021-03-11 23:31:23,020 [main:117] - GENERATED CALL = ((Impl().str).length).toChar().uppercase()
2021-03-11 23:31:23,020 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@cd86a35], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1710257f]]
2021-03-11 23:31:23,020 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@cd86a35]
2021-03-11 23:31:23,185 [main:302] - generating value of type = Long true depth = 0
2021-03-11 23:31:23,191 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1710257f]
2021-03-11 23:31:23,192 [main:117] - GENERATED CALL = ((Impl().str).length).div(-3897261311968033188).toString(Kla0(-1235192173, { repeat(2056142132, {a: Int -> require(true, { "fmsqw"})})}).fieldAccessedInsideChild)
2021-03-11 23:31:23,192 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@229de6de], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d16cf46]]
2021-03-11 23:31:23,192 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@229de6de]
2021-03-11 23:31:23,192 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d16cf46]
2021-03-11 23:31:23,192 [main:117] - GENERATED CALL = ((Impl().str).length).toChar().lowercase()
2021-03-11 23:31:23,192 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5af1fa64], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@429a1aac]]
2021-03-11 23:31:23,192 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5af1fa64]
2021-03-11 23:31:23,192 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@429a1aac]
2021-03-11 23:31:23,356 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:31:23,361 [main:117] - GENERATED CALL = ((Impl().str).length).toByte().toString(-1512169504)
2021-03-11 23:31:23,361 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@229de6de], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d1d6183]]
2021-03-11 23:31:23,361 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@229de6de]
2021-03-11 23:31:23,361 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d1d6183]
2021-03-11 23:31:23,361 [main:117] - GENERATED CALL = ((Impl().str).length).toChar().titlecase()
2021-03-11 23:31:23,361 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]]
2021-03-11 23:31:23,361 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]
2021-03-11 23:31:23,362 [main:117] - GENERATED CALL = ((Impl().str).length).toString(-23089)
2021-03-11 23:31:23,362 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@fd5b66d], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1710257f]]
2021-03-11 23:31:23,362 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@fd5b66d]
2021-03-11 23:31:23,362 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1710257f]
2021-03-11 23:31:23,362 [main:117] - GENERATED CALL = ((Impl().str).length).toLong().toString((-23089))
2021-03-11 23:31:23,362 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cc6239], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]]
2021-03-11 23:31:23,362 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cc6239]
2021-03-11 23:31:23,362 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]
2021-03-11 23:31:23,578 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:31:23,583 [main:117] - GENERATED CALL = ((Impl().str).length).toInt().toString(479920938)
2021-03-11 23:31:23,583 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@229de6de], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@759a1323]]
2021-03-11 23:31:23,584 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@229de6de]
2021-03-11 23:31:23,584 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@759a1323]
2021-03-11 23:31:23,584 [main:117] - GENERATED CALL = ((Impl().str).length).toChar().plus((Impl()).str)
2021-03-11 23:31:23,584 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@160f519d], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]]
2021-03-11 23:31:23,584 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@160f519d]
2021-03-11 23:31:23,777 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:31:23,782 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]
2021-03-11 23:31:23,783 [main:117] - GENERATED CALL = ((Impl().str).length).compareTo(-271096005).toString(Kla0(-1235192173, { repeat(2056142132, {a: Int -> require(true, { "fmsqw"})})}).fieldAccessedInsideChild)
2021-03-11 23:31:23,783 [main:114] - replacement of "FAIL 9" of type String is ((Impl().str).length).toChar().titlecase()
2021-03-11 23:31:23,929 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:31:23,930 [main:66] - Compilation checking started
2021-03-11 23:31:24,344 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str

class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)

fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
            }
        }
    )

    return (-23089)?.toChar().lowercase()
}

interface Kla3 {
    suspend fun fu4()
}

class Kla4 {
    var prope4 = "FAIL 1"

    suspend inline fun fu5(noinline c: suspend Kla4.() -> Unit)  {
        val prope11 : suspend Kla4.() -> Unit = { c() }
        prope11()
    }

    suspend inline fun fu6(noinline c: suspend Kla4.() -> Unit) {
        c.startCoroutine(this, Kla5)
    }

    suspend inline fun fu7(noinline c: suspend Kla4.() -> Unit) {
        c()
    }

    suspend inline fun fu8(noinline c: suspend Kla4.() -> Unit) {
        val prope12 = object: Kla3 {
            override suspend fun fu4() {
                c()
            }
        }
        prope12.fu4()
    }
}

fun fu0(prope5: Kla4, c: suspend Kla4.() -> Unit) {
    c.startCoroutine(prope5, Kla5)
}

suspend fun fu1() = "OK"

fun box843(): String {
    val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
val prope5 = Kla4()
    fu0(prope5) {
        fu5 {
            prope4 = fu1()
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 2"
    fu0(prope5) {
        fu6 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 3"
    fu0(prope5) {
        fu7 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 4"
    fu0(prope5) {
        fu8 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 5"
    fu0(prope5) {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 6"
    fu0(prope5) {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 7"
    fu0(prope5) {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 8"
    fu0(prope5) {
        fu8 {
            fu8 {
                fu8 {
                    fu8 {
                        fu8 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = ((Impl().str).length).toChar().titlecase()
    fu0(prope5) {
        fu5 {
            fu6 {
                fu7 {
                    fu8 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope5.prope4
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu9(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope13: CoroutineStackFrame? = c
        while (prope13 != null) {
            prope7.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope2 = Kla8()

class Kla9 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu14() {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope10 = {
            prope3.prope9 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:31:24,348 [main:107] - replacing (prope5, Kla4)
2021-03-11 23:31:24,349 [main:50] - replacing prope5 Kla4
2021-03-11 23:31:24,349 [main:54] - Getting value of type Kla4
2021-03-11 23:31:24,524 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 23:31:24,529 [main:112] - generating klass Kla4 text = class Kla4 {
    var prope4 = "FAIL 1"

    suspend inline fun fu5(noinline c: suspend Kla4.() -> Unit)  {
        val prope11 : suspend Kla4.() -> Unit = { c() }
        prope11()
    }

    suspend inline fun fu6(noinline c: suspend Kla4.() -> Unit) {
        c.startCoroutine(this, Kla5)
    }

    suspend inline fun fu7(noinline c: suspend Kla4.() -> Unit) {
        c()
    }

    suspend inline fun fu8(noinline c: suspend Kla4.() -> Unit) {
        val prope12 = object: Kla3 {
            override suspend fun fu4() {
                c()
            }
        }
        prope12.fu4()
    }
}
2021-03-11 23:31:24,529 [main:58] - GENERATED VALUE OF TYPE Kla4 = Kla4()
2021-03-11 23:31:24,529 [main:61] - GENERATED IS CALL =true
2021-03-11 23:31:24,707 [main:67] - randomType = Long
2021-03-11 23:31:24,889 [main:302] - generating value of type = Long true depth = 0
2021-03-11 23:31:24,947 [main:106] - GETTING Kla4 from Int
2021-03-11 23:31:25,002 [main:106] - GETTING Kla4 from Impl
2021-03-11 23:31:25,024 [main:106] - GETTING Kla4 from IntRange
2021-03-11 23:31:25,054 [main:106] - GETTING Kla4 from Int
2021-03-11 23:31:25,055 [main:106] - GETTING Kla4 from String
2021-03-11 23:31:25,080 [main:106] - GETTING Kla4 from Int
2021-03-11 23:31:25,081 [main:106] - GETTING Kla4 from IntRange
2021-03-11 23:31:25,082 [main:106] - GETTING Kla4 from Int
2021-03-11 23:31:25,083 [main:106] - GETTING Kla4 from Char
2021-03-11 23:31:25,111 [main:106] - GETTING Kla4 from [@kotlin.ExtensionFunctionType] Function1<Kla0, Unit>
2021-03-11 23:31:25,133 [main:106] - GETTING Kla4 from String
2021-03-11 23:31:25,134 [main:106] - GETTING Kla4 from Kla0
2021-03-11 23:31:25,154 [main:106] - GETTING Kla4 from Impl
2021-03-11 23:31:25,154 [main:114] - replacement of prope5 of type Kla4 is Kla4()
2021-03-11 23:31:25,330 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 23:31:25,330 [main:66] - Compilation checking started
2021-03-11 23:31:25,746 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str

class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)

fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
            }
        }
    )

    return (-23089)?.toChar().lowercase()
}

interface Kla3 {
    suspend fun fu4()
}

class Kla4 {
    var prope4 = "FAIL 1"

    suspend inline fun fu5(noinline c: suspend Kla4.() -> Unit)  {
        val prope11 : suspend Kla4.() -> Unit = { c() }
        prope11()
    }

    suspend inline fun fu6(noinline c: suspend Kla4.() -> Unit) {
        c.startCoroutine(this, Kla5)
    }

    suspend inline fun fu7(noinline c: suspend Kla4.() -> Unit) {
        c()
    }

    suspend inline fun fu8(noinline c: suspend Kla4.() -> Unit) {
        val prope12 = object: Kla3 {
            override suspend fun fu4() {
                c()
            }
        }
        prope12.fu4()
    }
}

fun fu0(prope5: Kla4, c: suspend Kla4.() -> Unit) {
    c.startCoroutine(prope5, Kla5)
}

suspend fun fu1() = "OK"

fun box843(): String {
    val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
val prope5 = Kla4()
    fu0(prope5) {
        fu5 {
            prope4 = fu1()
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 2"
    fu0(prope5) {
        fu6 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 3"
    fu0(prope5) {
        fu7 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 4"
    fu0(prope5) {
        fu8 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 5"
    fu0(prope5) {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 6"
    fu0(prope5) {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (Kla4().prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 7"
    fu0(prope5) {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 8"
    fu0(prope5) {
        fu8 {
            fu8 {
                fu8 {
                    fu8 {
                        fu8 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 9"
    fu0(prope5) {
        fu5 {
            fu6 {
                fu7 {
                    fu8 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope5.prope4
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu9(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope13: CoroutineStackFrame? = c
        while (prope13 != null) {
            prope7.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope2 = Kla8()

class Kla9 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu14() {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope10 = {
            prope3.prope9 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:31:25,749 [main:107] - replacing ({ c.resume(Unit) }, Function0<Unit>)
2021-03-11 23:31:25,749 [main:50] - replacing { c.resume(Unit) } Function0<Unit>
2021-03-11 23:31:25,749 [main:54] - Getting value of type Function0<Unit>
2021-03-11 23:31:25,926 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 23:31:25,931 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:31:25,942 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-11 23:31:25,942 [main:61] - GENERATED IS CALL =false
2021-03-11 23:31:26,165 [main:67] - randomType = UShort
2021-03-11 23:31:26,320 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 23:31:26,370 [main:106] - GETTING Function0<Unit> from IntRange
2021-03-11 23:31:26,402 [main:106] - GETTING Function0<Unit> from String
2021-03-11 23:31:26,420 [main:106] - GETTING Function0<Unit> from Impl
2021-03-11 23:31:26,431 [main:106] - GETTING Function0<Unit> from Kla0
2021-03-11 23:31:26,449 [main:106] - GETTING Function0<Unit> from [@kotlin.ExtensionFunctionType] Function1<Kla0, Unit>
2021-03-11 23:31:26,469 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 23:31:26,500 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 23:31:26,518 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 23:31:26,519 [main:106] - GETTING Function0<Unit> from String
2021-03-11 23:31:26,520 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 23:31:26,521 [main:106] - GETTING Function0<Unit> from IntRange
2021-03-11 23:31:26,522 [main:106] - GETTING Function0<Unit> from Impl
2021-03-11 23:31:26,523 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 23:31:26,523 [main:114] - replacement of { c.resume(Unit) } of type Function0<Unit> is { println()}
2021-03-11 23:31:26,692 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 23:31:26,692 [main:66] - Compilation checking started
2021-03-11 23:31:27,096 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str

class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)

fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
            }
        }
    )

    return (-23089)?.toChar().lowercase()
}

interface Kla3 {
    suspend fun fu4()
}

class Kla4 {
    var prope4 = "FAIL 1"

    suspend inline fun fu5(noinline c: suspend Kla4.() -> Unit)  {
        val prope11 : suspend Kla4.() -> Unit = { c() }
        prope11()
    }

    suspend inline fun fu6(noinline c: suspend Kla4.() -> Unit) {
        c.startCoroutine(this, Kla5)
    }

    suspend inline fun fu7(noinline c: suspend Kla4.() -> Unit) {
        c()
    }

    suspend inline fun fu8(noinline c: suspend Kla4.() -> Unit) {
        val prope12 = object: Kla3 {
            override suspend fun fu4() {
                c()
            }
        }
        prope12.fu4()
    }
}

fun fu0(prope5: Kla4, c: suspend Kla4.() -> Unit) {
    c.startCoroutine(prope5, Kla5)
}

suspend fun fu1() = "OK"

fun box843(): String {
    val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
val prope5 = Kla4()
    fu0(prope5) {
        fu5 {
            prope4 = fu1()
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 2"
    fu0(prope5) {
        fu6 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 3"
    fu0(prope5) {
        fu7 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 4"
    fu0(prope5) {
        fu8 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 5"
    fu0(prope5) {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 6"
    fu0(prope5) {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 7"
    fu0(prope5) {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 8"
    fu0(prope5) {
        fu8 {
            fu8 {
                fu8 {
                    fu8 {
                        fu8 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 9"
    fu0(prope5) {
        fu5 {
            fu6 {
                fu7 {
                    fu8 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope5.prope4
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu9(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope13: CoroutineStackFrame? = c
        while (prope13 != null) {
            prope7.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope2 = Kla8()

class Kla9 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu14() {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { println()}
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope10 = {
            prope3.prope9 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:31:27,102 [main:107] - replacing ({ it?.methodName?.startsWith(method) == true }, Function0<Boolean>)
2021-03-11 23:31:27,103 [main:50] - replacing { it?.methodName?.startsWith(method) == true } Function0<Boolean>
2021-03-11 23:31:27,103 [main:54] - Getting value of type Function0<Boolean>
2021-03-11 23:31:27,314 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 23:31:27,319 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:31:27,324 [main:58] - GENERATED VALUE OF TYPE Function0<Boolean> = { false}
2021-03-11 23:31:27,325 [main:61] - GENERATED IS CALL =false
2021-03-11 23:31:27,782 [main:67] - randomType = Function1<Kla5, ULong>
2021-03-11 23:31:27,783 [main:106] - GETTING Function0<Boolean> from Int
2021-03-11 23:31:27,833 [main:106] - GETTING Function0<Boolean> from IntRange
2021-03-11 23:31:27,863 [main:106] - GETTING Function0<Boolean> from Kla0
2021-03-11 23:31:27,882 [main:106] - GETTING Function0<Boolean> from Int
2021-03-11 23:31:27,883 [main:106] - GETTING Function0<Boolean> from Int
2021-03-11 23:31:27,884 [main:106] - GETTING Function0<Boolean> from String
2021-03-11 23:31:27,902 [main:106] - GETTING Function0<Boolean> from [@kotlin.ExtensionFunctionType] Function1<Kla0, Unit>
2021-03-11 23:31:27,921 [main:106] - GETTING Function0<Boolean> from Impl
2021-03-11 23:31:27,933 [main:106] - GETTING Function0<Boolean> from Int
2021-03-11 23:31:27,934 [main:106] - GETTING Function0<Boolean> from IntRange
2021-03-11 23:31:27,935 [main:106] - GETTING Function0<Boolean> from Char
2021-03-11 23:31:27,953 [main:106] - GETTING Function0<Boolean> from String
2021-03-11 23:31:27,954 [main:106] - GETTING Function0<Boolean> from Impl
2021-03-11 23:31:27,954 [main:114] - replacement of { it?.methodName?.startsWith(method) == true } of type Function0<Boolean> is { false}
2021-03-11 23:31:28,131 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 23:31:28,131 [main:66] - Compilation checking started
2021-03-11 23:31:28,556 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str

class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)

fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
            }
        }
    )

    return (-23089)?.toChar().lowercase()
}

interface Kla3 {
    suspend fun fu4()
}

class Kla4 {
    var prope4 = "FAIL 1"

    suspend inline fun fu5(noinline c: suspend Kla4.() -> Unit)  {
        val prope11 : suspend Kla4.() -> Unit = { c() }
        prope11()
    }

    suspend inline fun fu6(noinline c: suspend Kla4.() -> Unit) {
        c.startCoroutine(this, Kla5)
    }

    suspend inline fun fu7(noinline c: suspend Kla4.() -> Unit) {
        c()
    }

    suspend inline fun fu8(noinline c: suspend Kla4.() -> Unit) {
        val prope12 = object: Kla3 {
            override suspend fun fu4() {
                c()
            }
        }
        prope12.fu4()
    }
}

fun fu0(prope5: Kla4, c: suspend Kla4.() -> Unit) {
    c.startCoroutine(prope5, Kla5)
}

suspend fun fu1() = "OK"

fun box843(): String {
    val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
val prope5 = Kla4()
    fu0(prope5) {
        fu5 {
            prope4 = fu1()
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 2"
    fu0(prope5) {
        fu6 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 3"
    fu0(prope5) {
        fu7 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 4"
    fu0(prope5) {
        fu8 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 5"
    fu0(prope5) {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 6"
    fu0(prope5) {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 7"
    fu0(prope5) {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 8"
    fu0(prope5) {
        fu8 {
            fu8 {
                fu8 {
                    fu8 {
                        fu8 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 9"
    fu0(prope5) {
        fu5 {
            fu6 {
                fu7 {
                    fu8 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope5.prope4
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu9(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope13: CoroutineStackFrame? = c
        while (prope13 != null) {
            prope7.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope7.find { false} ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope2 = Kla8()

class Kla9 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu14() {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope10 = {
            prope3.prope9 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:31:28,560 [main:107] - replacing (prope6.exceptionOrNull()?.let(x), Unit?)
2021-03-11 23:31:28,561 [main:50] - replacing prope6.exceptionOrNull()?.let(x) Unit?
2021-03-11 23:31:28,561 [main:54] - Getting value of type Unit?
2021-03-11 23:31:28,746 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 23:31:28,755 [main:58] - GENERATED VALUE OF TYPE Unit? = println()
2021-03-11 23:31:28,755 [main:61] - GENERATED IS CALL =true
2021-03-11 23:31:29,173 [main:67] - randomType = Kla7<ULong>
2021-03-11 23:31:29,360 [main:302] - generating value of type = Kla7<ULong> false depth = 0
2021-03-11 23:31:29,377 [main:112] - generating klass Kla7 text = abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu9(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 23:31:30,229 [main:302] - generating value of type = Kla10 false depth = 2
2021-03-11 23:31:30,234 [main:112] - generating klass Kla10 text = object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope10 = {
            prope3.prope9 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}
2021-03-11 23:31:30,254 [main:149] - GENERATING call of type public abstract fun resume(value: kotlin.ULong): kotlin.Unit defined in Kla7[SimpleFunctionDescriptorImpl@7437890b]
2021-03-11 23:31:30,406 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 23:31:30,411 [main:78] - Generated call from random type = (Kla10).resume(6715118108694405986.toULong())
2021-03-11 23:31:30,416 [main:106] - GETTING Unit? from Kla0
2021-03-11 23:31:30,435 [main:113] - Case = [public final val how: Kla0.() -> kotlin.Unit defined in Kla0[PropertyDescriptorImpl@34442e7a], public abstract operator fun invoke(p1: Kla0): kotlin.Unit defined in kotlin.Function1[FunctionInvokeDescriptor@458f8ef4]]
2021-03-11 23:31:30,436 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: Kla0): kotlin.Unit defined in kotlin.Function1[FunctionInvokeDescriptor@458f8ef4]
2021-03-11 23:31:30,622 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 23:31:30,627 [main:112] - generating klass Kla0 text = class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)
2021-03-11 23:31:30,781 [main:194] - Type params = []
2021-03-11 23:31:30,965 [main:302] - generating value of type = Int true depth = 2
2021-03-11 23:31:30,971 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Kla0, Unit> false depth = 2
2021-03-11 23:31:30,976 [main:302] - generating value of type = Unit false depth = 3
2021-03-11 23:31:31,136 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 23:31:31,142 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 23:31:31,538 [main:302] - generating value of type = Any false depth = 6
2021-03-11 23:31:31,538 [main:95] - GENERATED = print("mqadm")
2021-03-11 23:31:31,538 [main:117] - GENERATED CALL = (Kla0(
        3,
        {
            class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
            }
        }
    ))?.how.invoke(Kla0(-1443852116, { print("mqadm")}))
2021-03-11 23:31:31,539 [main:114] - replacement of prope6.exceptionOrNull()?.let(x) of type Unit? is (Kla10).resume(6715118108694405986.toULong())
2021-03-11 23:31:31,723 [main:33] - Trying to replace Element(SAFE_ACCESS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:31:31,724 [main:66] - Compilation checking started
2021-03-11 23:31:32,167 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str

class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)

fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
            }
        }
    )

    return (-23089)?.toChar().lowercase()
}

interface Kla3 {
    suspend fun fu4()
}

class Kla4 {
    var prope4 = "FAIL 1"

    suspend inline fun fu5(noinline c: suspend Kla4.() -> Unit)  {
        val prope11 : suspend Kla4.() -> Unit = { c() }
        prope11()
    }

    suspend inline fun fu6(noinline c: suspend Kla4.() -> Unit) {
        c.startCoroutine(this, Kla5)
    }

    suspend inline fun fu7(noinline c: suspend Kla4.() -> Unit) {
        c()
    }

    suspend inline fun fu8(noinline c: suspend Kla4.() -> Unit) {
        val prope12 = object: Kla3 {
            override suspend fun fu4() {
                c()
            }
        }
        prope12.fu4()
    }
}

fun fu0(prope5: Kla4, c: suspend Kla4.() -> Unit) {
    c.startCoroutine(prope5, Kla5)
}

suspend fun fu1() = "OK"

fun box843(): String {
    val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
val prope5 = Kla4()
    fu0(prope5) {
        fu5 {
            prope4 = fu1()
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 2"
    fu0(prope5) {
        fu6 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 3"
    fu0(prope5) {
        fu7 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 4"
    fu0(prope5) {
        fu8 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 5"
    fu0(prope5) {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 6"
    fu0(prope5) {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 7"
    fu0(prope5) {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 8"
    fu0(prope5) {
        fu8 {
            fu8 {
                fu8 {
                    fu8 {
                        fu8 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 9"
    fu0(prope5) {
        fu5 {
            fu6 {
                fu7 {
                    fu8 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope5.prope4
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
(Kla10).resume(6715118108694405986.toULong())
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu9(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope13: CoroutineStackFrame? = c
        while (prope13 != null) {
            prope7.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope2 = Kla8()

class Kla9 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu14() {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope10 = {
            prope3.prope9 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:31:32,170 [main:107] - replacing (prope5, Kla4)
2021-03-11 23:31:32,172 [main:50] - replacing prope5 Kla4
2021-03-11 23:31:32,172 [main:54] - Getting value of type Kla4
2021-03-11 23:31:32,362 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 23:31:32,368 [main:112] - generating klass Kla4 text = class Kla4 {
    var prope4 = "FAIL 1"

    suspend inline fun fu5(noinline c: suspend Kla4.() -> Unit)  {
        val prope11 : suspend Kla4.() -> Unit = { c() }
        prope11()
    }

    suspend inline fun fu6(noinline c: suspend Kla4.() -> Unit) {
        c.startCoroutine(this, Kla5)
    }

    suspend inline fun fu7(noinline c: suspend Kla4.() -> Unit) {
        c()
    }

    suspend inline fun fu8(noinline c: suspend Kla4.() -> Unit) {
        val prope12 = object: Kla3 {
            override suspend fun fu4() {
                c()
            }
        }
        prope12.fu4()
    }
}
2021-03-11 23:31:32,368 [main:58] - GENERATED VALUE OF TYPE Kla4 = Kla4()
2021-03-11 23:31:32,368 [main:61] - GENERATED IS CALL =true
2021-03-11 23:31:32,389 [main:67] - randomType = Kla0
2021-03-11 23:31:32,545 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 23:31:32,550 [main:112] - generating klass Kla0 text = class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)
2021-03-11 23:31:32,744 [main:194] - Type params = []
2021-03-11 23:31:32,903 [main:302] - generating value of type = Int true depth = 2
2021-03-11 23:31:32,908 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Kla0, Unit> false depth = 2
2021-03-11 23:31:32,913 [main:302] - generating value of type = Unit false depth = 3
2021-03-11 23:31:33,122 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 23:31:33,129 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 23:31:33,771 [main:302] - generating value of type = Boolean true depth = 6
2021-03-11 23:31:33,777 [main:302] - generating value of type = Function0<Any> false depth = 6
2021-03-11 23:31:33,784 [main:302] - generating value of type = Any false depth = 7
2021-03-11 23:31:33,784 [main:95] - GENERATED = require(true, { "yzzbi"})
2021-03-11 23:31:33,809 [main:106] - GETTING Kla4 from [@kotlin.ExtensionFunctionType] Function1<Kla0, Unit>
2021-03-11 23:31:33,836 [main:106] - GETTING Kla4 from Int
2021-03-11 23:31:33,875 [main:106] - GETTING Kla4 from Impl
2021-03-11 23:31:33,889 [main:106] - GETTING Kla4 from Int
2021-03-11 23:31:33,891 [main:106] - GETTING Kla4 from IntRange
2021-03-11 23:31:33,917 [main:106] - GETTING Kla4 from Int
2021-03-11 23:31:33,918 [main:106] - GETTING Kla4 from String
2021-03-11 23:31:33,940 [main:106] - GETTING Kla4 from String
2021-03-11 23:31:33,941 [main:106] - GETTING Kla4 from Int
2021-03-11 23:31:33,942 [main:106] - GETTING Kla4 from IntRange
2021-03-11 23:31:33,943 [main:106] - GETTING Kla4 from Kla0
2021-03-11 23:31:33,965 [main:106] - GETTING Kla4 from Char
2021-03-11 23:31:33,991 [main:106] - GETTING Kla4 from Impl
2021-03-11 23:31:33,991 [main:114] - replacement of prope5 of type Kla4 is Kla4()
2021-03-11 23:31:34,185 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 23:31:34,186 [main:66] - Compilation checking started
2021-03-11 23:31:34,629 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str

class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)

fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
            }
        }
    )

    return (-23089)?.toChar().lowercase()
}

interface Kla3 {
    suspend fun fu4()
}

class Kla4 {
    var prope4 = "FAIL 1"

    suspend inline fun fu5(noinline c: suspend Kla4.() -> Unit)  {
        val prope11 : suspend Kla4.() -> Unit = { c() }
        prope11()
    }

    suspend inline fun fu6(noinline c: suspend Kla4.() -> Unit) {
        c.startCoroutine(this, Kla5)
    }

    suspend inline fun fu7(noinline c: suspend Kla4.() -> Unit) {
        c()
    }

    suspend inline fun fu8(noinline c: suspend Kla4.() -> Unit) {
        val prope12 = object: Kla3 {
            override suspend fun fu4() {
                c()
            }
        }
        prope12.fu4()
    }
}

fun fu0(prope5: Kla4, c: suspend Kla4.() -> Unit) {
    c.startCoroutine(prope5, Kla5)
}

suspend fun fu1() = "OK"

fun box843(): String {
    val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
val prope5 = Kla4()
    fu0(prope5) {
        fu5 {
            prope4 = fu1()
        }
    }
    if (prope5.prope4 != "OK") return Kla4().prope4
    prope5.prope4 = "FAIL 2"
    fu0(prope5) {
        fu6 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 3"
    fu0(prope5) {
        fu7 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 4"
    fu0(prope5) {
        fu8 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 5"
    fu0(prope5) {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 6"
    fu0(prope5) {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 7"
    fu0(prope5) {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 8"
    fu0(prope5) {
        fu8 {
            fu8 {
                fu8 {
                    fu8 {
                        fu8 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 9"
    fu0(prope5) {
        fu5 {
            fu6 {
                fu7 {
                    fu8 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope5.prope4
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu9(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope13: CoroutineStackFrame? = c
        while (prope13 != null) {
            prope7.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope2 = Kla8()

class Kla9 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu14() {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope10 = {
            prope3.prope9 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:31:34,633 [main:107] - replacing (prope6.exceptionOrNull()?.let(x), Unit?)
2021-03-11 23:31:34,633 [main:50] - replacing prope6.exceptionOrNull()?.let(x) Unit?
2021-03-11 23:31:34,633 [main:54] - Getting value of type Unit?
2021-03-11 23:31:34,816 [main:58] - GENERATED VALUE OF TYPE Unit? = null
2021-03-11 23:31:34,817 [main:61] - GENERATED IS CALL =false
2021-03-11 23:31:35,001 [main:67] - randomType = UByte
2021-03-11 23:31:35,184 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 23:31:35,232 [main:106] - GETTING Unit? from Int
2021-03-11 23:31:35,283 [main:106] - GETTING Unit? from Int
2021-03-11 23:31:35,284 [main:106] - GETTING Unit? from Char
2021-03-11 23:31:35,302 [main:106] - GETTING Unit? from Impl
2021-03-11 23:31:35,314 [main:106] - GETTING Unit? from Int
2021-03-11 23:31:35,315 [main:106] - GETTING Unit? from String
2021-03-11 23:31:35,332 [main:113] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e09c076]]
2021-03-11 23:31:35,332 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e09c076]
2021-03-11 23:31:35,521 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 23:31:35,526 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:31:35,690 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 23:31:35,697 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 23:31:36,077 [main:302] - generating value of type = Any false depth = 4
2021-03-11 23:31:36,078 [main:95] - GENERATED = println("wkjpq")
2021-03-11 23:31:36,078 [main:117] - GENERATED CALL = ((Impl().str))?.forEachIndexed({a: Int, b: Char -> println("wkjpq")})
2021-03-11 23:31:36,078 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2024788a], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e09c076]]
2021-03-11 23:31:36,079 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2024788a]
2021-03-11 23:31:36,079 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e09c076]
2021-03-11 23:31:36,270 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 23:31:36,275 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:31:36,434 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 23:31:36,440 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 23:31:36,812 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 23:31:36,817 [main:95] - GENERATED = require(false)
2021-03-11 23:31:36,817 [main:117] - GENERATED CALL = ((Impl().str))?.subSequence(val prope0 = (Impl()).str.toInt().forEachIndexed({a: Int, b: Char -> require(false)})
2021-03-11 23:31:36,818 [main:113] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4049df3]]
2021-03-11 23:31:36,818 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4049df3]
2021-03-11 23:31:36,998 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 23:31:37,003 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:31:37,164 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 23:31:37,171 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 23:31:37,800 [main:302] - generating value of type = Int true depth = 4
2021-03-11 23:31:37,807 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 23:31:37,823 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 23:31:38,017 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 23:31:38,025 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 23:31:38,448 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 8
2021-03-11 23:31:38,454 [main:302] - generating value of type = Unit false depth = 9
2021-03-11 23:31:38,662 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 23:31:38,669 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 23:31:39,259 [main:302] - generating value of type = Boolean true depth = 12
2021-03-11 23:31:39,265 [main:302] - generating value of type = Function0<Any> false depth = 12
2021-03-11 23:31:39,269 [main:302] - generating value of type = Any false depth = 13
2021-03-11 23:31:39,270 [main:95] - GENERATED = require(true, { "euarx"})
2021-03-11 23:31:39,270 [main:95] - GENERATED = contract({ require(true, { "euarx"})})
2021-03-11 23:31:39,270 [main:95] - GENERATED = repeat(2062047212, {a: Int -> contract({ require(true, { "euarx"})})})
2021-03-11 23:31:39,271 [main:117] - GENERATED CALL = ((Impl().str))?.forEach({a: Char -> repeat(2062047212, {a: Int -> contract({ require(true, { "euarx"})})})})
2021-03-11 23:31:39,271 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2024788a], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4049df3]]
2021-03-11 23:31:39,271 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2024788a]
2021-03-11 23:31:39,271 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4049df3]
2021-03-11 23:31:39,469 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 23:31:39,474 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:31:39,637 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 23:31:39,644 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 23:31:40,248 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 23:31:40,254 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 23:31:40,259 [main:302] - generating value of type = Any false depth = 5
2021-03-11 23:31:40,259 [main:95] - GENERATED = check(true, { "onblz"})
2021-03-11 23:31:40,260 [main:117] - GENERATED CALL = ((Impl().str))?.subSequence((-23089), Kla0(-1235192173, { repeat(2056142132, {a: Int -> require(true, { "fmsqw"})})}).fieldAccessedInsideChild).forEach({a: Char -> check(true, { "onblz"})})
2021-03-11 23:31:40,260 [main:114] - replacement of prope6.exceptionOrNull()?.let(x) of type Unit? is null
2021-03-11 23:31:40,436 [main:33] - Trying to replace Element(SAFE_ACCESS_EXPRESSION) on Element(NULL)
2021-03-11 23:31:40,436 [main:66] - Compilation checking started
2021-03-11 23:31:40,855 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str

class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)

fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
            }
        }
    )

    return (-23089)?.toChar().lowercase()
}

interface Kla3 {
    suspend fun fu4()
}

class Kla4 {
    var prope4 = "FAIL 1"

    suspend inline fun fu5(noinline c: suspend Kla4.() -> Unit)  {
        val prope11 : suspend Kla4.() -> Unit = { c() }
        prope11()
    }

    suspend inline fun fu6(noinline c: suspend Kla4.() -> Unit) {
        c.startCoroutine(this, Kla5)
    }

    suspend inline fun fu7(noinline c: suspend Kla4.() -> Unit) {
        c()
    }

    suspend inline fun fu8(noinline c: suspend Kla4.() -> Unit) {
        val prope12 = object: Kla3 {
            override suspend fun fu4() {
                c()
            }
        }
        prope12.fu4()
    }
}

fun fu0(prope5: Kla4, c: suspend Kla4.() -> Unit) {
    c.startCoroutine(prope5, Kla5)
}

suspend fun fu1() = "OK"

fun box843(): String {
    val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
val prope5 = Kla4()
    fu0(prope5) {
        fu5 {
            prope4 = fu1()
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 2"
    fu0(prope5) {
        fu6 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 3"
    fu0(prope5) {
        fu7 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 4"
    fu0(prope5) {
        fu8 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 5"
    fu0(prope5) {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 6"
    fu0(prope5) {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 7"
    fu0(prope5) {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 8"
    fu0(prope5) {
        fu8 {
            fu8 {
                fu8 {
                    fu8 {
                        fu8 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 9"
    fu0(prope5) {
        fu5 {
            fu6 {
                fu7 {
                    fu8 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope5.prope4
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
null
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu9(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope13: CoroutineStackFrame? = c
        while (prope13 != null) {
            prope7.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope2 = Kla8()

class Kla9 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu14() {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope10 = {
            prope3.prope9 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:31:40,858 [main:107] - replacing (this, Kla4)
2021-03-11 23:31:40,859 [main:50] - replacing this Kla4
2021-03-11 23:31:40,859 [main:54] - Getting value of type Kla4
2021-03-11 23:31:41,059 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 23:31:41,065 [main:112] - generating klass Kla4 text = class Kla4 {
    var prope4 = "FAIL 1"

    suspend inline fun fu5(noinline c: suspend Kla4.() -> Unit)  {
        val prope11 : suspend Kla4.() -> Unit = { c() }
        prope11()
    }

    suspend inline fun fu6(noinline c: suspend Kla4.() -> Unit) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
c.startCoroutine(this, Kla5)
    }

    suspend inline fun fu7(noinline c: suspend Kla4.() -> Unit) {
        c()
    }

    suspend inline fun fu8(noinline c: suspend Kla4.() -> Unit) {
        val prope12 = object: Kla3 {
            override suspend fun fu4() {
                c()
            }
        }
        prope12.fu4()
    }
}
2021-03-11 23:31:41,065 [main:58] - GENERATED VALUE OF TYPE Kla4 = Kla4()
2021-03-11 23:31:41,065 [main:61] - GENERATED IS CALL =true
2021-03-11 23:31:41,076 [main:67] - randomType = String
2021-03-11 23:31:41,232 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:31:41,260 [main:106] - GETTING Kla4 from Char
2021-03-11 23:31:41,278 [main:106] - GETTING Kla4 from IntRange
2021-03-11 23:31:41,306 [main:106] - GETTING Kla4 from Kla0
2021-03-11 23:31:41,325 [main:106] - GETTING Kla4 from Int
2021-03-11 23:31:41,355 [main:106] - GETTING Kla4 from Int
2021-03-11 23:31:41,356 [main:106] - GETTING Kla4 from String
2021-03-11 23:31:41,375 [main:106] - GETTING Kla4 from [@kotlin.ExtensionFunctionType] Function1<Kla0, Unit>
2021-03-11 23:31:41,394 [main:106] - GETTING Kla4 from Int
2021-03-11 23:31:41,395 [main:106] - GETTING Kla4 from Impl
2021-03-11 23:31:41,406 [main:106] - GETTING Kla4 from String
2021-03-11 23:31:41,407 [main:106] - GETTING Kla4 from Int
2021-03-11 23:31:41,408 [main:106] - GETTING Kla4 from Impl
2021-03-11 23:31:41,408 [main:106] - GETTING Kla4 from IntRange
2021-03-11 23:31:41,408 [main:114] - replacement of this of type Kla4 is Kla4()
2021-03-11 23:31:41,590 [main:33] - Trying to replace Element(THIS_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 23:31:41,591 [main:66] - Compilation checking started
2021-03-11 23:31:42,026 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str

class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)

fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
            }
        }
    )

    return (-23089)?.toChar().lowercase()
}

interface Kla3 {
    suspend fun fu4()
}

class Kla4 {
    var prope4 = "FAIL 1"

    suspend inline fun fu5(noinline c: suspend Kla4.() -> Unit)  {
        val prope11 : suspend Kla4.() -> Unit = { c() }
        prope11()
    }

    suspend inline fun fu6(noinline c: suspend Kla4.() -> Unit) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
c.startCoroutine(Kla4(), Kla5)
    }

    suspend inline fun fu7(noinline c: suspend Kla4.() -> Unit) {
        c()
    }

    suspend inline fun fu8(noinline c: suspend Kla4.() -> Unit) {
        val prope12 = object: Kla3 {
            override suspend fun fu4() {
                c()
            }
        }
        prope12.fu4()
    }
}

fun fu0(prope5: Kla4, c: suspend Kla4.() -> Unit) {
    c.startCoroutine(prope5, Kla5)
}

suspend fun fu1() = "OK"

fun box843(): String {
    val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
val prope5 = Kla4()
    fu0(prope5) {
        fu5 {
            prope4 = fu1()
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 2"
    fu0(prope5) {
        fu6 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 3"
    fu0(prope5) {
        fu7 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 4"
    fu0(prope5) {
        fu8 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 5"
    fu0(prope5) {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 6"
    fu0(prope5) {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 7"
    fu0(prope5) {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 8"
    fu0(prope5) {
        fu8 {
            fu8 {
                fu8 {
                    fu8 {
                        fu8 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 9"
    fu0(prope5) {
        fu5 {
            fu6 {
                fu7 {
                    fu8 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope5.prope4
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu9(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope13: CoroutineStackFrame? = c
        while (prope13 != null) {
            prope7.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope2 = Kla8()

class Kla9 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu14() {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope10 = {
            prope3.prope9 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:31:42,030 [main:107] - replacing (prope4, String)
2021-03-11 23:31:42,031 [main:50] - replacing prope4 String
2021-03-11 23:31:42,031 [main:54] - Getting value of type String
2021-03-11 23:31:42,209 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:31:42,223 [main:58] - GENERATED VALUE OF TYPE String = "dtohj"
2021-03-11 23:31:42,223 [main:61] - GENERATED IS CALL =false
2021-03-11 23:31:42,415 [main:67] - randomType = Long
2021-03-11 23:31:42,611 [main:302] - generating value of type = Long true depth = 0
2021-03-11 23:31:42,677 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1710257f]
2021-03-11 23:31:42,848 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:31:42,863 [main:78] - Generated call from random type = (8907333254703688830).toString(-986100671)
2021-03-11 23:31:42,864 [main:106] - GETTING String from IntRange
2021-03-11 23:31:42,895 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@1ad4f4dc], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]]
2021-03-11 23:31:42,895 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]
2021-03-11 23:31:43,047 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:31:43,052 [main:117] - GENERATED CALL = ((Impl().str).length.until((-23089))).first.toString(1652862305)
2021-03-11 23:31:43,052 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@587b1309], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]]
2021-03-11 23:31:43,053 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]
2021-03-11 23:31:43,202 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:31:43,208 [main:117] - GENERATED CALL = ((Impl().str).length.until((-23089))).endInclusive.toString(-971301307)
2021-03-11 23:31:43,208 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7c17d7d1]]
2021-03-11 23:31:43,208 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7c17d7d1]
2021-03-11 23:31:43,359 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:31:43,524 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 23:31:43,531 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 23:31:43,883 [main:302] - generating value of type = String true depth = 3
2021-03-11 23:31:43,888 [main:95] - GENERATED = StringBuilder("jaamh")
2021-03-11 23:31:44,050 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:31:44,216 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 23:31:44,222 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 23:31:44,561 [main:302] - generating value of type = Int true depth = 3
2021-03-11 23:31:44,567 [main:95] - GENERATED = StringBuilder(-1447335603)
2021-03-11 23:31:44,716 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:31:44,875 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:31:45,035 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 23:31:45,040 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 23:31:45,049 [main:117] - GENERATED CALL = ((Impl().str).length.until((-23089))).joinToString(StringBuilder("jaamh"), StringBuilder(-1447335603), "rblpq", (-23089), "ulfzj", {a: T -> "byovg"})
2021-03-11 23:31:45,049 [main:114] - replacement of prope4 of type String is ((Impl().str).length.until((-23089))).endInclusive.toString(-971301307)
2021-03-11 23:31:45,198 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:31:45,198 [main:66] - Compilation checking started
2021-03-11 23:31:45,650 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str

class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)

fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
            }
        }
    )

    return (-23089)?.toChar().lowercase()
}

interface Kla3 {
    suspend fun fu4()
}

class Kla4 {
    var prope4 = "FAIL 1"

    suspend inline fun fu5(noinline c: suspend Kla4.() -> Unit)  {
        val prope11 : suspend Kla4.() -> Unit = { c() }
        prope11()
    }

    suspend inline fun fu6(noinline c: suspend Kla4.() -> Unit) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
c.startCoroutine(this, Kla5)
    }

    suspend inline fun fu7(noinline c: suspend Kla4.() -> Unit) {
        c()
    }

    suspend inline fun fu8(noinline c: suspend Kla4.() -> Unit) {
        val prope12 = object: Kla3 {
            override suspend fun fu4() {
                c()
            }
        }
        prope12.fu4()
    }
}

fun fu0(prope5: Kla4, c: suspend Kla4.() -> Unit) {
    c.startCoroutine(prope5, Kla5)
}

suspend fun fu1() = "OK"

fun box843(): String {
    val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
val prope5 = Kla4()
    fu0(prope5) {
        fu5 {
            prope4 = fu1()
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 2"
    fu0(prope5) {
        fu6 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.((Impl().str).length.until((-23089))).endInclusive.toString(-971301307) = "FAIL 3"
    fu0(prope5) {
        fu7 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 4"
    fu0(prope5) {
        fu8 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 5"
    fu0(prope5) {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 6"
    fu0(prope5) {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 7"
    fu0(prope5) {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 8"
    fu0(prope5) {
        fu8 {
            fu8 {
                fu8 {
                    fu8 {
                        fu8 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 9"
    fu0(prope5) {
        fu5 {
            fu6 {
                fu7 {
                    fu8 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope5.prope4
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu9(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope13: CoroutineStackFrame? = c
        while (prope13 != null) {
            prope7.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope2 = Kla8()

class Kla9 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu14() {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope3.prope10 = {
            prope3.prope9 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:31:45,653 [main:107] - replacing (prope3.prope10, Function0<Unit>)
2021-03-11 23:31:45,654 [main:50] - replacing prope3.prope10 Function0<Unit>
2021-03-11 23:31:45,654 [main:54] - Getting value of type Function0<Unit>
2021-03-11 23:31:45,834 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 23:31:45,840 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:31:46,031 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 23:31:46,037 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 23:31:46,724 [main:302] - generating value of type = Int true depth = 4
2021-03-11 23:31:46,730 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 23:31:46,736 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 23:31:46,901 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 23:31:46,908 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 23:31:47,550 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 23:31:47,556 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-11 23:31:47,561 [main:302] - generating value of type = Any false depth = 9
2021-03-11 23:31:47,562 [main:95] - GENERATED = check(false, { "srlzn"})
2021-03-11 23:31:47,562 [main:95] - GENERATED = repeat(915795232, {a: Int -> check(false, { "srlzn"})})
2021-03-11 23:31:47,562 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(915795232, {a: Int -> check(false, { "srlzn"})})}
2021-03-11 23:31:47,562 [main:61] - GENERATED IS CALL =false
2021-03-11 23:31:47,974 [main:67] - randomType = ArrayList<Byte>
2021-03-11 23:31:48,131 [main:302] - generating value of type = ArrayList<Byte> false depth = 0
2021-03-11 23:31:48,316 [main:43] - GENERATING CALL OF fun <E> ArrayList(initialCapacity: kotlin.Int): ArrayList<Byte> = TODO()
2021-03-11 23:31:48,332 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(initialCapacity: kotlin.Int): ArrayList<Byte> = TODO()
2021-03-11 23:31:48,728 [main:302] - generating value of type = Int true depth = 3
2021-03-11 23:31:48,737 [main:95] - GENERATED = ArrayList<Byte>(-1657876545)
2021-03-11 23:31:48,887 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 23:31:48,917 [main:106] - GETTING Function0<Unit> from Impl
2021-03-11 23:31:48,929 [main:106] - GETTING Function0<Unit> from Kla0
2021-03-11 23:31:48,947 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 23:31:48,965 [main:106] - GETTING Function0<Unit> from Impl
2021-03-11 23:31:48,966 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 23:31:48,967 [main:106] - GETTING Function0<Unit> from IntRange
2021-03-11 23:31:48,988 [main:106] - GETTING Function0<Unit> from IntRange
2021-03-11 23:31:48,989 [main:106] - GETTING Function0<Unit> from [@kotlin.ExtensionFunctionType] Function1<Kla0, Unit>
2021-03-11 23:31:49,009 [main:106] - GETTING Function0<Unit> from String
2021-03-11 23:31:49,026 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 23:31:49,027 [main:106] - GETTING Function0<Unit> from String
2021-03-11 23:31:49,028 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 23:31:49,028 [main:114] - replacement of prope3.prope10 of type Function0<Unit> is { repeat(915795232, {a: Int -> check(false, { "srlzn"})})}
2021-03-11 23:31:49,220 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 23:31:49,221 [main:66] - Compilation checking started
2021-03-11 23:31:49,662 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str

class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)

fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
            }
        }
    )

    return (-23089)?.toChar().lowercase()
}

interface Kla3 {
    suspend fun fu4()
}

class Kla4 {
    var prope4 = "FAIL 1"

    suspend inline fun fu5(noinline c: suspend Kla4.() -> Unit)  {
        val prope11 : suspend Kla4.() -> Unit = { c() }
        prope11()
    }

    suspend inline fun fu6(noinline c: suspend Kla4.() -> Unit) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
c.startCoroutine(this, Kla5)
    }

    suspend inline fun fu7(noinline c: suspend Kla4.() -> Unit) {
        c()
    }

    suspend inline fun fu8(noinline c: suspend Kla4.() -> Unit) {
        val prope12 = object: Kla3 {
            override suspend fun fu4() {
                c()
            }
        }
        prope12.fu4()
    }
}

fun fu0(prope5: Kla4, c: suspend Kla4.() -> Unit) {
    c.startCoroutine(prope5, Kla5)
}

suspend fun fu1() = "OK"

fun box843(): String {
    val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
val prope5 = Kla4()
    fu0(prope5) {
        fu5 {
            prope4 = fu1()
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 2"
    fu0(prope5) {
        fu6 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 3"
    fu0(prope5) {
        fu7 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 4"
    fu0(prope5) {
        fu8 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 5"
    fu0(prope5) {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 6"
    fu0(prope5) {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 7"
    fu0(prope5) {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 8"
    fu0(prope5) {
        fu8 {
            fu8 {
                fu8 {
                    fu8 {
                        fu8 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 9"
    fu0(prope5) {
        fu5 {
            fu6 {
                fu7 {
                    fu8 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope5.prope4
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu9(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope13: CoroutineStackFrame? = c
        while (prope13 != null) {
            prope7.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope2 = Kla8()

class Kla9 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu14() {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
{ repeat(915795232, {a: Int -> check(false, { "srlzn"})})} = {
            prope3.prope9 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:31:49,665 [main:107] - replacing (prope5.prope4, String)
2021-03-11 23:31:49,666 [main:50] - replacing prope5.prope4 String
2021-03-11 23:31:49,666 [main:54] - Getting value of type String
2021-03-11 23:31:49,858 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:31:49,864 [main:58] - GENERATED VALUE OF TYPE String = "fbvqc"
2021-03-11 23:31:49,864 [main:61] - GENERATED IS CALL =false
2021-03-11 23:31:51,138 [main:67] - randomType = ArrayList<Function2<Byte, Sequence<UShort>, UByte>>
2021-03-11 23:31:51,295 [main:302] - generating value of type = ArrayList<Function2<Byte, Sequence<UShort>, UByte>> false depth = 0
2021-03-11 23:31:51,492 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Function2<Byte, Sequence<UShort>, UByte>> = TODO()
2021-03-11 23:31:51,499 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Function2<Byte, Sequence<UShort>, UByte>> = TODO()
2021-03-11 23:31:51,679 [main:95] - GENERATED = arrayListOf<Function2<Byte, Sequence<UShort>, UByte>>()
2021-03-11 23:31:51,913 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7c17d7d1]
2021-03-11 23:31:52,104 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:31:52,269 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 23:31:52,276 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 23:31:52,629 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 23:31:52,790 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 23:31:52,797 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 23:31:53,151 [main:302] - generating value of type = String true depth = 6
2021-03-11 23:31:53,157 [main:95] - GENERATED = StringBuilder("phsgn")
2021-03-11 23:31:53,157 [main:95] - GENERATED = StringBuilder(StringBuilder("phsgn"))
2021-03-11 23:31:53,310 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:31:53,520 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:31:53,683 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:31:53,843 [main:78] - Generated call from random type = (arrayListOf<Function2<Byte, Sequence<UShort>, UByte>>()).joinToString(StringBuilder(StringBuilder("phsgn")), "ravor", "ynnlp", val prope0 = (Impl()).str.toInt()
2021-03-11 23:31:53,844 [main:106] - GETTING String from IntRange
2021-03-11 23:31:53,866 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7c17d7d1]]
2021-03-11 23:31:53,866 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7c17d7d1]
2021-03-11 23:31:54,020 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:31:54,183 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:31:54,345 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 23:31:54,352 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 23:31:54,706 [main:302] - generating value of type = Int true depth = 3
2021-03-11 23:31:54,712 [main:95] - GENERATED = StringBuilder(1198663681)
2021-03-11 23:31:54,870 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:31:55,045 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:31:55,209 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 23:31:55,214 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 23:31:55,377 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 23:31:55,384 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 23:31:55,778 [main:302] - generating value of type = CharSequence false depth = 4
2021-03-11 23:31:55,963 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 23:31:55,978 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 23:31:56,402 [main:302] - generating value of type = Int true depth = 7
2021-03-11 23:31:56,408 [main:95] - GENERATED = StringBuilder(-557214188)
2021-03-11 23:31:56,408 [main:95] - GENERATED = StringBuilder(StringBuilder(-557214188))
2021-03-11 23:31:56,409 [main:117] - GENERATED CALL = ((Impl().str).length.until((-23089))).joinToString("wcspl", StringBuilder(1198663681), "aayti", (Impl().str).length, "pqxzp", {a: T -> StringBuilder(StringBuilder(-557214188))})
2021-03-11 23:31:56,409 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@1ad4f4dc], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]]
2021-03-11 23:31:56,409 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]
2021-03-11 23:31:56,569 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:31:56,575 [main:117] - GENERATED CALL = ((Impl().str).length.until((-23089))).first.toString(1631918206)
2021-03-11 23:31:56,575 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@587b1309], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]]
2021-03-11 23:31:56,575 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]
2021-03-11 23:31:56,747 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:31:56,763 [main:117] - GENERATED CALL = ((Impl().str).length.until((-23089))).endInclusive.toString(313542546)
2021-03-11 23:31:56,763 [main:114] - replacement of prope5.prope4 of type String is "fbvqc"
2021-03-11 23:31:56,918 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 23:31:56,918 [main:66] - Compilation checking started
2021-03-11 23:31:57,358 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str

class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)

fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
            }
        }
    )

    return (-23089)?.toChar().lowercase()
}

interface Kla3 {
    suspend fun fu4()
}

class Kla4 {
    var prope4 = "FAIL 1"

    suspend inline fun fu5(noinline c: suspend Kla4.() -> Unit)  {
        val prope11 : suspend Kla4.() -> Unit = { c() }
        prope11()
    }

    suspend inline fun fu6(noinline c: suspend Kla4.() -> Unit) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
c.startCoroutine(this, Kla5)
    }

    suspend inline fun fu7(noinline c: suspend Kla4.() -> Unit) {
        c()
    }

    suspend inline fun fu8(noinline c: suspend Kla4.() -> Unit) {
        val prope12 = object: Kla3 {
            override suspend fun fu4() {
                c()
            }
        }
        prope12.fu4()
    }
}

fun fu0(prope5: Kla4, c: suspend Kla4.() -> Unit) {
    c.startCoroutine(prope5, Kla5)
}

suspend fun fu1() = "OK"

fun box843(): String {
    val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
val prope5 = Kla4()
    fu0(prope5) {
        fu5 {
            prope4 = fu1()
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 2"
    fu0(prope5) {
        fu6 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 3"
    fu0(prope5) {
        fu7 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 4"
    fu0(prope5) {
        fu8 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 5"
    fu0(prope5) {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return "fbvqc"
    prope5.prope4 = "FAIL 6"
    fu0(prope5) {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 7"
    fu0(prope5) {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 8"
    fu0(prope5) {
        fu8 {
            fu8 {
                fu8 {
                    fu8 {
                        fu8 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 9"
    fu0(prope5) {
        fu5 {
            fu6 {
                fu7 {
                    fu8 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope5.prope4
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu9(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope13: CoroutineStackFrame? = c
        while (prope13 != null) {
            prope7.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope2 = Kla8()

class Kla9 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu14() {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope3.prope10 = {
            prope3.prope9 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:31:57,361 [main:107] - replacing (prope9, Boolean)
2021-03-11 23:31:57,361 [main:50] - replacing prope9 Boolean
2021-03-11 23:31:57,361 [main:54] - Getting value of type Boolean
2021-03-11 23:31:57,545 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:31:57,550 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 23:31:57,551 [main:61] - GENERATED IS CALL =false
2021-03-11 23:31:57,982 [main:67] - randomType = Function1<Kla5, ULong>
2021-03-11 23:31:57,983 [main:106] - GETTING Boolean from String
2021-03-11 23:31:58,009 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e4327cc], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c9f1498]]
2021-03-11 23:31:58,009 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e4327cc]
2021-03-11 23:31:58,164 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:31:58,170 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c9f1498]
2021-03-11 23:31:58,170 [main:117] - GENERATED CALL = ((Impl().str)).get(1424975889).isLetterOrDigit()
2021-03-11 23:31:58,170 [main:113] - Case = [public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fbd0172]]
2021-03-11 23:31:58,170 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fbd0172]
2021-03-11 23:31:58,347 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:31:58,353 [main:117] - GENERATED CALL = ((Impl().str)).hasSurrogatePairAt(-2108147562)
2021-03-11 23:31:58,353 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2024788a], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@131c8f77]]
2021-03-11 23:31:58,353 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2024788a]
2021-03-11 23:31:58,354 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@131c8f77]
2021-03-11 23:31:58,354 [main:117] - GENERATED CALL = ((Impl().str)).subSequence(-23089, val prope0 = (Impl()).str.toInt().isBlank()
2021-03-11 23:31:58,354 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2024788a], public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf3e023]]
2021-03-11 23:31:58,354 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2024788a]
2021-03-11 23:31:58,522 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:31:58,716 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:31:58,721 [main:149] - GENERATING call of type public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1bf3e023]
2021-03-11 23:31:58,890 [main:302] - generating value of type = Char true depth = 0
2021-03-11 23:31:59,082 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:31:59,088 [main:117] - GENERATED CALL = ((Impl().str)).subSequence(753919424, -1364105798).startsWith('ë‹½', true)
2021-03-11 23:31:59,088 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@42c6563f], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6a13143]]
2021-03-11 23:31:59,088 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@42c6563f]
2021-03-11 23:31:59,247 [main:302] - generating value of type = Any false depth = 0
2021-03-11 23:31:59,247 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6a13143]
2021-03-11 23:31:59,247 [main:117] - GENERATED CALL = ((Impl().str)).equals("kajgf").not()
2021-03-11 23:31:59,247 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2024788a], public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fbd0172]]
2021-03-11 23:31:59,248 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2024788a]
2021-03-11 23:31:59,437 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:31:59,442 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fbd0172]
2021-03-11 23:31:59,597 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:31:59,602 [main:117] - GENERATED CALL = ((Impl().str)).subSequence((Impl().str).length, 357862970).hasSurrogatePairAt(-908331318)
2021-03-11 23:31:59,602 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca3c6ab]]
2021-03-11 23:31:59,602 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ca3c6ab]
2021-03-11 23:31:59,603 [main:117] - GENERATED CALL = ((Impl().str)).isEmpty()
2021-03-11 23:31:59,603 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e4327cc], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e505177]]
2021-03-11 23:31:59,603 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e4327cc]
2021-03-11 23:31:59,603 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e505177]
2021-03-11 23:31:59,603 [main:117] - GENERATED CALL = ((Impl().str)).get(val prope0 = (Impl()).str.toInt().isISOControl()
2021-03-11 23:31:59,603 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e4327cc], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534c72cb]]
2021-03-11 23:31:59,603 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e4327cc]
2021-03-11 23:31:59,603 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534c72cb]
2021-03-11 23:31:59,604 [main:117] - GENERATED CALL = ((Impl().str)).get((-23089)).isLowSurrogate()
2021-03-11 23:31:59,604 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2024788a], public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@691c0e39]]
2021-03-11 23:31:59,604 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2024788a]
2021-03-11 23:31:59,779 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:31:59,793 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@691c0e39]
2021-03-11 23:31:59,794 [main:117] - GENERATED CALL = ((Impl().str)).subSequence((Impl().str).length, 389077817).none()
2021-03-11 23:31:59,794 [main:114] - replacement of prope9 of type Boolean is ((Impl().str)).isEmpty()
2021-03-11 23:31:59,970 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:31:59,970 [main:66] - Compilation checking started
2021-03-11 23:32:00,410 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str

class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)

fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
            }
        }
    )

    return (-23089)?.toChar().lowercase()
}

interface Kla3 {
    suspend fun fu4()
}

class Kla4 {
    var prope4 = "FAIL 1"

    suspend inline fun fu5(noinline c: suspend Kla4.() -> Unit)  {
        val prope11 : suspend Kla4.() -> Unit = { c() }
        prope11()
    }

    suspend inline fun fu6(noinline c: suspend Kla4.() -> Unit) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
c.startCoroutine(this, Kla5)
    }

    suspend inline fun fu7(noinline c: suspend Kla4.() -> Unit) {
        c()
    }

    suspend inline fun fu8(noinline c: suspend Kla4.() -> Unit) {
        val prope12 = object: Kla3 {
            override suspend fun fu4() {
                c()
            }
        }
        prope12.fu4()
    }
}

fun fu0(prope5: Kla4, c: suspend Kla4.() -> Unit) {
    c.startCoroutine(prope5, Kla5)
}

suspend fun fu1() = "OK"

fun box843(): String {
    val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
val prope5 = Kla4()
    fu0(prope5) {
        fu5 {
            prope4 = fu1()
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 2"
    fu0(prope5) {
        fu6 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 3"
    fu0(prope5) {
        fu7 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 4"
    fu0(prope5) {
        fu8 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 5"
    fu0(prope5) {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 6"
    fu0(prope5) {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 7"
    fu0(prope5) {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 8"
    fu0(prope5) {
        fu8 {
            fu8 {
                fu8 {
                    fu8 {
                        fu8 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 9"
    fu0(prope5) {
        fu5 {
            fu6 {
                fu7 {
                    fu8 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope5.prope4
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu9(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope13: CoroutineStackFrame? = c
        while (prope13 != null) {
            prope7.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope2 = Kla8()

class Kla9 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu14() {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope3.prope10 = {
            prope3.((Impl().str)).isEmpty() = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:32:00,416 [main:107] - replacing ({
                            prope4 = fu1()
                        }, [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit>)
2021-03-11 23:32:00,418 [main:50] - replacing {
                            prope4 = fu1()
                        } [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit>
2021-03-11 23:32:00,418 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit>
2021-03-11 23:32:00,622 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> false depth = 0
2021-03-11 23:32:00,631 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:32:00,799 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 23:32:00,806 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 23:32:01,208 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 23:32:01,214 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 23:32:01,403 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 23:32:01,418 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 23:32:01,998 [main:302] - generating value of type = Int true depth = 8
2021-03-11 23:32:02,003 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-11 23:32:02,008 [main:302] - generating value of type = Unit false depth = 9
2021-03-11 23:32:02,209 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 23:32:02,216 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 23:32:02,621 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 12
2021-03-11 23:32:02,626 [main:302] - generating value of type = Unit false depth = 13
2021-03-11 23:32:02,800 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 23:32:02,807 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 23:32:03,264 [main:302] - generating value of type = Any false depth = 16
2021-03-11 23:32:03,264 [main:385] - Cant generate call of fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 23:32:03,265 [main:95] - GENERATED = contract({ })
2021-03-11 23:32:03,265 [main:95] - GENERATED = repeat(-882528383, {a: Int -> contract({ })})
2021-03-11 23:32:03,265 [main:95] - GENERATED = contract({ repeat(-882528383, {a: Int -> contract({ })})})
2021-03-11 23:32:03,265 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> = {a: Kla4 -> contract({ repeat(-882528383, {a: Int -> contract({ })})})}
2021-03-11 23:32:03,265 [main:61] - GENERATED IS CALL =false
2021-03-11 23:32:03,520 [main:67] - randomType = ArrayDeque<Int>
2021-03-11 23:32:03,696 [main:302] - generating value of type = ArrayDeque<Int> false depth = 0
2021-03-11 23:32:03,882 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<Int> = TODO()
2021-03-11 23:32:03,898 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<Int> = TODO()
2021-03-11 23:32:04,067 [main:95] - GENERATED = ArrayDeque<Int>()
2021-03-11 23:32:04,186 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from [@kotlin.ExtensionFunctionType] Function1<Kla0, Unit>
2021-03-11 23:32:04,209 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from String
2021-03-11 23:32:04,229 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from IntRange
2021-03-11 23:32:04,254 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from Impl
2021-03-11 23:32:04,269 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from Int
2021-03-11 23:32:04,303 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from Kla0
2021-03-11 23:32:04,324 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from Int
2021-03-11 23:32:04,327 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from IntRange
2021-03-11 23:32:04,331 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from Int
2021-03-11 23:32:04,335 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from Int
2021-03-11 23:32:04,338 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from Impl
2021-03-11 23:32:04,342 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from Char
2021-03-11 23:32:04,364 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from String
2021-03-11 23:32:04,364 [main:114] - replacement of {
                            prope4 = fu1()
                        } of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> is {a: Kla4 -> contract({ repeat(-882528383, {a: Int -> contract({ })})})}
2021-03-11 23:32:04,538 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 23:32:04,538 [main:66] - Compilation checking started
2021-03-11 23:32:05,000 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str

class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)

fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
            }
        }
    )

    return (-23089)?.toChar().lowercase()
}

interface Kla3 {
    suspend fun fu4()
}

class Kla4 {
    var prope4 = "FAIL 1"

    suspend inline fun fu5(noinline c: suspend Kla4.() -> Unit)  {
        val prope11 : suspend Kla4.() -> Unit = { c() }
        prope11()
    }

    suspend inline fun fu6(noinline c: suspend Kla4.() -> Unit) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
c.startCoroutine(this, Kla5)
    }

    suspend inline fun fu7(noinline c: suspend Kla4.() -> Unit) {
        c()
    }

    suspend inline fun fu8(noinline c: suspend Kla4.() -> Unit) {
        val prope12 = object: Kla3 {
            override suspend fun fu4() {
                c()
            }
        }
        prope12.fu4()
    }
}

fun fu0(prope5: Kla4, c: suspend Kla4.() -> Unit) {
    c.startCoroutine(prope5, Kla5)
}

suspend fun fu1() = "OK"

fun box843(): String {
    val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
val prope5 = Kla4()
    fu0(prope5) {
        fu5 {
            prope4 = fu1()
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 2"
    fu0(prope5) {
        fu6 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 3"
    fu0(prope5) {
        fu7 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 4"
    fu0(prope5) {
        fu8 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 5"
    fu0(prope5) {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {a: Kla4 -> contract({ repeat(-882528383, {a: Int -> contract({ })})})}
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 6"
    fu0(prope5) {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 7"
    fu0(prope5) {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 8"
    fu0(prope5) {
        fu8 {
            fu8 {
                fu8 {
                    fu8 {
                        fu8 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 9"
    fu0(prope5) {
        fu5 {
            fu6 {
                fu7 {
                    fu8 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope5.prope4
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu9(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope13: CoroutineStackFrame? = c
        while (prope13 != null) {
            prope7.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope2 = Kla8()

class Kla9 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu14() {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope3.prope10 = {
            prope3.prope9 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:32:05,004 [main:107] - replacing ({
                    fu5 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }, [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit>)
2021-03-11 23:32:05,005 [main:50] - replacing {
                    fu5 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                } [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit>
2021-03-11 23:32:05,005 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit>
2021-03-11 23:32:05,184 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> false depth = 0
2021-03-11 23:32:05,189 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:32:05,364 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 23:32:05,371 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 23:32:05,980 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 23:32:05,985 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 23:32:05,991 [main:302] - generating value of type = Any false depth = 5
2021-03-11 23:32:05,991 [main:95] - GENERATED = check(true, { "mszkp"})
2021-03-11 23:32:05,991 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> = {a: Kla4 -> check(true, { "mszkp"})}
2021-03-11 23:32:05,991 [main:61] - GENERATED IS CALL =false
2021-03-11 23:32:06,415 [main:67] - randomType = Kla10?
2021-03-11 23:32:06,574 [main:302] - generating value of type = Kla10 false depth = 0
2021-03-11 23:32:06,579 [main:112] - generating klass Kla10 text = object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope3.prope10 = {
            prope3.prope9 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}
2021-03-11 23:32:06,601 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from Int
2021-03-11 23:32:06,635 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from Char
2021-03-11 23:32:06,655 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from Int
2021-03-11 23:32:06,659 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from IntRange
2021-03-11 23:32:06,684 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from String
2021-03-11 23:32:06,704 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from Int
2021-03-11 23:32:06,708 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from Impl
2021-03-11 23:32:06,723 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from Impl
2021-03-11 23:32:06,727 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from String
2021-03-11 23:32:06,730 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from Kla0
2021-03-11 23:32:06,752 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from Int
2021-03-11 23:32:06,755 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from [@kotlin.ExtensionFunctionType] Function1<Kla0, Unit>
2021-03-11 23:32:06,778 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> from IntRange
2021-03-11 23:32:06,778 [main:114] - replacement of {
                    fu5 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                } of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla4, Unit> is {a: Kla4 -> check(true, { "mszkp"})}
2021-03-11 23:32:06,950 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 23:32:06,950 [main:66] - Compilation checking started
2021-03-11 23:32:07,426 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str

class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)

fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
            }
        }
    )

    return (-23089)?.toChar().lowercase()
}

interface Kla3 {
    suspend fun fu4()
}

class Kla4 {
    var prope4 = "FAIL 1"

    suspend inline fun fu5(noinline c: suspend Kla4.() -> Unit)  {
        val prope11 : suspend Kla4.() -> Unit = { c() }
        prope11()
    }

    suspend inline fun fu6(noinline c: suspend Kla4.() -> Unit) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
c.startCoroutine(this, Kla5)
    }

    suspend inline fun fu7(noinline c: suspend Kla4.() -> Unit) {
        c()
    }

    suspend inline fun fu8(noinline c: suspend Kla4.() -> Unit) {
        val prope12 = object: Kla3 {
            override suspend fun fu4() {
                c()
            }
        }
        prope12.fu4()
    }
}

fun fu0(prope5: Kla4, c: suspend Kla4.() -> Unit) {
    c.startCoroutine(prope5, Kla5)
}

suspend fun fu1() = "OK"

fun box843(): String {
    val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
val prope5 = Kla4()
    fu0(prope5) {
        fu5 {
            prope4 = fu1()
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 2"
    fu0(prope5) {
        fu6 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 3"
    fu0(prope5) {
        fu7 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 4"
    fu0(prope5) {
        fu8 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 5"
    fu0(prope5) {
        fu5 {
            fu5 {
                fu5 {a: Kla4 -> check(true, { "mszkp"})}
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 6"
    fu0(prope5) {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 7"
    fu0(prope5) {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 8"
    fu0(prope5) {
        fu8 {
            fu8 {
                fu8 {
                    fu8 {
                        fu8 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 9"
    fu0(prope5) {
        fu5 {
            fu6 {
                fu7 {
                    fu8 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope5.prope4
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu9(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope13: CoroutineStackFrame? = c
        while (prope13 != null) {
            prope7.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope2 = Kla8()

class Kla9 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu14() {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope3.prope10 = {
            prope3.prope9 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:32:07,432 [main:107] - replacing (prope5, Kla4)
2021-03-11 23:32:07,434 [main:50] - replacing prope5 Kla4
2021-03-11 23:32:07,434 [main:54] - Getting value of type Kla4
2021-03-11 23:32:07,646 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 23:32:07,651 [main:112] - generating klass Kla4 text = class Kla4 {
    var prope4 = "FAIL 1"

    suspend inline fun fu5(noinline c: suspend Kla4.() -> Unit)  {
        val prope11 : suspend Kla4.() -> Unit = { c() }
        prope11()
    }

    suspend inline fun fu6(noinline c: suspend Kla4.() -> Unit) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
c.startCoroutine(this, Kla5)
    }

    suspend inline fun fu7(noinline c: suspend Kla4.() -> Unit) {
        c()
    }

    suspend inline fun fu8(noinline c: suspend Kla4.() -> Unit) {
        val prope12 = object: Kla3 {
            override suspend fun fu4() {
                c()
            }
        }
        prope12.fu4()
    }
}
2021-03-11 23:32:07,651 [main:58] - GENERATED VALUE OF TYPE Kla4 = Kla4()
2021-03-11 23:32:07,652 [main:61] - GENERATED IS CALL =true
2021-03-11 23:32:10,986 [main:67] - randomType = HashMap<Triple<HashMap<Float, Float>, Float, Function2<Byte?, Triple<Kla10, Long, B>, Impl?>>, Byte>
2021-03-11 23:32:11,157 [main:302] - generating value of type = HashMap<Triple<HashMap<Float, Float>, Float, Function2<Byte?, Triple<Kla10, Long, B>, Impl?>>, Byte> false depth = 0
2021-03-11 23:32:11,353 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(): HashMap<Triple<HashMap<Float, Float>, Float, Function2<Byte?, Triple<Kla10, Long, B>, Impl?>>, Byte> = TODO()
2021-03-11 23:32:11,361 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(): HashMap<Triple<HashMap<Float, Float>, Float, Function2<Byte?, Triple<Kla10, Long, B>, Impl?>>, Byte> = TODO()
2021-03-11 23:32:11,560 [main:95] - GENERATED = hashMapOf<Triple<HashMap<Float, Float>, Float, Function2<Byte?, Triple<Kla10, Long, B>, Impl?>>, Byte>()
2021-03-11 23:32:11,775 [main:106] - GETTING Kla4 from [@kotlin.ExtensionFunctionType] Function1<Kla0, Unit>
2021-03-11 23:32:11,794 [main:106] - GETTING Kla4 from Char
2021-03-11 23:32:11,812 [main:106] - GETTING Kla4 from Int
2021-03-11 23:32:11,842 [main:106] - GETTING Kla4 from Int
2021-03-11 23:32:11,843 [main:106] - GETTING Kla4 from Impl
2021-03-11 23:32:11,854 [main:106] - GETTING Kla4 from String
2021-03-11 23:32:11,870 [main:106] - GETTING Kla4 from Impl
2021-03-11 23:32:11,871 [main:106] - GETTING Kla4 from Int
2021-03-11 23:32:11,872 [main:106] - GETTING Kla4 from Kla0
2021-03-11 23:32:11,889 [main:106] - GETTING Kla4 from String
2021-03-11 23:32:11,890 [main:106] - GETTING Kla4 from Int
2021-03-11 23:32:11,891 [main:106] - GETTING Kla4 from IntRange
2021-03-11 23:32:11,911 [main:106] - GETTING Kla4 from IntRange
2021-03-11 23:32:11,912 [main:114] - replacement of prope5 of type Kla4 is Kla4()
2021-03-11 23:32:12,098 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 23:32:12,098 [main:66] - Compilation checking started
2021-03-11 23:32:12,531 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str

class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)

fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
            }
        }
    )

    return (-23089)?.toChar().lowercase()
}

interface Kla3 {
    suspend fun fu4()
}

class Kla4 {
    var prope4 = "FAIL 1"

    suspend inline fun fu5(noinline c: suspend Kla4.() -> Unit)  {
        val prope11 : suspend Kla4.() -> Unit = { c() }
        prope11()
    }

    suspend inline fun fu6(noinline c: suspend Kla4.() -> Unit) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
c.startCoroutine(this, Kla5)
    }

    suspend inline fun fu7(noinline c: suspend Kla4.() -> Unit) {
        c()
    }

    suspend inline fun fu8(noinline c: suspend Kla4.() -> Unit) {
        val prope12 = object: Kla3 {
            override suspend fun fu4() {
                c()
            }
        }
        prope12.fu4()
    }
}

fun fu0(prope5: Kla4, c: suspend Kla4.() -> Unit) {
    c.startCoroutine(prope5, Kla5)
}

suspend fun fu1() = "OK"

fun box843(): String {
    val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
val prope5 = Kla4()
    fu0(prope5) {
        fu5 {
            prope4 = fu1()
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 2"
    fu0(prope5) {
        fu6 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 3"
    fu0(prope5) {
        fu7 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 4"
    fu0(prope5) {
        fu8 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    Kla4().prope4 = "FAIL 5"
    fu0(prope5) {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 6"
    fu0(prope5) {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 7"
    fu0(prope5) {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 8"
    fu0(prope5) {
        fu8 {
            fu8 {
                fu8 {
                    fu8 {
                        fu8 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 9"
    fu0(prope5) {
        fu5 {
            fu6 {
                fu7 {
                    fu8 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope5.prope4
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu9(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope13: CoroutineStackFrame? = c
        while (prope13 != null) {
            prope7.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope2 = Kla8()

class Kla9 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu14() {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope3.prope10 = {
            prope3.prope9 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:32:12,535 [main:107] - replacing (prope5.prope4, String)
2021-03-11 23:32:12,536 [main:50] - replacing prope5.prope4 String
2021-03-11 23:32:12,536 [main:54] - Getting value of type String
2021-03-11 23:32:12,708 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:32:12,723 [main:58] - GENERATED VALUE OF TYPE String = "tjvto"
2021-03-11 23:32:12,723 [main:61] - GENERATED IS CALL =false
2021-03-11 23:32:13,158 [main:67] - randomType = ArrayDeque<Collection<Impl>>
2021-03-11 23:32:13,326 [main:302] - generating value of type = ArrayDeque<Collection<Impl>> false depth = 0
2021-03-11 23:32:13,513 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<Collection<Impl>>): ArrayDeque<Collection<Impl>> = TODO()
2021-03-11 23:32:13,520 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<Collection<Impl>>): ArrayDeque<Collection<Impl>> = TODO()
2021-03-11 23:32:13,933 [main:302] - generating value of type = Collection<Collection<Impl>> false depth = 3
2021-03-11 23:32:14,103 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): Collection<Collection<Impl>> = TODO()
2021-03-11 23:32:14,109 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): Collection<Collection<Impl>> = TODO()
2021-03-11 23:32:14,317 [main:95] - GENERATED = arrayListOf<Collection<Impl>>()
2021-03-11 23:32:14,318 [main:95] - GENERATED = ArrayDeque<Collection<Impl>>(arrayListOf<Collection<Impl>>())
2021-03-11 23:32:14,519 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@219db7c7]
2021-03-11 23:32:14,519 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@632205ce]
2021-03-11 23:32:14,726 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:32:14,898 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:32:15,085 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:32:15,265 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:32:15,451 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:32:15,625 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 23:32:15,631 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 23:32:15,639 [main:78] - Generated call from random type = (ArrayDeque<Collection<Impl>>(arrayListOf<Collection<Impl>>())).toArray().joinToString("ufzxs", StringBuilder(), "ogobm", -1857020406, "hybfs", {a: T -> "qrfal"})
2021-03-11 23:32:15,640 [main:106] - GETTING String from [@kotlin.ExtensionFunctionType] Function1<Kla0, Unit>
2021-03-11 23:32:15,662 [main:106] - GETTING String from String
2021-03-11 23:32:15,680 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cf45d40]]
2021-03-11 23:32:15,680 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cf45d40]
2021-03-11 23:32:15,680 [main:117] - GENERATED CALL = ((Impl().str)).capitalize()
2021-03-11 23:32:15,680 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@399a5f8d]]
2021-03-11 23:32:15,680 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@399a5f8d]
2021-03-11 23:32:15,885 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:32:15,894 [main:117] - GENERATED CALL = ((Impl().str)).removeSurrounding("qlpob")
2021-03-11 23:32:15,894 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c9e5158]]
2021-03-11 23:32:15,894 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c9e5158]
2021-03-11 23:32:16,050 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:32:16,056 [main:117] - GENERATED CALL = ((Impl().str)).take(679344854)
2021-03-11 23:32:16,056 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23deaac6]]
2021-03-11 23:32:16,056 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23deaac6]
2021-03-11 23:32:16,056 [main:117] - GENERATED CALL = ((Impl().str)).substringAfter((-23089)?.toChar(), (Impl()).str)
2021-03-11 23:32:16,056 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30038475]]
2021-03-11 23:32:16,056 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30038475]
2021-03-11 23:32:16,057 [main:117] - GENERATED CALL = ((Impl().str)).trim()
2021-03-11 23:32:16,057 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79e488ae]]
2021-03-11 23:32:16,057 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79e488ae]
2021-03-11 23:32:16,057 [main:117] - GENERATED CALL = ((Impl().str)).toLowerCase()
2021-03-11 23:32:16,057 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@427e9882]]
2021-03-11 23:32:16,057 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@427e9882]
2021-03-11 23:32:16,237 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:32:16,243 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:32:16,257 [main:117] - GENERATED CALL = ((Impl().str)).takeLastWhile({a: Char -> true})
2021-03-11 23:32:16,257 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fb8b61e]]
2021-03-11 23:32:16,257 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fb8b61e]
2021-03-11 23:32:16,414 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:32:16,602 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:32:16,611 [main:117] - GENERATED CALL = ((Impl().str)).replaceRange(-375937281, val prope0 = (Impl()).str.toInt()
2021-03-11 23:32:16,763 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70139168]]
2021-03-11 23:32:16,763 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70139168]
2021-03-11 23:32:16,915 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:32:16,921 [main:117] - GENERATED CALL = ((Impl().str)).removeRange(val prope0 = (Impl()).str.toInt()
2021-03-11 23:32:16,921 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2fa97bb]]
2021-03-11 23:32:16,921 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2fa97bb]
2021-03-11 23:32:16,921 [main:117] - GENERATED CALL = ((Impl().str)).trimIndent()
2021-03-11 23:32:16,921 [main:114] - replacement of prope5.prope4 of type String is ((Impl().str)).trimIndent()
2021-03-11 23:32:17,097 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:32:17,097 [main:66] - Compilation checking started
2021-03-11 23:32:17,554 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str

class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)

fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
            }
        }
    )

    return (-23089)?.toChar().lowercase()
}

interface Kla3 {
    suspend fun fu4()
}

class Kla4 {
    var prope4 = "FAIL 1"

    suspend inline fun fu5(noinline c: suspend Kla4.() -> Unit)  {
        val prope11 : suspend Kla4.() -> Unit = { c() }
        prope11()
    }

    suspend inline fun fu6(noinline c: suspend Kla4.() -> Unit) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
c.startCoroutine(this, Kla5)
    }

    suspend inline fun fu7(noinline c: suspend Kla4.() -> Unit) {
        c()
    }

    suspend inline fun fu8(noinline c: suspend Kla4.() -> Unit) {
        val prope12 = object: Kla3 {
            override suspend fun fu4() {
                c()
            }
        }
        prope12.fu4()
    }
}

fun fu0(prope5: Kla4, c: suspend Kla4.() -> Unit) {
    c.startCoroutine(prope5, Kla5)
}

suspend fun fu1() = "OK"

fun box843(): String {
    val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
val prope5 = Kla4()
    fu0(prope5) {
        fu5 {
            prope4 = fu1()
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 2"
    fu0(prope5) {
        fu6 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 3"
    fu0(prope5) {
        fu7 {
            prope4 = "OK"
        }
    }
    if (((Impl().str)).trimIndent() != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 4"
    fu0(prope5) {
        fu8 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 5"
    fu0(prope5) {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 6"
    fu0(prope5) {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 7"
    fu0(prope5) {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 8"
    fu0(prope5) {
        fu8 {
            fu8 {
                fu8 {
                    fu8 {
                        fu8 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 9"
    fu0(prope5) {
        fu5 {
            fu6 {
                fu7 {
                    fu8 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope5.prope4
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu9(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope13: CoroutineStackFrame? = c
        while (prope13 != null) {
            prope7.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope2 = Kla8()

class Kla9 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu14() {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope3.prope10 = {
            prope3.prope9 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:32:17,558 [main:107] - replacing (prope4, String)
2021-03-11 23:32:17,559 [main:50] - replacing prope4 String
2021-03-11 23:32:17,559 [main:54] - Getting value of type String
2021-03-11 23:32:17,732 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:32:17,738 [main:58] - GENERATED VALUE OF TYPE String = "jnmhn"
2021-03-11 23:32:17,738 [main:61] - GENERATED IS CALL =false
2021-03-11 23:32:17,758 [main:67] - randomType = Boolean
2021-03-11 23:32:17,912 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:32:17,926 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@168bf170]
2021-03-11 23:32:18,097 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:32:18,103 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]
2021-03-11 23:32:18,103 [main:78] - Generated call from random type = (false).compareTo(false).toString(val prope0 = (Impl()).str.toInt()
2021-03-11 23:32:18,103 [main:106] - GETTING String from String
2021-03-11 23:32:18,144 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68d85098]]
2021-03-11 23:32:18,144 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68d85098]
2021-03-11 23:32:18,145 [main:117] - GENERATED CALL = ((Impl().str)).concat((Impl().str))
2021-03-11 23:32:18,145 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2fa97bb]]
2021-03-11 23:32:18,145 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2fa97bb]
2021-03-11 23:32:18,145 [main:117] - GENERATED CALL = ((Impl().str)).trimIndent()
2021-03-11 23:32:18,145 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d132921]]
2021-03-11 23:32:18,145 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d132921]
2021-03-11 23:32:18,145 [main:117] - GENERATED CALL = ((Impl().str)).dropLast((Impl().str).length)
2021-03-11 23:32:18,145 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@775d11e6]]
2021-03-11 23:32:18,145 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@775d11e6]
2021-03-11 23:32:18,301 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 23:32:18,491 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): Iterable<Int> = TODO()
2021-03-11 23:32:18,498 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): Iterable<Int> = TODO()
2021-03-11 23:32:18,676 [main:95] - GENERATED = arrayListOf<Int>()
2021-03-11 23:32:18,676 [main:117] - GENERATED CALL = ((Impl().str)).slice(arrayListOf<Int>())
2021-03-11 23:32:18,677 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3eac5612]]
2021-03-11 23:32:18,677 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3eac5612]
2021-03-11 23:32:18,677 [main:117] - GENERATED CALL = ((Impl().str)).prependIndent((Impl()).str)
2021-03-11 23:32:18,677 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@399a5f8d]]
2021-03-11 23:32:18,677 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@399a5f8d]
2021-03-11 23:32:18,848 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 23:32:18,857 [main:117] - GENERATED CALL = ((Impl().str)).removeSurrounding("ndwoy")
2021-03-11 23:32:18,857 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fb95d58]]
2021-03-11 23:32:18,857 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fb95d58]
2021-03-11 23:32:18,858 [main:117] - GENERATED CALL = ((Impl().str)).padEnd(val prope0 = (Impl()).str.toInt()
2021-03-11 23:32:18,858 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e4327cc], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d16cf46]]
2021-03-11 23:32:18,858 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e4327cc]
2021-03-11 23:32:18,858 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d16cf46]
2021-03-11 23:32:18,858 [main:117] - GENERATED CALL = ((Impl().str)).get((Impl().str).length).lowercase()
2021-03-11 23:32:18,858 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@462ac165]]
2021-03-11 23:32:18,858 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@462ac165]
2021-03-11 23:32:18,858 [main:117] - GENERATED CALL = ((Impl().str)).reversed()
2021-03-11 23:32:18,858 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a11e51f]]
2021-03-11 23:32:18,858 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a11e51f]
2021-03-11 23:32:19,021 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:32:19,026 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:32:19,032 [main:117] - GENERATED CALL = ((Impl().str)).dropWhile({a: Char -> false})
2021-03-11 23:32:19,032 [main:114] - replacement of prope4 of type String is ((Impl().str)).reversed()
2021-03-11 23:32:19,202 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:32:19,203 [main:66] - Compilation checking started
2021-03-11 23:32:19,651 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str

class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)

fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
            }
        }
    )

    return (-23089)?.toChar().lowercase()
}

interface Kla3 {
    suspend fun fu4()
}

class Kla4 {
    var prope4 = "FAIL 1"

    suspend inline fun fu5(noinline c: suspend Kla4.() -> Unit)  {
        val prope11 : suspend Kla4.() -> Unit = { c() }
        prope11()
    }

    suspend inline fun fu6(noinline c: suspend Kla4.() -> Unit) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
c.startCoroutine(this, Kla5)
    }

    suspend inline fun fu7(noinline c: suspend Kla4.() -> Unit) {
        c()
    }

    suspend inline fun fu8(noinline c: suspend Kla4.() -> Unit) {
        val prope12 = object: Kla3 {
            override suspend fun fu4() {
                c()
            }
        }
        prope12.fu4()
    }
}

fun fu0(prope5: Kla4, c: suspend Kla4.() -> Unit) {
    c.startCoroutine(prope5, Kla5)
}

suspend fun fu1() = "OK"

fun box843(): String {
    val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
val prope5 = Kla4()
    fu0(prope5) {
        fu5 {
            prope4 = fu1()
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 2"
    fu0(prope5) {
        fu6 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 3"
    fu0(prope5) {
        fu7 {
            ((Impl().str)).reversed() = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 4"
    fu0(prope5) {
        fu8 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 5"
    fu0(prope5) {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 6"
    fu0(prope5) {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 7"
    fu0(prope5) {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 8"
    fu0(prope5) {
        fu8 {
            fu8 {
                fu8 {
                    fu8 {
                        fu8 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 9"
    fu0(prope5) {
        fu5 {
            fu6 {
                fu7 {
                    fu8 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope5.prope4
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu9(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope13: CoroutineStackFrame? = c
        while (prope13 != null) {
            prope7.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope2 = Kla8()

class Kla9 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu14() {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope3.prope10 = {
            prope3.prope9 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:32:19,657 [main:107] - replacing ("OK", String)
2021-03-11 23:32:19,659 [main:50] - replacing "OK" String
2021-03-11 23:32:19,659 [main:54] - Getting value of type String
2021-03-11 23:32:19,891 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:32:19,897 [main:58] - GENERATED VALUE OF TYPE String = "ncfuu"
2021-03-11 23:32:19,897 [main:61] - GENERATED IS CALL =false
2021-03-11 23:32:19,908 [main:67] - randomType = Boolean
2021-03-11 23:32:20,067 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:32:20,084 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@168bf170]
2021-03-11 23:32:20,257 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 23:32:20,263 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@282eb4ec]
2021-03-11 23:32:20,427 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:32:20,432 [main:78] - Generated call from random type = (true).compareTo(true).toString(-859208960)
2021-03-11 23:32:20,432 [main:114] - replacement of "OK" of type String is (true).compareTo(true).toString(-859208960)
2021-03-11 23:32:20,602 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 23:32:20,602 [main:66] - Compilation checking started
2021-03-11 23:32:21,048 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str

class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)

fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
            }
        }
    )

    return (-23089)?.toChar().lowercase()
}

interface Kla3 {
    suspend fun fu4()
}

class Kla4 {
    var prope4 = "FAIL 1"

    suspend inline fun fu5(noinline c: suspend Kla4.() -> Unit)  {
        val prope11 : suspend Kla4.() -> Unit = { c() }
        prope11()
    }

    suspend inline fun fu6(noinline c: suspend Kla4.() -> Unit) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
c.startCoroutine(this, Kla5)
    }

    suspend inline fun fu7(noinline c: suspend Kla4.() -> Unit) {
        c()
    }

    suspend inline fun fu8(noinline c: suspend Kla4.() -> Unit) {
        val prope12 = object: Kla3 {
            override suspend fun fu4() {
                c()
            }
        }
        prope12.fu4()
    }
}

fun fu0(prope5: Kla4, c: suspend Kla4.() -> Unit) {
    c.startCoroutine(prope5, Kla5)
}

suspend fun fu1() = "OK"

fun box843(): String {
    val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
val prope5 = Kla4()
    fu0(prope5) {
        fu5 {
            prope4 = fu1()
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 2"
    fu0(prope5) {
        fu6 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 3"
    fu0(prope5) {
        fu7 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 4"
    fu0(prope5) {
        fu8 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != (true).compareTo(true).toString(-859208960)) return prope5.prope4
    prope5.prope4 = "FAIL 5"
    fu0(prope5) {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 6"
    fu0(prope5) {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 7"
    fu0(prope5) {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 8"
    fu0(prope5) {
        fu8 {
            fu8 {
                fu8 {
                    fu8 {
                        fu8 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 9"
    fu0(prope5) {
        fu5 {
            fu6 {
                fu7 {
                    fu8 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope5.prope4
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu9(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope13: CoroutineStackFrame? = c
        while (prope13 != null) {
            prope7.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope2 = Kla8()

class Kla9 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu14() {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope3.prope10 = {
            prope3.prope9 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:32:21,051 [main:107] - replacing ({ c.resume(Unit) }, Function0<Unit>)
2021-03-11 23:32:21,051 [main:50] - replacing { c.resume(Unit) } Function0<Unit>
2021-03-11 23:32:21,051 [main:54] - Getting value of type Function0<Unit>
2021-03-11 23:32:21,223 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 23:32:21,228 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 23:32:21,401 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 23:32:21,407 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 23:32:21,795 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 23:32:21,802 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 23:32:21,991 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 23:32:21,998 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 23:32:22,399 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 8
2021-03-11 23:32:22,405 [main:302] - generating value of type = Unit false depth = 9
2021-03-11 23:32:22,577 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 23:32:22,584 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 23:32:23,035 [main:302] - generating value of type = Boolean true depth = 12
2021-03-11 23:32:23,041 [main:95] - GENERATED = require(true)
2021-03-11 23:32:23,041 [main:95] - GENERATED = contract({ require(true)})
2021-03-11 23:32:23,041 [main:95] - GENERATED = contract({ contract({ require(true)})})
2021-03-11 23:32:23,041 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ contract({ require(true)})})}
2021-03-11 23:32:23,041 [main:61] - GENERATED IS CALL =false
2021-03-11 23:32:23,454 [main:67] - randomType = ArrayDeque<Int?>
2021-03-11 23:32:23,629 [main:302] - generating value of type = ArrayDeque<Int?> false depth = 0
2021-03-11 23:32:23,818 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<Int?> = TODO()
2021-03-11 23:32:23,825 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<Int?> = TODO()
2021-03-11 23:32:24,012 [main:95] - GENERATED = ArrayDeque<Int?>()
2021-03-11 23:32:24,182 [main:106] - GETTING Function0<Unit> from String
2021-03-11 23:32:24,199 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 23:32:24,230 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 23:32:24,231 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 23:32:24,232 [main:106] - GETTING Function0<Unit> from IntRange
2021-03-11 23:32:24,255 [main:106] - GETTING Function0<Unit> from Impl
2021-03-11 23:32:24,267 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 23:32:24,268 [main:106] - GETTING Function0<Unit> from Kla0
2021-03-11 23:32:24,286 [main:106] - GETTING Function0<Unit> from Impl
2021-03-11 23:32:24,287 [main:106] - GETTING Function0<Unit> from Char
2021-03-11 23:32:24,306 [main:106] - GETTING Function0<Unit> from String
2021-03-11 23:32:24,307 [main:106] - GETTING Function0<Unit> from [@kotlin.ExtensionFunctionType] Function1<Kla0, Unit>
2021-03-11 23:32:24,326 [main:106] - GETTING Function0<Unit> from IntRange
2021-03-11 23:32:24,327 [main:114] - replacement of { c.resume(Unit) } of type Function0<Unit> is { contract({ contract({ require(true)})})}
2021-03-11 23:32:24,499 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 23:32:24,500 [main:66] - Compilation checking started
2021-03-11 23:32:24,938 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface A {
    val str: String
        get() = "OK"
}

interface B : A

class Impl : B

fun box() = Impl().str

class Kla0(
    val fieldAccessedInsideChild: Int,
    val how: Kla0.() -> Unit
)

fun box292(): String {
    Kla0(
        3,
        {
            class Kla1 {
                val prope0 = (Impl()).str.toInt()
            }
            class Kla2 {
                val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
            }
        }
    )

    return (-23089)?.toChar().lowercase()
}

interface Kla3 {
    suspend fun fu4()
}

class Kla4 {
    var prope4 = "FAIL 1"

    suspend inline fun fu5(noinline c: suspend Kla4.() -> Unit)  {
        val prope11 : suspend Kla4.() -> Unit = { c() }
        prope11()
    }

    suspend inline fun fu6(noinline c: suspend Kla4.() -> Unit) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
c.startCoroutine(this, Kla5)
    }

    suspend inline fun fu7(noinline c: suspend Kla4.() -> Unit) {
        c()
    }

    suspend inline fun fu8(noinline c: suspend Kla4.() -> Unit) {
        val prope12 = object: Kla3 {
            override suspend fun fu4() {
                c()
            }
        }
        prope12.fu4()
    }
}

fun fu0(prope5: Kla4, c: suspend Kla4.() -> Unit) {
    c.startCoroutine(prope5, Kla5)
}

suspend fun fu1() = "OK"

fun box843(): String {
    val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
val prope5 = Kla4()
    fu0(prope5) {
        fu5 {
            prope4 = fu1()
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 2"
    fu0(prope5) {
        fu6 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 3"
    fu0(prope5) {
        fu7 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 4"
    fu0(prope5) {
        fu8 {
            prope4 = "OK"
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 5"
    fu0(prope5) {
        fu5 {
            fu5 {
                fu5 {
                    fu5 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 6"
    fu0(prope5) {
        fu6 {
            fu6 {
                fu6 {
                    fu6 {
                        fu6 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 7"
    fu0(prope5) {
        fu7 {
            fu7 {
                fu7 {
                    fu7 {
                        fu7 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 8"
    fu0(prope5) {
        fu8 {
            fu8 {
                fu8 {
                    fu8 {
                        fu8 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    if (prope5.prope4 != "OK") return prope5.prope4
    prope5.prope4 = "FAIL 9"
    fu0(prope5) {
        fu5 {
            fu6 {
                fu7 {
                    fu8 {
                        fu5 {
                            prope4 = fu1()
                        }
                    }
                }
            }
        }
    }
    return prope5.prope4
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        x(prope6.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla5(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla11 : Kla5()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla6 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla7<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty0>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu9(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla8 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope13: CoroutineStackFrame? = c
        while (prope13 != null) {
            prope7.add(prope13.getStackTraceElement())
            prope13 = prope13.callerFrame
        }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope2 = Kla8()

class Kla9 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu14() {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { contract({ contract({ require(true)})})}
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope3 = Kla9()

object Kla10: Kla7<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val prope0 = (Impl()).str.toInt()
val prope1: List<Kla1> =
                    ((Impl().str).length.until((-23089))).map { Kla1() }
prope3.prope10 = {
            prope3.prope9 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-11 23:32:24,942 [main:107] - replacing (prope4, String)
2021-03-11 23:32:24,943 [main:50] - replacing prope4 String
2021-03-11 23:32:24,943 [main:54] - Getting value of type String
2021-03-11 23:32:25,120 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:32:25,126 [main:58] - GENERATED VALUE OF TYPE String = "vbhkq"
2021-03-11 23:32:25,126 [main:61] - GENERATED IS CALL =false
2021-03-11 23:32:25,157 [main:67] - randomType = B
2021-03-11 23:32:25,158 [main:106] - GETTING String from Impl
2021-03-11 23:32:25,178 [main:113] - Case = [public open val str: kotlin.String defined in Impl[PropertyDescriptorImpl@7fda194f], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c9e5158]]
2021-03-11 23:32:25,178 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c9e5158]
2021-03-11 23:32:25,179 [main:117] - GENERATED CALL = ((Impl())).str.take(Kla0(-1235192173, { repeat(2056142132, {a: Int -> require(true, { "fmsqw"})})}).fieldAccessedInsideChild)
2021-03-11 23:32:25,179 [main:113] - Case = [public open val str: kotlin.String defined in Impl[PropertyDescriptorImpl@7fda194f], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79e488ae]]
2021-03-11 23:32:25,179 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79e488ae]
2021-03-11 23:32:25,179 [main:117] - GENERATED CALL = ((Impl())).str.toLowerCase()
2021-03-11 23:32:25,179 [main:113] - Case = [public open val str: kotlin.String defined in Impl[PropertyDescriptorImpl@7fda194f], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46d6a8ee]]
2021-03-11 23:32:25,179 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46d6a8ee]
2021-03-11 23:32:25,334 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 23:32:25,340 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:32:25,346 [main:117] - GENERATED CALL = ((Impl())).str.filter({a: Char -> true})
2021-03-11 23:32:25,346 [main:113] - Case = [public open val str: kotlin.String defined in Impl[PropertyDescriptorImpl@7fda194f], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23deaac6]]
2021-03-11 23:32:25,346 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23deaac6]
2021-03-11 23:32:25,525 [main:302] - generating value of type = String true depth = 0
2021-03-11 23:32:25,531 [main:117] - GENERATED CALL = ((Impl())).str.substringAfter((-23089)?.toChar(), "gezij")
2021-03-11 23:32:25,531 [main:113] - Case = [public open val str: kotlin.String defined in Impl[PropertyDescriptorImpl@7fda194f], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3051f32]]
2021-03-11 23:32:25,531 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3051f32]
2021-03-11 23:32:25,698 [main:302] - generating value of type = Int true depth = 0
2021-03-11 23:32:25,704 [main:117] - GENERATED CALL = ((Impl())).str.takeLast(2045373990)
2021-03-11 23:32:25,704 [main:113] - Case = [public open val str: kotlin.String defined in Impl[PropertyDescriptorImpl@7fda194f], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@174faffb]]
2021-03-11 23:32:25,704 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@174faffb]
2021-03-11 23:32:25,878 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 23:32:25,884 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 23:32:25,890 [main:117] - GENERATED CALL = ((Impl())).str.filterIndexed({a: Int, b: Char -> true})
2021-03-11 23:32:25,890 [main:113] - Case = [public open val str: kotlin.String defined in Impl[PropertyDescriptorImpl@7fda194f], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fb95d58]]
2021-03-11 23:32:25,890 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fb95d58]
2021-03-11 23:32:25,891 [main:117] - GENERATED CALL = ((Impl())).str.padEnd(Kla0(-1235192173, { repeat(2056142132, {a: Int -> require(true, { "fmsqw"})})}).fieldAccessedInsideChild, (-23089)?.toChar())
2021-03-11 23:32:25,891 [main:113] - Case = [public open val str: kotlin.String defined in Impl[PropertyDescriptorImpl@7fda194f], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fb8b61e]]
2021-03-11 23:32:25,891 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fb8b61e]
2021-03-11 23:32:26,059 [main:302] - generating value of type = CharSequence false depth = 0
