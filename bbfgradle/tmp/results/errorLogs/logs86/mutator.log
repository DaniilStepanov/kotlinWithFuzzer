2021-03-12 05:41:32,045 [main:66] - Compilation checking started
2021-03-12 05:41:33,223 [main:302] - generating value of type = Test false depth = 0
2021-03-12 05:41:33,224 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 05:41:33,993 [main:302] - generating value of type = TestClass false depth = 2
2021-03-12 05:41:33,994 [main:112] - generating klass TestClass text = class TestClass(val foo: Test) : Test by foo
2021-03-12 05:41:34,128 [main:194] - Type params = []
2021-03-12 05:41:34,273 [main:302] - generating value of type = Test false depth = 4
2021-03-12 05:41:34,274 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 05:41:34,548 [main:302] - generating value of type = Delegate false depth = 6
2021-03-12 05:41:34,548 [main:112] - generating klass Delegate text = class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}
2021-03-12 05:41:34,551 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 05:41:34,553 [main:66] - Compilation checking started
2021-03-12 05:41:35,178 [main:53] - Result = true
Text:
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test = TestClass(Delegate())) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}
2021-03-12 05:41:35,391 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 05:41:35,567 [main:302] - generating value of type = TestClass false depth = 1
2021-03-12 05:41:35,567 [main:112] - generating klass TestClass text = class TestClass(val foo: Test) : Test by foo
2021-03-12 05:41:35,701 [main:194] - Type params = []
2021-03-12 05:41:35,823 [main:302] - generating value of type = Test false depth = 3
2021-03-12 05:41:35,824 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 05:41:36,067 [main:302] - generating value of type = Delegate false depth = 5
2021-03-12 05:41:36,068 [main:112] - generating klass Delegate text = class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}
2021-03-12 05:41:36,070 [main:112] - generating klass Delegate text = class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}
2021-03-12 05:41:36,072 [main:112] - generating klass TestClass text = class TestClass(val foo: Test) : Test by foo
2021-03-12 05:41:36,171 [main:194] - Type params = []
2021-03-12 05:41:36,251 [main:302] - generating value of type = Test false depth = 1
2021-03-12 05:41:36,251 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 05:41:36,474 [main:302] - generating value of type = Delegate false depth = 3
2021-03-12 05:41:36,474 [main:112] - generating klass Delegate text = class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}
2021-03-12 05:41:36,708 [main:45] - Trying to change 8 nodes
2021-03-12 05:41:36,712 [main:53] - replacing (foo, Test)
2021-03-12 05:41:36,712 [main:50] - replacing foo Test
2021-03-12 05:41:36,712 [main:54] - Getting value of type Test
2021-03-12 05:41:36,795 [main:302] - generating value of type = Test false depth = 0
2021-03-12 05:41:36,796 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 05:41:36,982 [main:302] - generating value of type = TestClass false depth = 2
2021-03-12 05:41:36,982 [main:112] - generating klass TestClass text = class TestClass(val foo: Test) : Test by foo
2021-03-12 05:41:37,075 [main:194] - Type params = []
2021-03-12 05:41:37,160 [main:302] - generating value of type = Test false depth = 4
2021-03-12 05:41:37,161 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 05:41:37,349 [main:302] - generating value of type = TestClass false depth = 6
2021-03-12 05:41:37,349 [main:112] - generating klass TestClass text = class TestClass(val foo: Test) : Test by foo
2021-03-12 05:41:37,452 [main:194] - Type params = []
2021-03-12 05:41:37,536 [main:302] - generating value of type = Test false depth = 8
2021-03-12 05:41:37,536 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 05:41:37,702 [main:302] - generating value of type = Delegate false depth = 10
2021-03-12 05:41:37,702 [main:112] - generating klass Delegate text = class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}
2021-03-12 05:41:37,705 [main:58] - GENERATED VALUE OF TYPE Test = TestClass(TestClass(Delegate()))
2021-03-12 05:41:37,706 [main:61] - GENERATED IS CALL =true
2021-03-12 05:41:38,127 [main:67] - randomType = MutableMap<Delegate, Byte?>?
2021-03-12 05:41:38,137 [main:106] - GETTING Test from String
2021-03-12 05:41:38,209 [main:106] - GETTING Test from String
2021-03-12 05:41:38,211 [main:106] - GETTING Test from String
2021-03-12 05:41:38,211 [main:106] - GETTING Test from Test
2021-03-12 05:41:38,222 [main:61] - replacement of foo of type Test is TestClass(TestClass(Delegate()))
2021-03-12 05:41:38,299 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:41:38,299 [main:66] - Compilation checking started
2021-03-12 05:41:38,699 [main:53] - Result = true
Text:
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by TestClass(TestClass(Delegate()))

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}
2021-03-12 05:41:38,702 [main:53] - replacing (testClass.test + testClass.testDelegated, String)
2021-03-12 05:41:38,702 [main:50] - replacing testClass.test + testClass.testDelegated String
2021-03-12 05:41:38,702 [main:54] - Getting value of type String
2021-03-12 05:41:38,785 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:41:38,788 [main:58] - GENERATED VALUE OF TYPE String = "snwnh"
2021-03-12 05:41:38,788 [main:61] - GENERATED IS CALL =false
2021-03-12 05:41:38,877 [main:67] - randomType = UShort
2021-03-12 05:41:38,957 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 05:41:39,028 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@752aec1c]
2021-03-12 05:41:39,029 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e0e9a2d]
2021-03-12 05:41:39,107 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:41:39,108 [main:78] - Generated call from random type = (14795.toUShort()).toLong().toString(-1599518413)
2021-03-12 05:41:39,108 [main:106] - GETTING String from String
2021-03-12 05:41:39,146 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e339196]]
2021-03-12 05:41:39,146 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e339196]
2021-03-12 05:41:39,227 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:41:39,228 [main:117] - GENERATED CALL = (Delegate().testDelegated).repeat(1469479748)
2021-03-12 05:41:39,228 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@75078835]]
2021-03-12 05:41:39,228 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@75078835]
2021-03-12 05:41:39,343 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:41:39,345 [main:117] - GENERATED CALL = (Delegate().testDelegated).plus("dmhmy")
2021-03-12 05:41:39,345 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dec78bf]]
2021-03-12 05:41:39,345 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dec78bf]
2021-03-12 05:41:39,426 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:41:39,506 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:41:39,507 [main:117] - GENERATED CALL = (Delegate().testDelegated).replaceBeforeLast('☞', test, "lsmpg")
2021-03-12 05:41:39,507 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a4536a8]]
2021-03-12 05:41:39,508 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a4536a8]
2021-03-12 05:41:39,590 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:41:39,667 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:41:39,758 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:41:39,759 [main:117] - GENERATED CALL = (Delegate().testDelegated).replaceFirst('꥓', '촳', true)
2021-03-12 05:41:39,760 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cba43e]]
2021-03-12 05:41:39,760 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cba43e]
2021-03-12 05:41:39,760 [main:117] - GENERATED CALL = (Delegate().testDelegated).lowercase()
2021-03-12 05:41:39,761 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7179c27a]]
2021-03-12 05:41:39,761 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7179c27a]
2021-03-12 05:41:39,850 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:41:39,851 [main:117] - GENERATED CALL = (Delegate().testDelegated).substringAfterLast('阴', TestClass(Delegate()).testDelegated)
2021-03-12 05:41:39,853 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19e9cba7]]
2021-03-12 05:41:39,853 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19e9cba7]
2021-03-12 05:41:39,932 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:41:39,933 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:41:39,936 [main:117] - GENERATED CALL = (Delegate().testDelegated).dropLastWhile({a: Char -> true})
2021-03-12 05:41:39,936 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1010ac]]
2021-03-12 05:41:39,936 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1010ac]
2021-03-12 05:41:39,937 [main:117] - GENERATED CALL = (Delegate().testDelegated).reversed()
2021-03-12 05:41:39,938 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@577ef375]]
2021-03-12 05:41:39,938 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@577ef375]
2021-03-12 05:41:40,022 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:41:40,111 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:41:40,210 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:41:40,224 [main:117] - GENERATED CALL = (Delegate().testDelegated).replaceRange(1265821158, 121875605, "lkcek")
2021-03-12 05:41:40,224 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b1c1442]]
2021-03-12 05:41:40,224 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b1c1442]
2021-03-12 05:41:40,303 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:41:40,304 [main:117] - GENERATED CALL = (Delegate().testDelegated).concat("njhwv")
2021-03-12 05:41:40,305 [main:61] - replacement of testClass.test + testClass.testDelegated of type String is (Delegate().testDelegated).dropLastWhile({a: Char -> true})
2021-03-12 05:41:40,384 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:41:40,385 [main:66] - Compilation checking started
2021-03-12 05:41:40,901 [main:53] - Result = true
Text:
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by TestClass(TestClass(Delegate()))

fun box(): String {
    val testClass = TestClass(Delegate())
    return (Delegate().testDelegated).dropLastWhile({a: Char -> true})
}
2021-03-12 05:41:40,901 [main:53] - replacing (testClass.test, String)
2021-03-12 05:41:40,901 [main:50] - replacing testClass.test String
2021-03-12 05:41:40,901 [main:54] - Getting value of type String
2021-03-12 05:41:41,005 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:41:41,006 [main:58] - GENERATED VALUE OF TYPE String = "zvguk"
2021-03-12 05:41:41,006 [main:61] - GENERATED IS CALL =false
2021-03-12 05:41:41,305 [main:67] - randomType = Set<UByte?>
2021-03-12 05:41:41,306 [main:106] - GETTING String from String
2021-03-12 05:41:41,337 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@519427cd]]
2021-03-12 05:41:41,337 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@519427cd]
2021-03-12 05:41:41,421 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:41:41,423 [main:117] - GENERATED CALL = (Delegate().test).replaceAfterLast('蔖', TestClass(Delegate()).testDelegated, Delegate().test)
2021-03-12 05:41:41,423 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dc7f1e6]]
2021-03-12 05:41:41,423 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dc7f1e6]
2021-03-12 05:41:41,424 [main:117] - GENERATED CALL = (Delegate().test).trimStart()
2021-03-12 05:41:41,424 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d4ebc37]]
2021-03-12 05:41:41,424 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:41:41,505 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:41:41,588 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:41:41,589 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d4ebc37]
2021-03-12 05:41:41,711 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:41:41,800 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:41:41,801 [main:117] - GENERATED CALL = (Delegate().test).subSequence(-548117457, -414798079).substring(1216892705, 1709067603)
2021-03-12 05:41:41,801 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bd2a531]]
2021-03-12 05:41:41,801 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bd2a531]
2021-03-12 05:41:41,891 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:41:41,893 [main:117] - GENERATED CALL = (Delegate().test).substringAfter('뀝', TestClass(Delegate()).test)
2021-03-12 05:41:41,893 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37bb3715]]
2021-03-12 05:41:41,893 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37bb3715]
2021-03-12 05:41:41,982 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:41:41,983 [main:117] - GENERATED CALL = (Delegate().test).takeLast(-1486053173)
2021-03-12 05:41:41,984 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31574a30]]
2021-03-12 05:41:41,984 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31574a30]
2021-03-12 05:41:42,066 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 05:41:42,067 [main:302] - generating value of type = Char true depth = 1
2021-03-12 05:41:42,068 [main:117] - GENERATED CALL = (Delegate().test).replaceFirstChar({a: Char -> '啉'})
2021-03-12 05:41:42,068 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e3fe21b]]
2021-03-12 05:41:42,068 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e3fe21b]
2021-03-12 05:41:42,069 [main:117] - GENERATED CALL = (Delegate().test).capitalize()
2021-03-12 05:41:42,069 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16feeaa3]]
2021-03-12 05:41:42,069 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16feeaa3]
2021-03-12 05:41:42,164 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:41:42,164 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:41:42,166 [main:117] - GENERATED CALL = (Delegate().test).takeLastWhile({a: Char -> true})
2021-03-12 05:41:42,166 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@170a4328]]
2021-03-12 05:41:42,166 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:41:42,257 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:41:42,342 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:41:42,343 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@170a4328]
2021-03-12 05:41:42,432 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 05:41:42,519 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 05:41:42,521 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 05:41:42,832 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:41:42,833 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 05:41:42,918 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(elements: kotlin.collections.Collection<RegexOption>): Set<RegexOption> = TODO()
2021-03-12 05:41:42,920 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(elements: kotlin.collections.Collection<RegexOption>): Set<RegexOption> = TODO()
2021-03-12 05:41:43,115 [main:302] - generating value of type = Collection<RegexOption> false depth = 6
2021-03-12 05:41:43,210 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: RegexOption): Collection<RegexOption> = TODO()
2021-03-12 05:41:43,212 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: RegexOption): Collection<RegexOption> = TODO()
2021-03-12 05:41:43,296 [main:302] - generating value of type = RegexOption false depth = 9
2021-03-12 05:41:43,298 [main:95] - GENERATED = hashSetOf<RegexOption>(kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 05:41:43,298 [main:95] - GENERATED = LinkedHashSet<RegexOption>(hashSetOf<RegexOption>(kotlin.text.RegexOption.IGNORE_CASE))
2021-03-12 05:41:43,299 [main:95] - GENERATED = Regex("rwbvd", LinkedHashSet<RegexOption>(hashSetOf<RegexOption>(kotlin.text.RegexOption.IGNORE_CASE)))
2021-03-12 05:41:43,300 [main:117] - GENERATED CALL = (Delegate().test).subSequence(-632762429, -1242448104).replaceFirst(Regex("rwbvd", LinkedHashSet<RegexOption>(hashSetOf<RegexOption>(kotlin.text.RegexOption.IGNORE_CASE))), Delegate().test)
2021-03-12 05:41:43,300 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c5dfc66]]
2021-03-12 05:41:43,300 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c5dfc66]
2021-03-12 05:41:43,300 [main:117] - GENERATED CALL = (Delegate().test).toLowerCase()
2021-03-12 05:41:43,300 [main:61] - replacement of testClass.test of type String is (Delegate().test).subSequence(-548117457, -414798079).substring(1216892705, 1709067603)
2021-03-12 05:41:43,378 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:41:43,379 [main:53] - replacing ((Delegate().test).subSequence(-548117457, -414798079).substring(1216892705, 1709067603) + testClass.testDelegated, String)
2021-03-12 05:41:43,379 [main:50] - replacing (Delegate().test).subSequence(-548117457, -414798079).substring(1216892705, 1709067603) + testClass.testDelegated String
2021-03-12 05:41:43,379 [main:54] - Getting value of type String
2021-03-12 05:41:43,458 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:41:43,459 [main:58] - GENERATED VALUE OF TYPE String = "bjhwz"
2021-03-12 05:41:43,459 [main:61] - GENERATED IS CALL =false
2021-03-12 05:41:43,746 [main:67] - randomType = Function1<List<String>, TestClass>
2021-03-12 05:41:43,747 [main:106] - GETTING String from Test
2021-03-12 05:41:43,755 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@616e7eb6], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@170dc33a]]
2021-03-12 05:41:43,756 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@170dc33a]
2021-03-12 05:41:43,835 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:41:43,840 [main:117] - GENERATED CALL = (TestClass(Delegate()).foo).test.removeSuffix("bunju")
2021-03-12 05:41:43,840 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@616e7eb6], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d57cb87]]
2021-03-12 05:41:43,840 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d57cb87]
2021-03-12 05:41:43,841 [main:117] - GENERATED CALL = (TestClass(Delegate()).foo).test.trimIndent()
2021-03-12 05:41:43,841 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@616e7eb6], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78488573]]
2021-03-12 05:41:43,841 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78488573]
2021-03-12 05:41:43,940 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:41:43,941 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:41:43,942 [main:117] - GENERATED CALL = (TestClass(Delegate()).foo).test.filterNot({a: Char -> true})
2021-03-12 05:41:43,942 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@616e7eb6], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe5b55f]]
2021-03-12 05:41:43,942 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe5b55f]
2021-03-12 05:41:44,027 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:41:44,107 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:41:44,108 [main:117] - GENERATED CALL = (TestClass(Delegate()).foo).test.padStart(-19483086, '鼗')
2021-03-12 05:41:44,109 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@616e7eb6], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@577ef375]]
2021-03-12 05:41:44,109 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@577ef375]
2021-03-12 05:41:44,194 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:41:44,278 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:41:44,371 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:41:44,379 [main:117] - GENERATED CALL = (TestClass(Delegate()).foo).test.replaceRange(624046115, 392953680, "asccx")
2021-03-12 05:41:44,379 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@616e7eb6]]
2021-03-12 05:41:44,384 [main:117] - GENERATED CALL = (TestClass(Delegate()).foo).test
2021-03-12 05:41:44,384 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@616e7eb6], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f6268d9]]
2021-03-12 05:41:44,384 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f6268d9]
2021-03-12 05:41:44,474 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 05:41:44,475 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:41:44,477 [main:117] - GENERATED CALL = (TestClass(Delegate()).foo).test.filterIndexed({a: Int, b: Char -> true})
2021-03-12 05:41:44,477 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@616e7eb6], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dc7f1e6]]
2021-03-12 05:41:44,477 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dc7f1e6]
2021-03-12 05:41:44,478 [main:117] - GENERATED CALL = (TestClass(Delegate()).foo).test.trimStart()
2021-03-12 05:41:44,478 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@616e7eb6], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1010ac]]
2021-03-12 05:41:44,478 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1010ac]
2021-03-12 05:41:44,479 [main:117] - GENERATED CALL = (TestClass(Delegate()).foo).test.reversed()
2021-03-12 05:41:44,479 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@616e7eb6], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b251a21]]
2021-03-12 05:41:44,479 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b251a21]
2021-03-12 05:41:44,565 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:41:44,650 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:41:44,651 [main:117] - GENERATED CALL = (TestClass(Delegate()).foo).test.substringBefore('', "bsuau")
2021-03-12 05:41:44,652 [main:61] - replacement of (Delegate().test).subSequence(-548117457, -414798079).substring(1216892705, 1709067603) + testClass.testDelegated of type String is (TestClass(Delegate()).foo).test.padStart(-19483086, '鼗')
2021-03-12 05:41:44,742 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:41:44,744 [main:53] - replacing ("fail", String)
2021-03-12 05:41:44,744 [main:50] - replacing "fail" String
2021-03-12 05:41:44,745 [main:54] - Getting value of type String
2021-03-12 05:41:44,854 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:41:44,854 [main:58] - GENERATED VALUE OF TYPE String = "yfjel"
2021-03-12 05:41:44,855 [main:61] - GENERATED IS CALL =false
2021-03-12 05:41:44,950 [main:67] - randomType = UInt
2021-03-12 05:41:45,028 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 05:41:45,075 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@74a1ac7f]
2021-03-12 05:41:45,075 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16537bc6]
2021-03-12 05:41:45,153 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:41:45,154 [main:78] - Generated call from random type = (1919813049.toUInt()).toByte().toString(-1514357939)
2021-03-12 05:41:45,154 [main:106] - GETTING String from String
2021-03-12 05:41:45,183 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2116c8a0]]
2021-03-12 05:41:45,183 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2116c8a0]
2021-03-12 05:41:45,305 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:41:45,396 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:41:45,492 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:41:45,493 [main:117] - GENERATED CALL = (TestClass(Delegate()).test).replace('篥', 'ڂ', false)
2021-03-12 05:41:45,494 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d4ebc37]]
2021-03-12 05:41:45,494 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:41:45,578 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:41:45,675 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:41:45,676 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d4ebc37]
2021-03-12 05:41:45,778 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:41:45,877 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:41:45,879 [main:117] - GENERATED CALL = (TestClass(Delegate()).test).subSequence(-340681897, 1523828434).substring(-1443095443, -115887081)
2021-03-12 05:41:45,879 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@216e44f2]]
2021-03-12 05:41:45,879 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@216e44f2]
2021-03-12 05:41:45,880 [main:117] - GENERATED CALL = (TestClass(Delegate()).test).uppercase()
2021-03-12 05:41:45,880 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@522aa0a8]]
2021-03-12 05:41:45,880 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@522aa0a8]
2021-03-12 05:41:45,969 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:41:45,970 [main:117] - GENERATED CALL = (TestClass(Delegate()).test).substring(1862788247)
2021-03-12 05:41:45,970 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@577ef375]]
2021-03-12 05:41:45,970 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@577ef375]
2021-03-12 05:41:46,046 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:41:46,122 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:41:46,211 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:41:46,215 [main:117] - GENERATED CALL = (TestClass(Delegate()).test).replaceRange(-1605061505, -632951332, StringBuilder())
2021-03-12 05:41:46,216 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19e9cba7]]
2021-03-12 05:41:46,216 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19e9cba7]
2021-03-12 05:41:46,298 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:41:46,298 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:41:46,299 [main:117] - GENERATED CALL = (TestClass(Delegate()).test).dropLastWhile({a: Char -> true})
2021-03-12 05:41:46,300 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b7c9229]]
2021-03-12 05:41:46,300 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:41:46,378 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:41:46,454 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:41:46,455 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b7c9229]
2021-03-12 05:41:46,533 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 05:41:46,618 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 05:41:46,619 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 05:41:46,830 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:41:46,831 [main:95] - GENERATED = Regex("zgvnl")
2021-03-12 05:41:46,909 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 05:41:46,910 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 05:41:46,915 [main:117] - GENERATED CALL = (TestClass(Delegate()).test).subSequence(-420034393, 921677344).replace(Regex("zgvnl"), {a: MatchResult -> StringBuilder()})
2021-03-12 05:41:46,915 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@75078835]]
2021-03-12 05:41:46,915 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@75078835]
2021-03-12 05:41:46,992 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:41:46,993 [main:117] - GENERATED CALL = (TestClass(Delegate()).test).plus("jmzyz")
2021-03-12 05:41:46,993 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebe146]]
2021-03-12 05:41:46,994 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebe146]
2021-03-12 05:41:46,994 [main:117] - GENERATED CALL = (TestClass(Delegate()).test).prependIndent(TestClass(Delegate()).testDelegated)
2021-03-12 05:41:46,994 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@263c1809]]
2021-03-12 05:41:46,994 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@263c1809]
2021-03-12 05:41:47,082 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:41:47,159 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:41:47,160 [main:117] - GENERATED CALL = (TestClass(Delegate()).test).substringBeforeLast('룭', "pnjod")
2021-03-12 05:41:47,160 [main:61] - replacement of "fail" of type String is (TestClass(Delegate()).test).prependIndent(TestClass(Delegate()).testDelegated)
2021-03-12 05:41:47,247 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:41:47,248 [main:66] - Compilation checking started
2021-03-12 05:41:47,606 [main:53] - Result = true
Text:
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = (TestClass(Delegate()).test).prependIndent(TestClass(Delegate()).testDelegated)

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by TestClass(TestClass(Delegate()))

fun box(): String {
    val testClass = TestClass(Delegate())
    return (Delegate().testDelegated).dropLastWhile({a: Char -> true})
}


2021-03-12 05:41:47,693 [main:119] - TRYING TO REPLACE CONSTANT true
2021-03-12 05:41:47,778 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 05:41:47,779 [main:66] - Compilation checking started
2021-03-12 05:41:48,140 [main:41] - AFTER TRY 0 res = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}
2021-03-12 05:41:48,294 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 05:41:48,443 [main:302] - generating value of type = Delegate false depth = 1
2021-03-12 05:41:48,443 [main:112] - generating klass Delegate text = class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}
2021-03-12 05:41:48,444 [main:112] - generating klass Delegate text = class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}
2021-03-12 05:41:48,445 [main:112] - generating klass TestClass text = class TestClass(val foo: Test) : Test by foo
2021-03-12 05:41:48,515 [main:194] - Type params = []
2021-03-12 05:41:48,586 [main:302] - generating value of type = Test false depth = 1
2021-03-12 05:41:48,587 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 05:41:48,750 [main:302] - generating value of type = Delegate false depth = 3
2021-03-12 05:41:48,750 [main:112] - generating klass Delegate text = class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}
2021-03-12 05:41:48,912 [main:43] - Try №0
2021-03-12 05:42:00,705 [main:48] - Already checked
2021-03-12 05:42:00,993 [main:48] - Already checked
2021-03-12 05:42:05,191 [main:69] - Trying to insert fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                prope2 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope2 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${e.message}"
    }

    if (shouldSuspend) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw RuntimeException("fail 2")
        return prope2!!
    }

    if (prope3 === COROUTINE_SUSPENDED) throw RuntimeException("fail 3")
    return prope3 as String
}
2021-03-12 05:42:05,406 [main:66] - Compilation checking started
2021-03-12 05:42:06,621 [main:103] - Trying to change 210 nodes
2021-03-12 05:42:06,622 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions, String)
2021-03-12 05:42:06,623 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions String
2021-03-12 05:42:06,623 [main:54] - Getting value of type String
2021-03-12 05:42:06,774 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:42:06,776 [main:58] - GENERATED VALUE OF TYPE String = "zniql"
2021-03-12 05:42:06,777 [main:61] - GENERATED IS CALL =false
2021-03-12 05:42:06,786 [main:67] - randomType = Kla4
2021-03-12 05:42:06,943 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 05:42:06,946 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 05:42:06,970 [main:106] - GETTING String from TestClass
2021-03-12 05:42:07,003 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in TestClass[PropertyDescriptorImpl@1c0ce7c6], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43cb1673]]
2021-03-12 05:42:07,003 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43cb1673]
2021-03-12 05:42:07,183 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:07,185 [main:117] - GENERATED CALL = (testClass).test.take(196732435)
2021-03-12 05:42:07,186 [main:113] - Case = [public final val foo: Test defined in TestClass[PropertyDescriptorImpl@6b019c31], public open val testDelegated: kotlin.String defined in Test[PropertyDescriptorImpl@2dbf1522]]
2021-03-12 05:42:07,186 [main:117] - GENERATED CALL = (testClass).foo.testDelegated
2021-03-12 05:42:07,186 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in TestClass[PropertyDescriptorImpl@1c0ce7c6], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f6268d9]]
2021-03-12 05:42:07,186 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f6268d9]
2021-03-12 05:42:07,344 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 05:42:07,346 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:42:07,349 [main:117] - GENERATED CALL = (testClass).test.filterIndexed({a: Int, b: Char -> true})
2021-03-12 05:42:07,349 [main:113] - Case = [public open val testDelegated: kotlin.String defined in TestClass[PropertyDescriptorImpl@2e9f0223]]
2021-03-12 05:42:07,349 [main:117] - GENERATED CALL = (testClass).testDelegated
2021-03-12 05:42:07,350 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in TestClass[PropertyDescriptorImpl@1c0ce7c6], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a56629c]]
2021-03-12 05:42:07,350 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a56629c]
2021-03-12 05:42:07,509 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:42:07,512 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:42:07,515 [main:117] - GENERATED CALL = (testClass).test.filter({a: Char -> true})
2021-03-12 05:42:07,515 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in TestClass[PropertyDescriptorImpl@1c0ce7c6], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b803e32]]
2021-03-12 05:42:07,515 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b803e32]
2021-03-12 05:42:07,515 [main:117] - GENERATED CALL = (testClass).test.trimMargin(Delegate().test)
2021-03-12 05:42:07,516 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in TestClass[PropertyDescriptorImpl@1c0ce7c6], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b1c1442]]
2021-03-12 05:42:07,516 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b1c1442]
2021-03-12 05:42:07,516 [main:117] - GENERATED CALL = (testClass).test.concat(Delegate().test)
2021-03-12 05:42:07,516 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in TestClass[PropertyDescriptorImpl@1c0ce7c6], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37bb3715]]
2021-03-12 05:42:07,516 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37bb3715]
2021-03-12 05:42:07,689 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:07,692 [main:117] - GENERATED CALL = (testClass).test.takeLast(-85809456)
2021-03-12 05:42:07,692 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in TestClass[PropertyDescriptorImpl@1c0ce7c6], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@75078835]]
2021-03-12 05:42:07,692 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@75078835]
2021-03-12 05:42:07,858 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:42:07,859 [main:117] - GENERATED CALL = (testClass).test.plus("yeqbs")
2021-03-12 05:42:07,860 [main:113] - Case = [public final val foo: Test defined in TestClass[PropertyDescriptorImpl@6b019c31], @[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@ac4a260]]
2021-03-12 05:42:07,860 [main:117] - GENERATED CALL = (testClass).foo.test
2021-03-12 05:42:07,860 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions of type String is (testClass).testDelegated
2021-03-12 05:42:08,031 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:42:08,032 [main:66] - Compilation checking started
2021-03-12 05:42:08,784 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                prope2 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope2 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${e.message}"
    }

    if (shouldSuspend) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw RuntimeException("fail 2")
        return prope2!!
    }

    if (prope3 === COROUTINE_SUSPENDED) throw RuntimeException("fail 3")
    return prope3 as String
}

fun box335(): String {
    if (fu2(false) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2(false) { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:42:08,787 [main:107] - replacing (i, Int)
2021-03-12 05:42:08,787 [main:50] - replacing i Int
2021-03-12 05:42:08,787 [main:54] - Getting value of type Int
2021-03-12 05:42:08,942 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:08,945 [main:58] - GENERATED VALUE OF TYPE Int = 623167333
2021-03-12 05:42:08,945 [main:61] - GENERATED IS CALL =false
2021-03-12 05:42:08,954 [main:67] - randomType = TestClass
2021-03-12 05:42:09,111 [main:302] - generating value of type = TestClass false depth = 0
2021-03-12 05:42:09,113 [main:112] - generating klass TestClass text = class TestClass(val foo: Test) : Test by foo
2021-03-12 05:42:09,271 [main:194] - Type params = []
2021-03-12 05:42:09,433 [main:302] - generating value of type = Test false depth = 2
2021-03-12 05:42:09,436 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 05:42:09,770 [main:302] - generating value of type = Delegate false depth = 4
2021-03-12 05:42:09,773 [main:112] - generating klass Delegate text = class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}
2021-03-12 05:42:09,794 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d0f3c5a]
2021-03-12 05:42:09,982 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:42:09,985 [main:78] - Generated call from random type = (TestClass(Delegate())).test.compareTo(Delegate().test, true)
2021-03-12 05:42:09,986 [main:106] - GETTING Int from String
2021-03-12 05:42:10,020 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@87422b9]]
2021-03-12 05:42:10,021 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9]
2021-03-12 05:42:10,021 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@87422b9]
2021-03-12 05:42:10,183 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:10,186 [main:117] - GENERATED CALL = (Delegate().test).compareTo(Delegate().testDelegated).xor(541426569)
2021-03-12 05:42:10,186 [main:113] - Case = [public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a9abeeb]]
2021-03-12 05:42:10,187 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a9abeeb]
2021-03-12 05:42:10,347 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:42:10,349 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:42:10,351 [main:117] - GENERATED CALL = (Delegate().test).indexOfFirst({a: Char -> true})
2021-03-12 05:42:10,352 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1197d3fb]]
2021-03-12 05:42:10,352 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9]
2021-03-12 05:42:10,352 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1197d3fb]
2021-03-12 05:42:10,500 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:42:10,503 [main:117] - GENERATED CALL = (Delegate().test).compareTo(testClass.test).rem(-100)
2021-03-12 05:42:10,504 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@55c901f1], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@ae4159d]]
2021-03-12 05:42:10,504 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@ae4159d]
2021-03-12 05:42:10,656 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:10,658 [main:117] - GENERATED CALL = (Delegate().test).length.rotateRight(-1038044703)
2021-03-12 05:42:10,659 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@55c901f1], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7908c1f0]]
2021-03-12 05:42:10,659 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7908c1f0]
2021-03-12 05:42:10,659 [main:117] - GENERATED CALL = (Delegate().test).length.takeLowestOneBit()
2021-03-12 05:42:10,659 [main:113] - Case = [public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@188a79c7]]
2021-03-12 05:42:10,660 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@188a79c7]
2021-03-12 05:42:10,660 [main:117] - GENERATED CALL = (Delegate().test).toInt()
2021-03-12 05:42:10,660 [main:113] - Case = [public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10d3974a]]
2021-03-12 05:42:10,660 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10d3974a]
2021-03-12 05:42:10,842 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 05:42:10,845 [main:302] - generating value of type = Int true depth = 1
2021-03-12 05:42:10,849 [main:117] - GENERATED CALL = (Delegate().test).sumBy({a: Char -> 130156415})
2021-03-12 05:42:10,849 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828], public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2c1034c9]]
2021-03-12 05:42:10,850 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828]
2021-03-12 05:42:11,048 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:11,052 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2c1034c9]
2021-03-12 05:42:11,224 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:42:11,226 [main:117] - GENERATED CALL = (Delegate().test).get(781653084).compareTo('㧤')
2021-03-12 05:42:11,226 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a9abeeb]]
2021-03-12 05:42:11,227 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:42:11,463 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:11,629 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:11,633 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a9abeeb]
2021-03-12 05:42:11,812 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:42:11,816 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:42:11,820 [main:117] - GENERATED CALL = (Delegate().test).subSequence(235666941, -1792693389).indexOfFirst({a: Char -> false})
2021-03-12 05:42:11,820 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7c51755a]]
2021-03-12 05:42:11,820 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9]
2021-03-12 05:42:11,820 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7c51755a]
2021-03-12 05:42:11,979 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:12,134 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:12,137 [main:117] - GENERATED CALL = (Delegate().test).compareTo(Delegate().test).coerceIn(-1754076483, -850363026)
2021-03-12 05:42:12,137 [main:114] - replacement of i of type Int is 623167333
2021-03-12 05:42:12,284 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 05:42:12,284 [main:66] - Compilation checking started
2021-03-12 05:42:13,114 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                prope2 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope2 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${e.message}"
    }

    if (shouldSuspend) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw RuntimeException("fail 2")
        return prope2!!
    }

    if (prope3 === COROUTINE_SUSPENDED) throw RuntimeException("fail 3")
    return prope3 as String
}

fun box335(): String {
    if (fu2(false) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2(false) { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in 1..numberOfSuspensions) {
            if (prope5 != 623167333) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:42:13,116 [main:107] - replacing (prope3.exceptionOrNull()?.let(x), Unit?)
2021-03-12 05:42:13,117 [main:50] - replacing prope3.exceptionOrNull()?.let(x) Unit?
2021-03-12 05:42:13,117 [main:54] - Getting value of type Unit?
2021-03-12 05:42:13,265 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 05:42:13,271 [main:58] - GENERATED VALUE OF TYPE Unit? = println()
2021-03-12 05:42:13,272 [main:61] - GENERATED IS CALL =true
2021-03-12 05:42:15,746 [main:67] - randomType = Function2<List<Function1<TestClass, UInt>>, Kla1, Triple<Delegate, Function2<Kla5, UInt, MutableMap<Int?, Map<Double, UByte>>?>, Delegate>>
2021-03-12 05:42:15,754 [main:106] - GETTING Unit? from Test
2021-03-12 05:42:15,764 [main:106] - GETTING Unit? from String
2021-03-12 05:42:15,795 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49cc8320]]
2021-03-12 05:42:15,795 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:42:15,933 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:16,062 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:16,065 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49cc8320]
2021-03-12 05:42:16,200 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-12 05:42:16,202 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:42:16,336 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:42:16,339 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:42:16,627 [main:302] - generating value of type = Any false depth = 4
2021-03-12 05:42:16,628 [main:95] - GENERATED = println("ywdop")
2021-03-12 05:42:16,629 [main:117] - GENERATED CALL = (testClass.test)?.subSequence(-2096064674, -389583967).forEachIndexed({a: Int, b: Char -> println("ywdop")})
2021-03-12 05:42:16,629 [main:113] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c665799]]
2021-03-12 05:42:16,629 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c665799]
2021-03-12 05:42:16,800 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-12 05:42:16,803 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:42:16,953 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:42:16,957 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:42:17,369 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 05:42:17,371 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 05:42:17,373 [main:302] - generating value of type = Any false depth = 5
2021-03-12 05:42:17,374 [main:95] - GENERATED = require(true, { "mavxk"})
2021-03-12 05:42:17,374 [main:117] - GENERATED CALL = (testClass.test)?.forEach({a: Char -> require(true, { "mavxk"})})
2021-03-12 05:42:17,374 [main:113] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49cc8320]]
2021-03-12 05:42:17,374 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49cc8320]
2021-03-12 05:42:17,497 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-12 05:42:17,499 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:42:17,633 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 05:42:17,636 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 05:42:18,011 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 05:42:18,013 [main:95] - GENERATED = check(false)
2021-03-12 05:42:18,014 [main:117] - GENERATED CALL = (testClass.test)?.forEachIndexed({a: Int, b: Char -> check(false)})
2021-03-12 05:42:18,014 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c665799]]
2021-03-12 05:42:18,014 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:42:18,144 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:18,271 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:18,273 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c665799]
2021-03-12 05:42:18,397 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-12 05:42:18,399 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:42:18,405 [main:117] - GENERATED CALL = (testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
2021-03-12 05:42:18,406 [main:114] - replacement of prope3.exceptionOrNull()?.let(x) of type Unit? is (testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
2021-03-12 05:42:18,527 [main:33] - Trying to replace Element(SAFE_ACCESS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:42:18,528 [main:66] - Compilation checking started
2021-03-12 05:42:19,272 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                prope2 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope2 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${e.message}"
    }

    if (shouldSuspend) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw RuntimeException("fail 2")
        return prope2!!
    }

    if (prope3 === COROUTINE_SUSPENDED) throw RuntimeException("fail 3")
    return prope3 as String
}

fun box335(): String {
    if (fu2(false) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2(false) { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in 1..numberOfSuspensions) {
            if (prope5 != 623167333) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:42:19,274 [main:107] - replacing ({
        fu7(it)
    }, Function1<Continuation<Unit>, Unit>)
2021-03-12 05:42:19,275 [main:50] - replacing {
        fu7(it)
    } Function1<Continuation<Unit>, Unit>
2021-03-12 05:42:19,275 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-12 05:42:19,408 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-12 05:42:19,411 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:42:19,549 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 05:42:19,553 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 05:42:19,830 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 05:42:19,833 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 05:42:19,966 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:42:19,969 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:42:20,439 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 05:42:20,442 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-12 05:42:20,444 [main:302] - generating value of type = Any false depth = 9
2021-03-12 05:42:20,445 [main:95] - GENERATED = require(true, { "ajgjr"})
2021-03-12 05:42:20,445 [main:95] - GENERATED = contract({ require(true, { "ajgjr"})})
2021-03-12 05:42:20,445 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> contract({ require(true, { "ajgjr"})})}
2021-03-12 05:42:20,445 [main:61] - GENERATED IS CALL =false
2021-03-12 05:42:20,454 [main:67] - randomType = Delegate
2021-03-12 05:42:20,589 [main:302] - generating value of type = Delegate false depth = 0
2021-03-12 05:42:20,591 [main:112] - generating klass Delegate text = class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}
2021-03-12 05:42:20,602 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from TestClass
2021-03-12 05:42:20,614 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 05:42:20,644 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 05:42:20,647 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 05:42:20,649 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 05:42:20,652 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Test
2021-03-12 05:42:20,664 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 05:42:20,664 [main:114] - replacement of {
        fu7(it)
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> contract({ require(true, { "ajgjr"})})}
2021-03-12 05:42:20,799 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 05:42:20,799 [main:66] - Compilation checking started
2021-03-12 05:42:21,210 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                prope2 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope2 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${e.message}"
    }

    if (shouldSuspend) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw RuntimeException("fail 2")
        return prope2!!
    }

    if (prope3 === COROUTINE_SUSPENDED) throw RuntimeException("fail 3")
    return prope3 as String
}

fun box335(): String {
    if (fu2(false) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2(false) { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> contract({ require(true, { "ajgjr"})})}

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in 1..numberOfSuspensions) {
            if (prope5 != 623167333) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:42:21,213 [main:107] - replacing (numberOfSuspensions, Int)
2021-03-12 05:42:21,213 [main:50] - replacing numberOfSuspensions Int
2021-03-12 05:42:21,213 [main:54] - Getting value of type Int
2021-03-12 05:42:21,341 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:21,343 [main:58] - GENERATED VALUE OF TYPE Int = 102030813
2021-03-12 05:42:21,343 [main:61] - GENERATED IS CALL =false
2021-03-12 05:42:21,648 [main:67] - randomType = ULong?
2021-03-12 05:42:21,798 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 05:42:21,862 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@58995b7c]
2021-03-12 05:42:21,992 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 05:42:21,995 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4fee8fdc]
2021-03-12 05:42:22,133 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:42:22,135 [main:78] - Generated call from random type = (8350487291565899358.toULong())?.compareTo(66.toUByte()).minus(36)
2021-03-12 05:42:22,137 [main:106] - GETTING Int from String
2021-03-12 05:42:22,173 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@2896b38d]]
2021-03-12 05:42:22,173 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9]
2021-03-12 05:42:22,320 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:42:22,322 [main:117] - GENERATED CALL = (testClass.test).compareTo("pupjo").absoluteValue
2021-03-12 05:42:22,322 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@55c901f1], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c075069]]
2021-03-12 05:42:22,322 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c075069]
2021-03-12 05:42:22,460 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:42:22,463 [main:117] - GENERATED CALL = (testClass.test).length.compareTo(126)
2021-03-12 05:42:22,463 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a9abeeb]]
2021-03-12 05:42:22,463 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:42:22,602 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:22,741 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:22,743 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a9abeeb]
2021-03-12 05:42:22,905 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:42:22,907 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:42:22,910 [main:117] - GENERATED CALL = (testClass.test).subSequence(-277552187, 1237997045).indexOfFirst({a: Char -> true})
2021-03-12 05:42:22,910 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6b911e3f]]
2021-03-12 05:42:22,910 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9]
2021-03-12 05:42:22,911 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6b911e3f]
2021-03-12 05:42:23,052 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:23,055 [main:117] - GENERATED CALL = (testClass.test).compareTo(Delegate().test).rotateLeft(404049043)
2021-03-12 05:42:23,057 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@11b7e565]]
2021-03-12 05:42:23,057 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9]
2021-03-12 05:42:23,178 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:42:23,181 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@11b7e565]
2021-03-12 05:42:23,181 [main:117] - GENERATED CALL = (testClass.test).compareTo("fdrtb").takeHighestOneBit()
2021-03-12 05:42:23,181 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10d3974a]]
2021-03-12 05:42:23,181 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:42:23,306 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:23,433 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:23,436 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10d3974a]
2021-03-12 05:42:23,568 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 05:42:23,570 [main:302] - generating value of type = Int true depth = 1
2021-03-12 05:42:23,573 [main:117] - GENERATED CALL = (testClass.test).subSequence(1583558585, 1082096772).sumBy({a: Char -> -142002506})
2021-03-12 05:42:23,573 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@6afbfaf7]]
2021-03-12 05:42:23,573 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9]
2021-03-12 05:42:23,573 [main:117] - GENERATED CALL = (testClass.test).compareTo(Delegate().testDelegated).sign
2021-03-12 05:42:23,573 [main:113] - Case = [public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@188a79c7]]
2021-03-12 05:42:23,574 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@188a79c7]
2021-03-12 05:42:23,574 [main:117] - GENERATED CALL = (testClass.test).toInt()
2021-03-12 05:42:23,574 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@55c901f1], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@186c1dab]]
2021-03-12 05:42:23,574 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@186c1dab]
2021-03-12 05:42:23,698 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:23,700 [main:117] - GENERATED CALL = (testClass.test).length.or(1928786791)
2021-03-12 05:42:23,700 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d4d66d]]
2021-03-12 05:42:23,700 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828]
2021-03-12 05:42:23,855 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:23,858 [main:149] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d4d66d]
2021-03-12 05:42:23,858 [main:117] - GENERATED CALL = (testClass.test).get(1970462202).digitToInt()
2021-03-12 05:42:23,858 [main:114] - replacement of numberOfSuspensions of type Int is (testClass.test).compareTo("fdrtb").takeHighestOneBit()
2021-03-12 05:42:23,988 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:42:23,988 [main:66] - Compilation checking started
2021-03-12 05:42:24,713 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                prope2 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope2 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${e.message}"
    }

    if (shouldSuspend) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw RuntimeException("fail 2")
        return prope2!!
    }

    if (prope3 === COROUTINE_SUSPENDED) throw RuntimeException("fail 3")
    return prope3 as String
}

fun box335(): String {
    if (fu2(false) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2(false) { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in 1..numberOfSuspensions) {
            if (prope5 != 623167333) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:42:24,717 [main:107] - replacing (true, Boolean)
2021-03-12 05:42:24,718 [main:50] - replacing true Boolean
2021-03-12 05:42:24,718 [main:54] - Getting value of type Boolean
2021-03-12 05:42:24,865 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:42:24,868 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 05:42:24,868 [main:61] - GENERATED IS CALL =false
2021-03-12 05:42:24,877 [main:67] - randomType = String?
2021-03-12 05:42:25,015 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:42:25,049 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828]
2021-03-12 05:42:25,181 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:25,183 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@387e5c44]
2021-03-12 05:42:25,184 [main:78] - Generated call from random type = ("pjotc")?.get(1040012742).isSurrogate()
2021-03-12 05:42:25,185 [main:106] - GETTING Boolean from String
2021-03-12 05:42:25,214 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2063cea8]]
2021-03-12 05:42:25,214 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:42:25,363 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:25,513 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:25,515 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2063cea8]
2021-03-12 05:42:25,640 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:25,767 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:42:25,893 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:26,016 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:26,148 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:42:26,150 [main:117] - GENERATED CALL = (Delegate().test).subSequence(-1727871834, 1850532180).regionMatches(619059059, "pkdvk", -2056646478, -445339173, false)
2021-03-12 05:42:26,151 [main:113] - Case = [public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a69001]]
2021-03-12 05:42:26,151 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a69001]
2021-03-12 05:42:26,279 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:42:26,424 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:42:26,427 [main:117] - GENERATED CALL = (Delegate().test).contains('Ƒ', false)
2021-03-12 05:42:26,427 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@55c901f1], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61b9d55c]]
2021-03-12 05:42:26,427 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61b9d55c]
2021-03-12 05:42:26,591 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:42:26,592 [main:117] - GENERATED CALL = (Delegate().test).length.equals("pqign")
2021-03-12 05:42:26,592 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@118d964d]]
2021-03-12 05:42:26,592 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:42:26,733 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:26,867 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:26,870 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@118d964d]
2021-03-12 05:42:26,870 [main:117] - GENERATED CALL = (Delegate().test).subSequence(688820331, 1449092930).isNotEmpty()
2021-03-12 05:42:26,870 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50b073f7]]
2021-03-12 05:42:26,870 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828]
2021-03-12 05:42:27,002 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:27,005 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50b073f7]
2021-03-12 05:42:27,005 [main:117] - GENERATED CALL = (Delegate().test).get(-1938855165).isLetter()
2021-03-12 05:42:27,005 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@211056ee]]
2021-03-12 05:42:27,005 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:42:27,140 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:27,277 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:27,279 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@211056ee]
2021-03-12 05:42:27,435 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:27,438 [main:117] - GENERATED CALL = (Delegate().test).subSequence(-2145509659, -585424959).hasSurrogatePairAt(1458394201)
2021-03-12 05:42:27,438 [main:113] - Case = [public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c2b191b]]
2021-03-12 05:42:27,438 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c2b191b]
2021-03-12 05:42:27,438 [main:117] - GENERATED CALL = (Delegate().test).isBlank()
2021-03-12 05:42:27,438 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e8d3a67]]
2021-03-12 05:42:27,438 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828]
2021-03-12 05:42:27,580 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:27,582 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e8d3a67]
2021-03-12 05:42:27,582 [main:117] - GENERATED CALL = (Delegate().test).get(1589952374).isHighSurrogate()
2021-03-12 05:42:27,582 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1803ce0a]]
2021-03-12 05:42:27,583 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828]
2021-03-12 05:42:27,709 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:27,711 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1803ce0a]
2021-03-12 05:42:27,711 [main:117] - GENERATED CALL = (Delegate().test).get(-111156946).isWhitespace()
2021-03-12 05:42:27,711 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c513883]]
2021-03-12 05:42:27,712 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:42:27,831 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:27,955 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:27,957 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c513883]
2021-03-12 05:42:27,958 [main:117] - GENERATED CALL = (Delegate().test).subSequence(-1627873508, -846185540).any()
2021-03-12 05:42:27,958 [main:114] - replacement of true of type Boolean is false
2021-03-12 05:42:28,079 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 05:42:28,080 [main:66] - Compilation checking started
2021-03-12 05:42:28,826 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                prope2 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope2 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${e.message}"
    }

    if (shouldSuspend) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw RuntimeException("fail 2")
        return prope2!!
    }

    if (prope3 === COROUTINE_SUSPENDED) throw RuntimeException("fail 3")
    return prope3 as String
}

fun box335(): String {
    if (fu2(false) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2(false) { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in 1..numberOfSuspensions) {
            if (prope5 != 623167333) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
prope1.prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:42:28,829 [main:107] - replacing (" has no state-machine ", String)
2021-03-12 05:42:28,830 [main:50] - replacing " has no state-machine " String
2021-03-12 05:42:28,830 [main:54] - Getting value of type String
2021-03-12 05:42:28,962 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:42:28,964 [main:58] - GENERATED VALUE OF TYPE String = "poepa"
2021-03-12 05:42:28,964 [main:61] - GENERATED IS CALL =false
2021-03-12 05:42:29,101 [main:67] - randomType = UByte
2021-03-12 05:42:29,224 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 05:42:29,261 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@4479d496]
2021-03-12 05:42:29,385 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 05:42:29,388 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@98649f6]
2021-03-12 05:42:29,513 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:29,516 [main:78] - Generated call from random type = (3.toUByte()).compareTo(113.toUByte()).toString(1146255211)
2021-03-12 05:42:29,517 [main:106] - GETTING String from Test
2021-03-12 05:42:29,522 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@7ecb148], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e3fe21b]]
2021-03-12 05:42:29,522 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e3fe21b]
2021-03-12 05:42:29,522 [main:117] - GENERATED CALL = (TestClass(Delegate()).foo).test.capitalize()
2021-03-12 05:42:29,522 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@7ecb148], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37bb3715]]
2021-03-12 05:42:29,522 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37bb3715]
2021-03-12 05:42:29,650 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:29,652 [main:117] - GENERATED CALL = (TestClass(Delegate()).foo).test.takeLast(335330039)
2021-03-12 05:42:29,652 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@7ecb148], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b251a21]]
2021-03-12 05:42:29,652 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b251a21]
2021-03-12 05:42:29,783 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:42:29,785 [main:117] - GENERATED CALL = (TestClass(Delegate()).foo).test.substringBefore('ḉ', testClass.test)
2021-03-12 05:42:29,786 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@7ecb148], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7976d057]]
2021-03-12 05:42:29,786 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7976d057]
2021-03-12 05:42:29,961 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:42:30,109 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:42:30,111 [main:117] - GENERATED CALL = (TestClass(Delegate()).foo).test.replaceAfter('ꆒ', testClass.test, "vxfbz")
2021-03-12 05:42:30,112 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@7ecb148], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bd2a531]]
2021-03-12 05:42:30,112 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bd2a531]
2021-03-12 05:42:30,233 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:42:30,236 [main:117] - GENERATED CALL = (TestClass(Delegate()).foo).test.substringAfter('仝', Delegate().test)
2021-03-12 05:42:30,236 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@7ecb148], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19e9cba7]]
2021-03-12 05:42:30,236 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19e9cba7]
2021-03-12 05:42:30,358 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:42:30,360 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:42:30,363 [main:117] - GENERATED CALL = (TestClass(Delegate()).foo).test.dropLastWhile({a: Char -> true})
2021-03-12 05:42:30,363 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@7ecb148], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@577ef375]]
2021-03-12 05:42:30,363 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@577ef375]
2021-03-12 05:42:30,492 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:30,619 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:30,741 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:42:30,746 [main:117] - GENERATED CALL = (TestClass(Delegate()).foo).test.replaceRange(413943513, 1610392717, StringBuilder())
2021-03-12 05:42:30,747 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@7ecb148], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48cb2ddd]]
2021-03-12 05:42:30,747 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48cb2ddd]
2021-03-12 05:42:30,747 [main:117] - GENERATED CALL = (TestClass(Delegate()).foo).test.decapitalize()
2021-03-12 05:42:30,747 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@7ecb148], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52db7ff4]]
2021-03-12 05:42:30,747 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52db7ff4]
2021-03-12 05:42:30,893 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 05:42:31,053 [main:43] - GENERATING CALL OF fun <T> listOfNotNull(element: Int): Iterable<Int> = TODO()
2021-03-12 05:42:31,057 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOfNotNull(element: Int): Iterable<Int> = TODO()
2021-03-12 05:42:31,184 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:42:31,187 [main:95] - GENERATED = listOfNotNull<Int>(1290768826)
2021-03-12 05:42:31,187 [main:117] - GENERATED CALL = (TestClass(Delegate()).foo).test.slice(listOfNotNull<Int>(1290768826))
2021-03-12 05:42:31,187 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@7ecb148], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31574a30]]
2021-03-12 05:42:31,187 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31574a30]
2021-03-12 05:42:31,309 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 05:42:31,312 [main:302] - generating value of type = Char true depth = 1
2021-03-12 05:42:31,314 [main:117] - GENERATED CALL = (TestClass(Delegate()).foo).test.replaceFirstChar({a: Char -> '㘻'})
2021-03-12 05:42:31,314 [main:114] - replacement of " has no state-machine " of type String is (TestClass(Delegate()).foo).test.takeLast(335330039)
2021-03-12 05:42:31,438 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:42:31,439 [main:66] - Compilation checking started
2021-03-12 05:42:32,043 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                prope2 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope2 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${e.message}"
    }

    if (shouldSuspend) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw RuntimeException("fail 2")
        return prope2!!
    }

    if (prope3 === COROUTINE_SUSPENDED) throw RuntimeException("fail 3")
    return prope3 as String
}

fun box335(): String {
    if (fu2(false) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2(false) { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (TestClass(Delegate()).foo).test.takeLast(335330039) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in 1..numberOfSuspensions) {
            if (prope5 != 623167333) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
prope1.prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:42:32,047 [main:107] - replacing (false, Boolean)
2021-03-12 05:42:32,048 [main:50] - replacing false Boolean
2021-03-12 05:42:32,048 [main:54] - Getting value of type Boolean
2021-03-12 05:42:32,176 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:42:32,180 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 05:42:32,180 [main:61] - GENERATED IS CALL =false
2021-03-12 05:42:32,345 [main:67] - randomType = Double
2021-03-12 05:42:32,484 [main:302] - generating value of type = Double true depth = 0
2021-03-12 05:42:32,530 [main:149] - GENERATING call of type public open fun toFloat(): kotlin.Float defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@756d40e5]
2021-03-12 05:42:32,530 [main:149] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6c215735]
2021-03-12 05:42:32,530 [main:78] - Generated call from random type = (0.2530265828995427).toFloat().isNaN()
2021-03-12 05:42:32,530 [main:114] - replacement of false of type Boolean is (0.2530265828995427).toFloat().isNaN()
2021-03-12 05:42:32,661 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:42:32,661 [main:66] - Compilation checking started
2021-03-12 05:42:33,285 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                prope2 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope2 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${e.message}"
    }

    if (shouldSuspend) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw RuntimeException("fail 2")
        return prope2!!
    }

    if (prope3 === COROUTINE_SUSPENDED) throw RuntimeException("fail 3")
    return prope3 as String
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2(false) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2((0.2530265828995427).toFloat().isNaN()) { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (TestClass(Delegate()).foo).test.takeLast(335330039) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in 1..numberOfSuspensions) {
            if (prope5 != 623167333) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
prope1.prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:42:33,287 [main:107] - replacing (prope3.getOrThrow(), Any?)
2021-03-12 05:42:33,288 [main:50] - replacing prope3.getOrThrow() Any?
2021-03-12 05:42:33,288 [main:54] - Getting value of type Any?
2021-03-12 05:42:33,417 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:42:33,417 [main:58] - GENERATED VALUE OF TYPE Any? = "unexd"
2021-03-12 05:42:33,417 [main:61] - GENERATED IS CALL =false
2021-03-12 05:42:34,765 [main:67] - randomType = Triple<Pair<Kla2<UByte?>, Test>, Double, Triple<Kla4, Kla0, ULong?>>
2021-03-12 05:42:34,906 [main:302] - generating value of type = Triple<Pair<Kla2<UByte?>, Test>, Double, Triple<Kla4, Kla0, ULong?>> false depth = 0
2021-03-12 05:42:35,036 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Pair<Kla2<UByte?>, Test>, second: Double, third: Triple<Kla4, Kla0, ULong?>): Triple<Pair<Kla2<UByte?>, Test>, Double, Triple<Kla4, Kla0, ULong?>> = TODO()
2021-03-12 05:42:35,039 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Pair<Kla2<UByte?>, Test>, second: Double, third: Triple<Kla4, Kla0, ULong?>): Triple<Pair<Kla2<UByte?>, Test>, Double, Triple<Kla4, Kla0, ULong?>> = TODO()
2021-03-12 05:42:35,170 [main:302] - generating value of type = Pair<Kla2<UByte?>, Test> false depth = 3
2021-03-12 05:42:35,299 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla2<UByte?>, second: Test): Pair<Kla2<UByte?>, Test> = TODO()
2021-03-12 05:42:35,303 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla2<UByte?>, second: Test): Pair<Kla2<UByte?>, Test> = TODO()
2021-03-12 05:42:35,437 [main:302] - generating value of type = Kla2<UByte?> false depth = 6
2021-03-12 05:42:35,440 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 05:42:36,168 [main:302] - generating value of type = Kla5 false depth = 8
2021-03-12 05:42:36,170 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
prope1.prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}
2021-03-12 05:42:36,170 [main:302] - generating value of type = Test false depth = 6
2021-03-12 05:42:36,173 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 05:42:36,442 [main:302] - generating value of type = TestClass false depth = 8
2021-03-12 05:42:36,444 [main:112] - generating klass TestClass text = class TestClass(val foo: Test) : Test by foo
2021-03-12 05:42:36,566 [main:194] - Type params = []
2021-03-12 05:42:36,690 [main:302] - generating value of type = Test false depth = 10
2021-03-12 05:42:36,692 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 05:42:36,953 [main:302] - generating value of type = Delegate false depth = 12
2021-03-12 05:42:36,955 [main:112] - generating klass Delegate text = class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}
2021-03-12 05:42:36,955 [main:95] - GENERATED = Pair<Kla2<UByte?>, Test>(Kla5, TestClass(Delegate()))
2021-03-12 05:42:36,955 [main:302] - generating value of type = Double true depth = 3
2021-03-12 05:42:36,957 [main:302] - generating value of type = Triple<Kla4, Kla0, ULong?> false depth = 3
2021-03-12 05:42:37,085 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Kla4, second: Kla0, third: ULong?): Triple<Kla4, Kla0, ULong?> = TODO()
2021-03-12 05:42:37,088 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Kla4, second: Kla0, third: ULong?): Triple<Kla4, Kla0, ULong?> = TODO()
2021-03-12 05:42:37,215 [main:302] - generating value of type = Kla4 false depth = 6
2021-03-12 05:42:37,217 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in 1..numberOfSuspensions) {
            if (prope5 != 623167333) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 05:42:37,218 [main:302] - generating value of type = Kla0 false depth = 6
2021-03-12 05:42:37,220 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
prope3.getOrThrow()
    }
}
2021-03-12 05:42:37,380 [main:194] - Type params = []
2021-03-12 05:42:37,516 [main:302] - generating value of type = CoroutineContext false depth = 8
2021-03-12 05:42:37,649 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:42:37,652 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:42:37,928 [main:302] - generating value of type = Key<*> false depth = 11
2021-03-12 05:42:38,065 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:42:38,068 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:42:38,509 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:42:38,509 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:42:38,509 [main:302] - generating value of type = ULong true depth = 6
2021-03-12 05:42:38,512 [main:95] - GENERATED = Triple<Kla4, Kla0, ULong?>(Kla4(), Kla0(), 2655719529528229359.toULong())
2021-03-12 05:42:38,512 [main:95] - GENERATED = Triple<Pair<Kla2<UByte?>, Test>, Double, Triple<Kla4, Kla0, ULong?>>(Pair<Kla2<UByte?>, Test>(Kla5, TestClass(Delegate())), 0.30429448849147467, Triple<Kla4, Kla0, ULong?>(Kla4(), Kla0(), 2655719529528229359.toULong()))
2021-03-12 05:42:38,540 [main:106] - GETTING Any? from String
2021-03-12 05:42:38,566 [main:106] - GETTING Any? from Test
2021-03-12 05:42:38,572 [main:106] - GETTING Any? from String
2021-03-12 05:42:38,573 [main:106] - GETTING Any? from TestClass
2021-03-12 05:42:38,582 [main:106] - GETTING Any? from String
2021-03-12 05:42:38,583 [main:106] - GETTING Any? from String
2021-03-12 05:42:38,601 [main:106] - GETTING Any? from String
2021-03-12 05:42:38,601 [main:114] - replacement of prope3.getOrThrow() of type Any? is "unexd"
2021-03-12 05:42:38,726 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 05:42:38,727 [main:66] - Compilation checking started
2021-03-12 05:42:39,325 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                prope2 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope2 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${e.message}"
    }

    if (shouldSuspend) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw RuntimeException("fail 2")
        return prope2!!
    }

    if (prope3 === COROUTINE_SUSPENDED) throw RuntimeException("fail 3")
    return prope3 as String
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2(false) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2((0.2530265828995427).toFloat().isNaN()) { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (TestClass(Delegate()).foo).test.takeLast(335330039) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in 1..numberOfSuspensions) {
            if (prope5 != 623167333) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
prope1.prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:42:39,328 [main:107] - replacing (prope3, Result<Any?>)
2021-03-12 05:42:39,329 [main:50] - replacing prope3 Result<Any?>
2021-03-12 05:42:39,329 [main:54] - Getting value of type Result<Any?>
2021-03-12 05:42:39,467 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-12 05:42:39,596 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 05:42:39,600 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 05:42:39,870 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-12 05:42:39,872 [main:302] - generating value of type = Any false depth = 4
2021-03-12 05:42:39,872 [main:95] - GENERATED = runCatching<Any?>({ "fbvtl"})
2021-03-12 05:42:39,872 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "fbvtl"})
2021-03-12 05:42:39,873 [main:61] - GENERATED IS CALL =true
2021-03-12 05:42:40,608 [main:67] - randomType = Function1<UInt, Pair<Kla5, Kla5>>
2021-03-12 05:42:40,609 [main:106] - GETTING Result<Any?> from String
2021-03-12 05:42:40,628 [main:106] - GETTING Result<Any?> from String
2021-03-12 05:42:40,629 [main:106] - GETTING Result<Any?> from Test
2021-03-12 05:42:40,635 [main:106] - GETTING Result<Any?> from String
2021-03-12 05:42:40,637 [main:106] - GETTING Result<Any?> from String
2021-03-12 05:42:40,638 [main:106] - GETTING Result<Any?> from TestClass
2021-03-12 05:42:40,648 [main:106] - GETTING Result<Any?> from String
2021-03-12 05:42:40,648 [main:114] - replacement of prope3 of type Result<Any?> is runCatching<Any?>({ "fbvtl"})
2021-03-12 05:42:40,769 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:42:40,769 [main:66] - Compilation checking started
2021-03-12 05:42:41,395 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                prope2 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope2 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${e.message}"
    }

    if (shouldSuspend) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw RuntimeException("fail 2")
        return prope2!!
    }

    if (prope3 === COROUTINE_SUSPENDED) throw RuntimeException("fail 3")
    return prope3 as String
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2(false) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2((0.2530265828995427).toFloat().isNaN()) { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (TestClass(Delegate()).foo).test.takeLast(335330039) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in 1..numberOfSuspensions) {
            if (prope5 != 623167333) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
prope1.prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:42:41,399 [main:107] - replacing (" is not subtype of CoroutineStackFrame", String)
2021-03-12 05:42:41,400 [main:50] - replacing " is not subtype of CoroutineStackFrame" String
2021-03-12 05:42:41,400 [main:54] - Getting value of type String
2021-03-12 05:42:41,556 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:42:41,558 [main:58] - GENERATED VALUE OF TYPE String = "fslzx"
2021-03-12 05:42:41,559 [main:61] - GENERATED IS CALL =false
2021-03-12 05:42:41,718 [main:67] - randomType = Short
2021-03-12 05:42:41,843 [main:302] - generating value of type = Short true depth = 0
2021-03-12 05:42:41,893 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4ecaaa44]
2021-03-12 05:42:41,893 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63764b3e]
2021-03-12 05:42:41,893 [main:78] - Generated call from random type = (29043).toChar().plus(Delegate().test)
2021-03-12 05:42:41,893 [main:106] - GETTING String from String
2021-03-12 05:42:41,909 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@507ff28]]
2021-03-12 05:42:41,909 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@507ff28]
2021-03-12 05:42:42,051 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:42:42,056 [main:117] - GENERATED CALL = (Delegate().testDelegated).removeSurrounding("wfvej")
2021-03-12 05:42:42,056 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@170dc33a]]
2021-03-12 05:42:42,056 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@170dc33a]
2021-03-12 05:42:42,178 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:42:42,187 [main:117] - GENERATED CALL = (Delegate().testDelegated).removeSuffix(StringBuilder())
2021-03-12 05:42:42,187 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aba45e]]
2021-03-12 05:42:42,187 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aba45e]
2021-03-12 05:42:42,316 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:42:42,318 [main:117] - GENERATED CALL = (Delegate().testDelegated).replaceBefore('䇾', Delegate().testDelegated, Delegate().testDelegated)
2021-03-12 05:42:42,318 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@263c1809]]
2021-03-12 05:42:42,318 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@263c1809]
2021-03-12 05:42:42,445 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:42:42,448 [main:117] - GENERATED CALL = (Delegate().testDelegated).substringBeforeLast('饰', Delegate().testDelegated)
2021-03-12 05:42:42,448 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cb2d685]]
2021-03-12 05:42:42,448 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cb2d685]
2021-03-12 05:42:42,573 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:42:42,575 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:42:42,578 [main:117] - GENERATED CALL = (Delegate().testDelegated).dropWhile({a: Char -> false})
2021-03-12 05:42:42,578 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d29d4e7]]
2021-03-12 05:42:42,578 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d29d4e7]
2021-03-12 05:42:42,705 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:42,708 [main:117] - GENERATED CALL = (Delegate().testDelegated).dropLast(576593370)
2021-03-12 05:42:42,708 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19e9cba7]]
2021-03-12 05:42:42,708 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19e9cba7]
2021-03-12 05:42:42,835 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:42:42,837 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:42:42,840 [main:117] - GENERATED CALL = (Delegate().testDelegated).dropLastWhile({a: Char -> false})
2021-03-12 05:42:42,840 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@75078835]]
2021-03-12 05:42:42,840 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@75078835]
2021-03-12 05:42:42,967 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:42:42,968 [main:117] - GENERATED CALL = (Delegate().testDelegated).plus("xnihf")
2021-03-12 05:42:42,968 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b251a21]]
2021-03-12 05:42:42,968 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b251a21]
2021-03-12 05:42:43,092 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:42:43,094 [main:117] - GENERATED CALL = (Delegate().testDelegated).substringBefore('؄', Delegate().testDelegated)
2021-03-12 05:42:43,094 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@522aa0a8]]
2021-03-12 05:42:43,094 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@522aa0a8]
2021-03-12 05:42:43,225 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:43,227 [main:117] - GENERATED CALL = (Delegate().testDelegated).substring(-81669497)
2021-03-12 05:42:43,227 [main:114] - replacement of " is not subtype of CoroutineStackFrame" of type String is (Delegate().testDelegated).dropWhile({a: Char -> false})
2021-03-12 05:42:43,351 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:42:43,351 [main:66] - Compilation checking started
2021-03-12 05:42:44,002 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                prope2 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope2 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${e.message}"
    }

    if (shouldSuspend) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw RuntimeException("fail 2")
        return prope2!!
    }

    if (prope3 === COROUTINE_SUSPENDED) throw RuntimeException("fail 3")
    return prope3 as String
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2(false) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2((0.2530265828995427).toFloat().isNaN()) { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (TestClass(Delegate()).foo).test.takeLast(335330039) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in 1..numberOfSuspensions) {
            if (prope5 != 623167333) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
prope1.prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:42:44,005 [main:107] - replacing (1..numberOfSuspensions, IntRange)
2021-03-12 05:42:44,005 [main:50] - replacing 1..numberOfSuspensions IntRange
2021-03-12 05:42:44,005 [main:54] - Getting value of type IntRange
2021-03-12 05:42:44,144 [main:302] - generating value of type = IntRange false depth = 0
2021-03-12 05:42:44,278 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 05:42:44,281 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 05:42:44,704 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:42:44,706 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:42:44,708 [main:95] - GENERATED = IntRange(1075629866, 1063396526)
2021-03-12 05:42:44,708 [main:58] - GENERATED VALUE OF TYPE IntRange = IntRange(1075629866, 1063396526)
2021-03-12 05:42:44,708 [main:61] - GENERATED IS CALL =true
2021-03-12 05:42:44,851 [main:67] - randomType = ULong
2021-03-12 05:42:44,985 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 05:42:45,045 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@7c39e758]
2021-03-12 05:42:45,045 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@14b5df7d]
2021-03-12 05:42:45,184 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:42:45,187 [main:78] - Generated call from random type = (1552405914446092582.toULong()).toByte().rangeTo(72)
2021-03-12 05:42:45,187 [main:114] - replacement of 1..numberOfSuspensions of type IntRange is (1552405914446092582.toULong()).toByte().rangeTo(72)
2021-03-12 05:42:45,336 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:42:45,336 [main:66] - Compilation checking started
2021-03-12 05:42:46,035 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                prope2 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope2 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${e.message}"
    }

    if (shouldSuspend) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw RuntimeException("fail 2")
        return prope2!!
    }

    if (prope3 === COROUTINE_SUSPENDED) throw RuntimeException("fail 3")
    return prope3 as String
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2(false) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2((0.2530265828995427).toFloat().isNaN()) { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (TestClass(Delegate()).foo).test.takeLast(335330039) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if (prope5 != 623167333) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
prope1.prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:42:46,038 [main:107] - replacing (prope3, Result<Ty0>)
2021-03-12 05:42:46,039 [main:50] - replacing prope3 Result<Ty0>
2021-03-12 05:42:46,039 [main:54] - Getting value of type Result<Ty0>
2021-03-12 05:42:46,194 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-12 05:42:46,333 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 05:42:46,337 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 05:42:46,631 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 05:42:46,631 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-12 05:42:46,948 [main:67] - randomType = Pair<HashMap<String, TestClass>, Boolean>
2021-03-12 05:42:47,074 [main:302] - generating value of type = Pair<HashMap<String, TestClass>, Boolean> false depth = 0
2021-03-12 05:42:47,226 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: HashMap<String, TestClass>, second: Boolean): Pair<HashMap<String, TestClass>, Boolean> = TODO()
2021-03-12 05:42:47,230 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: HashMap<String, TestClass>, second: Boolean): Pair<HashMap<String, TestClass>, Boolean> = TODO()
2021-03-12 05:42:47,361 [main:302] - generating value of type = HashMap<String, TestClass> false depth = 3
2021-03-12 05:42:47,491 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<String, TestClass>): HashMap<Strg, TestClass> = TODO()
2021-03-12 05:42:47,494 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<String, TestClass>): HashMap<Strg, TestClass> = TODO()
2021-03-12 05:42:47,626 [main:302] - generating value of type = Pair<String, TestClass> false depth = 6
2021-03-12 05:42:47,760 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: String, second: TestClass): Pair<String, TestClass> = TODO()
2021-03-12 05:42:47,763 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: String, second: TestClass): Pair<String, TestClass> = TODO()
2021-03-12 05:42:47,904 [main:302] - generating value of type = String true depth = 9
2021-03-12 05:42:47,907 [main:302] - generating value of type = TestClass false depth = 9
2021-03-12 05:42:47,909 [main:112] - generating klass TestClass text = class TestClass(val foo: Test) : Test by foo
2021-03-12 05:42:48,039 [main:194] - Type params = []
2021-03-12 05:42:48,175 [main:302] - generating value of type = Test false depth = 11
2021-03-12 05:42:48,177 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 05:42:48,449 [main:302] - generating value of type = TestClass false depth = 13
2021-03-12 05:42:48,451 [main:112] - generating klass TestClass text = class TestClass(val foo: Test) : Test by foo
2021-03-12 05:42:48,577 [main:194] - Type params = []
2021-03-12 05:42:48,772 [main:302] - generating value of type = Test false depth = 15
2021-03-12 05:42:48,774 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 05:42:49,061 [main:302] - generating value of type = TestClass false depth = 17
2021-03-12 05:42:49,061 [main:95] - GENERATED = Pair<String, TestClass>("jegwr", TestClass(TestClass()))
2021-03-12 05:42:49,062 [main:95] - GENERATED = linkedMapOf<String, TestClass>(Pair<String, TestClass>("jegwr", TestClass(TestClass())))
2021-03-12 05:42:49,062 [main:302] - generating value of type = Boolean true depth = 3
2021-03-12 05:42:49,064 [main:95] - GENERATED = Pair<HashMap<String, TestClass>, Boolean>(linkedMapOf<String, TestClass>(Pair<String, TestClass>("jegwr", TestClass(TestClass()))), false)
2021-03-12 05:42:49,093 [main:106] - GETTING Result<Ty0> from String
2021-03-12 05:42:49,139 [main:106] - GETTING Result<Ty0> from TestClass
2021-03-12 05:42:49,161 [main:106] - GETTING Result<Ty0> from String
2021-03-12 05:42:49,162 [main:106] - GETTING Result<Ty0> from Test
2021-03-12 05:42:49,171 [main:106] - GETTING Result<Ty0> from String
2021-03-12 05:42:49,172 [main:106] - GETTING Result<Ty0> from String
2021-03-12 05:42:49,174 [main:106] - GETTING Result<Ty0> from String
2021-03-12 05:42:49,174 [main:111] - Cant find and generate replacement for prope3 type Result<Ty0>
2021-03-12 05:42:49,174 [main:107] - replacing (0, Int)
2021-03-12 05:42:49,175 [main:50] - replacing 0 Int
2021-03-12 05:42:49,175 [main:54] - Getting value of type Int
2021-03-12 05:42:49,321 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:49,324 [main:58] - GENERATED VALUE OF TYPE Int = -913804721
2021-03-12 05:42:49,324 [main:61] - GENERATED IS CALL =false
2021-03-12 05:42:49,329 [main:67] - randomType = Byte
2021-03-12 05:42:49,470 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:42:49,526 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3049f3f6]
2021-03-12 05:42:49,665 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:42:49,668 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6cb48bf4]
2021-03-12 05:42:49,806 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:49,808 [main:78] - Generated call from random type = (-108).compareTo(16).coerceAtLeast(1683267524)
2021-03-12 05:42:49,809 [main:106] - GETTING Int from String
2021-03-12 05:42:49,839 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@ae4159d]]
2021-03-12 05:42:49,839 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9]
2021-03-12 05:42:49,839 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@ae4159d]
2021-03-12 05:42:49,982 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:49,984 [main:117] - GENERATED CALL = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
2021-03-12 05:42:49,985 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@397c3ce1]]
2021-03-12 05:42:49,985 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:42:50,111 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:50,267 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:50,269 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@397c3ce1]
2021-03-12 05:42:50,396 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 05:42:50,399 [main:302] - generating value of type = Int true depth = 1
2021-03-12 05:42:50,402 [main:117] - GENERATED CALL = (Delegate().test).subSequence(-1160435218, 242286072).sumOf({a: Char -> -38682984})
2021-03-12 05:42:50,402 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@55c901f1], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@314f3000]]
2021-03-12 05:42:50,402 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@314f3000]
2021-03-12 05:42:50,402 [main:117] - GENERATED CALL = (Delegate().test).length.dec()
2021-03-12 05:42:50,402 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@55c901f1], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67c46c9e]]
2021-03-12 05:42:50,402 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67c46c9e]
2021-03-12 05:42:50,402 [main:117] - GENERATED CALL = (Delegate().test).length.unaryPlus()
2021-03-12 05:42:50,402 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@55c901f1], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@87422b9]]
2021-03-12 05:42:50,402 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@87422b9]
2021-03-12 05:42:50,531 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:50,533 [main:117] - GENERATED CALL = (Delegate().test).length.xor(301141642)
2021-03-12 05:42:50,533 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@60d2b5af]]
2021-03-12 05:42:50,533 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9]
2021-03-12 05:42:50,657 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:42:50,660 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@60d2b5af]
2021-03-12 05:42:50,660 [main:117] - GENERATED CALL = (Delegate().test).compareTo("dgnqs").inv()
2021-03-12 05:42:50,660 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@6afbfaf7]]
2021-03-12 05:42:50,660 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9]
2021-03-12 05:42:50,660 [main:117] - GENERATED CALL = (Delegate().test).compareTo(Delegate().test).sign
2021-03-12 05:42:50,660 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c075069]]
2021-03-12 05:42:50,660 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9]
2021-03-12 05:42:50,784 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:42:50,787 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c075069]
2021-03-12 05:42:50,912 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:42:50,914 [main:117] - GENERATED CALL = (Delegate().test).compareTo("qpzot").compareTo(17)
2021-03-12 05:42:50,915 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@314f3000]]
2021-03-12 05:42:50,915 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9]
2021-03-12 05:42:50,915 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@314f3000]
2021-03-12 05:42:50,915 [main:117] - GENERATED CALL = (Delegate().test).compareTo(Delegate().testDelegated).dec()
2021-03-12 05:42:50,915 [main:113] - Case = [public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47dcfdbb]]
2021-03-12 05:42:50,915 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47dcfdbb]
2021-03-12 05:42:51,041 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:42:51,043 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:42:51,046 [main:117] - GENERATED CALL = (Delegate().test).indexOfLast({a: Char -> false})
2021-03-12 05:42:51,046 [main:114] - replacement of 0 of type Int is (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
2021-03-12 05:42:51,172 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:42:51,172 [main:66] - Compilation checking started
2021-03-12 05:42:51,884 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                prope2 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope2 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${e.message}"
    }

    if (shouldSuspend) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw RuntimeException("fail 2")
        return prope2!!
    }

    if (prope3 === COROUTINE_SUSPENDED) throw RuntimeException("fail 3")
    return prope3 as String
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2(false) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2((0.2530265828995427).toFloat().isNaN()) { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val testClass = TestClass(Delegate())
x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (TestClass(Delegate()).foo).test.takeLast(335330039) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if (prope5 != 623167333) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
prope1.prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:42:51,888 [main:107] - replacing (prope3, Any?)
2021-03-12 05:42:51,889 [main:50] - replacing prope3 Any?
2021-03-12 05:42:51,889 [main:54] - Getting value of type Any?
2021-03-12 05:42:52,025 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:42:52,026 [main:58] - GENERATED VALUE OF TYPE Any? = "xdvsz"
2021-03-12 05:42:52,026 [main:61] - GENERATED IS CALL =false
2021-03-12 05:42:52,184 [main:67] - randomType = Short
2021-03-12 05:42:52,315 [main:302] - generating value of type = Short true depth = 0
2021-03-12 05:42:52,364 [main:106] - GETTING Any? from String
2021-03-12 05:42:52,391 [main:106] - GETTING Any? from String
2021-03-12 05:42:52,392 [main:106] - GETTING Any? from String
2021-03-12 05:42:52,393 [main:106] - GETTING Any? from String
2021-03-12 05:42:52,393 [main:106] - GETTING Any? from Test
2021-03-12 05:42:52,401 [main:106] - GETTING Any? from TestClass
2021-03-12 05:42:52,416 [main:106] - GETTING Any? from String
2021-03-12 05:42:52,416 [main:114] - replacement of prope3 of type Any? is "xdvsz"
2021-03-12 05:42:52,549 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 05:42:52,549 [main:66] - Compilation checking started
2021-03-12 05:42:53,172 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    val testClass = TestClass(Delegate())
var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                prope2 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope2 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${e.message}"
    }

    if (shouldSuspend) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw RuntimeException("fail 2")
        return prope2!!
    }

    if ("xdvsz" === COROUTINE_SUSPENDED) throw RuntimeException("fail 3")
    return prope3 as String
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2(false) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2((0.2530265828995427).toFloat().isNaN()) { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val testClass = TestClass(Delegate())
x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (TestClass(Delegate()).foo).test.takeLast(335330039) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if (prope5 != 623167333) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
prope1.prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:42:53,176 [main:107] - replacing (COROUTINE_SUSPENDED, Any)
2021-03-12 05:42:53,176 [main:50] - replacing COROUTINE_SUSPENDED Any
2021-03-12 05:42:53,176 [main:54] - Getting value of type Any
2021-03-12 05:42:53,311 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:42:53,311 [main:58] - GENERATED VALUE OF TYPE Any = "bgmte"
2021-03-12 05:42:53,311 [main:61] - GENERATED IS CALL =false
2021-03-12 05:42:54,974 [main:67] - randomType = Map<Triple<ArrayDeque<UInt>, Kla5?, Kla2<UShort>>?, Short>?
2021-03-12 05:42:54,979 [main:106] - GETTING Any from String
2021-03-12 05:42:54,995 [main:114] - replacement of COROUTINE_SUSPENDED of type Any is "bgmte"
2021-03-12 05:42:55,120 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 05:42:55,120 [main:66] - Compilation checking started
2021-03-12 05:42:55,745 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    val testClass = TestClass(Delegate())
var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                prope2 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope2 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${e.message}"
    }

    if (shouldSuspend) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw RuntimeException("fail 2")
        return prope2!!
    }

    if ("xdvsz" === "bgmte") throw RuntimeException("fail 3")
    return prope3 as String
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2(false) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2((0.2530265828995427).toFloat().isNaN()) { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val testClass = TestClass(Delegate())
x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (TestClass(Delegate()).foo).test.takeLast(335330039) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if (prope5 != 623167333) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
prope1.prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:42:55,749 [main:107] - replacing (prope5, Int)
2021-03-12 05:42:55,749 [main:50] - replacing prope5 Int
2021-03-12 05:42:55,749 [main:54] - Getting value of type Int
2021-03-12 05:42:55,904 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:42:55,907 [main:58] - GENERATED VALUE OF TYPE Int = 491075627
2021-03-12 05:42:55,907 [main:61] - GENERATED IS CALL =false
2021-03-12 05:42:56,341 [main:67] - randomType = Collection<Byte?>?
2021-03-12 05:42:56,342 [main:106] - GETTING Int from Test
2021-03-12 05:42:56,348 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@7ecb148], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d0f3c5a]]
2021-03-12 05:42:56,348 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d0f3c5a]
2021-03-12 05:42:56,474 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:42:56,476 [main:117] - GENERATED CALL = (TestClass(Delegate()).foo).test.compareTo(Delegate().test, true)
2021-03-12 05:42:56,476 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Test[DeserializedSimpleFunctionDescriptor@67587df0], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@39898a37]]
2021-03-12 05:42:56,476 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Test[DeserializedSimpleFunctionDescriptor@67587df0]
2021-03-12 05:42:56,603 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:42:56,604 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@39898a37]
2021-03-12 05:42:56,729 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:42:56,731 [main:117] - GENERATED CALL = (TestClass(Delegate()).foo).equals("qahwc").compareTo(false)
2021-03-12 05:42:56,732 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@7ecb148], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@188a79c7]]
2021-03-12 05:42:56,732 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@188a79c7]
2021-03-12 05:42:56,732 [main:117] - GENERATED CALL = (TestClass(Delegate()).foo).test.toInt()
2021-03-12 05:42:56,732 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@7ecb148], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@55c901f1]]
2021-03-12 05:42:56,732 [main:117] - GENERATED CALL = (TestClass(Delegate()).foo).test.length
2021-03-12 05:42:56,732 [main:114] - replacement of prope5 of type Int is (TestClass(Delegate()).foo).test.toInt()
2021-03-12 05:42:56,860 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:42:56,860 [main:66] - Compilation checking started
2021-03-12 05:42:57,497 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    val testClass = TestClass(Delegate())
var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                prope2 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope2 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${e.message}"
    }

    if (shouldSuspend) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw RuntimeException("fail 2")
        return prope2!!
    }

    if ("xdvsz" === "bgmte") throw RuntimeException("fail 3")
    return prope3 as String
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2(false) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2((0.2530265828995427).toFloat().isNaN()) { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val testClass = TestClass(Delegate())
x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + (TestClass(Delegate()).foo).test.takeLast(335330039) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if ((TestClass(Delegate()).foo).test.toInt() != 623167333) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
prope1.prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:42:57,501 [main:107] - replacing (true, Boolean)
2021-03-12 05:42:57,501 [main:50] - replacing true Boolean
2021-03-12 05:42:57,501 [main:54] - Getting value of type Boolean
2021-03-12 05:42:57,653 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:42:57,655 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 05:42:57,655 [main:61] - GENERATED IS CALL =false
2021-03-12 05:42:58,150 [main:67] - randomType = List<Triple<Kla4, Long?, String?>>
2021-03-12 05:42:58,151 [main:106] - GETTING Boolean from TestClass
2021-03-12 05:42:58,160 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in TestClass[DeserializedSimpleFunctionDescriptor@48247149], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@10c10655]]
2021-03-12 05:42:58,161 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in TestClass[DeserializedSimpleFunctionDescriptor@48247149]
2021-03-12 05:42:58,286 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:42:58,286 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@10c10655]
2021-03-12 05:42:58,415 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:42:58,415 [main:117] - GENERATED CALL = (testClass).equals("alfwn").equals("bnmxx")
2021-03-12 05:42:58,415 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in TestClass[PropertyDescriptorImpl@1c0ce7c6], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50e039ab]]
2021-03-12 05:42:58,415 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50e039ab]
2021-03-12 05:42:58,416 [main:117] - GENERATED CALL = (testClass).test.matches(Delegate().testDelegated)
2021-03-12 05:42:58,416 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in TestClass[PropertyDescriptorImpl@1c0ce7c6], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56853537]]
2021-03-12 05:42:58,416 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56853537]
2021-03-12 05:42:58,541 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:42:58,544 [main:117] - GENERATED CALL = (testClass).test.endsWith(Delegate().test, false)
2021-03-12 05:42:58,544 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in TestClass[DeserializedSimpleFunctionDescriptor@48247149]]
2021-03-12 05:42:58,544 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in TestClass[DeserializedSimpleFunctionDescriptor@48247149]
2021-03-12 05:42:58,675 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:42:58,675 [main:117] - GENERATED CALL = (testClass).equals("ewztn")
2021-03-12 05:42:58,675 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in TestClass[DeserializedSimpleFunctionDescriptor@48247149], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@75472842]]
2021-03-12 05:42:58,675 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in TestClass[DeserializedSimpleFunctionDescriptor@48247149]
2021-03-12 05:42:58,803 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:42:58,803 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@75472842]
2021-03-12 05:42:58,803 [main:117] - GENERATED CALL = (testClass).equals("chrmn").not()
2021-03-12 05:42:58,804 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in TestClass[PropertyDescriptorImpl@1c0ce7c6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@58bdc6dc]]
2021-03-12 05:42:58,804 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@58bdc6dc]
2021-03-12 05:42:58,931 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:42:58,931 [main:117] - GENERATED CALL = (testClass).test.equals("zkbud")
2021-03-12 05:42:58,931 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in TestClass[PropertyDescriptorImpl@1c0ce7c6], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c08ce29]]
2021-03-12 05:42:58,931 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c08ce29]
2021-03-12 05:42:59,058 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:42:59,060 [main:117] - GENERATED CALL = (testClass).test.startsWith(Delegate().testDelegated, true)
2021-03-12 05:42:59,060 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in TestClass[DeserializedSimpleFunctionDescriptor@48247149], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@eaccef]]
2021-03-12 05:42:59,061 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in TestClass[DeserializedSimpleFunctionDescriptor@48247149]
2021-03-12 05:42:59,210 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:42:59,211 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@eaccef]
2021-03-12 05:42:59,358 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:42:59,361 [main:117] - GENERATED CALL = (testClass).equals("dxfxv").or(false)
2021-03-12 05:42:59,361 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in TestClass[DeserializedSimpleFunctionDescriptor@48247149], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@36823961]]
2021-03-12 05:42:59,361 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in TestClass[DeserializedSimpleFunctionDescriptor@48247149]
2021-03-12 05:42:59,492 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:42:59,493 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@36823961]
2021-03-12 05:42:59,620 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:42:59,623 [main:117] - GENERATED CALL = (testClass).equals("ojsno").xor(true)
2021-03-12 05:42:59,623 [main:113] - Case = [public final val foo: Test defined in TestClass[PropertyDescriptorImpl@6b019c31], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Test[DeserializedSimpleFunctionDescriptor@232308b2]]
2021-03-12 05:42:59,623 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Test[DeserializedSimpleFunctionDescriptor@232308b2]
2021-03-12 05:42:59,749 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:42:59,750 [main:117] - GENERATED CALL = (testClass).foo.equals("cazfp")
2021-03-12 05:42:59,750 [main:114] - replacement of true of type Boolean is (testClass).test.startsWith(Delegate().testDelegated, true)
2021-03-12 05:42:59,877 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:42:59,877 [main:66] - Compilation checking started
2021-03-12 05:43:00,498 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    val testClass = TestClass(Delegate())
var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                prope2 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope2 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${e.message}"
    }

    if (shouldSuspend) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw RuntimeException("fail 2")
        return prope2!!
    }

    if ("xdvsz" === "bgmte") throw RuntimeException("fail 3")
    return prope3 as String
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2(false) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2((0.2530265828995427).toFloat().isNaN()) { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val testClass = TestClass(Delegate())
x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == (testClass).test.startsWith(Delegate().testDelegated, true) } ?: error("tail-call optimization hit: method " + method + (TestClass(Delegate()).foo).test.takeLast(335330039) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if ((TestClass(Delegate()).foo).test.toInt() != 623167333) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
prope1.prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:43:00,501 [main:107] - replacing (shouldSuspend, Boolean)
2021-03-12 05:43:00,501 [main:50] - replacing shouldSuspend Boolean
2021-03-12 05:43:00,501 [main:54] - Getting value of type Boolean
2021-03-12 05:43:00,629 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:43:00,631 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 05:43:00,631 [main:61] - GENERATED IS CALL =false
2021-03-12 05:43:00,917 [main:67] - randomType = UShort?
2021-03-12 05:43:01,062 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 05:43:01,107 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@645facc4]
2021-03-12 05:43:01,107 [main:149] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6c215735]
2021-03-12 05:43:01,108 [main:78] - Generated call from random type = (13452.toUShort())?.toFloat().isNaN()
2021-03-12 05:43:01,109 [main:106] - GETTING Boolean from String
2021-03-12 05:43:01,132 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@717caf3c]]
2021-03-12 05:43:01,132 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@717caf3c]
2021-03-12 05:43:01,132 [main:117] - GENERATED CALL = (Delegate().test).isNotBlank()
2021-03-12 05:43:01,132 [main:113] - Case = [public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@211056ee]]
2021-03-12 05:43:01,132 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@211056ee]
2021-03-12 05:43:01,265 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:01,268 [main:117] - GENERATED CALL = (Delegate().test).hasSurrogatePairAt(730514425)
2021-03-12 05:43:01,268 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@387e5c44]]
2021-03-12 05:43:01,268 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828]
2021-03-12 05:43:01,398 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:01,400 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@387e5c44]
2021-03-12 05:43:01,400 [main:117] - GENERATED CALL = (Delegate().test).get(1319113501).isSurrogate()
2021-03-12 05:43:01,401 [main:113] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c08ce29]]
2021-03-12 05:43:01,401 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c08ce29]
2021-03-12 05:43:01,527 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:43:01,530 [main:117] - GENERATED CALL = (Delegate().test).startsWith(Delegate().testDelegated, true)
2021-03-12 05:43:01,530 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a69001]]
2021-03-12 05:43:01,530 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:43:01,656 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:01,785 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:01,787 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a69001]
2021-03-12 05:43:01,914 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:43:02,044 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:43:02,047 [main:117] - GENERATED CALL = (Delegate().test).subSequence(-306686286, -1013944160).contains('㉔', true)
2021-03-12 05:43:02,047 [main:113] - Case = [public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c513883]]
2021-03-12 05:43:02,047 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c513883]
2021-03-12 05:43:02,047 [main:117] - GENERATED CALL = (Delegate().test).any()
2021-03-12 05:43:02,047 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7cd1d584]]
2021-03-12 05:43:02,047 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828]
2021-03-12 05:43:02,174 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:02,177 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7cd1d584]
2021-03-12 05:43:02,177 [main:117] - GENERATED CALL = (Delegate().test).get(1283927965).isISOControl()
2021-03-12 05:43:02,177 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e8d3a67]]
2021-03-12 05:43:02,177 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828]
2021-03-12 05:43:02,307 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:02,310 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e8d3a67]
2021-03-12 05:43:02,310 [main:117] - GENERATED CALL = (Delegate().test).get(-704300253).isHighSurrogate()
2021-03-12 05:43:02,310 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@62a68552]]
2021-03-12 05:43:02,311 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:43:02,449 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:02,602 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:02,605 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@62a68552]
2021-03-12 05:43:02,763 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:43:02,763 [main:117] - GENERATED CALL = (Delegate().test).subSequence(-2001862271, -789667005).equals("oykyb")
2021-03-12 05:43:02,763 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@58bdc6dc], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@75472842]]
2021-03-12 05:43:02,763 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@58bdc6dc]
2021-03-12 05:43:02,894 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:43:02,894 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@75472842]
2021-03-12 05:43:02,894 [main:117] - GENERATED CALL = (Delegate().test).equals("cuwwu").not()
2021-03-12 05:43:02,894 [main:114] - replacement of shouldSuspend of type Boolean is (Delegate().test).equals("cuwwu").not()
2021-03-12 05:43:03,035 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:43:03,035 [main:66] - Compilation checking started
2021-03-12 05:43:03,640 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    val testClass = TestClass(Delegate())
var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                prope2 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope2 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${e.message}"
    }

    if ((Delegate().test).equals("cuwwu").not()) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw RuntimeException("fail 2")
        return prope2!!
    }

    if ("xdvsz" === "bgmte") throw RuntimeException("fail 3")
    return prope3 as String
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2(false) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2((0.2530265828995427).toFloat().isNaN()) { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val testClass = TestClass(Delegate())
x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == (testClass).test.startsWith(Delegate().testDelegated, true) } ?: error("tail-call optimization hit: method " + method + (TestClass(Delegate()).foo).test.takeLast(335330039) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if ((TestClass(Delegate()).foo).test.toInt() != 623167333) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
prope1.prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:43:03,642 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 05:43:03,642 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 05:43:03,642 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 05:43:03,775 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 05:43:03,781 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 05:43:03,786 [main:67] - randomType = Double
2021-03-12 05:43:03,915 [main:302] - generating value of type = Double true depth = 0
2021-03-12 05:43:03,946 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 05:43:03,963 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 05:43:03,964 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 05:43:03,965 [main:106] - GETTING EmptyCoroutineContext from Test
2021-03-12 05:43:03,969 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 05:43:03,970 [main:106] - GETTING EmptyCoroutineContext from TestClass
2021-03-12 05:43:03,979 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 05:43:03,979 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 05:43:03,979 [main:107] - replacing (prope3 as String, String)
2021-03-12 05:43:03,979 [main:50] - replacing prope3 as String String
2021-03-12 05:43:03,979 [main:54] - Getting value of type String
2021-03-12 05:43:04,107 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:43:04,109 [main:58] - GENERATED VALUE OF TYPE String = "prolc"
2021-03-12 05:43:04,109 [main:61] - GENERATED IS CALL =false
2021-03-12 05:43:04,119 [main:67] - randomType = Kla0
2021-03-12 05:43:04,261 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 05:43:04,264 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}
2021-03-12 05:43:04,391 [main:194] - Type params = []
2021-03-12 05:43:04,519 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 05:43:04,655 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:43:04,658 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:43:04,951 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 05:43:05,085 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:43:05,088 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:43:05,519 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-12 05:43:05,655 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:43:05,659 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:43:06,190 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 11
2021-03-12 05:43:06,329 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:43:06,333 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:43:06,764 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 14
2021-03-12 05:43:06,902 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:43:06,905 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:43:07,407 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:43:07,407 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:43:07,407 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:43:07,407 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:43:07,407 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:43:07,419 [main:106] - GETTING String from String
2021-03-12 05:43:07,439 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@686a0794]]
2021-03-12 05:43:07,439 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@686a0794]
2021-03-12 05:43:07,439 [main:117] - GENERATED CALL = (Delegate().test).trim()
2021-03-12 05:43:07,439 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dc7f1e6]]
2021-03-12 05:43:07,439 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dc7f1e6]
2021-03-12 05:43:07,439 [main:117] - GENERATED CALL = (Delegate().test).trimStart()
2021-03-12 05:43:07,439 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e3fe21b]]
2021-03-12 05:43:07,440 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e3fe21b]
2021-03-12 05:43:07,440 [main:117] - GENERATED CALL = (Delegate().test).capitalize()
2021-03-12 05:43:07,440 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d57cb87]]
2021-03-12 05:43:07,440 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d57cb87]
2021-03-12 05:43:07,440 [main:117] - GENERATED CALL = (Delegate().test).trimIndent()
2021-03-12 05:43:07,440 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f6268d9]]
2021-03-12 05:43:07,440 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f6268d9]
2021-03-12 05:43:07,575 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 05:43:07,578 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:43:07,580 [main:117] - GENERATED CALL = (Delegate().test).filterIndexed({a: Int, b: Char -> false})
2021-03-12 05:43:07,580 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e339196]]
2021-03-12 05:43:07,580 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e339196]
2021-03-12 05:43:07,708 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:07,711 [main:117] - GENERATED CALL = (Delegate().test).repeat(-783620482)
2021-03-12 05:43:07,711 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78488573]]
2021-03-12 05:43:07,711 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78488573]
2021-03-12 05:43:07,841 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:43:07,844 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:43:07,846 [main:117] - GENERATED CALL = (Delegate().test).filterNot({a: Char -> false})
2021-03-12 05:43:07,847 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1010ac]]
2021-03-12 05:43:07,847 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1010ac]
2021-03-12 05:43:07,847 [main:117] - GENERATED CALL = (Delegate().test).reversed()
2021-03-12 05:43:07,847 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27626778]]
2021-03-12 05:43:07,847 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27626778]
2021-03-12 05:43:07,972 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:08,099 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:08,102 [main:117] - GENERATED CALL = (Delegate().test).removeRange(580647617, -2118866447)
2021-03-12 05:43:08,102 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b7c9229]]
2021-03-12 05:43:08,102 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:43:08,226 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:08,355 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:08,358 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b7c9229]
2021-03-12 05:43:08,485 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 05:43:08,617 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 05:43:08,620 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 05:43:08,936 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:43:08,939 [main:95] - GENERATED = Regex("imaur")
2021-03-12 05:43:09,086 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 05:43:09,089 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 05:43:09,095 [main:117] - GENERATED CALL = (Delegate().test).subSequence(74844034, -426230300).replace(Regex("imaur"), {a: MatchResult -> "orecj"})
2021-03-12 05:43:09,095 [main:114] - replacement of prope3 as String of type String is (Delegate().test).trimStart()
2021-03-12 05:43:09,223 [main:33] - Trying to replace Element(BINARY_WITH_TYPE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:43:09,223 [main:66] - Compilation checking started
2021-03-12 05:43:09,827 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    val testClass = TestClass(Delegate())
var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                prope2 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope2 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${e.message}"
    }

    if ((Delegate().test).equals("cuwwu").not()) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw RuntimeException("fail 2")
        return prope2!!
    }

    if ("xdvsz" === "bgmte") throw RuntimeException("fail 3")
    return (Delegate().test).trimStart()
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2(false) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2((0.2530265828995427).toFloat().isNaN()) { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val testClass = TestClass(Delegate())
x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == (testClass).test.startsWith(Delegate().testDelegated, true) } ?: error("tail-call optimization hit: method " + method + (TestClass(Delegate()).foo).test.takeLast(335330039) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if ((TestClass(Delegate()).foo).test.toInt() != 623167333) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
prope1.prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:43:09,831 [main:107] - replacing (e.message, String?)
2021-03-12 05:43:09,831 [main:50] - replacing e.message String?
2021-03-12 05:43:09,832 [main:54] - Getting value of type String?
2021-03-12 05:43:09,970 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:43:09,972 [main:58] - GENERATED VALUE OF TYPE String? = "itbmj"
2021-03-12 05:43:09,972 [main:61] - GENERATED IS CALL =false
2021-03-12 05:43:10,115 [main:67] - randomType = UShort
2021-03-12 05:43:10,243 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 05:43:10,277 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47d4007d]
2021-03-12 05:43:10,402 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:10,405 [main:78] - Generated call from random type = (10603.toUShort()).toString(139814475)
2021-03-12 05:43:10,405 [main:106] - GETTING String? from String
2021-03-12 05:43:10,422 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c993d19]]
2021-03-12 05:43:10,422 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:43:10,549 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:10,677 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:10,679 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c993d19]
2021-03-12 05:43:10,813 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:43:10,990 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:43:10,993 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:43:11,275 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:43:11,278 [main:95] - GENERATED = StringBuilder(1705920566)
2021-03-12 05:43:11,404 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:43:11,407 [main:117] - GENERATED CALL = (Delegate().test)?.subSequence(138077426, -478626046).commonPrefixWith(StringBuilder(1705920566), false)
2021-03-12 05:43:11,407 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1781657e]]
2021-03-12 05:43:11,407 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1781657e]
2021-03-12 05:43:11,407 [main:117] - GENERATED CALL = (Delegate().test)?.toUpperCase()
2021-03-12 05:43:11,407 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c993d19]]
2021-03-12 05:43:11,407 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c993d19]
2021-03-12 05:43:11,535 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:43:11,669 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:43:11,672 [main:117] - GENERATED CALL = (Delegate().test)?.commonPrefixWith("enury", false)
2021-03-12 05:43:11,672 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37bb3715]]
2021-03-12 05:43:11,672 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37bb3715]
2021-03-12 05:43:11,804 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:11,807 [main:117] - GENERATED CALL = (Delegate().test)?.takeLast(-1521916259)
2021-03-12 05:43:11,807 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d4ebc37]]
2021-03-12 05:43:11,807 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:43:11,932 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:12,062 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:12,064 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d4ebc37]
2021-03-12 05:43:12,190 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:12,320 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:12,323 [main:117] - GENERATED CALL = (Delegate().test)?.subSequence(208828659, -1721718179).substring(-1711210433, -1428652426)
2021-03-12 05:43:12,323 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78488573]]
2021-03-12 05:43:12,323 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78488573]
2021-03-12 05:43:12,451 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:43:12,453 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:43:12,456 [main:117] - GENERATED CALL = (Delegate().test)?.filterNot({a: Char -> true})
2021-03-12 05:43:12,456 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2116c8a0]]
2021-03-12 05:43:12,456 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2116c8a0]
2021-03-12 05:43:12,592 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:43:12,750 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:43:12,905 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:43:12,908 [main:117] - GENERATED CALL = (Delegate().test)?.replace('', 'ꧦ', true)
2021-03-12 05:43:12,908 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4da16cf2]]
2021-03-12 05:43:12,908 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828]
2021-03-12 05:43:13,037 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:13,040 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4da16cf2]
2021-03-12 05:43:13,040 [main:117] - GENERATED CALL = (Delegate().test)?.get(1110102617).lowercase()
2021-03-12 05:43:13,040 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13a75974]]
2021-03-12 05:43:13,040 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13a75974]
2021-03-12 05:43:13,176 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:13,179 [main:117] - GENERATED CALL = (Delegate().test)?.drop(972117168)
2021-03-12 05:43:13,179 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@170a4328]]
2021-03-12 05:43:13,179 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:43:13,303 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:13,429 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:13,432 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@170a4328]
2021-03-12 05:43:13,556 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 05:43:13,692 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 05:43:13,695 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 05:43:14,135 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:43:14,138 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 05:43:14,140 [main:95] - GENERATED = Regex("rbsbb", kotlin.text.RegexOption.MULTILINE)
2021-03-12 05:43:14,141 [main:117] - GENERATED CALL = (Delegate().test)?.subSequence(-1200247793, -40588251).replaceFirst(Regex("rbsbb", kotlin.text.RegexOption.MULTILINE), testClass.test)
2021-03-12 05:43:14,141 [main:114] - replacement of e.message of type String? is (Delegate().test)?.drop(972117168)
2021-03-12 05:43:14,281 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 05:43:14,281 [main:66] - Compilation checking started
2021-03-12 05:43:14,877 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    val testClass = TestClass(Delegate())
var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                prope2 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope2 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${(Delegate().test)?.drop(972117168)}"
    }

    if ((Delegate().test).equals("cuwwu").not()) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw RuntimeException("fail 2")
        return prope2!!
    }

    if ("xdvsz" === "bgmte") throw RuntimeException("fail 3")
    return (Delegate().test).trimStart()
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2(false) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2((0.2530265828995427).toFloat().isNaN()) { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val testClass = TestClass(Delegate())
x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == (testClass).test.startsWith(Delegate().testDelegated, true) } ?: error("tail-call optimization hit: method " + method + (TestClass(Delegate()).foo).test.takeLast(335330039) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if ((TestClass(Delegate()).foo).test.toInt() != 623167333) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
prope1.prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:43:14,880 [main:107] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got ", String)
2021-03-12 05:43:14,881 [main:50] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " String
2021-03-12 05:43:14,881 [main:54] - Getting value of type String
2021-03-12 05:43:15,021 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:43:15,023 [main:58] - GENERATED VALUE OF TYPE String = "wyppp"
2021-03-12 05:43:15,024 [main:61] - GENERATED IS CALL =false
2021-03-12 05:43:15,028 [main:67] - randomType = ULong
2021-03-12 05:43:15,158 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 05:43:15,192 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@62c3bab0]
2021-03-12 05:43:15,192 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47d4007d]
2021-03-12 05:43:15,322 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:15,324 [main:78] - Generated call from random type = (847889507595465944.toULong()).toUShort().toString(1477036975)
2021-03-12 05:43:15,324 [main:106] - GETTING String from String
2021-03-12 05:43:15,350 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b803e32]]
2021-03-12 05:43:15,350 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b803e32]
2021-03-12 05:43:15,350 [main:117] - GENERATED CALL = (testClass.test).trimMargin(Delegate().testDelegated)
2021-03-12 05:43:15,350 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dc7f1e6]]
2021-03-12 05:43:15,350 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dc7f1e6]
2021-03-12 05:43:15,350 [main:117] - GENERATED CALL = (testClass.test).trimStart()
2021-03-12 05:43:15,350 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f6268d9]]
2021-03-12 05:43:15,351 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f6268d9]
2021-03-12 05:43:15,477 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 05:43:15,479 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:43:15,482 [main:117] - GENERATED CALL = (testClass.test).filterIndexed({a: Int, b: Char -> false})
2021-03-12 05:43:15,482 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43cb1673]]
2021-03-12 05:43:15,482 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43cb1673]
2021-03-12 05:43:15,611 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:15,614 [main:117] - GENERATED CALL = (testClass.test).take(-132955005)
2021-03-12 05:43:15,614 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f62b616]]
2021-03-12 05:43:15,614 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f62b616]
2021-03-12 05:43:15,614 [main:117] - GENERATED CALL = (testClass.test).trimEnd()
2021-03-12 05:43:15,614 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebe146]]
2021-03-12 05:43:15,614 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebe146]
2021-03-12 05:43:15,745 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:43:15,748 [main:117] - GENERATED CALL = (testClass.test).prependIndent("vzlyv")
2021-03-12 05:43:15,748 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7976d057]]
2021-03-12 05:43:15,748 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7976d057]
2021-03-12 05:43:15,886 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:43:15,889 [main:117] - GENERATED CALL = (testClass.test).replaceAfter('⭈', Delegate().test, Delegate().test)
2021-03-12 05:43:15,889 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c993d19]]
2021-03-12 05:43:15,889 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c993d19]
2021-03-12 05:43:16,015 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:43:16,146 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:43:16,148 [main:117] - GENERATED CALL = (testClass.test).commonPrefixWith(StringBuilder(), true)
2021-03-12 05:43:16,148 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a4536a8]]
2021-03-12 05:43:16,148 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a4536a8]
2021-03-12 05:43:16,274 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:43:16,402 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:43:16,532 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:43:16,534 [main:117] - GENERATED CALL = (testClass.test).replaceFirst('湕', 'ఠ', true)
2021-03-12 05:43:16,535 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e339196]]
2021-03-12 05:43:16,535 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:43:16,661 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:16,795 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:16,797 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e339196]
2021-03-12 05:43:16,923 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:16,926 [main:117] - GENERATED CALL = (testClass.test).subSequence(1524334428, -1959780863).repeat(279629423)
2021-03-12 05:43:16,926 [main:114] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " of type String is (847889507595465944.toULong()).toUShort().toString(1477036975)
2021-03-12 05:43:17,051 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:43:17,051 [main:66] - Compilation checking started
2021-03-12 05:43:17,681 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    val testClass = TestClass(Delegate())
var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                prope2 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope2 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${(Delegate().test)?.drop(972117168)}"
    }

    if ((Delegate().test).equals("cuwwu").not()) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw RuntimeException("fail 2")
        return prope2!!
    }

    if ("xdvsz" === "bgmte") throw RuntimeException("fail 3")
    return (Delegate().test).trimStart()
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2(false) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2((0.2530265828995427).toFloat().isNaN()) { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val testClass = TestClass(Delegate())
x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == (testClass).test.startsWith(Delegate().testDelegated, true) } ?: error("tail-call optimization hit: method " + method + (TestClass(Delegate()).foo).test.takeLast(335330039) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if ((TestClass(Delegate()).foo).test.toInt() != 623167333) error((847889507595465944.toULong()).toUShort().toString(1477036975) + prope5)
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
prope1.prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:43:17,685 [main:107] - replacing ("OK", String)
2021-03-12 05:43:17,685 [main:50] - replacing "OK" String
2021-03-12 05:43:17,685 [main:54] - Getting value of type String
2021-03-12 05:43:17,819 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:43:17,821 [main:58] - GENERATED VALUE OF TYPE String = "bijub"
2021-03-12 05:43:17,821 [main:61] - GENERATED IS CALL =false
2021-03-12 05:43:17,983 [main:67] - randomType = MutableMap<Double, Test>
2021-03-12 05:43:17,983 [main:106] - GETTING String from String
2021-03-12 05:43:18,001 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d57cb87]]
2021-03-12 05:43:18,001 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d57cb87]
2021-03-12 05:43:18,001 [main:117] - GENERATED CALL = (Delegate().testDelegated).trimIndent()
2021-03-12 05:43:18,001 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e339196]]
2021-03-12 05:43:18,001 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e339196]
2021-03-12 05:43:18,128 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:18,131 [main:117] - GENERATED CALL = (Delegate().testDelegated).repeat(966990335)
2021-03-12 05:43:18,131 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe5b55f]]
2021-03-12 05:43:18,131 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe5b55f]
2021-03-12 05:43:18,263 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:18,392 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:43:18,395 [main:117] - GENERATED CALL = (Delegate().testDelegated).padStart(1913795302, '㚱')
2021-03-12 05:43:18,395 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52db7ff4]]
2021-03-12 05:43:18,395 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52db7ff4]
2021-03-12 05:43:18,522 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 05:43:18,655 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): Iterable<Int> = TODO()
2021-03-12 05:43:18,658 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): Iterable<Int> = TODO()
2021-03-12 05:43:19,098 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:43:19,101 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:43:19,103 [main:95] - GENERATED = IntRange(983867250, 683295202)
2021-03-12 05:43:19,103 [main:117] - GENERATED CALL = (Delegate().testDelegated).slice(IntRange(983867250, 683295202))
2021-03-12 05:43:19,103 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78488573]]
2021-03-12 05:43:19,103 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78488573]
2021-03-12 05:43:19,231 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:43:19,234 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:43:19,236 [main:117] - GENERATED CALL = (Delegate().testDelegated).filterNot({a: Char -> false})
2021-03-12 05:43:19,236 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1010ac]]
2021-03-12 05:43:19,236 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1010ac]
2021-03-12 05:43:19,236 [main:117] - GENERATED CALL = (Delegate().testDelegated).reversed()
2021-03-12 05:43:19,236 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b251a21]]
2021-03-12 05:43:19,237 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b251a21]
2021-03-12 05:43:19,364 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:43:19,366 [main:117] - GENERATED CALL = (Delegate().testDelegated).substringBefore('뻻', Delegate().testDelegated)
2021-03-12 05:43:19,366 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c993d19]]
2021-03-12 05:43:19,366 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:43:19,493 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:19,625 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:19,628 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c993d19]
2021-03-12 05:43:19,761 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:43:19,895 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:43:19,899 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:43:20,176 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:43:20,178 [main:95] - GENERATED = StringBuilder(1753138229)
2021-03-12 05:43:20,307 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:43:20,309 [main:117] - GENERATED CALL = (Delegate().testDelegated).subSequence(1628402184, 2079639306).commonPrefixWith(StringBuilder(1753138229), true)
2021-03-12 05:43:20,310 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19e9cba7]]
2021-03-12 05:43:20,310 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19e9cba7]
2021-03-12 05:43:20,443 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:43:20,445 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:43:20,448 [main:117] - GENERATED CALL = (Delegate().testDelegated).dropLastWhile({a: Char -> true})
2021-03-12 05:43:20,448 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@744528ad]]
2021-03-12 05:43:20,448 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@744528ad]
2021-03-12 05:43:20,581 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:43:20,586 [main:117] - GENERATED CALL = (Delegate().testDelegated).removePrefix("fjezm")
2021-03-12 05:43:20,586 [main:114] - replacement of "OK" of type String is (Delegate().testDelegated).subSequence(1628402184, 2079639306).commonPrefixWith(StringBuilder(1753138229), true)
2021-03-12 05:43:20,726 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:43:20,726 [main:66] - Compilation checking started
2021-03-12 05:43:21,317 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    val testClass = TestClass(Delegate())
var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                prope2 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope2 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${(Delegate().test)?.drop(972117168)}"
    }

    if ((Delegate().test).equals("cuwwu").not()) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw RuntimeException("fail 2")
        return prope2!!
    }

    if ("xdvsz" === "bgmte") throw RuntimeException("fail 3")
    return (Delegate().test).trimStart()
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2(false) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2((0.2530265828995427).toFloat().isNaN()) { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return (Delegate().testDelegated).subSequence(1628402184, 2079639306).commonPrefixWith(StringBuilder(1753138229), true)
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val testClass = TestClass(Delegate())
x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == (testClass).test.startsWith(Delegate().testDelegated, true) } ?: error("tail-call optimization hit: method " + method + (TestClass(Delegate()).foo).test.takeLast(335330039) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if ((TestClass(Delegate()).foo).test.toInt() != 623167333) error((847889507595465944.toULong()).toUShort().toString(1477036975) + prope5)
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
prope1.prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:43:21,319 [main:107] - replacing (prope3, Result<Ty0>)
2021-03-12 05:43:21,320 [main:50] - replacing prope3 Result<Ty0>
2021-03-12 05:43:21,320 [main:54] - Getting value of type Result<Ty0>
2021-03-12 05:43:21,454 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-12 05:43:21,588 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 05:43:21,591 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 05:43:21,874 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 05:43:21,874 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-12 05:43:21,879 [main:67] - randomType = Int
2021-03-12 05:43:22,009 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:22,051 [main:106] - GETTING Result<Ty0> from Test
2021-03-12 05:43:22,057 [main:106] - GETTING Result<Ty0> from TestClass
2021-03-12 05:43:22,067 [main:106] - GETTING Result<Ty0> from String
2021-03-12 05:43:22,087 [main:106] - GETTING Result<Ty0> from String
2021-03-12 05:43:22,088 [main:106] - GETTING Result<Ty0> from String
2021-03-12 05:43:22,089 [main:106] - GETTING Result<Ty0> from String
2021-03-12 05:43:22,091 [main:106] - GETTING Result<Ty0> from String
2021-03-12 05:43:22,091 [main:111] - Cant find and generate replacement for prope3 type Result<Ty0>
2021-03-12 05:43:22,091 [main:107] - replacing ("\n", String)
2021-03-12 05:43:22,091 [main:50] - replacing "\n" String
2021-03-12 05:43:22,091 [main:54] - Getting value of type String
2021-03-12 05:43:22,227 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:43:22,230 [main:58] - GENERATED VALUE OF TYPE String = "qytqq"
2021-03-12 05:43:22,230 [main:61] - GENERATED IS CALL =false
2021-03-12 05:43:22,389 [main:67] - randomType = Kla3?
2021-03-12 05:43:22,541 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 05:43:22,544 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == (testClass).test.startsWith(Delegate().testDelegated, true) } ?: error("tail-call optimization hit: method " + method + (TestClass(Delegate()).foo).test.takeLast(335330039) +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-12 05:43:22,550 [main:106] - GETTING String from String
2021-03-12 05:43:22,572 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@170dc33a]]
2021-03-12 05:43:22,572 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@170dc33a]
2021-03-12 05:43:22,703 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:43:22,836 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 05:43:22,840 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 05:43:23,116 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:43:23,119 [main:95] - GENERATED = StringBuilder("wkzop")
2021-03-12 05:43:23,119 [main:117] - GENERATED CALL = (testClass.test).removeSuffix(StringBuilder("wkzop"))
2021-03-12 05:43:23,119 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43cb1673]]
2021-03-12 05:43:23,119 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43cb1673]
2021-03-12 05:43:23,246 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:23,248 [main:117] - GENERATED CALL = (testClass.test).take(1756367608)
2021-03-12 05:43:23,248 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@555a12f7]]
2021-03-12 05:43:23,248 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@555a12f7]
2021-03-12 05:43:23,375 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:43:23,508 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 05:43:23,512 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 05:43:23,792 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 05:43:23,926 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:43:23,930 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:43:24,239 [main:302] - generating value of type = Int true depth = 6
2021-03-12 05:43:24,242 [main:95] - GENERATED = StringBuilder(-1093615962)
2021-03-12 05:43:24,242 [main:95] - GENERATED = StringBuilder(StringBuilder(-1093615962))
2021-03-12 05:43:24,371 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:43:24,374 [main:117] - GENERATED CALL = (testClass.test).commonSuffixWith(StringBuilder(StringBuilder(-1093615962)), true)
2021-03-12 05:43:24,374 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1010ac]]
2021-03-12 05:43:24,374 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1010ac]
2021-03-12 05:43:24,374 [main:117] - GENERATED CALL = (testClass.test).reversed()
2021-03-12 05:43:24,375 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c5dfc66]]
2021-03-12 05:43:24,375 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c5dfc66]
2021-03-12 05:43:24,375 [main:117] - GENERATED CALL = (testClass.test).toLowerCase()
2021-03-12 05:43:24,375 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebe146]]
2021-03-12 05:43:24,375 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ebe146]
2021-03-12 05:43:24,375 [main:117] - GENERATED CALL = (testClass.test).prependIndent(Delegate().testDelegated)
2021-03-12 05:43:24,375 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe5b55f]]
2021-03-12 05:43:24,375 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe5b55f]
2021-03-12 05:43:24,503 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:24,635 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:43:24,638 [main:117] - GENERATED CALL = (testClass.test).padStart(1239844276, 'ꌀ')
2021-03-12 05:43:24,638 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28aff1a3]]
2021-03-12 05:43:24,638 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828]
2021-03-12 05:43:24,765 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:24,767 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28aff1a3]
2021-03-12 05:43:24,768 [main:117] - GENERATED CALL = (testClass.test).get(-1818145351).uppercase()
2021-03-12 05:43:24,768 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@507ff28]]
2021-03-12 05:43:24,768 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@507ff28]
2021-03-12 05:43:24,897 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:43:24,902 [main:117] - GENERATED CALL = (testClass.test).removeSurrounding("nowwc")
2021-03-12 05:43:24,902 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f6268d9]]
2021-03-12 05:43:24,902 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f6268d9]
2021-03-12 05:43:25,030 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 05:43:25,033 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:43:25,035 [main:117] - GENERATED CALL = (testClass.test).filterIndexed({a: Int, b: Char -> true})
2021-03-12 05:43:25,035 [main:114] - replacement of "\n" of type String is (testClass.test).prependIndent(Delegate().testDelegated)
2021-03-12 05:43:25,162 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:43:25,162 [main:66] - Compilation checking started
2021-03-12 05:43:25,768 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    val testClass = TestClass(Delegate())
var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                prope2 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope2 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${(Delegate().test)?.drop(972117168)}"
    }

    if ((Delegate().test).equals("cuwwu").not()) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw RuntimeException("fail 2")
        return prope2!!
    }

    if ("xdvsz" === "bgmte") throw RuntimeException("fail 3")
    return (Delegate().test).trimStart()
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2(false) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2((0.2530265828995427).toFloat().isNaN()) { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return (Delegate().testDelegated).subSequence(1628402184, 2079639306).commonPrefixWith(StringBuilder(1753138229), true)
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val testClass = TestClass(Delegate())
x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = (testClass.test).prependIndent(Delegate().testDelegated))) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == (testClass).test.startsWith(Delegate().testDelegated, true) } ?: error("tail-call optimization hit: method " + method + (TestClass(Delegate()).foo).test.takeLast(335330039) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if ((TestClass(Delegate()).foo).test.toInt() != 623167333) error((847889507595465944.toULong()).toUShort().toString(1477036975) + prope5)
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
prope1.prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:43:25,772 [main:107] - replacing (prope3.isSuccess, Boolean)
2021-03-12 05:43:25,772 [main:50] - replacing prope3.isSuccess Boolean
2021-03-12 05:43:25,772 [main:54] - Getting value of type Boolean
2021-03-12 05:43:25,911 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:43:25,914 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 05:43:25,914 [main:61] - GENERATED IS CALL =false
2021-03-12 05:43:26,082 [main:67] - randomType = Kla5
2021-03-12 05:43:26,212 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 05:43:26,215 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
prope1.prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}
2021-03-12 05:43:26,234 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla5[DeserializedSimpleFunctionDescriptor@aec9e80]
2021-03-12 05:43:26,365 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:43:26,365 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@10c10655]
2021-03-12 05:43:26,493 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:43:26,493 [main:78] - Generated call from random type = (Kla5).equals("vafqw").equals("cwhay")
2021-03-12 05:43:26,494 [main:106] - GETTING Boolean from String
2021-03-12 05:43:26,514 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d0bc76b]]
2021-03-12 05:43:26,514 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828]
2021-03-12 05:43:26,646 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:26,649 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d0bc76b]
2021-03-12 05:43:26,779 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:43:26,909 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:43:26,912 [main:117] - GENERATED CALL = (testClass.test).get(-544918938).equals('繉', true)
2021-03-12 05:43:26,912 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@706fdadd]]
2021-03-12 05:43:26,912 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828]
2021-03-12 05:43:27,040 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:27,043 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@706fdadd]
2021-03-12 05:43:27,043 [main:117] - GENERATED CALL = (testClass.test).get(901216598).isUpperCase()
2021-03-12 05:43:27,043 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@387e5c44]]
2021-03-12 05:43:27,043 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828]
2021-03-12 05:43:27,170 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:27,173 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@387e5c44]
2021-03-12 05:43:27,174 [main:117] - GENERATED CALL = (testClass.test).get(1425780309).isSurrogate()
2021-03-12 05:43:27,174 [main:113] - Case = [public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56853537]]
2021-03-12 05:43:27,174 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56853537]
2021-03-12 05:43:27,303 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:43:27,306 [main:117] - GENERATED CALL = (testClass.test).endsWith(Delegate().testDelegated, true)
2021-03-12 05:43:27,306 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cd25c0a]]
2021-03-12 05:43:27,306 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:43:27,436 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:27,568 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:27,571 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cd25c0a]
2021-03-12 05:43:27,571 [main:117] - GENERATED CALL = (testClass.test).subSequence(513878423, 1909142220).none()
2021-03-12 05:43:27,571 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ae3496c]]
2021-03-12 05:43:27,571 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828]
2021-03-12 05:43:27,701 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:27,704 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ae3496c]
2021-03-12 05:43:27,705 [main:117] - GENERATED CALL = (testClass.test).get(-593540255).isDigit()
2021-03-12 05:43:27,705 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a22e525]]
2021-03-12 05:43:27,705 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828]
2021-03-12 05:43:27,877 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:27,880 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a22e525]
2021-03-12 05:43:27,880 [main:117] - GENERATED CALL = (testClass.test).get(-1422363027).isDefined()
2021-03-12 05:43:27,880 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@480b00ad]]
2021-03-12 05:43:27,880 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828]
2021-03-12 05:43:28,034 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:28,037 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@480b00ad]
2021-03-12 05:43:28,038 [main:117] - GENERATED CALL = (testClass.test).get(253035846).isLowerCase()
2021-03-12 05:43:28,038 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@62a68552]]
2021-03-12 05:43:28,038 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:43:28,167 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:28,298 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:28,301 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@62a68552]
2021-03-12 05:43:28,430 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:43:28,430 [main:117] - GENERATED CALL = (testClass.test).subSequence(296346617, -1587099888).equals("gdnod")
2021-03-12 05:43:28,431 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@122083a2]]
2021-03-12 05:43:28,431 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:43:28,564 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:28,696 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:28,699 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@122083a2]
2021-03-12 05:43:28,830 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:43:28,833 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:43:28,836 [main:117] - GENERATED CALL = (testClass.test).subSequence(-514767296, 1482964651).all({a: Char -> true})
2021-03-12 05:43:28,836 [main:114] - replacement of prope3.isSuccess of type Boolean is (testClass.test).endsWith(Delegate().testDelegated, true)
2021-03-12 05:43:28,964 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:43:28,966 [main:107] - replacing ("tail-call optimization miss: method at ", String)
2021-03-12 05:43:28,966 [main:50] - replacing "tail-call optimization miss: method at " String
2021-03-12 05:43:28,966 [main:54] - Getting value of type String
2021-03-12 05:43:29,097 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:43:29,100 [main:58] - GENERATED VALUE OF TYPE String = "zztqc"
2021-03-12 05:43:29,100 [main:61] - GENERATED IS CALL =false
2021-03-12 05:43:29,252 [main:67] - randomType = Float?
2021-03-12 05:43:29,416 [main:302] - generating value of type = Float true depth = 0
2021-03-12 05:43:29,458 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@6e2c1709]
2021-03-12 05:43:29,458 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e0e9a2d]
2021-03-12 05:43:29,617 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:29,621 [main:78] - Generated call from random type = (0.5142255f)?.toLong().toString(1155739986)
2021-03-12 05:43:29,621 [main:106] - GETTING String from String
2021-03-12 05:43:29,651 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4da16cf2]]
2021-03-12 05:43:29,651 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828]
2021-03-12 05:43:29,795 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:29,799 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4da16cf2]
2021-03-12 05:43:29,799 [main:117] - GENERATED CALL = (Delegate().test).get(-1653205754).lowercase()
2021-03-12 05:43:29,799 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@555a12f7]]
2021-03-12 05:43:29,799 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@555a12f7]
2021-03-12 05:43:29,945 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:43:30,078 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 05:43:30,082 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 05:43:30,363 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 05:43:30,369 [main:95] - GENERATED = StringBuilder("ezpgz")
2021-03-12 05:43:30,499 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:43:30,502 [main:117] - GENERATED CALL = (Delegate().test).commonSuffixWith(StringBuilder("ezpgz"), true)
2021-03-12 05:43:30,502 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16feeaa3]]
2021-03-12 05:43:30,502 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16feeaa3]
2021-03-12 05:43:30,631 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:43:30,634 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:43:30,637 [main:117] - GENERATED CALL = (Delegate().test).takeLastWhile({a: Char -> true})
2021-03-12 05:43:30,637 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cba43e]]
2021-03-12 05:43:30,637 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cba43e]
2021-03-12 05:43:30,638 [main:117] - GENERATED CALL = (Delegate().test).lowercase()
2021-03-12 05:43:30,638 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@577ef375]]
2021-03-12 05:43:30,638 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@577ef375]
2021-03-12 05:43:30,767 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:30,899 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:31,047 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:43:31,053 [main:117] - GENERATED CALL = (Delegate().test).replaceRange(1234658086, 1324998417, "oxcva")
2021-03-12 05:43:31,053 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@522aa0a8]]
2021-03-12 05:43:31,053 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@522aa0a8]
2021-03-12 05:43:31,182 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:31,185 [main:117] - GENERATED CALL = (Delegate().test).substring(1291489651)
2021-03-12 05:43:31,185 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bd2a531]]
2021-03-12 05:43:31,185 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2bd2a531]
2021-03-12 05:43:31,316 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:43:31,319 [main:117] - GENERATED CALL = (Delegate().test).substringAfter('ꘖ', Delegate().testDelegated)
2021-03-12 05:43:31,320 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@744528ad]]
2021-03-12 05:43:31,320 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@744528ad]
2021-03-12 05:43:31,448 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:43:31,454 [main:117] - GENERATED CALL = (Delegate().test).removePrefix("gcwny")
2021-03-12 05:43:31,454 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@55c901f1], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@98649f6]]
2021-03-12 05:43:31,455 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@98649f6]
2021-03-12 05:43:31,582 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:31,585 [main:117] - GENERATED CALL = (Delegate().test).length.toString(1274133090)
2021-03-12 05:43:31,585 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@216e44f2]]
2021-03-12 05:43:31,585 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@216e44f2]
2021-03-12 05:43:31,585 [main:117] - GENERATED CALL = (Delegate().test).uppercase()
2021-03-12 05:43:31,586 [main:114] - replacement of "tail-call optimization miss: method at " of type String is (Delegate().test).commonSuffixWith(StringBuilder("ezpgz"), true)
2021-03-12 05:43:31,715 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:43:31,715 [main:66] - Compilation checking started
2021-03-12 05:43:32,328 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    val testClass = TestClass(Delegate())
var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                prope2 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope2 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${(Delegate().test)?.drop(972117168)}"
    }

    if ((Delegate().test).equals("cuwwu").not()) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw RuntimeException("fail 2")
        return prope2!!
    }

    if ("xdvsz" === "bgmte") throw RuntimeException("fail 3")
    return (Delegate().test).trimStart()
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2(false) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2((0.2530265828995427).toFloat().isNaN()) { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return (Delegate().testDelegated).subSequence(1628402184, 2079639306).commonPrefixWith(StringBuilder(1753138229), true)
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val testClass = TestClass(Delegate())
x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error((Delegate().test).commonSuffixWith(StringBuilder("ezpgz"), true) + it + " has state-machine " +
                prope4.joinToString(separator = (testClass.test).prependIndent(Delegate().testDelegated))) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == (testClass).test.startsWith(Delegate().testDelegated, true) } ?: error("tail-call optimization hit: method " + method + (TestClass(Delegate()).foo).test.takeLast(335330039) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if ((TestClass(Delegate()).foo).test.toInt() != 623167333) error((847889507595465944.toULong()).toUShort().toString(1477036975) + prope5)
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
prope1.prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:43:32,331 [main:107] - replacing (prope5, Int)
2021-03-12 05:43:32,331 [main:50] - replacing prope5 Int
2021-03-12 05:43:32,332 [main:54] - Getting value of type Int
2021-03-12 05:43:32,471 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:32,474 [main:58] - GENERATED VALUE OF TYPE Int = 1166312262
2021-03-12 05:43:32,475 [main:61] - GENERATED IS CALL =false
2021-03-12 05:43:32,487 [main:67] - randomType = Delegate
2021-03-12 05:43:32,622 [main:302] - generating value of type = Delegate false depth = 0
2021-03-12 05:43:32,625 [main:112] - generating klass Delegate text = class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}
2021-03-12 05:43:32,636 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@188a79c7]
2021-03-12 05:43:32,636 [main:78] - Generated call from random type = (Delegate()).test.toInt()
2021-03-12 05:43:32,637 [main:106] - GETTING Int from String
2021-03-12 05:43:32,659 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@55c901f1], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@11b7e565]]
2021-03-12 05:43:32,659 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@11b7e565]
2021-03-12 05:43:32,659 [main:117] - GENERATED CALL = (testClass.test).length.takeHighestOneBit()
2021-03-12 05:43:32,659 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7c51755a]]
2021-03-12 05:43:32,659 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9]
2021-03-12 05:43:32,791 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:43:32,794 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7c51755a]
2021-03-12 05:43:32,940 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:33,074 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:33,077 [main:117] - GENERATED CALL = (testClass.test).compareTo("vtqeb").coerceIn(-1400874384, -1484767443)
2021-03-12 05:43:33,077 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@55c901f1], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67c46c9e]]
2021-03-12 05:43:33,077 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67c46c9e]
2021-03-12 05:43:33,078 [main:117] - GENERATED CALL = (testClass.test).length.unaryPlus()
2021-03-12 05:43:33,078 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@65113eab]]
2021-03-12 05:43:33,078 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828]
2021-03-12 05:43:33,206 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:33,210 [main:117] - GENERATED CALL = (testClass.test).get(-665893111).code
2021-03-12 05:43:33,210 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@76065be8]]
2021-03-12 05:43:33,210 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9]
2021-03-12 05:43:33,339 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:43:33,342 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@76065be8]
2021-03-12 05:43:33,470 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:43:33,473 [main:117] - GENERATED CALL = (testClass.test).compareTo("hlixx").plus(-68)
2021-03-12 05:43:33,473 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], public val kotlin.CharSequence.lastIndex: kotlin.Int defined in kotlin.text[DeserializedPropertyDescriptor@13ae1424]]
2021-03-12 05:43:33,474 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:43:33,603 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:33,735 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:33,738 [main:117] - GENERATED CALL = (testClass.test).subSequence(-1378662300, 675688481).lastIndex
2021-03-12 05:43:33,739 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66f38024]]
2021-03-12 05:43:33,739 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:43:33,875 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:34,009 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:34,012 [main:149] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66f38024]
2021-03-12 05:43:34,142 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 05:43:34,277 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 05:43:34,281 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 05:43:34,455 [main:302] - generating value of type = Char true depth = 3
2021-03-12 05:43:34,458 [main:95] - GENERATED = charArrayOf('褒')
2021-03-12 05:43:34,606 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:34,738 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:43:34,741 [main:117] - GENERATED CALL = (testClass.test).subSequence(1952552817, -918539282).lastIndexOfAny(charArrayOf('褒'), -2140790242, true)
2021-03-12 05:43:34,741 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6c0eeeaf]]
2021-03-12 05:43:34,741 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9]
2021-03-12 05:43:34,870 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:43:34,873 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6c0eeeaf]
2021-03-12 05:43:34,873 [main:117] - GENERATED CALL = (testClass.test).compareTo("abakg").countOneBits()
2021-03-12 05:43:34,874 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@87422b9]]
2021-03-12 05:43:34,874 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9]
2021-03-12 05:43:34,874 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@87422b9]
2021-03-12 05:43:35,003 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:35,007 [main:117] - GENERATED CALL = (testClass.test).compareTo(Delegate().test).xor(-815654081)
2021-03-12 05:43:35,007 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@55c901f1], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@87422b9]]
2021-03-12 05:43:35,007 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@87422b9]
2021-03-12 05:43:35,135 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:35,138 [main:117] - GENERATED CALL = (testClass.test).length.xor(-1552257147)
2021-03-12 05:43:35,139 [main:114] - replacement of prope5 of type Int is (testClass.test).length.takeHighestOneBit()
2021-03-12 05:43:35,267 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:43:35,267 [main:66] - Compilation checking started
2021-03-12 05:43:35,883 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    val testClass = TestClass(Delegate())
var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                prope2 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope2 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${(Delegate().test)?.drop(972117168)}"
    }

    if ((Delegate().test).equals("cuwwu").not()) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw RuntimeException("fail 2")
        return prope2!!
    }

    if ("xdvsz" === "bgmte") throw RuntimeException("fail 3")
    return (Delegate().test).trimStart()
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2(false) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2((0.2530265828995427).toFloat().isNaN()) { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return (Delegate().testDelegated).subSequence(1628402184, 2079639306).commonPrefixWith(StringBuilder(1753138229), true)
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val testClass = TestClass(Delegate())
x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error((Delegate().test).commonSuffixWith(StringBuilder("ezpgz"), true) + it + " has state-machine " +
                prope4.joinToString(separator = (testClass.test).prependIndent(Delegate().testDelegated))) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == (testClass).test.startsWith(Delegate().testDelegated, true) } ?: error("tail-call optimization hit: method " + method + (TestClass(Delegate()).foo).test.takeLast(335330039) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if ((TestClass(Delegate()).foo).test.toInt() != 623167333) error((847889507595465944.toULong()).toUShort().toString(1477036975) + (testClass.test).length.takeHighestOneBit())
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
prope1.prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:43:35,887 [main:107] - replacing ("tail-call optimization hit: method " + method + (TestClass(Delegate()).foo).test.takeLast(335330039), String)
2021-03-12 05:43:35,887 [main:50] - replacing "tail-call optimization hit: method " + method + (TestClass(Delegate()).foo).test.takeLast(335330039) String
2021-03-12 05:43:35,888 [main:54] - Getting value of type String
2021-03-12 05:43:36,039 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:43:36,042 [main:58] - GENERATED VALUE OF TYPE String = "rdbvu"
2021-03-12 05:43:36,042 [main:61] - GENERATED IS CALL =false
2021-03-12 05:43:36,198 [main:67] - randomType = Int?
2021-03-12 05:43:36,345 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:36,396 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3d789233]
2021-03-12 05:43:36,526 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:36,529 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@98649f6]
2021-03-12 05:43:36,659 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:36,662 [main:78] - Generated call from random type = (-925376165)?.compareTo(254524917).toString(-1975045624)
2021-03-12 05:43:36,662 [main:106] - GETTING String from String
2021-03-12 05:43:36,680 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43cb1673]]
2021-03-12 05:43:36,680 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43cb1673]
2021-03-12 05:43:36,810 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:36,813 [main:117] - GENERATED CALL = (Delegate().testDelegated).take(-1844084068)
2021-03-12 05:43:36,813 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@170a4328]]
2021-03-12 05:43:36,813 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:43:36,942 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:37,073 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:37,076 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@170a4328]
2021-03-12 05:43:37,204 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 05:43:37,339 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 05:43:37,343 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 05:43:37,794 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:43:37,797 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 05:43:37,962 [main:43] - GENERATING CALL OF fun <E> HashSet(initialCapacity: kotlin.Int): Set<RegexOption> = TODO()
2021-03-12 05:43:37,966 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(initialCapacity: kotlin.Int): Set<RegexOption> = TODO()
2021-03-12 05:43:38,256 [main:302] - generating value of type = Int true depth = 6
2021-03-12 05:43:38,259 [main:95] - GENERATED = HashSet<RegexOption>(360522696)
2021-03-12 05:43:38,259 [main:95] - GENERATED = Regex("qppnc", HashSet<RegexOption>(360522696))
2021-03-12 05:43:38,259 [main:117] - GENERATED CALL = (Delegate().testDelegated).subSequence(638351023, -2532163).replaceFirst(Regex("qppnc", HashSet<RegexOption>(360522696)), Delegate().test)
2021-03-12 05:43:38,260 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48cb2ddd]]
2021-03-12 05:43:38,260 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48cb2ddd]
2021-03-12 05:43:38,260 [main:117] - GENERATED CALL = (Delegate().testDelegated).decapitalize()
2021-03-12 05:43:38,260 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@686a0794]]
2021-03-12 05:43:38,260 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@686a0794]
2021-03-12 05:43:38,260 [main:117] - GENERATED CALL = (Delegate().testDelegated).trim()
2021-03-12 05:43:38,260 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@522aa0a8]]
2021-03-12 05:43:38,260 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@522aa0a8]
2021-03-12 05:43:38,394 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:38,397 [main:117] - GENERATED CALL = (Delegate().testDelegated).substring(-760224234)
2021-03-12 05:43:38,397 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d57cb87]]
2021-03-12 05:43:38,397 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d57cb87]
2021-03-12 05:43:38,397 [main:117] - GENERATED CALL = (Delegate().testDelegated).trimIndent()
2021-03-12 05:43:38,398 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4da16cf2]]
2021-03-12 05:43:38,398 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828]
2021-03-12 05:43:38,527 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:38,530 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4da16cf2]
2021-03-12 05:43:38,530 [main:117] - GENERATED CALL = (Delegate().testDelegated).get(863278798).lowercase()
2021-03-12 05:43:38,530 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@507ff28]]
2021-03-12 05:43:38,530 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@507ff28]
2021-03-12 05:43:38,660 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:43:38,794 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 05:43:38,798 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 05:43:39,099 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:43:39,102 [main:95] - GENERATED = StringBuilder("yigeq")
2021-03-12 05:43:39,103 [main:117] - GENERATED CALL = (Delegate().testDelegated).removeSurrounding(StringBuilder("yigeq"))
2021-03-12 05:43:39,103 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b1c1442]]
2021-03-12 05:43:39,103 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b1c1442]
2021-03-12 05:43:39,103 [main:117] - GENERATED CALL = (Delegate().testDelegated).concat(Delegate().test)
2021-03-12 05:43:39,103 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@98649f6]]
2021-03-12 05:43:39,103 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9]
2021-03-12 05:43:39,103 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@98649f6]
2021-03-12 05:43:39,235 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:39,238 [main:117] - GENERATED CALL = (Delegate().testDelegated).compareTo(testClass.test).toString(491529767)
2021-03-12 05:43:39,238 [main:114] - replacement of "tail-call optimization hit: method " + method + (TestClass(Delegate()).foo).test.takeLast(335330039) of type String is (Delegate().testDelegated).substring(-760224234)
2021-03-12 05:43:39,368 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:43:39,369 [main:66] - Compilation checking started
2021-03-12 05:43:40,021 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    val testClass = TestClass(Delegate())
var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                prope2 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope2 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${(Delegate().test)?.drop(972117168)}"
    }

    if ((Delegate().test).equals("cuwwu").not()) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw RuntimeException("fail 2")
        return prope2!!
    }

    if ("xdvsz" === "bgmte") throw RuntimeException("fail 3")
    return (Delegate().test).trimStart()
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2(false) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2((0.2530265828995427).toFloat().isNaN()) { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return (Delegate().testDelegated).subSequence(1628402184, 2079639306).commonPrefixWith(StringBuilder(1753138229), true)
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val testClass = TestClass(Delegate())
x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error((Delegate().test).commonSuffixWith(StringBuilder("ezpgz"), true) + it + " has state-machine " +
                prope4.joinToString(separator = (testClass.test).prependIndent(Delegate().testDelegated))) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == (testClass).test.startsWith(Delegate().testDelegated, true) } ?: error((Delegate().testDelegated).substring(-760224234) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if ((TestClass(Delegate()).foo).test.toInt() != 623167333) error((847889507595465944.toULong()).toUShort().toString(1477036975) + (testClass.test).length.takeHighestOneBit())
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
prope1.prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:43:40,024 [main:107] - replacing ("Wrong state-machine generated: it is not finished yet", String)
2021-03-12 05:43:40,024 [main:50] - replacing "Wrong state-machine generated: it is not finished yet" String
2021-03-12 05:43:40,024 [main:54] - Getting value of type String
2021-03-12 05:43:40,155 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:43:40,158 [main:58] - GENERATED VALUE OF TYPE String = "psopr"
2021-03-12 05:43:40,158 [main:61] - GENERATED IS CALL =false
2021-03-12 05:43:40,318 [main:67] - randomType = ArrayList<Delegate>
2021-03-12 05:43:40,445 [main:302] - generating value of type = ArrayList<Delegate> false depth = 0
2021-03-12 05:43:40,579 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Delegate> = TODO()
2021-03-12 05:43:40,583 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Delegate> = TODO()
2021-03-12 05:43:40,723 [main:95] - GENERATED = arrayListOf<Delegate>()
2021-03-12 05:43:40,886 [main:149] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@5a69cfe8]
2021-03-12 05:43:40,886 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6795bfdc]
2021-03-12 05:43:40,886 [main:78] - Generated call from random type = (arrayListOf<Delegate>()).toArray().contentToString()
2021-03-12 05:43:40,887 [main:114] - replacement of "Wrong state-machine generated: it is not finished yet" of type String is (arrayListOf<Delegate>()).toArray().contentToString()
2021-03-12 05:43:41,020 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:43:41,021 [main:66] - Compilation checking started
2021-03-12 05:43:41,745 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    val testClass = TestClass(Delegate())
var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                prope2 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope2 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${(Delegate().test)?.drop(972117168)}"
    }

    if ((Delegate().test).equals("cuwwu").not()) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw RuntimeException("fail 2")
        return prope2!!
    }

    if ("xdvsz" === "bgmte") throw RuntimeException("fail 3")
    return (Delegate().test).trimStart()
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2(false) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2((0.2530265828995427).toFloat().isNaN()) { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return (Delegate().testDelegated).subSequence(1628402184, 2079639306).commonPrefixWith(StringBuilder(1753138229), true)
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val testClass = TestClass(Delegate())
x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error((Delegate().test).commonSuffixWith(StringBuilder("ezpgz"), true) + it + " has state-machine " +
                prope4.joinToString(separator = (testClass.test).prependIndent(Delegate().testDelegated))) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == (testClass).test.startsWith(Delegate().testDelegated, true) } ?: error((Delegate().testDelegated).substring(-760224234) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if ((TestClass(Delegate()).foo).test.toInt() != 623167333) error((847889507595465944.toULong()).toUShort().toString(1477036975) + (testClass.test).length.takeHighestOneBit())
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((arrayListOf<Delegate>()).toArray().contentToString())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
prope1.prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:43:41,749 [main:107] - replacing (prope3.exceptionOrNull()!!, Throwable)
2021-03-12 05:43:41,749 [main:50] - replacing prope3.exceptionOrNull()!! Throwable
2021-03-12 05:43:41,749 [main:54] - Getting value of type Throwable
2021-03-12 05:43:41,916 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 05:43:41,923 [main:58] - GENERATED VALUE OF TYPE Throwable = IllegalStateException()
2021-03-12 05:43:41,923 [main:61] - GENERATED IS CALL =true
2021-03-12 05:43:41,930 [main:67] - randomType = Double
2021-03-12 05:43:42,082 [main:302] - generating value of type = Double true depth = 0
2021-03-12 05:43:42,114 [main:106] - GETTING Throwable from String
2021-03-12 05:43:42,131 [main:106] - GETTING Throwable from String
2021-03-12 05:43:42,132 [main:106] - GETTING Throwable from String
2021-03-12 05:43:42,133 [main:106] - GETTING Throwable from TestClass
2021-03-12 05:43:42,144 [main:106] - GETTING Throwable from String
2021-03-12 05:43:42,146 [main:106] - GETTING Throwable from Test
2021-03-12 05:43:42,151 [main:106] - GETTING Throwable from String
2021-03-12 05:43:42,151 [main:114] - replacement of prope3.exceptionOrNull()!! of type Throwable is IllegalStateException()
2021-03-12 05:43:42,290 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:43:42,292 [main:107] - replacing (prope1, Kla4)
2021-03-12 05:43:42,292 [main:50] - replacing prope1 Kla4
2021-03-12 05:43:42,292 [main:54] - Getting value of type Kla4
2021-03-12 05:43:42,435 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 05:43:42,438 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if ((TestClass(Delegate()).foo).test.toInt() != 623167333) error((847889507595465944.toULong()).toUShort().toString(1477036975) + (testClass.test).length.takeHighestOneBit())
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((arrayListOf<Delegate>()).toArray().contentToString())
    }
}
2021-03-12 05:43:42,438 [main:58] - GENERATED VALUE OF TYPE Kla4 = Kla4()
2021-03-12 05:43:42,438 [main:61] - GENERATED IS CALL =true
2021-03-12 05:43:42,450 [main:67] - randomType = Test
2021-03-12 05:43:42,451 [main:106] - GETTING Kla4 from String
2021-03-12 05:43:42,473 [main:106] - GETTING Kla4 from String
2021-03-12 05:43:42,473 [main:106] - GETTING Kla4 from Test
2021-03-12 05:43:42,479 [main:106] - GETTING Kla4 from String
2021-03-12 05:43:42,479 [main:106] - GETTING Kla4 from String
2021-03-12 05:43:42,480 [main:106] - GETTING Kla4 from String
2021-03-12 05:43:42,481 [main:106] - GETTING Kla4 from TestClass
2021-03-12 05:43:42,492 [main:114] - replacement of prope1 of type Kla4 is Kla4()
2021-03-12 05:43:42,627 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:43:42,627 [main:66] - Compilation checking started
2021-03-12 05:43:43,283 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    val testClass = TestClass(Delegate())
var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                prope2 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope2 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${(Delegate().test)?.drop(972117168)}"
    }

    if ((Delegate().test).equals("cuwwu").not()) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw RuntimeException("fail 2")
        return prope2!!
    }

    if ("xdvsz" === "bgmte") throw RuntimeException("fail 3")
    return (Delegate().test).trimStart()
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2(false) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2((0.2530265828995427).toFloat().isNaN()) { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return (Delegate().testDelegated).subSequence(1628402184, 2079639306).commonPrefixWith(StringBuilder(1753138229), true)
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val testClass = TestClass(Delegate())
x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error((Delegate().test).commonSuffixWith(StringBuilder("ezpgz"), true) + it + " has state-machine " +
                prope4.joinToString(separator = (testClass.test).prependIndent(Delegate().testDelegated))) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == (testClass).test.startsWith(Delegate().testDelegated, true) } ?: error((Delegate().testDelegated).substring(-760224234) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if ((TestClass(Delegate()).foo).test.toInt() != 623167333) error((847889507595465944.toULong()).toUShort().toString(1477036975) + (testClass.test).length.takeHighestOneBit())
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((arrayListOf<Delegate>()).toArray().contentToString())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
Kla4().prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:43:43,285 [main:107] - replacing ({ throw RuntimeException("OK") }, SuspendFunction0<String>)
2021-03-12 05:43:43,285 [main:50] - replacing { throw RuntimeException("OK") } SuspendFunction0<String>
2021-03-12 05:43:43,285 [main:54] - Getting value of type SuspendFunction0<String>
2021-03-12 05:43:43,429 [main:302] - generating value of type = SuspendFunction0<String> false depth = 0
2021-03-12 05:43:43,432 [main:302] - generating value of type = String true depth = 1
2021-03-12 05:43:43,435 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<String> = { "ftfoh"}
2021-03-12 05:43:43,435 [main:61] - GENERATED IS CALL =false
2021-03-12 05:43:43,747 [main:67] - randomType = Kla5?
2021-03-12 05:43:43,883 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 05:43:43,886 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
Kla4().prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}
2021-03-12 05:43:43,908 [main:106] - GETTING SuspendFunction0<String> from TestClass
2021-03-12 05:43:43,917 [main:106] - GETTING SuspendFunction0<String> from String
2021-03-12 05:43:43,933 [main:106] - GETTING SuspendFunction0<String> from Test
2021-03-12 05:43:43,938 [main:106] - GETTING SuspendFunction0<String> from String
2021-03-12 05:43:43,939 [main:106] - GETTING SuspendFunction0<String> from String
2021-03-12 05:43:43,940 [main:106] - GETTING SuspendFunction0<String> from String
2021-03-12 05:43:43,941 [main:106] - GETTING SuspendFunction0<String> from String
2021-03-12 05:43:43,941 [main:114] - replacement of { throw RuntimeException("OK") } of type SuspendFunction0<String> is { "ftfoh"}
2021-03-12 05:43:44,090 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 05:43:44,090 [main:66] - Compilation checking started
2021-03-12 05:43:44,744 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    val testClass = TestClass(Delegate())
var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                prope2 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope2 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${(Delegate().test)?.drop(972117168)}"
    }

    if ((Delegate().test).equals("cuwwu").not()) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw RuntimeException("fail 2")
        return prope2!!
    }

    if ("xdvsz" === "bgmte") throw RuntimeException("fail 3")
    return (Delegate().test).trimStart()
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2(false) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2((0.2530265828995427).toFloat().isNaN()) { "ftfoh"} != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return (Delegate().testDelegated).subSequence(1628402184, 2079639306).commonPrefixWith(StringBuilder(1753138229), true)
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val testClass = TestClass(Delegate())
x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error((Delegate().test).commonSuffixWith(StringBuilder("ezpgz"), true) + it + " has state-machine " +
                prope4.joinToString(separator = (testClass.test).prependIndent(Delegate().testDelegated))) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == (testClass).test.startsWith(Delegate().testDelegated, true) } ?: error((Delegate().testDelegated).substring(-760224234) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if ((TestClass(Delegate()).foo).test.toInt() != 623167333) error((847889507595465944.toULong()).toUShort().toString(1477036975) + (testClass.test).length.takeHighestOneBit())
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((arrayListOf<Delegate>()).toArray().contentToString())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
Kla4().prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:43:44,748 [main:107] - replacing (RuntimeException("fail 2"), RuntimeException)
2021-03-12 05:43:44,749 [main:50] - replacing RuntimeException("fail 2") RuntimeException
2021-03-12 05:43:44,749 [main:54] - Getting value of type RuntimeException
2021-03-12 05:43:44,893 [main:302] - generating value of type = RuntimeException false depth = 0
2021-03-12 05:43:44,899 [main:58] - GENERATED VALUE OF TYPE RuntimeException = NullPointerException()
2021-03-12 05:43:44,900 [main:61] - GENERATED IS CALL =true
2021-03-12 05:43:45,061 [main:67] - randomType = Kla5
2021-03-12 05:43:45,195 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 05:43:45,198 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
Kla4().prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}
2021-03-12 05:43:45,217 [main:106] - GETTING RuntimeException from Test
2021-03-12 05:43:45,222 [main:106] - GETTING RuntimeException from String
2021-03-12 05:43:45,239 [main:106] - GETTING RuntimeException from TestClass
2021-03-12 05:43:45,250 [main:106] - GETTING RuntimeException from String
2021-03-12 05:43:45,251 [main:106] - GETTING RuntimeException from String
2021-03-12 05:43:45,252 [main:106] - GETTING RuntimeException from String
2021-03-12 05:43:45,253 [main:106] - GETTING RuntimeException from String
2021-03-12 05:43:45,253 [main:114] - replacement of RuntimeException("fail 2") of type RuntimeException is NullPointerException()
2021-03-12 05:43:45,394 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:43:45,394 [main:66] - Compilation checking started
2021-03-12 05:43:46,025 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    val testClass = TestClass(Delegate())
var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                prope2 = "Exception: " + exception.message!!
            }

            override fun resume(value: String) {
                prope2 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${(Delegate().test)?.drop(972117168)}"
    }

    if ((Delegate().test).equals("cuwwu").not()) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw NullPointerException()
        return prope2!!
    }

    if ("xdvsz" === "bgmte") throw RuntimeException("fail 3")
    return (Delegate().test).trimStart()
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2(false) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2((0.2530265828995427).toFloat().isNaN()) { "ftfoh"} != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return (Delegate().testDelegated).subSequence(1628402184, 2079639306).commonPrefixWith(StringBuilder(1753138229), true)
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val testClass = TestClass(Delegate())
x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error((Delegate().test).commonSuffixWith(StringBuilder("ezpgz"), true) + it + " has state-machine " +
                prope4.joinToString(separator = (testClass.test).prependIndent(Delegate().testDelegated))) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == (testClass).test.startsWith(Delegate().testDelegated, true) } ?: error((Delegate().testDelegated).substring(-760224234) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if ((TestClass(Delegate()).foo).test.toInt() != 623167333) error((847889507595465944.toULong()).toUShort().toString(1477036975) + (testClass.test).length.takeHighestOneBit())
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((arrayListOf<Delegate>()).toArray().contentToString())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
Kla4().prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:43:46,029 [main:107] - replacing (exception, Throwable)
2021-03-12 05:43:46,030 [main:50] - replacing exception Throwable
2021-03-12 05:43:46,030 [main:54] - Getting value of type Throwable
2021-03-12 05:43:46,219 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 05:43:46,371 [main:43] - GENERATING CALL OF fun Error(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 05:43:46,375 [main:61] - WITHOUT TYPE PARAMS = fun Error(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 05:43:46,665 [main:302] - generating value of type = Throwable false depth = 3
2021-03-12 05:43:46,805 [main:43] - GENERATING CALL OF fun Error(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 05:43:46,809 [main:61] - WITHOUT TYPE PARAMS = fun Error(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 05:43:47,261 [main:302] - generating value of type = String true depth = 6
2021-03-12 05:43:47,264 [main:302] - generating value of type = Throwable false depth = 6
2021-03-12 05:43:47,415 [main:43] - GENERATING CALL OF fun RuntimeException(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 05:43:47,419 [main:61] - WITHOUT TYPE PARAMS = fun RuntimeException(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 05:43:47,709 [main:95] - GENERATED = RuntimeException(null)
2021-03-12 05:43:47,710 [main:95] - GENERATED = Error("sbzjf", RuntimeException(null))
2021-03-12 05:43:47,710 [main:95] - GENERATED = Error(Error("sbzjf", RuntimeException(null)))
2021-03-12 05:43:47,710 [main:58] - GENERATED VALUE OF TYPE Throwable = Error(Error("sbzjf", RuntimeException(null)))
2021-03-12 05:43:47,710 [main:61] - GENERATED IS CALL =true
2021-03-12 05:43:47,716 [main:67] - randomType = Byte
2021-03-12 05:43:47,847 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:43:47,881 [main:106] - GETTING Throwable from String
2021-03-12 05:43:47,897 [main:106] - GETTING Throwable from String
2021-03-12 05:43:47,898 [main:106] - GETTING Throwable from String
2021-03-12 05:43:47,898 [main:106] - GETTING Throwable from String
2021-03-12 05:43:47,899 [main:106] - GETTING Throwable from TestClass
2021-03-12 05:43:47,908 [main:106] - GETTING Throwable from String
2021-03-12 05:43:47,909 [main:106] - GETTING Throwable from Test
2021-03-12 05:43:47,913 [main:114] - replacement of exception of type Throwable is Error(Error("sbzjf", RuntimeException(null)))
2021-03-12 05:43:48,066 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:43:48,067 [main:66] - Compilation checking started
2021-03-12 05:43:48,510 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    val testClass = TestClass(Delegate())
var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                val testClass = TestClass(Delegate())
prope2 = "Exception: " + Error(Error("sbzjf", RuntimeException(null))).message!!
            }

            override fun resume(value: String) {
                prope2 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${(Delegate().test)?.drop(972117168)}"
    }

    if ((Delegate().test).equals("cuwwu").not()) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw NullPointerException()
        return prope2!!
    }

    if ("xdvsz" === "bgmte") throw RuntimeException("fail 3")
    return (Delegate().test).trimStart()
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2(false) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2((0.2530265828995427).toFloat().isNaN()) { "ftfoh"} != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return (Delegate().testDelegated).subSequence(1628402184, 2079639306).commonPrefixWith(StringBuilder(1753138229), true)
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val testClass = TestClass(Delegate())
x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error((Delegate().test).commonSuffixWith(StringBuilder("ezpgz"), true) + it + " has state-machine " +
                prope4.joinToString(separator = (testClass.test).prependIndent(Delegate().testDelegated))) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == (testClass).test.startsWith(Delegate().testDelegated, true) } ?: error((Delegate().testDelegated).substring(-760224234) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if ((TestClass(Delegate()).foo).test.toInt() != 623167333) error((847889507595465944.toULong()).toUShort().toString(1477036975) + (testClass.test).length.takeHighestOneBit())
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((arrayListOf<Delegate>()).toArray().contentToString())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
Kla4().prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:43:48,514 [main:107] - replacing ("Exception: " + exception.message!!, String)
2021-03-12 05:43:48,514 [main:50] - replacing "Exception: " + exception.message!! String
2021-03-12 05:43:48,514 [main:54] - Getting value of type String
2021-03-12 05:43:48,666 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:43:48,669 [main:58] - GENERATED VALUE OF TYPE String = "luxre"
2021-03-12 05:43:48,669 [main:61] - GENERATED IS CALL =false
2021-03-12 05:43:49,171 [main:67] - randomType = Function1<Kla2<Boolean>, Kla2<Double>>
2021-03-12 05:43:49,171 [main:106] - GETTING String from String
2021-03-12 05:43:49,198 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@75078835]]
2021-03-12 05:43:49,198 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@75078835]
2021-03-12 05:43:49,330 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:43:49,330 [main:117] - GENERATED CALL = (Delegate().test).plus("haefy")
2021-03-12 05:43:49,330 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1010ac]]
2021-03-12 05:43:49,331 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b1010ac]
2021-03-12 05:43:49,331 [main:117] - GENERATED CALL = (Delegate().test).reversed()
2021-03-12 05:43:49,331 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe5b55f]]
2021-03-12 05:43:49,331 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe5b55f]
2021-03-12 05:43:49,462 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:49,599 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:43:49,602 [main:117] - GENERATED CALL = (Delegate().test).padStart(-1611755322, '蓃')
2021-03-12 05:43:49,602 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b7c9229]]
2021-03-12 05:43:49,602 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:43:49,733 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:49,870 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:49,873 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b7c9229]
2021-03-12 05:43:50,005 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 05:43:50,165 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 05:43:50,170 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 05:43:50,617 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:43:50,620 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 05:43:50,624 [main:95] - GENERATED = Regex("ukszj", kotlin.text.RegexOption.MULTILINE)
2021-03-12 05:43:50,756 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 05:43:50,759 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 05:43:50,766 [main:117] - GENERATED CALL = (Delegate().test).subSequence(-1668480211, -458424158).replace(Regex("ukszj", kotlin.text.RegexOption.MULTILINE), {a: MatchResult -> "wtdpc"})
2021-03-12 05:43:50,766 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b251a21]]
2021-03-12 05:43:50,766 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b251a21]
2021-03-12 05:43:50,898 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:43:51,034 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:43:51,037 [main:117] - GENERATED CALL = (Delegate().test).substringBefore('댭', "haiyv")
2021-03-12 05:43:51,038 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7740fdd8]]
2021-03-12 05:43:51,038 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7740fdd8]
2021-03-12 05:43:51,038 [main:117] - GENERATED CALL = (Delegate().test).replaceIndentByMargin(Delegate().testDelegated, Delegate().testDelegated)
2021-03-12 05:43:51,038 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@577ef375]]
2021-03-12 05:43:51,038 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@577ef375]
2021-03-12 05:43:51,169 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:51,304 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:51,442 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:43:51,448 [main:117] - GENERATED CALL = (Delegate().test).replaceRange(642438054, -1831511631, StringBuilder())
2021-03-12 05:43:51,448 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c5dfc66]]
2021-03-12 05:43:51,448 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c5dfc66]
2021-03-12 05:43:51,448 [main:117] - GENERATED CALL = (Delegate().test).toLowerCase()
2021-03-12 05:43:51,448 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4da16cf2]]
2021-03-12 05:43:51,449 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828]
2021-03-12 05:43:51,589 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:51,592 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4da16cf2]
2021-03-12 05:43:51,592 [main:117] - GENERATED CALL = (Delegate().test).get(906525329).lowercase()
2021-03-12 05:43:51,593 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52db7ff4]]
2021-03-12 05:43:51,593 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52db7ff4]
2021-03-12 05:43:51,734 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 05:43:51,874 [main:43] - GENERATING CALL OF fun <E> buildSet(builderAction: kotlin.collections.MutableSet<Int>.()->kotlin.Unit): Iterable<Int> = TODO()
2021-03-12 05:43:51,878 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildSet(builderAction: kotlin.collections.MutableSet<Int>.()->kotlin.Unit): Iterable<Int> = TODO()
2021-03-12 05:43:52,213 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableSet<Int>, Unit> false depth = 3
2021-03-12 05:43:52,216 [main:302] - generating value of type = Unit false depth = 4
2021-03-12 05:43:52,354 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:43:52,358 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:43:52,807 [main:302] - generating value of type = Boolean true depth = 7
2021-03-12 05:43:52,811 [main:302] - generating value of type = Function0<Any> false depth = 7
2021-03-12 05:43:52,814 [main:302] - generating value of type = Any false depth = 8
2021-03-12 05:43:52,814 [main:95] - GENERATED = check(true, { "ejuiu"})
2021-03-12 05:43:52,814 [main:95] - GENERATED = buildSet<Int>({ check(true, { "ejuiu"})})
2021-03-12 05:43:52,814 [main:117] - GENERATED CALL = (Delegate().test).slice(buildSet<Int>({ check(true, { "ejuiu"})}))
2021-03-12 05:43:52,815 [main:114] - replacement of "Exception: " + exception.message!! of type String is (Delegate().test).replaceIndentByMargin(Delegate().testDelegated, Delegate().testDelegated)
2021-03-12 05:43:52,946 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:43:52,947 [main:66] - Compilation checking started
2021-03-12 05:43:53,552 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    val testClass = TestClass(Delegate())
var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                val testClass = TestClass(Delegate())
prope2 = (Delegate().test).replaceIndentByMargin(Delegate().testDelegated, Delegate().testDelegated)
            }

            override fun resume(value: String) {
                prope2 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${(Delegate().test)?.drop(972117168)}"
    }

    if ((Delegate().test).equals("cuwwu").not()) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw NullPointerException()
        return prope2!!
    }

    if ("xdvsz" === "bgmte") throw RuntimeException("fail 3")
    return (Delegate().test).trimStart()
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2(false) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2((0.2530265828995427).toFloat().isNaN()) { "ftfoh"} != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return (Delegate().testDelegated).subSequence(1628402184, 2079639306).commonPrefixWith(StringBuilder(1753138229), true)
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val testClass = TestClass(Delegate())
x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error((Delegate().test).commonSuffixWith(StringBuilder("ezpgz"), true) + it + " has state-machine " +
                prope4.joinToString(separator = (testClass.test).prependIndent(Delegate().testDelegated))) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == (testClass).test.startsWith(Delegate().testDelegated, true) } ?: error((Delegate().testDelegated).substring(-760224234) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if ((TestClass(Delegate()).foo).test.toInt() != 623167333) error((847889507595465944.toULong()).toUShort().toString(1477036975) + (testClass.test).length.takeHighestOneBit())
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((arrayListOf<Delegate>()).toArray().contentToString())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
Kla4().prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:43:53,556 [main:107] - replacing (prope5++, Int)
2021-03-12 05:43:53,556 [main:50] - replacing prope5++ Int
2021-03-12 05:43:53,556 [main:54] - Getting value of type Int
2021-03-12 05:43:53,701 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:53,704 [main:58] - GENERATED VALUE OF TYPE Int = -2137025460
2021-03-12 05:43:53,704 [main:61] - GENERATED IS CALL =false
2021-03-12 05:43:53,710 [main:67] - randomType = Long
2021-03-12 05:43:53,842 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:43:53,893 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@24f2a2b6]
2021-03-12 05:43:53,893 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@38330aa]
2021-03-12 05:43:54,025 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:43:54,028 [main:78] - Generated call from random type = (108973850455038261).toInt().ushr(-1877061143)
2021-03-12 05:43:54,028 [main:114] - replacement of prope5++ of type Int is (108973850455038261).toInt().ushr(-1877061143)
2021-03-12 05:43:54,160 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:43:54,161 [main:66] - Compilation checking started
2021-03-12 05:43:54,791 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    val testClass = TestClass(Delegate())
var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                val testClass = TestClass(Delegate())
prope2 = (Delegate().test).replaceIndentByMargin(Delegate().testDelegated, Delegate().testDelegated)
            }

            override fun resume(value: String) {
                prope2 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${(Delegate().test)?.drop(972117168)}"
    }

    if ((Delegate().test).equals("cuwwu").not()) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw NullPointerException()
        return prope2!!
    }

    if ("xdvsz" === "bgmte") throw RuntimeException("fail 3")
    return (Delegate().test).trimStart()
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2(false) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2((0.2530265828995427).toFloat().isNaN()) { "ftfoh"} != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return (Delegate().testDelegated).subSequence(1628402184, 2079639306).commonPrefixWith(StringBuilder(1753138229), true)
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val testClass = TestClass(Delegate())
x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error((Delegate().test).commonSuffixWith(StringBuilder("ezpgz"), true) + it + " has state-machine " +
                prope4.joinToString(separator = (testClass.test).prependIndent(Delegate().testDelegated))) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == (testClass).test.startsWith(Delegate().testDelegated, true) } ?: error((Delegate().testDelegated).substring(-760224234) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (108973850455038261).toInt().ushr(-1877061143)
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if ((TestClass(Delegate()).foo).test.toInt() != 623167333) error((847889507595465944.toULong()).toUShort().toString(1477036975) + (testClass.test).length.takeHighestOneBit())
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((arrayListOf<Delegate>()).toArray().contentToString())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
Kla4().prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:43:54,795 [main:107] - replacing (COROUTINE_SUSPENDED, Any)
2021-03-12 05:43:54,795 [main:50] - replacing COROUTINE_SUSPENDED Any
2021-03-12 05:43:54,795 [main:54] - Getting value of type Any
2021-03-12 05:43:54,956 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:43:54,956 [main:58] - GENERATED VALUE OF TYPE Any = "mvntw"
2021-03-12 05:43:54,956 [main:61] - GENERATED IS CALL =false
2021-03-12 05:43:54,968 [main:67] - randomType = Delegate
2021-03-12 05:43:55,101 [main:302] - generating value of type = Delegate false depth = 0
2021-03-12 05:43:55,104 [main:112] - generating klass Delegate text = class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}
2021-03-12 05:43:55,117 [main:106] - GETTING Any from TestClass
2021-03-12 05:43:55,126 [main:106] - GETTING Any from String
2021-03-12 05:43:55,141 [main:114] - replacement of COROUTINE_SUSPENDED of type Any is "mvntw"
2021-03-12 05:43:55,277 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 05:43:55,277 [main:66] - Compilation checking started
2021-03-12 05:43:55,878 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "mvntw"
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    val testClass = TestClass(Delegate())
var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                val testClass = TestClass(Delegate())
prope2 = (Delegate().test).replaceIndentByMargin(Delegate().testDelegated, Delegate().testDelegated)
            }

            override fun resume(value: String) {
                prope2 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${(Delegate().test)?.drop(972117168)}"
    }

    if ((Delegate().test).equals("cuwwu").not()) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw NullPointerException()
        return prope2!!
    }

    if ("xdvsz" === "bgmte") throw RuntimeException("fail 3")
    return (Delegate().test).trimStart()
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2(false) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2((0.2530265828995427).toFloat().isNaN()) { "ftfoh"} != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return (Delegate().testDelegated).subSequence(1628402184, 2079639306).commonPrefixWith(StringBuilder(1753138229), true)
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val testClass = TestClass(Delegate())
x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error((Delegate().test).commonSuffixWith(StringBuilder("ezpgz"), true) + it + " has state-machine " +
                prope4.joinToString(separator = (testClass.test).prependIndent(Delegate().testDelegated))) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == (testClass).test.startsWith(Delegate().testDelegated, true) } ?: error((Delegate().testDelegated).substring(-760224234) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (108973850455038261).toInt().ushr(-1877061143)
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if ((TestClass(Delegate()).foo).test.toInt() != 623167333) error((847889507595465944.toULong()).toUShort().toString(1477036975) + (testClass.test).length.takeHighestOneBit())
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((arrayListOf<Delegate>()).toArray().contentToString())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
Kla4().prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:43:55,881 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 05:43:55,881 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 05:43:55,881 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 05:43:56,013 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 05:43:56,019 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 05:43:56,177 [main:67] - randomType = Byte?
2021-03-12 05:43:56,310 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:43:56,349 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 05:43:56,365 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 05:43:56,366 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 05:43:56,367 [main:106] - GETTING EmptyCoroutineContext from Test
2021-03-12 05:43:56,371 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 05:43:56,372 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 05:43:56,373 [main:106] - GETTING EmptyCoroutineContext from TestClass
2021-03-12 05:43:56,381 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 05:43:56,381 [main:107] - replacing (exception, Throwable)
2021-03-12 05:43:56,382 [main:50] - replacing exception Throwable
2021-03-12 05:43:56,382 [main:54] - Getting value of type Throwable
2021-03-12 05:43:56,536 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 05:43:56,542 [main:58] - GENERATED VALUE OF TYPE Throwable = NoSuchElementException()
2021-03-12 05:43:56,542 [main:61] - GENERATED IS CALL =true
2021-03-12 05:43:56,548 [main:67] - randomType = UShort
2021-03-12 05:43:56,681 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 05:43:56,717 [main:106] - GETTING Throwable from String
2021-03-12 05:43:56,734 [main:106] - GETTING Throwable from String
2021-03-12 05:43:56,735 [main:106] - GETTING Throwable from String
2021-03-12 05:43:56,736 [main:106] - GETTING Throwable from TestClass
2021-03-12 05:43:56,745 [main:106] - GETTING Throwable from String
2021-03-12 05:43:56,745 [main:106] - GETTING Throwable from Test
2021-03-12 05:43:56,750 [main:106] - GETTING Throwable from String
2021-03-12 05:43:56,750 [main:114] - replacement of exception of type Throwable is NoSuchElementException()
2021-03-12 05:43:56,881 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:43:56,882 [main:66] - Compilation checking started
2021-03-12 05:43:57,472 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "mvntw"
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    val testClass = TestClass(Delegate())
var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                val testClass = TestClass(Delegate())
prope2 = (Delegate().test).replaceIndentByMargin(Delegate().testDelegated, Delegate().testDelegated)
            }

            override fun resume(value: String) {
                prope2 = value
            }
        })
    } catch (e: Exception) {
        "Exception: ${(Delegate().test)?.drop(972117168)}"
    }

    if ((Delegate().test).equals("cuwwu").not()) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw NullPointerException()
        return prope2!!
    }

    if ("xdvsz" === "bgmte") throw RuntimeException("fail 3")
    return (Delegate().test).trimStart()
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2(false) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2((0.2530265828995427).toFloat().isNaN()) { "ftfoh"} != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return (Delegate().testDelegated).subSequence(1628402184, 2079639306).commonPrefixWith(StringBuilder(1753138229), true)
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val testClass = TestClass(Delegate())
x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error((Delegate().test).commonSuffixWith(StringBuilder("ezpgz"), true) + it + " has state-machine " +
                prope4.joinToString(separator = (testClass.test).prependIndent(Delegate().testDelegated))) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == (testClass).test.startsWith(Delegate().testDelegated, true) } ?: error((Delegate().testDelegated).substring(-760224234) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (108973850455038261).toInt().ushr(-1877061143)
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if ((TestClass(Delegate()).foo).test.toInt() != 623167333) error((847889507595465944.toULong()).toUShort().toString(1477036975) + (testClass.test).length.takeHighestOneBit())
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((arrayListOf<Delegate>()).toArray().contentToString())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
Kla4().prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        val testClass = TestClass(Delegate())
throw NoSuchElementException()
    }
}


2021-03-12 05:43:57,474 [main:107] - replacing (value, String)
2021-03-12 05:43:57,475 [main:50] - replacing value String
2021-03-12 05:43:57,475 [main:54] - Getting value of type String
2021-03-12 05:43:57,614 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:43:57,619 [main:58] - GENERATED VALUE OF TYPE String = "ryciw"
2021-03-12 05:43:57,619 [main:61] - GENERATED IS CALL =false
2021-03-12 05:43:58,155 [main:67] - randomType = Triple<Kla0, ArrayDeque<String>, Function2<UShort, Test, TestClass>>
2021-03-12 05:43:58,287 [main:302] - generating value of type = Triple<Kla0, ArrayDeque<String>, Function2<UShort, Test, TestClass>> false depth = 0
2021-03-12 05:43:58,428 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Kla0, second: ArrayDeque<String>, third: Function2<UShort, Test, TestClass>): Triple<Kla0, ArrayDeque<String>, Function2<UShort, Test, TestClass>> = TODO()
2021-03-12 05:43:58,432 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Kla0, second: ArrayDeque<String>, third: Function2<UShort, Test, TestClass>): Triple<Kla0, ArrayDeque<String>, Function2<UShort, Test, TestClass>> = TODO()
2021-03-12 05:43:58,572 [main:302] - generating value of type = Kla0 false depth = 3
2021-03-12 05:43:58,575 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}
2021-03-12 05:43:58,733 [main:194] - Type params = []
2021-03-12 05:43:58,865 [main:302] - generating value of type = CoroutineContext false depth = 5
2021-03-12 05:43:59,007 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:43:59,011 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:43:59,324 [main:302] - generating value of type = Key<*> false depth = 8
2021-03-12 05:43:59,467 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:43:59,472 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:43:59,932 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:43:59,932 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:43:59,932 [main:302] - generating value of type = ArrayDeque<String> false depth = 3
2021-03-12 05:44:00,071 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<String> = TODO()
2021-03-12 05:44:00,075 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<String> = TODO()
2021-03-12 05:44:00,366 [main:302] - generating value of type = Int true depth = 6
2021-03-12 05:44:00,370 [main:95] - GENERATED = ArrayDeque<String>(-1152653156)
2021-03-12 05:44:00,370 [main:302] - generating value of type = Function2<UShort, Test, TestClass> false depth = 3
2021-03-12 05:44:00,373 [main:302] - generating value of type = TestClass false depth = 4
2021-03-12 05:44:00,376 [main:112] - generating klass TestClass text = class TestClass(val foo: Test) : Test by foo
2021-03-12 05:44:00,508 [main:194] - Type params = []
2021-03-12 05:44:00,641 [main:302] - generating value of type = Test false depth = 6
2021-03-12 05:44:00,645 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 05:44:00,956 [main:302] - generating value of type = Delegate false depth = 8
2021-03-12 05:44:00,960 [main:112] - generating klass Delegate text = class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}
2021-03-12 05:44:00,960 [main:95] - GENERATED = Triple<Kla0, ArrayDeque<String>, Function2<UShort, Test, TestClass>>(Kla0(), ArrayDeque<String>(-1152653156), {a: UShort, b: Test -> TestClass(Delegate())})
2021-03-12 05:44:00,988 [main:149] - GENERATING call of type public final fun removeLastOrNull(): kotlin.String? defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@e4b71ed]
2021-03-12 05:44:00,989 [main:78] - Generated call from random type = (Triple<Kla0, ArrayDeque<String>, Function2<UShort, Test, TestClass>>(Kla0(), ArrayDeque<String>(-1152653156), {a: UShort, b: Test -> TestClass(Delegate())})).second.removeLastOrNull()!!
2021-03-12 05:44:00,989 [main:106] - GETTING String from String
2021-03-12 05:44:01,015 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cb2d685]]
2021-03-12 05:44:01,015 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cb2d685]
2021-03-12 05:44:01,146 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:44:01,149 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:44:01,153 [main:117] - GENERATED CALL = (Delegate().testDelegated).dropWhile({a: Char -> false})
2021-03-12 05:44:01,153 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b7c9229]]
2021-03-12 05:44:01,153 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:44:01,286 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:01,423 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:01,427 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b7c9229]
2021-03-12 05:44:01,559 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 05:44:01,696 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 05:44:01,700 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 05:44:01,989 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:44:01,993 [main:95] - GENERATED = Regex("gugbm")
2021-03-12 05:44:02,124 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 05:44:02,127 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 05:44:02,133 [main:117] - GENERATED CALL = (Delegate().testDelegated).subSequence(-462514872, -2123227125).replace(Regex("gugbm"), {a: MatchResult -> "nyxot"})
2021-03-12 05:44:02,133 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@519427cd]]
2021-03-12 05:44:02,133 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@519427cd]
2021-03-12 05:44:02,265 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:44:02,401 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:44:02,404 [main:117] - GENERATED CALL = (Delegate().testDelegated).replaceAfterLast('?', Delegate().testDelegated, "reuwm")
2021-03-12 05:44:02,405 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b251a21]]
2021-03-12 05:44:02,405 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b251a21]
2021-03-12 05:44:02,538 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:44:02,542 [main:117] - GENERATED CALL = (Delegate().testDelegated).substringBefore('袈', Delegate().test)
2021-03-12 05:44:02,542 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe5b55f]]
2021-03-12 05:44:02,542 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe5b55f]
2021-03-12 05:44:02,675 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:02,836 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:44:02,839 [main:117] - GENERATED CALL = (Delegate().testDelegated).padStart(-1738110066, '捩')
2021-03-12 05:44:02,839 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dec78bf]]
2021-03-12 05:44:02,839 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dec78bf]
2021-03-12 05:44:02,981 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:44:02,984 [main:117] - GENERATED CALL = (Delegate().testDelegated).replaceBeforeLast('㳍', Delegate().test, Delegate().test)
2021-03-12 05:44:02,984 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@263c1809]]
2021-03-12 05:44:02,985 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@263c1809]
2021-03-12 05:44:03,116 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:44:03,120 [main:117] - GENERATED CALL = (Delegate().testDelegated).substringBeforeLast('稳', testClass.test)
2021-03-12 05:44:03,120 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f62b616]]
2021-03-12 05:44:03,120 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f62b616]
2021-03-12 05:44:03,120 [main:117] - GENERATED CALL = (Delegate().testDelegated).trimEnd()
2021-03-12 05:44:03,120 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a56629c]]
2021-03-12 05:44:03,120 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a56629c]
2021-03-12 05:44:03,252 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:44:03,255 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:44:03,258 [main:117] - GENERATED CALL = (Delegate().testDelegated).filter({a: Char -> false})
2021-03-12 05:44:03,258 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e339196]]
2021-03-12 05:44:03,258 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e339196]
2021-03-12 05:44:03,389 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:03,393 [main:117] - GENERATED CALL = (Delegate().testDelegated).repeat(1248879994)
2021-03-12 05:44:03,393 [main:114] - replacement of value of type String is (Delegate().testDelegated).padStart(-1738110066, '捩')
2021-03-12 05:44:03,525 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:44:03,525 [main:66] - Compilation checking started
2021-03-12 05:44:04,183 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "mvntw"
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    val testClass = TestClass(Delegate())
var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                val testClass = TestClass(Delegate())
prope2 = (Delegate().test).replaceIndentByMargin(Delegate().testDelegated, Delegate().testDelegated)
            }

            override fun resume(value: String) {
                val testClass = TestClass(Delegate())
prope2 = (Delegate().testDelegated).padStart(-1738110066, '捩')
            }
        })
    } catch (e: Exception) {
        "Exception: ${(Delegate().test)?.drop(972117168)}"
    }

    if ((Delegate().test).equals("cuwwu").not()) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw NullPointerException()
        return prope2!!
    }

    if ("xdvsz" === "bgmte") throw RuntimeException("fail 3")
    return (Delegate().test).trimStart()
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2(false) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2((0.2530265828995427).toFloat().isNaN()) { "ftfoh"} != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return (Delegate().testDelegated).subSequence(1628402184, 2079639306).commonPrefixWith(StringBuilder(1753138229), true)
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val testClass = TestClass(Delegate())
x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error((Delegate().test).commonSuffixWith(StringBuilder("ezpgz"), true) + it + " has state-machine " +
                prope4.joinToString(separator = (testClass.test).prependIndent(Delegate().testDelegated))) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == (testClass).test.startsWith(Delegate().testDelegated, true) } ?: error((Delegate().testDelegated).substring(-760224234) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (108973850455038261).toInt().ushr(-1877061143)
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if ((TestClass(Delegate()).foo).test.toInt() != 623167333) error((847889507595465944.toULong()).toUShort().toString(1477036975) + (testClass.test).length.takeHighestOneBit())
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((arrayListOf<Delegate>()).toArray().contentToString())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
Kla4().prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        val testClass = TestClass(Delegate())
throw NoSuchElementException()
    }
}


2021-03-12 05:44:04,186 [main:107] - replacing (prope6, Boolean)
2021-03-12 05:44:04,186 [main:50] - replacing prope6 Boolean
2021-03-12 05:44:04,186 [main:54] - Getting value of type Boolean
2021-03-12 05:44:04,320 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:44:04,323 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 05:44:04,324 [main:61] - GENERATED IS CALL =false
2021-03-12 05:44:04,796 [main:67] - randomType = Pair<Short?, Boolean>
2021-03-12 05:44:04,930 [main:302] - generating value of type = Pair<Short?, Boolean> false depth = 0
2021-03-12 05:44:05,071 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Short?, second: Boolean): Pair<Short?, Boolean> = TODO()
2021-03-12 05:44:05,075 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Short?, second: Boolean): Pair<Short?, Boolean> = TODO()
2021-03-12 05:44:05,245 [main:302] - generating value of type = Short true depth = 3
2021-03-12 05:44:05,248 [main:302] - generating value of type = Boolean true depth = 3
2021-03-12 05:44:05,251 [main:95] - GENERATED = Pair<Short?, Boolean>(-22013, true)
2021-03-12 05:44:05,260 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@eaccef]
2021-03-12 05:44:05,395 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:44:05,398 [main:78] - Generated call from random type = (Pair<Short?, Boolean>(-22013, true)).second.or(false)
2021-03-12 05:44:05,399 [main:106] - GETTING Boolean from String
2021-03-12 05:44:05,416 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1679ec72]]
2021-03-12 05:44:05,416 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:44:05,549 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:05,685 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:05,689 [main:149] - GENERATING call of type public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1679ec72]
2021-03-12 05:44:05,828 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:44:05,965 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:44:05,969 [main:117] - GENERATED CALL = (testClass.test).subSequence(-1030065342, 899586967).endsWith('값', true)
2021-03-12 05:44:05,969 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61b9d55c]]
2021-03-12 05:44:05,969 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9]
2021-03-12 05:44:05,969 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61b9d55c]
2021-03-12 05:44:06,103 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:44:06,103 [main:117] - GENERATED CALL = (testClass.test).compareTo(Delegate().testDelegated).equals("mvdwx")
2021-03-12 05:44:06,103 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@717caf3c]]
2021-03-12 05:44:06,103 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@717caf3c]
2021-03-12 05:44:06,104 [main:117] - GENERATED CALL = (testClass.test).isNotBlank()
2021-03-12 05:44:06,104 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d26ef96]]
2021-03-12 05:44:06,104 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d26ef96]
2021-03-12 05:44:06,104 [main:117] - GENERATED CALL = (testClass.test).isEmpty()
2021-03-12 05:44:06,104 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@118d964d]]
2021-03-12 05:44:06,104 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@118d964d]
2021-03-12 05:44:06,104 [main:117] - GENERATED CALL = (testClass.test).isNotEmpty()
2021-03-12 05:44:06,104 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c2b191b]]
2021-03-12 05:44:06,104 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:44:06,240 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:06,379 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:06,382 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c2b191b]
2021-03-12 05:44:06,542 [main:117] - GENERATED CALL = (testClass.test).subSequence(-605083282, 1066009525).isBlank()
2021-03-12 05:44:06,543 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@58bdc6dc]]
2021-03-12 05:44:06,543 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@58bdc6dc]
2021-03-12 05:44:06,677 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:44:06,677 [main:117] - GENERATED CALL = (testClass.test).equals("mmfeb")
2021-03-12 05:44:06,677 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cd25c0a]]
2021-03-12 05:44:06,677 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:44:06,812 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:06,950 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:06,953 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cd25c0a]
2021-03-12 05:44:06,953 [main:117] - GENERATED CALL = (testClass.test).subSequence(-1673883924, -713211802).none()
2021-03-12 05:44:06,953 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@58bdc6dc], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@10c10655]]
2021-03-12 05:44:06,953 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@58bdc6dc]
2021-03-12 05:44:07,089 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:44:07,089 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@10c10655]
2021-03-12 05:44:07,222 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:44:07,222 [main:117] - GENERATED CALL = (testClass.test).equals("fpner").equals("pvjfl")
2021-03-12 05:44:07,222 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@55c901f1], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61b9d55c]]
2021-03-12 05:44:07,222 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61b9d55c]
2021-03-12 05:44:07,355 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:44:07,355 [main:117] - GENERATED CALL = (testClass.test).length.equals("owtcq")
2021-03-12 05:44:07,355 [main:114] - replacement of prope6 of type Boolean is (testClass.test).isEmpty()
2021-03-12 05:44:07,516 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:44:07,517 [main:66] - Compilation checking started
2021-03-12 05:44:07,936 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "mvntw"
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    val testClass = TestClass(Delegate())
var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                val testClass = TestClass(Delegate())
prope2 = (Delegate().test).replaceIndentByMargin(Delegate().testDelegated, Delegate().testDelegated)
            }

            override fun resume(value: String) {
                val testClass = TestClass(Delegate())
prope2 = (Delegate().testDelegated).padStart(-1738110066, '捩')
            }
        })
    } catch (e: Exception) {
        "Exception: ${(Delegate().test)?.drop(972117168)}"
    }

    if ((Delegate().test).equals("cuwwu").not()) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw NullPointerException()
        return prope2!!
    }

    if ("xdvsz" === "bgmte") throw RuntimeException("fail 3")
    return (Delegate().test).trimStart()
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2(false) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2((0.2530265828995427).toFloat().isNaN()) { "ftfoh"} != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return (Delegate().testDelegated).subSequence(1628402184, 2079639306).commonPrefixWith(StringBuilder(1753138229), true)
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val testClass = TestClass(Delegate())
x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error((Delegate().test).commonSuffixWith(StringBuilder("ezpgz"), true) + it + " has state-machine " +
                prope4.joinToString(separator = (testClass.test).prependIndent(Delegate().testDelegated))) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == (testClass).test.startsWith(Delegate().testDelegated, true) } ?: error((Delegate().testDelegated).substring(-760224234) +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (108973850455038261).toInt().ushr(-1877061143)
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if ((TestClass(Delegate()).foo).test.toInt() != 623167333) error((847889507595465944.toULong()).toUShort().toString(1477036975) + (testClass.test).length.takeHighestOneBit())
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((arrayListOf<Delegate>()).toArray().contentToString())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
Kla4().prope7 = {
            prope1.(testClass.test).isEmpty() = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        val testClass = TestClass(Delegate())
throw NoSuchElementException()
    }
}


2021-03-12 05:44:07,940 [main:107] - replacing ((Delegate().testDelegated).substring(-760224234) +
                prope4.joinToString(separator = "\n"), String)
2021-03-12 05:44:07,941 [main:50] - replacing (Delegate().testDelegated).substring(-760224234) +
                prope4.joinToString(separator = "\n") String
2021-03-12 05:44:07,941 [main:54] - Getting value of type String
2021-03-12 05:44:08,090 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:44:08,095 [main:58] - GENERATED VALUE OF TYPE String = "bhpql"
2021-03-12 05:44:08,095 [main:61] - GENERATED IS CALL =false
2021-03-12 05:44:08,105 [main:67] - randomType = Char
2021-03-12 05:44:08,255 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:44:08,288 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@2c1034c9]
2021-03-12 05:44:08,424 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:44:08,427 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@98649f6]
2021-03-12 05:44:08,560 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:08,563 [main:78] - Generated call from random type = ('ꢹ').compareTo('꒒').toString(1759945158)
2021-03-12 05:44:08,563 [main:106] - GETTING String from String
2021-03-12 05:44:08,582 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b4a6183]]
2021-03-12 05:44:08,582 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b4a6183]
2021-03-12 05:44:08,714 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:08,849 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:44:08,852 [main:117] - GENERATED CALL = (Delegate().test).padEnd(523069045, '楹')
2021-03-12 05:44:08,853 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@216e44f2]]
2021-03-12 05:44:08,853 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@216e44f2]
2021-03-12 05:44:08,853 [main:117] - GENERATED CALL = (Delegate().test).uppercase()
2021-03-12 05:44:08,853 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37bb3715]]
2021-03-12 05:44:08,853 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37bb3715]
2021-03-12 05:44:08,985 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:08,988 [main:117] - GENERATED CALL = (Delegate().test).takeLast(-224721503)
2021-03-12 05:44:08,988 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7976d057]]
2021-03-12 05:44:08,988 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7976d057]
2021-03-12 05:44:09,124 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:44:09,127 [main:117] - GENERATED CALL = (Delegate().test).replaceAfter('셒', Delegate().test, Delegate().test)
2021-03-12 05:44:09,128 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cb2d685]]
2021-03-12 05:44:09,128 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cb2d685]
2021-03-12 05:44:09,260 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:44:09,263 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:44:09,266 [main:117] - GENERATED CALL = (Delegate().test).dropWhile({a: Char -> false})
2021-03-12 05:44:09,266 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27626778]]
2021-03-12 05:44:09,266 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27626778]
2021-03-12 05:44:09,399 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:09,535 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:09,538 [main:117] - GENERATED CALL = (Delegate().test).removeRange(1594232639, 574961402)
2021-03-12 05:44:09,538 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13a75974]]
2021-03-12 05:44:09,538 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13a75974]
2021-03-12 05:44:09,671 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:09,675 [main:117] - GENERATED CALL = (Delegate().test).drop(665333549)
2021-03-12 05:44:09,675 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@555a12f7]]
2021-03-12 05:44:09,675 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:44:09,815 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:09,979 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:09,982 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@555a12f7]
2021-03-12 05:44:10,118 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:44:10,257 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 05:44:10,261 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 05:44:10,554 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 05:44:10,560 [main:95] - GENERATED = StringBuilder("uwzax")
2021-03-12 05:44:10,694 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:44:10,697 [main:117] - GENERATED CALL = (Delegate().test).subSequence(1586166575, 345210688).commonSuffixWith(StringBuilder("uwzax"), false)
2021-03-12 05:44:10,697 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4da16cf2]]
2021-03-12 05:44:10,697 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828]
2021-03-12 05:44:10,833 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:10,836 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4da16cf2]
2021-03-12 05:44:10,836 [main:117] - GENERATED CALL = (Delegate().test).get(-922727547).lowercase()
2021-03-12 05:44:10,836 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@75078835]]
2021-03-12 05:44:10,836 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@75078835]
2021-03-12 05:44:10,969 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:44:10,970 [main:117] - GENERATED CALL = (Delegate().test).plus("jntmp")
2021-03-12 05:44:10,970 [main:114] - replacement of (Delegate().testDelegated).substring(-760224234) +
                prope4.joinToString(separator = "\n") of type String is ('ꢹ').compareTo('꒒').toString(1759945158)
2021-03-12 05:44:11,105 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:44:11,105 [main:66] - Compilation checking started
2021-03-12 05:44:11,714 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "mvntw"
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    val testClass = TestClass(Delegate())
var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                val testClass = TestClass(Delegate())
prope2 = (Delegate().test).replaceIndentByMargin(Delegate().testDelegated, Delegate().testDelegated)
            }

            override fun resume(value: String) {
                val testClass = TestClass(Delegate())
prope2 = (Delegate().testDelegated).padStart(-1738110066, '捩')
            }
        })
    } catch (e: Exception) {
        "Exception: ${(Delegate().test)?.drop(972117168)}"
    }

    if ((Delegate().test).equals("cuwwu").not()) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw NullPointerException()
        return prope2!!
    }

    if ("xdvsz" === "bgmte") throw RuntimeException("fail 3")
    return (Delegate().test).trimStart()
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2(false) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2((0.2530265828995427).toFloat().isNaN()) { "ftfoh"} != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return (Delegate().testDelegated).subSequence(1628402184, 2079639306).commonPrefixWith(StringBuilder(1753138229), true)
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val testClass = TestClass(Delegate())
x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error((Delegate().test).commonSuffixWith(StringBuilder("ezpgz"), true) + it + " has state-machine " +
                prope4.joinToString(separator = (testClass.test).prependIndent(Delegate().testDelegated))) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == (testClass).test.startsWith(Delegate().testDelegated, true) } ?: error(('ꢹ').compareTo('꒒').toString(1759945158))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (108973850455038261).toInt().ushr(-1877061143)
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if ((TestClass(Delegate()).foo).test.toInt() != 623167333) error((847889507595465944.toULong()).toUShort().toString(1477036975) + (testClass.test).length.takeHighestOneBit())
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((arrayListOf<Delegate>()).toArray().contentToString())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
Kla4().prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        val testClass = TestClass(Delegate())
throw NoSuchElementException()
    }
}


2021-03-12 05:44:11,717 [main:107] - replacing (false, Boolean)
2021-03-12 05:44:11,717 [main:50] - replacing false Boolean
2021-03-12 05:44:11,717 [main:54] - Getting value of type Boolean
2021-03-12 05:44:11,850 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:44:11,853 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 05:44:11,853 [main:61] - GENERATED IS CALL =false
2021-03-12 05:44:12,161 [main:67] - randomType = Collection<UInt>
2021-03-12 05:44:12,162 [main:106] - GETTING Boolean from String
2021-03-12 05:44:12,182 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61b9d55c]]
2021-03-12 05:44:12,182 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9]
2021-03-12 05:44:12,182 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61b9d55c]
2021-03-12 05:44:12,315 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:44:12,315 [main:117] - GENERATED CALL = (Delegate().testDelegated).compareTo(Delegate().testDelegated).equals("uxhak")
2021-03-12 05:44:12,315 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cd25c0a]]
2021-03-12 05:44:12,315 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:44:12,474 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:12,611 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:12,614 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4cd25c0a]
2021-03-12 05:44:12,614 [main:117] - GENERATED CALL = (Delegate().testDelegated).subSequence(-2132578598, -2027368479).none()
2021-03-12 05:44:12,614 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4188a405]]
2021-03-12 05:44:12,614 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828]
2021-03-12 05:44:12,748 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:12,751 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4188a405]
2021-03-12 05:44:12,751 [main:117] - GENERATED CALL = (Delegate().testDelegated).get(2144632478).isTitleCase()
2021-03-12 05:44:12,751 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e8d3a67]]
2021-03-12 05:44:12,751 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828]
2021-03-12 05:44:12,891 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:12,894 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e8d3a67]
2021-03-12 05:44:12,894 [main:117] - GENERATED CALL = (Delegate().testDelegated).get(1398766884).isHighSurrogate()
2021-03-12 05:44:12,894 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@480b00ad]]
2021-03-12 05:44:12,894 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828]
2021-03-12 05:44:13,027 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:13,030 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@480b00ad]
2021-03-12 05:44:13,030 [main:117] - GENERATED CALL = (Delegate().testDelegated).get(1186769817).isLowerCase()
2021-03-12 05:44:13,030 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50b073f7]]
2021-03-12 05:44:13,030 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828]
2021-03-12 05:44:13,164 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:13,167 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50b073f7]
2021-03-12 05:44:13,167 [main:117] - GENERATED CALL = (Delegate().testDelegated).get(-1674674038).isLetter()
2021-03-12 05:44:13,167 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a49731]]
2021-03-12 05:44:13,167 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828]
2021-03-12 05:44:13,299 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:13,302 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a49731]
2021-03-12 05:44:13,302 [main:117] - GENERATED CALL = (Delegate().testDelegated).get(1851606202).isLetterOrDigit()
2021-03-12 05:44:13,302 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@58bdc6dc], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2315f89f]]
2021-03-12 05:44:13,302 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@58bdc6dc]
2021-03-12 05:44:13,434 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:44:13,434 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2315f89f]
2021-03-12 05:44:13,566 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:44:13,569 [main:117] - GENERATED CALL = (Delegate().testDelegated).equals("ezhue").and(false)
2021-03-12 05:44:13,569 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@58bdc6dc], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@36823961]]
2021-03-12 05:44:13,569 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@58bdc6dc]
2021-03-12 05:44:13,700 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:44:13,700 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@36823961]
2021-03-12 05:44:13,831 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:44:13,834 [main:117] - GENERATED CALL = (Delegate().testDelegated).equals("rrsxr").xor(false)
2021-03-12 05:44:13,835 [main:113] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c08ce29]]
2021-03-12 05:44:13,835 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c08ce29]
2021-03-12 05:44:13,967 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:44:13,970 [main:117] - GENERATED CALL = (Delegate().testDelegated).startsWith(testClass.test, false)
2021-03-12 05:44:13,970 [main:114] - replacement of false of type Boolean is (Delegate().testDelegated).equals("ezhue").and(false)
2021-03-12 05:44:14,103 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:44:14,104 [main:66] - Compilation checking started
2021-03-12 05:44:14,711 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "mvntw"
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    val testClass = TestClass(Delegate())
var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                val testClass = TestClass(Delegate())
prope2 = (Delegate().test).replaceIndentByMargin(Delegate().testDelegated, Delegate().testDelegated)
            }

            override fun resume(value: String) {
                val testClass = TestClass(Delegate())
prope2 = (Delegate().testDelegated).padStart(-1738110066, '捩')
            }
        })
    } catch (e: Exception) {
        "Exception: ${(Delegate().test)?.drop(972117168)}"
    }

    if ((Delegate().test).equals("cuwwu").not()) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw NullPointerException()
        return prope2!!
    }

    if ("xdvsz" === "bgmte") throw RuntimeException("fail 3")
    return (Delegate().test).trimStart()
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2((Delegate().testDelegated).equals("ezhue").and(false)) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2((0.2530265828995427).toFloat().isNaN()) { "ftfoh"} != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return (Delegate().testDelegated).subSequence(1628402184, 2079639306).commonPrefixWith(StringBuilder(1753138229), true)
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val testClass = TestClass(Delegate())
x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error((Delegate().test).commonSuffixWith(StringBuilder("ezpgz"), true) + it + " has state-machine " +
                prope4.joinToString(separator = (testClass.test).prependIndent(Delegate().testDelegated))) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == (testClass).test.startsWith(Delegate().testDelegated, true) } ?: error(('ꢹ').compareTo('꒒').toString(1759945158))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (108973850455038261).toInt().ushr(-1877061143)
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if ((TestClass(Delegate()).foo).test.toInt() != 623167333) error((847889507595465944.toULong()).toUShort().toString(1477036975) + (testClass.test).length.takeHighestOneBit())
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((arrayListOf<Delegate>()).toArray().contentToString())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
Kla4().prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        val testClass = TestClass(Delegate())
throw NoSuchElementException()
    }
}


2021-03-12 05:44:14,714 [main:107] - replacing (it?.methodName?.startsWith(method) == (testClass).test.startsWith(Delegate().testDelegated, true), Boolean)
2021-03-12 05:44:14,714 [main:50] - replacing it?.methodName?.startsWith(method) == (testClass).test.startsWith(Delegate().testDelegated, true) Boolean
2021-03-12 05:44:14,714 [main:54] - Getting value of type Boolean
2021-03-12 05:44:14,847 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:44:14,850 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 05:44:14,850 [main:61] - GENERATED IS CALL =false
2021-03-12 05:44:15,367 [main:67] - randomType = MutableMap<Char, ArrayList<Kla3>>
2021-03-12 05:44:15,368 [main:106] - GETTING Boolean from String
2021-03-12 05:44:15,384 [main:113] - Case = [public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@122083a2]]
2021-03-12 05:44:15,385 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@122083a2]
2021-03-12 05:44:15,516 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:44:15,519 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:44:15,522 [main:117] - GENERATED CALL = (Delegate().testDelegated).all({a: Char -> true})
2021-03-12 05:44:15,523 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61b9d55c]]
2021-03-12 05:44:15,523 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9]
2021-03-12 05:44:15,654 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:44:15,657 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61b9d55c]
2021-03-12 05:44:15,789 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:44:15,789 [main:117] - GENERATED CALL = (Delegate().testDelegated).compareTo("fpylk").equals("vyvms")
2021-03-12 05:44:15,789 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d26ef96]]
2021-03-12 05:44:15,789 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:44:15,922 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:16,058 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:16,061 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d26ef96]
2021-03-12 05:44:16,062 [main:117] - GENERATED CALL = (Delegate().testDelegated).subSequence(792481709, -1945031999).isEmpty()
2021-03-12 05:44:16,062 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@387e5c44]]
2021-03-12 05:44:16,062 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828]
2021-03-12 05:44:16,193 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:16,196 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@387e5c44]
2021-03-12 05:44:16,197 [main:117] - GENERATED CALL = (Delegate().testDelegated).get(232135340).isSurrogate()
2021-03-12 05:44:16,197 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a69001]]
2021-03-12 05:44:16,197 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:44:16,328 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:16,463 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:16,466 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a69001]
2021-03-12 05:44:16,597 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:44:16,732 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:44:16,735 [main:117] - GENERATED CALL = (Delegate().testDelegated).subSequence(852061538, 877298891).contains('', false)
2021-03-12 05:44:16,735 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64f9fd44]]
2021-03-12 05:44:16,735 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64f9fd44]
2021-03-12 05:44:16,735 [main:117] - GENERATED CALL = (Delegate().testDelegated).toBoolean()
2021-03-12 05:44:16,736 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c2b191b]]
2021-03-12 05:44:16,736 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:44:16,867 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:17,003 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:17,006 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c2b191b]
2021-03-12 05:44:17,006 [main:117] - GENERATED CALL = (Delegate().testDelegated).subSequence(-144534492, 10758878).isBlank()
2021-03-12 05:44:17,006 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d26ef96]]
2021-03-12 05:44:17,006 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d26ef96]
2021-03-12 05:44:17,006 [main:117] - GENERATED CALL = (Delegate().testDelegated).isEmpty()
2021-03-12 05:44:17,006 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7cd1d584]]
2021-03-12 05:44:17,006 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828]
2021-03-12 05:44:17,138 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:17,141 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7cd1d584]
2021-03-12 05:44:17,142 [main:117] - GENERATED CALL = (Delegate().testDelegated).get(-2127762919).isISOControl()
2021-03-12 05:44:17,142 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@480b00ad]]
2021-03-12 05:44:17,142 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828]
2021-03-12 05:44:17,273 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:17,276 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@480b00ad]
2021-03-12 05:44:17,276 [main:117] - GENERATED CALL = (Delegate().testDelegated).get(1409135939).isLowerCase()
2021-03-12 05:44:17,276 [main:114] - replacement of it?.methodName?.startsWith(method) == (testClass).test.startsWith(Delegate().testDelegated, true) of type Boolean is true
2021-03-12 05:44:17,436 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-12 05:44:17,436 [main:66] - Compilation checking started
2021-03-12 05:44:18,036 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "mvntw"
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    val testClass = TestClass(Delegate())
var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                val testClass = TestClass(Delegate())
prope2 = (Delegate().test).replaceIndentByMargin(Delegate().testDelegated, Delegate().testDelegated)
            }

            override fun resume(value: String) {
                val testClass = TestClass(Delegate())
prope2 = (Delegate().testDelegated).padStart(-1738110066, '捩')
            }
        })
    } catch (e: Exception) {
        "Exception: ${(Delegate().test)?.drop(972117168)}"
    }

    if ((Delegate().test).equals("cuwwu").not()) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw NullPointerException()
        return prope2!!
    }

    if ("xdvsz" === "bgmte") throw RuntimeException("fail 3")
    return (Delegate().test).trimStart()
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2((Delegate().testDelegated).equals("ezhue").and(false)) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2((0.2530265828995427).toFloat().isNaN()) { "ftfoh"} != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return (Delegate().testDelegated).subSequence(1628402184, 2079639306).commonPrefixWith(StringBuilder(1753138229), true)
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val testClass = TestClass(Delegate())
x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error((Delegate().test).commonSuffixWith(StringBuilder("ezpgz"), true) + it + " has state-machine " +
                prope4.joinToString(separator = (testClass.test).prependIndent(Delegate().testDelegated))) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { true } ?: error(('ꢹ').compareTo('꒒').toString(1759945158))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (108973850455038261).toInt().ushr(-1877061143)
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if ((TestClass(Delegate()).foo).test.toInt() != 623167333) error((847889507595465944.toULong()).toUShort().toString(1477036975) + (testClass.test).length.takeHighestOneBit())
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((arrayListOf<Delegate>()).toArray().contentToString())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
Kla4().prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        val testClass = TestClass(Delegate())
throw NoSuchElementException()
    }
}


2021-03-12 05:44:18,039 [main:107] - replacing (prope2, String?)
2021-03-12 05:44:18,039 [main:50] - replacing prope2 String?
2021-03-12 05:44:18,039 [main:54] - Getting value of type String?
2021-03-12 05:44:18,170 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:44:18,174 [main:58] - GENERATED VALUE OF TYPE String? = "zdhmq"
2021-03-12 05:44:18,174 [main:61] - GENERATED IS CALL =false
2021-03-12 05:44:18,649 [main:67] - randomType = Collection<Function1<String, Boolean?>>
2021-03-12 05:44:18,650 [main:106] - GETTING String? from Test
2021-03-12 05:44:18,655 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@7ecb148]]
2021-03-12 05:44:18,655 [main:117] - GENERATED CALL = (TestClass(Delegate()).foo)?.test
2021-03-12 05:44:18,655 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@7ecb148], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c5dfc66]]
2021-03-12 05:44:18,655 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c5dfc66]
2021-03-12 05:44:18,655 [main:117] - GENERATED CALL = (TestClass(Delegate()).foo)?.test.toLowerCase()
2021-03-12 05:44:18,655 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@7ecb148], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@507ff28]]
2021-03-12 05:44:18,655 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@507ff28]
2021-03-12 05:44:18,787 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:44:18,793 [main:117] - GENERATED CALL = (TestClass(Delegate()).foo)?.test.removeSurrounding("nprdg")
2021-03-12 05:44:18,794 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@7ecb148], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1781657e]]
2021-03-12 05:44:18,794 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1781657e]
2021-03-12 05:44:18,794 [main:117] - GENERATED CALL = (TestClass(Delegate()).foo)?.test.toUpperCase()
2021-03-12 05:44:18,794 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@7ecb148], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52db7ff4]]
2021-03-12 05:44:18,794 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52db7ff4]
2021-03-12 05:44:18,925 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 05:44:19,064 [main:43] - GENERATING CALL OF fun <T> mutableSetOf(): Iterable<Int> = TODO()
2021-03-12 05:44:19,069 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableSetOf(): Iterable<Int> = TODO()
2021-03-12 05:44:19,215 [main:95] - GENERATED = mutableSetOf<Int>()
2021-03-12 05:44:19,215 [main:117] - GENERATED CALL = (TestClass(Delegate()).foo)?.test.slice(mutableSetOf<Int>())
2021-03-12 05:44:19,216 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@7ecb148], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b4a6183]]
2021-03-12 05:44:19,216 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b4a6183]
2021-03-12 05:44:19,346 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:19,480 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:44:19,483 [main:117] - GENERATED CALL = (TestClass(Delegate()).foo)?.test.padEnd(573529239, '싦')
2021-03-12 05:44:19,484 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@7ecb148], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@686a0794]]
2021-03-12 05:44:19,484 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@686a0794]
2021-03-12 05:44:19,484 [main:117] - GENERATED CALL = (TestClass(Delegate()).foo)?.test.trim()
2021-03-12 05:44:19,484 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@7ecb148], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@216e44f2]]
2021-03-12 05:44:19,484 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@216e44f2]
2021-03-12 05:44:19,484 [main:117] - GENERATED CALL = (TestClass(Delegate()).foo)?.test.uppercase()
2021-03-12 05:44:19,484 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@7ecb148], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48cb2ddd]]
2021-03-12 05:44:19,484 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48cb2ddd]
2021-03-12 05:44:19,484 [main:117] - GENERATED CALL = (TestClass(Delegate()).foo)?.test.decapitalize()
2021-03-12 05:44:19,484 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@7ecb148], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@744528ad]]
2021-03-12 05:44:19,484 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@744528ad]
2021-03-12 05:44:19,616 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:44:19,622 [main:117] - GENERATED CALL = (TestClass(Delegate()).foo)?.test.removePrefix("bszey")
2021-03-12 05:44:19,622 [main:114] - replacement of prope2 of type String? is (TestClass(Delegate()).foo)?.test.trim()
2021-03-12 05:44:19,752 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:44:19,752 [main:66] - Compilation checking started
2021-03-12 05:44:20,194 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "mvntw"
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    val testClass = TestClass(Delegate())
var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                val testClass = TestClass(Delegate())
(TestClass(Delegate()).foo)?.test.trim() = (Delegate().test).replaceIndentByMargin(Delegate().testDelegated, Delegate().testDelegated)
            }

            override fun resume(value: String) {
                val testClass = TestClass(Delegate())
prope2 = (Delegate().testDelegated).padStart(-1738110066, '捩')
            }
        })
    } catch (e: Exception) {
        "Exception: ${(Delegate().test)?.drop(972117168)}"
    }

    if ((Delegate().test).equals("cuwwu").not()) {
        if (prope3 !== COROUTINE_SUSPENDED) throw RuntimeException("fail 1")
        if (prope2 == null) throw NullPointerException()
        return prope2!!
    }

    if ("xdvsz" === "bgmte") throw RuntimeException("fail 3")
    return (Delegate().test).trimStart()
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2((Delegate().testDelegated).equals("ezhue").and(false)) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2((0.2530265828995427).toFloat().isNaN()) { "ftfoh"} != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return (Delegate().testDelegated).subSequence(1628402184, 2079639306).commonPrefixWith(StringBuilder(1753138229), true)
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val testClass = TestClass(Delegate())
x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error((Delegate().test).commonSuffixWith(StringBuilder("ezpgz"), true) + it + " has state-machine " +
                prope4.joinToString(separator = (testClass.test).prependIndent(Delegate().testDelegated))) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { true } ?: error(('ꢹ').compareTo('꒒').toString(1759945158))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (108973850455038261).toInt().ushr(-1877061143)
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if ((TestClass(Delegate()).foo).test.toInt() != 623167333) error((847889507595465944.toULong()).toUShort().toString(1477036975) + (testClass.test).length.takeHighestOneBit())
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((arrayListOf<Delegate>()).toArray().contentToString())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
Kla4().prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        val testClass = TestClass(Delegate())
throw NoSuchElementException()
    }
}


2021-03-12 05:44:20,197 [main:107] - replacing (COROUTINE_SUSPENDED, Any)
2021-03-12 05:44:20,197 [main:50] - replacing COROUTINE_SUSPENDED Any
2021-03-12 05:44:20,197 [main:54] - Getting value of type Any
2021-03-12 05:44:20,331 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:44:20,331 [main:58] - GENERATED VALUE OF TYPE Any = "oniaa"
2021-03-12 05:44:20,331 [main:61] - GENERATED IS CALL =false
2021-03-12 05:44:20,493 [main:67] - randomType = Delegate?
2021-03-12 05:44:20,634 [main:302] - generating value of type = Delegate false depth = 0
2021-03-12 05:44:20,637 [main:112] - generating klass Delegate text = class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}
2021-03-12 05:44:20,649 [main:106] - GETTING Any from String
2021-03-12 05:44:20,669 [main:114] - replacement of COROUTINE_SUSPENDED of type Any is "oniaa"
2021-03-12 05:44:20,800 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 05:44:20,800 [main:66] - Compilation checking started
2021-03-12 05:44:21,387 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "mvntw"
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    val testClass = TestClass(Delegate())
var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                val testClass = TestClass(Delegate())
prope2 = (Delegate().test).replaceIndentByMargin(Delegate().testDelegated, Delegate().testDelegated)
            }

            override fun resume(value: String) {
                val testClass = TestClass(Delegate())
prope2 = (Delegate().testDelegated).padStart(-1738110066, '捩')
            }
        })
    } catch (e: Exception) {
        "Exception: ${(Delegate().test)?.drop(972117168)}"
    }

    if ((Delegate().test).equals("cuwwu").not()) {
        if (prope3 !== "oniaa") throw RuntimeException("fail 1")
        if (prope2 == null) throw NullPointerException()
        return prope2!!
    }

    if ("xdvsz" === "bgmte") throw RuntimeException("fail 3")
    return (Delegate().test).trimStart()
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2((Delegate().testDelegated).equals("ezhue").and(false)) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2((0.2530265828995427).toFloat().isNaN()) { "ftfoh"} != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return (Delegate().testDelegated).subSequence(1628402184, 2079639306).commonPrefixWith(StringBuilder(1753138229), true)
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val testClass = TestClass(Delegate())
x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error((Delegate().test).commonSuffixWith(StringBuilder("ezpgz"), true) + it + " has state-machine " +
                prope4.joinToString(separator = (testClass.test).prependIndent(Delegate().testDelegated))) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { true } ?: error(('ꢹ').compareTo('꒒').toString(1759945158))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (108973850455038261).toInt().ushr(-1877061143)
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if ((TestClass(Delegate()).foo).test.toInt() != 623167333) error((847889507595465944.toULong()).toUShort().toString(1477036975) + (testClass.test).length.takeHighestOneBit())
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((arrayListOf<Delegate>()).toArray().contentToString())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
Kla4().prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        val testClass = TestClass(Delegate())
throw NoSuchElementException()
    }
}


2021-03-12 05:44:21,390 [main:107] - replacing (prope1, Kla4)
2021-03-12 05:44:21,390 [main:50] - replacing prope1 Kla4
2021-03-12 05:44:21,390 [main:54] - Getting value of type Kla4
2021-03-12 05:44:21,524 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 05:44:21,527 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (108973850455038261).toInt().ushr(-1877061143)
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if ((TestClass(Delegate()).foo).test.toInt() != 623167333) error((847889507595465944.toULong()).toUShort().toString(1477036975) + (testClass.test).length.takeHighestOneBit())
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((arrayListOf<Delegate>()).toArray().contentToString())
    }
}
2021-03-12 05:44:21,528 [main:58] - GENERATED VALUE OF TYPE Kla4 = Kla4()
2021-03-12 05:44:21,528 [main:61] - GENERATED IS CALL =true
2021-03-12 05:44:21,683 [main:67] - randomType = Kla5
2021-03-12 05:44:21,817 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 05:44:21,820 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
Kla4().prope7 = {
            prope1.prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        val testClass = TestClass(Delegate())
throw NoSuchElementException()
    }
}
2021-03-12 05:44:21,839 [main:106] - GETTING Kla4 from String
2021-03-12 05:44:21,856 [main:106] - GETTING Kla4 from String
2021-03-12 05:44:21,856 [main:106] - GETTING Kla4 from TestClass
2021-03-12 05:44:21,865 [main:106] - GETTING Kla4 from String
2021-03-12 05:44:21,866 [main:106] - GETTING Kla4 from String
2021-03-12 05:44:21,866 [main:106] - GETTING Kla4 from String
2021-03-12 05:44:21,867 [main:106] - GETTING Kla4 from Test
2021-03-12 05:44:21,871 [main:114] - replacement of prope1 of type Kla4 is Kla4()
2021-03-12 05:44:22,004 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:44:22,005 [main:66] - Compilation checking started
2021-03-12 05:44:22,598 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "mvntw"
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    val testClass = TestClass(Delegate())
var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                val testClass = TestClass(Delegate())
prope2 = (Delegate().test).replaceIndentByMargin(Delegate().testDelegated, Delegate().testDelegated)
            }

            override fun resume(value: String) {
                val testClass = TestClass(Delegate())
prope2 = (Delegate().testDelegated).padStart(-1738110066, '捩')
            }
        })
    } catch (e: Exception) {
        "Exception: ${(Delegate().test)?.drop(972117168)}"
    }

    if ((Delegate().test).equals("cuwwu").not()) {
        if (prope3 !== "oniaa") throw RuntimeException("fail 1")
        if (prope2 == null) throw NullPointerException()
        return prope2!!
    }

    if ("xdvsz" === "bgmte") throw RuntimeException("fail 3")
    return (Delegate().test).trimStart()
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2((Delegate().testDelegated).equals("ezhue").and(false)) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2((0.2530265828995427).toFloat().isNaN()) { "ftfoh"} != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return (Delegate().testDelegated).subSequence(1628402184, 2079639306).commonPrefixWith(StringBuilder(1753138229), true)
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val testClass = TestClass(Delegate())
x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error((Delegate().test).commonSuffixWith(StringBuilder("ezpgz"), true) + it + " has state-machine " +
                prope4.joinToString(separator = (testClass.test).prependIndent(Delegate().testDelegated))) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { true } ?: error(('ꢹ').compareTo('꒒').toString(1759945158))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (108973850455038261).toInt().ushr(-1877061143)
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if ((TestClass(Delegate()).foo).test.toInt() != 623167333) error((847889507595465944.toULong()).toUShort().toString(1477036975) + (testClass.test).length.takeHighestOneBit())
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((arrayListOf<Delegate>()).toArray().contentToString())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
Kla4().prope7 = {
            Kla4().prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        val testClass = TestClass(Delegate())
throw NoSuchElementException()
    }
}


2021-03-12 05:44:22,601 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 05:44:22,601 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 05:44:22,601 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 05:44:22,760 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 05:44:22,765 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 05:44:23,393 [main:67] - randomType = MutableMap<Kla5?, LinkedHashSet<ULong>>
2021-03-12 05:44:23,394 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 05:44:23,412 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 05:44:23,412 [main:106] - GETTING EmptyCoroutineContext from Test
2021-03-12 05:44:23,417 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 05:44:23,418 [main:106] - GETTING EmptyCoroutineContext from TestClass
2021-03-12 05:44:23,427 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 05:44:23,428 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 05:44:23,428 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 05:44:23,428 [main:107] - replacing (this.prope3, Any?)
2021-03-12 05:44:23,428 [main:50] - replacing this.prope3 Any?
2021-03-12 05:44:23,428 [main:54] - Getting value of type Any?
2021-03-12 05:44:23,558 [main:58] - GENERATED VALUE OF TYPE Any? = null
2021-03-12 05:44:23,558 [main:61] - GENERATED IS CALL =false
2021-03-12 05:44:23,727 [main:67] - randomType = Kla3?
2021-03-12 05:44:23,858 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 05:44:23,861 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error((Delegate().test).commonSuffixWith(StringBuilder("ezpgz"), true) + it + " has state-machine " +
                prope4.joinToString(separator = (testClass.test).prependIndent(Delegate().testDelegated))) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { true } ?: error(('ꢹ').compareTo('꒒').toString(1759945158))
    }
}
2021-03-12 05:44:23,867 [main:106] - GETTING Any? from String
2021-03-12 05:44:23,887 [main:106] - GETTING Any? from Test
2021-03-12 05:44:23,894 [main:106] - GETTING Any? from TestClass
2021-03-12 05:44:23,904 [main:106] - GETTING Any? from String
2021-03-12 05:44:23,905 [main:106] - GETTING Any? from String
2021-03-12 05:44:23,905 [main:106] - GETTING Any? from String
2021-03-12 05:44:23,906 [main:106] - GETTING Any? from String
2021-03-12 05:44:23,906 [main:114] - replacement of this.prope3 of type Any? is null
2021-03-12 05:44:24,042 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(NULL)
2021-03-12 05:44:24,042 [main:66] - Compilation checking started
2021-03-12 05:44:24,448 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "mvntw"
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    val testClass = TestClass(Delegate())
var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                val testClass = TestClass(Delegate())
prope2 = (Delegate().test).replaceIndentByMargin(Delegate().testDelegated, Delegate().testDelegated)
            }

            override fun resume(value: String) {
                val testClass = TestClass(Delegate())
prope2 = (Delegate().testDelegated).padStart(-1738110066, '捩')
            }
        })
    } catch (e: Exception) {
        "Exception: ${(Delegate().test)?.drop(972117168)}"
    }

    if ((Delegate().test).equals("cuwwu").not()) {
        if (prope3 !== "oniaa") throw RuntimeException("fail 1")
        if (prope2 == null) throw NullPointerException()
        return prope2!!
    }

    if ("xdvsz" === "bgmte") throw RuntimeException("fail 3")
    return (Delegate().test).trimStart()
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2((Delegate().testDelegated).equals("ezhue").and(false)) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2((0.2530265828995427).toFloat().isNaN()) { "ftfoh"} != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return (Delegate().testDelegated).subSequence(1628402184, 2079639306).commonPrefixWith(StringBuilder(1753138229), true)
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val testClass = TestClass(Delegate())
x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
null = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error((Delegate().test).commonSuffixWith(StringBuilder("ezpgz"), true) + it + " has state-machine " +
                prope4.joinToString(separator = (testClass.test).prependIndent(Delegate().testDelegated))) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { true } ?: error(('ꢹ').compareTo('꒒').toString(1759945158))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (108973850455038261).toInt().ushr(-1877061143)
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if ((TestClass(Delegate()).foo).test.toInt() != 623167333) error((847889507595465944.toULong()).toUShort().toString(1477036975) + (testClass.test).length.takeHighestOneBit())
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((arrayListOf<Delegate>()).toArray().contentToString())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
Kla4().prope7 = {
            Kla4().prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        val testClass = TestClass(Delegate())
throw NoSuchElementException()
    }
}


2021-03-12 05:44:24,450 [main:107] - replacing (prope2, String?)
2021-03-12 05:44:24,451 [main:50] - replacing prope2 String?
2021-03-12 05:44:24,451 [main:54] - Getting value of type String?
2021-03-12 05:44:24,581 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:44:24,584 [main:58] - GENERATED VALUE OF TYPE String? = "pwlkp"
2021-03-12 05:44:24,584 [main:61] - GENERATED IS CALL =false
2021-03-12 05:44:24,596 [main:67] - randomType = TestClass
2021-03-12 05:44:24,728 [main:302] - generating value of type = TestClass false depth = 0
2021-03-12 05:44:24,731 [main:112] - generating klass TestClass text = class TestClass(val foo: Test) : Test by foo
2021-03-12 05:44:24,862 [main:194] - Type params = []
2021-03-12 05:44:24,994 [main:302] - generating value of type = Test false depth = 2
2021-03-12 05:44:24,997 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 05:44:25,305 [main:302] - generating value of type = TestClass false depth = 4
2021-03-12 05:44:25,308 [main:112] - generating klass TestClass text = class TestClass(val foo: Test) : Test by foo
2021-03-12 05:44:25,439 [main:194] - Type params = []
2021-03-12 05:44:25,570 [main:302] - generating value of type = Test false depth = 6
2021-03-12 05:44:25,573 [main:112] - generating klass Test text = interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}
2021-03-12 05:44:25,849 [main:302] - generating value of type = Delegate false depth = 8
2021-03-12 05:44:25,852 [main:112] - generating klass Delegate text = class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}
2021-03-12 05:44:25,862 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f6268d9]
2021-03-12 05:44:25,993 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 05:44:25,996 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:44:25,999 [main:78] - Generated call from random type = (TestClass(TestClass(Delegate()))).test.filterIndexed({a: Int, b: Char -> true})
2021-03-12 05:44:25,999 [main:106] - GETTING String? from String
2021-03-12 05:44:26,016 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@98649f6]]
2021-03-12 05:44:26,016 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@649d9c9]
2021-03-12 05:44:26,016 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@98649f6]
2021-03-12 05:44:26,147 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:26,151 [main:117] - GENERATED CALL = (Delegate().testDelegated)?.compareTo(Delegate().testDelegated).toString(863849300)
2021-03-12 05:44:26,151 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b4a6183]]
2021-03-12 05:44:26,151 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b4a6183]
2021-03-12 05:44:26,282 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:26,418 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:44:26,422 [main:117] - GENERATED CALL = (Delegate().testDelegated)?.padEnd(-1088053581, '')
2021-03-12 05:44:26,422 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d29d4e7]]
2021-03-12 05:44:26,422 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d29d4e7]
2021-03-12 05:44:26,553 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:26,556 [main:117] - GENERATED CALL = (Delegate().testDelegated)?.dropLast(-1950097746)
2021-03-12 05:44:26,556 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16feeaa3]]
2021-03-12 05:44:26,556 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16feeaa3]
2021-03-12 05:44:26,688 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:44:26,691 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:44:26,694 [main:117] - GENERATED CALL = (Delegate().testDelegated)?.takeLastWhile({a: Char -> false})
2021-03-12 05:44:26,694 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a4536a8]]
2021-03-12 05:44:26,694 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a4536a8]
2021-03-12 05:44:26,826 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:44:26,961 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:44:27,095 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:44:27,099 [main:117] - GENERATED CALL = (Delegate().testDelegated)?.replaceFirst('', '', false)
2021-03-12 05:44:27,099 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b34f821]]
2021-03-12 05:44:27,099 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b34f821]
2021-03-12 05:44:27,229 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:44:27,232 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:44:27,235 [main:117] - GENERATED CALL = (Delegate().testDelegated)?.takeWhile({a: Char -> false})
2021-03-12 05:44:27,235 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d4ebc37]]
2021-03-12 05:44:27,235 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:44:27,365 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:27,498 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:27,501 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d4ebc37]
2021-03-12 05:44:27,632 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:27,796 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:27,800 [main:117] - GENERATED CALL = (Delegate().testDelegated)?.subSequence(1803506216, -539380044).substring(-1742686767, -1238314763)
2021-03-12 05:44:27,800 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@216e44f2]]
2021-03-12 05:44:27,800 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@216e44f2]
2021-03-12 05:44:27,800 [main:117] - GENERATED CALL = (Delegate().testDelegated)?.uppercase()
2021-03-12 05:44:27,800 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c993d19]]
2021-03-12 05:44:27,800 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c993d19]
2021-03-12 05:44:27,937 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:44:28,076 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:44:28,080 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:44:28,370 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:44:28,373 [main:95] - GENERATED = StringBuilder(-1289784633)
2021-03-12 05:44:28,503 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:44:28,506 [main:117] - GENERATED CALL = (Delegate().testDelegated)?.commonPrefixWith(StringBuilder(-1289784633), false)
2021-03-12 05:44:28,506 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dec78bf]]
2021-03-12 05:44:28,506 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dec78bf]
2021-03-12 05:44:28,638 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:44:28,774 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:44:28,907 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:44:28,911 [main:117] - GENERATED CALL = (Delegate().testDelegated)?.replaceBeforeLast('㉽', "udngu", "egqiq")
2021-03-12 05:44:28,911 [main:114] - replacement of prope2 of type String? is (TestClass(TestClass(Delegate()))).test.filterIndexed({a: Int, b: Char -> true})
2021-03-12 05:44:29,041 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:44:29,041 [main:66] - Compilation checking started
2021-03-12 05:44:29,667 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "mvntw"
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    val testClass = TestClass(Delegate())
var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                val testClass = TestClass(Delegate())
prope2 = (Delegate().test).replaceIndentByMargin(Delegate().testDelegated, Delegate().testDelegated)
            }

            override fun resume(value: String) {
                val testClass = TestClass(Delegate())
prope2 = (Delegate().testDelegated).padStart(-1738110066, '捩')
            }
        })
    } catch (e: Exception) {
        "Exception: ${(Delegate().test)?.drop(972117168)}"
    }

    if ((Delegate().test).equals("cuwwu").not()) {
        if (prope3 !== "oniaa") throw RuntimeException("fail 1")
        if (prope2 == null) throw NullPointerException()
        return (TestClass(TestClass(Delegate()))).test.filterIndexed({a: Int, b: Char -> true})!!
    }

    if ("xdvsz" === "bgmte") throw RuntimeException("fail 3")
    return (Delegate().test).trimStart()
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2((Delegate().testDelegated).equals("ezhue").and(false)) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if (fu2((0.2530265828995427).toFloat().isNaN()) { "ftfoh"} != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return (Delegate().testDelegated).subSequence(1628402184, 2079639306).commonPrefixWith(StringBuilder(1753138229), true)
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val testClass = TestClass(Delegate())
x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error((Delegate().test).commonSuffixWith(StringBuilder("ezpgz"), true) + it + " has state-machine " +
                prope4.joinToString(separator = (testClass.test).prependIndent(Delegate().testDelegated))) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { true } ?: error(('ꢹ').compareTo('꒒').toString(1759945158))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (108973850455038261).toInt().ushr(-1877061143)
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if ((TestClass(Delegate()).foo).test.toInt() != 623167333) error((847889507595465944.toULong()).toUShort().toString(1477036975) + (testClass.test).length.takeHighestOneBit())
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((arrayListOf<Delegate>()).toArray().contentToString())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
Kla4().prope7 = {
            Kla4().prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        val testClass = TestClass(Delegate())
throw NoSuchElementException()
    }
}


2021-03-12 05:44:29,669 [main:107] - replacing (fu2((0.2530265828995427).toFloat().isNaN()) { "ftfoh"}, String)
2021-03-12 05:44:29,669 [main:50] - replacing fu2((0.2530265828995427).toFloat().isNaN()) { "ftfoh"} String
2021-03-12 05:44:29,669 [main:54] - Getting value of type String
2021-03-12 05:44:29,807 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:44:29,810 [main:58] - GENERATED VALUE OF TYPE String = "ysysw"
2021-03-12 05:44:29,811 [main:61] - GENERATED IS CALL =false
2021-03-12 05:44:29,817 [main:67] - randomType = Long
2021-03-12 05:44:29,951 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:44:29,982 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@55f3c631]
2021-03-12 05:44:29,983 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57eaac89]
2021-03-12 05:44:30,116 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:30,120 [main:78] - Generated call from random type = (4945676783450369210).toShort().toString(-1154207243)
2021-03-12 05:44:30,120 [main:106] - GETTING String from TestClass
2021-03-12 05:44:30,130 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in TestClass[PropertyDescriptorImpl@1c0ce7c6], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2116c8a0]]
2021-03-12 05:44:30,130 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2116c8a0]
2021-03-12 05:44:30,268 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:44:30,403 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:44:30,563 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:44:30,566 [main:117] - GENERATED CALL = (testClass).test.replace('Տ', '諏', false)
2021-03-12 05:44:30,566 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in TestClass[PropertyDescriptorImpl@1c0ce7c6], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16feeaa3]]
2021-03-12 05:44:30,567 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16feeaa3]
2021-03-12 05:44:30,701 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:44:30,704 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:44:30,708 [main:117] - GENERATED CALL = (testClass).test.takeLastWhile({a: Char -> true})
2021-03-12 05:44:30,708 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in TestClass[PropertyDescriptorImpl@1c0ce7c6], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b803e32]]
2021-03-12 05:44:30,708 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5b803e32]
2021-03-12 05:44:30,841 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:44:30,844 [main:117] - GENERATED CALL = (testClass).test.trimMargin("okjes")
2021-03-12 05:44:30,844 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in TestClass[PropertyDescriptorImpl@1c0ce7c6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@216e44f2]]
2021-03-12 05:44:30,845 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@216e44f2]
2021-03-12 05:44:30,845 [main:117] - GENERATED CALL = (testClass).test.uppercase()
2021-03-12 05:44:30,845 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in TestClass[PropertyDescriptorImpl@1c0ce7c6], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e3fe21b]]
2021-03-12 05:44:30,845 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e3fe21b]
2021-03-12 05:44:30,845 [main:117] - GENERATED CALL = (testClass).test.capitalize()
2021-03-12 05:44:30,845 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in TestClass[PropertyDescriptorImpl@1c0ce7c6], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d29d4e7]]
2021-03-12 05:44:30,845 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d29d4e7]
2021-03-12 05:44:30,980 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:30,983 [main:117] - GENERATED CALL = (testClass).test.dropLast(733130583)
2021-03-12 05:44:30,983 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in TestClass[PropertyDescriptorImpl@1c0ce7c6], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d57cb87]]
2021-03-12 05:44:30,983 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d57cb87]
2021-03-12 05:44:30,983 [main:117] - GENERATED CALL = (testClass).test.trimIndent()
2021-03-12 05:44:30,983 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in TestClass[PropertyDescriptorImpl@1c0ce7c6], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7976d057]]
2021-03-12 05:44:30,983 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7976d057]
2021-03-12 05:44:31,120 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:44:31,256 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:44:31,259 [main:117] - GENERATED CALL = (testClass).test.replaceAfter('㢋', Delegate().test, "lmccp")
2021-03-12 05:44:31,259 [main:113] - Case = [@[ERROR : JvmDefault] public open val test: kotlin.String defined in TestClass[PropertyDescriptorImpl@1c0ce7c6]]
2021-03-12 05:44:31,259 [main:117] - GENERATED CALL = (testClass).test
2021-03-12 05:44:31,259 [main:113] - Case = [public final val foo: Test defined in TestClass[PropertyDescriptorImpl@6b019c31], @[ERROR : JvmDefault] public open val test: kotlin.String defined in Test[PropertyDescriptorImpl@ac4a260]]
2021-03-12 05:44:31,260 [main:117] - GENERATED CALL = (testClass).foo.test
2021-03-12 05:44:31,260 [main:114] - replacement of fu2((0.2530265828995427).toFloat().isNaN()) { "ftfoh"} of type String is (testClass).test.dropLast(733130583)
2021-03-12 05:44:31,391 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:44:31,391 [main:66] - Compilation checking started
2021-03-12 05:44:31,971 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "mvntw"
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    val testClass = TestClass(Delegate())
var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                val testClass = TestClass(Delegate())
prope2 = (Delegate().test).replaceIndentByMargin(Delegate().testDelegated, Delegate().testDelegated)
            }

            override fun resume(value: String) {
                val testClass = TestClass(Delegate())
prope2 = (Delegate().testDelegated).padStart(-1738110066, '捩')
            }
        })
    } catch (e: Exception) {
        "Exception: ${(Delegate().test)?.drop(972117168)}"
    }

    if ((Delegate().test).equals("cuwwu").not()) {
        if (prope3 !== "oniaa") throw RuntimeException("fail 1")
        if (prope2 == null) throw NullPointerException()
        return (TestClass(TestClass(Delegate()))).test.filterIndexed({a: Int, b: Char -> true})!!
    }

    if ("xdvsz" === "bgmte") throw RuntimeException("fail 3")
    return (Delegate().test).trimStart()
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2((Delegate().testDelegated).equals("ezhue").and(false)) { "OK" } != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if ((testClass).test.dropLast(733130583) != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return (Delegate().testDelegated).subSequence(1628402184, 2079639306).commonPrefixWith(StringBuilder(1753138229), true)
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val testClass = TestClass(Delegate())
x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error((Delegate().test).commonSuffixWith(StringBuilder("ezpgz"), true) + it + " has state-machine " +
                prope4.joinToString(separator = (testClass.test).prependIndent(Delegate().testDelegated))) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { true } ?: error(('ꢹ').compareTo('꒒').toString(1759945158))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (108973850455038261).toInt().ushr(-1877061143)
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if ((TestClass(Delegate()).foo).test.toInt() != 623167333) error((847889507595465944.toULong()).toUShort().toString(1477036975) + (testClass.test).length.takeHighestOneBit())
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((arrayListOf<Delegate>()).toArray().contentToString())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
Kla4().prope7 = {
            Kla4().prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        val testClass = TestClass(Delegate())
throw NoSuchElementException()
    }
}


2021-03-12 05:44:31,974 [main:107] - replacing ({ "OK" }, SuspendFunction0<String>)
2021-03-12 05:44:31,974 [main:50] - replacing { "OK" } SuspendFunction0<String>
2021-03-12 05:44:31,974 [main:54] - Getting value of type SuspendFunction0<String>
2021-03-12 05:44:32,109 [main:302] - generating value of type = SuspendFunction0<String> false depth = 0
2021-03-12 05:44:32,112 [main:302] - generating value of type = String true depth = 1
2021-03-12 05:44:32,115 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<String> = { "hyoad"}
2021-03-12 05:44:32,115 [main:61] - GENERATED IS CALL =false
2021-03-12 05:44:32,127 [main:67] - randomType = Kla1
2021-03-12 05:44:32,260 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 05:44:32,263 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 05:44:32,278 [main:106] - GETTING SuspendFunction0<String> from Test
2021-03-12 05:44:32,283 [main:106] - GETTING SuspendFunction0<String> from String
2021-03-12 05:44:32,299 [main:106] - GETTING SuspendFunction0<String> from TestClass
2021-03-12 05:44:32,308 [main:106] - GETTING SuspendFunction0<String> from String
2021-03-12 05:44:32,309 [main:106] - GETTING SuspendFunction0<String> from String
2021-03-12 05:44:32,310 [main:106] - GETTING SuspendFunction0<String> from String
2021-03-12 05:44:32,311 [main:106] - GETTING SuspendFunction0<String> from String
2021-03-12 05:44:32,311 [main:114] - replacement of { "OK" } of type SuspendFunction0<String> is { "hyoad"}
2021-03-12 05:44:32,443 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 05:44:32,444 [main:66] - Compilation checking started
2021-03-12 05:44:33,048 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "mvntw"
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    val testClass = TestClass(Delegate())
var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                val testClass = TestClass(Delegate())
prope2 = (Delegate().test).replaceIndentByMargin(Delegate().testDelegated, Delegate().testDelegated)
            }

            override fun resume(value: String) {
                val testClass = TestClass(Delegate())
prope2 = (Delegate().testDelegated).padStart(-1738110066, '捩')
            }
        })
    } catch (e: Exception) {
        "Exception: ${(Delegate().test)?.drop(972117168)}"
    }

    if ((Delegate().test).equals("cuwwu").not()) {
        if (prope3 !== "oniaa") throw RuntimeException("fail 1")
        if (prope2 == null) throw NullPointerException()
        return (TestClass(TestClass(Delegate()))).test.filterIndexed({a: Int, b: Char -> true})!!
    }

    if ("xdvsz" === "bgmte") throw RuntimeException("fail 3")
    return (Delegate().test).trimStart()
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2((Delegate().testDelegated).equals("ezhue").and(false)) { "hyoad"} != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if ((testClass).test.dropLast(733130583) != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return (Delegate().testDelegated).subSequence(1628402184, 2079639306).commonPrefixWith(StringBuilder(1753138229), true)
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val testClass = TestClass(Delegate())
x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error((Delegate().test).commonSuffixWith(StringBuilder("ezpgz"), true) + it + " has state-machine " +
                prope4.joinToString(separator = (testClass.test).prependIndent(Delegate().testDelegated))) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { true } ?: error(('ꢹ').compareTo('꒒').toString(1759945158))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (108973850455038261).toInt().ushr(-1877061143)
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if ((TestClass(Delegate()).foo).test.toInt() != 623167333) error((847889507595465944.toULong()).toUShort().toString(1477036975) + (testClass.test).length.takeHighestOneBit())
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((arrayListOf<Delegate>()).toArray().contentToString())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
Kla4().prope7 = {
            Kla4().prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        val testClass = TestClass(Delegate())
throw NoSuchElementException()
    }
}


2021-03-12 05:44:33,051 [main:107] - replacing (it?.methodName?.startsWith(method) == true, Boolean)
2021-03-12 05:44:33,051 [main:50] - replacing it?.methodName?.startsWith(method) == true Boolean
2021-03-12 05:44:33,051 [main:54] - Getting value of type Boolean
2021-03-12 05:44:33,187 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:44:33,190 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 05:44:33,191 [main:61] - GENERATED IS CALL =false
2021-03-12 05:44:33,203 [main:67] - randomType = Kla1
2021-03-12 05:44:33,359 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 05:44:33,362 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 05:44:33,376 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@41c9071c]
2021-03-12 05:44:33,518 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:44:33,518 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@75472842]
2021-03-12 05:44:33,518 [main:78] - Generated call from random type = (Kla1()).equals("arnjd").not()
2021-03-12 05:44:33,519 [main:106] - GETTING Boolean from String
2021-03-12 05:44:33,536 [main:113] - Case = [public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@122083a2]]
2021-03-12 05:44:33,536 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@122083a2]
2021-03-12 05:44:33,669 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:44:33,672 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:44:33,675 [main:117] - GENERATED CALL = (Delegate().test).all({a: Char -> false})
2021-03-12 05:44:33,675 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@118d964d]]
2021-03-12 05:44:33,675 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@118d964d]
2021-03-12 05:44:33,675 [main:117] - GENERATED CALL = (Delegate().test).isNotEmpty()
2021-03-12 05:44:33,675 [main:113] - Case = [public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c2b191b]]
2021-03-12 05:44:33,675 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c2b191b]
2021-03-12 05:44:33,675 [main:117] - GENERATED CALL = (Delegate().test).isBlank()
2021-03-12 05:44:33,675 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64f9fd44]]
2021-03-12 05:44:33,675 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64f9fd44]
2021-03-12 05:44:33,675 [main:117] - GENERATED CALL = (Delegate().test).toBoolean()
2021-03-12 05:44:33,676 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3479d3b6]]
2021-03-12 05:44:33,676 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:44:33,809 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:33,944 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:33,947 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3479d3b6]
2021-03-12 05:44:34,081 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 05:44:34,220 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 05:44:34,224 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 05:44:34,516 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:44:34,519 [main:95] - GENERATED = Regex("jzlns")
2021-03-12 05:44:34,520 [main:117] - GENERATED CALL = (Delegate().test).subSequence(-708032347, 770684785).matches(Regex("jzlns"))
2021-03-12 05:44:34,520 [main:113] - Case = [public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a69001]]
2021-03-12 05:44:34,520 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a69001]
2021-03-12 05:44:34,652 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:44:34,787 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:44:34,790 [main:117] - GENERATED CALL = (Delegate().test).contains('䂁', false)
2021-03-12 05:44:34,790 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c513883]]
2021-03-12 05:44:34,790 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4c01cb27]
2021-03-12 05:44:34,922 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:35,057 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:35,060 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c513883]
2021-03-12 05:44:35,061 [main:117] - GENERATED CALL = (Delegate().test).subSequence(-1173967799, 125267798).any()
2021-03-12 05:44:35,061 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@58bdc6dc], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@75472842]]
2021-03-12 05:44:35,061 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@58bdc6dc]
2021-03-12 05:44:35,193 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:44:35,193 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@75472842]
2021-03-12 05:44:35,193 [main:117] - GENERATED CALL = (Delegate().test).equals("jgrjc").not()
2021-03-12 05:44:35,193 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ae3496c]]
2021-03-12 05:44:35,193 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2361f828]
2021-03-12 05:44:35,329 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:44:35,332 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ae3496c]
2021-03-12 05:44:35,332 [main:117] - GENERATED CALL = (Delegate().test).get(188985202).isDigit()
2021-03-12 05:44:35,332 [main:113] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c08ce29]]
2021-03-12 05:44:35,333 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c08ce29]
2021-03-12 05:44:35,469 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:44:35,473 [main:117] - GENERATED CALL = (Delegate().test).startsWith(Delegate().test, true)
2021-03-12 05:44:35,473 [main:114] - replacement of it?.methodName?.startsWith(method) == true of type Boolean is (Delegate().test).equals("jgrjc").not()
2021-03-12 05:44:35,605 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:44:35,605 [main:66] - Compilation checking started
2021-03-12 05:44:36,217 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "mvntw"
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    val testClass = TestClass(Delegate())
var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                val testClass = TestClass(Delegate())
prope2 = (Delegate().test).replaceIndentByMargin(Delegate().testDelegated, Delegate().testDelegated)
            }

            override fun resume(value: String) {
                val testClass = TestClass(Delegate())
prope2 = (Delegate().testDelegated).padStart(-1738110066, '捩')
            }
        })
    } catch (e: Exception) {
        "Exception: ${(Delegate().test)?.drop(972117168)}"
    }

    if ((Delegate().test).equals("cuwwu").not()) {
        if (prope3 !== "oniaa") throw RuntimeException("fail 1")
        if (prope2 == null) throw NullPointerException()
        return (TestClass(TestClass(Delegate()))).test.filterIndexed({a: Int, b: Char -> true})!!
    }

    if ("xdvsz" === "bgmte") throw RuntimeException("fail 3")
    return (Delegate().test).trimStart()
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2((Delegate().testDelegated).equals("ezhue").and(false)) { "hyoad"} != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if ((testClass).test.dropLast(733130583) != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return (Delegate().testDelegated).subSequence(1628402184, 2079639306).commonPrefixWith(StringBuilder(1753138229), true)
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val testClass = TestClass(Delegate())
x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { (Delegate().test).equals("jgrjc").not() }?.let { error((Delegate().test).commonSuffixWith(StringBuilder("ezpgz"), true) + it + " has state-machine " +
                prope4.joinToString(separator = (testClass.test).prependIndent(Delegate().testDelegated))) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { true } ?: error(('ꢹ').compareTo('꒒').toString(1759945158))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (108973850455038261).toInt().ushr(-1877061143)
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if ((TestClass(Delegate()).foo).test.toInt() != 623167333) error((847889507595465944.toULong()).toUShort().toString(1477036975) + (testClass.test).length.takeHighestOneBit())
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((arrayListOf<Delegate>()).toArray().contentToString())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
Kla4().prope7 = {
            Kla4().prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        val testClass = TestClass(Delegate())
throw NoSuchElementException()
    }
}


2021-03-12 05:44:36,219 [main:107] - replacing (prope7, Function0<Unit>)
2021-03-12 05:44:36,219 [main:50] - replacing prope7 Function0<Unit>
2021-03-12 05:44:36,219 [main:54] - Getting value of type Function0<Unit>
2021-03-12 05:44:36,353 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 05:44:36,356 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:44:36,500 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:44:36,505 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:44:36,802 [main:302] - generating value of type = Any false depth = 4
2021-03-12 05:44:36,803 [main:95] - GENERATED = print("qnhpi")
2021-03-12 05:44:36,803 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { print("qnhpi")}
2021-03-12 05:44:36,803 [main:61] - GENERATED IS CALL =false
2021-03-12 05:44:37,283 [main:67] - randomType = Function2<String, Kla5, Float>
2021-03-12 05:44:37,285 [main:106] - GETTING Function0<Unit> from String
2021-03-12 05:44:37,307 [main:106] - GETTING Function0<Unit> from String
2021-03-12 05:44:37,308 [main:106] - GETTING Function0<Unit> from String
2021-03-12 05:44:37,309 [main:106] - GETTING Function0<Unit> from String
2021-03-12 05:44:37,309 [main:106] - GETTING Function0<Unit> from TestClass
2021-03-12 05:44:37,319 [main:106] - GETTING Function0<Unit> from String
2021-03-12 05:44:37,320 [main:106] - GETTING Function0<Unit> from Test
2021-03-12 05:44:37,325 [main:114] - replacement of prope7 of type Function0<Unit> is { print("qnhpi")}
2021-03-12 05:44:37,457 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 05:44:37,457 [main:66] - Compilation checking started
2021-03-12 05:44:37,865 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "mvntw"
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    val testClass = TestClass(Delegate())
var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                val testClass = TestClass(Delegate())
prope2 = (Delegate().test).replaceIndentByMargin(Delegate().testDelegated, Delegate().testDelegated)
            }

            override fun resume(value: String) {
                val testClass = TestClass(Delegate())
prope2 = (Delegate().testDelegated).padStart(-1738110066, '捩')
            }
        })
    } catch (e: Exception) {
        "Exception: ${(Delegate().test)?.drop(972117168)}"
    }

    if ((Delegate().test).equals("cuwwu").not()) {
        if (prope3 !== "oniaa") throw RuntimeException("fail 1")
        if (prope2 == null) throw NullPointerException()
        return (TestClass(TestClass(Delegate()))).test.filterIndexed({a: Int, b: Char -> true})!!
    }

    if ("xdvsz" === "bgmte") throw RuntimeException("fail 3")
    return (Delegate().test).trimStart()
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2((Delegate().testDelegated).equals("ezhue").and(false)) { "hyoad"} != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if ((testClass).test.dropLast(733130583) != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return (Delegate().testDelegated).subSequence(1628402184, 2079639306).commonPrefixWith(StringBuilder(1753138229), true)
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val testClass = TestClass(Delegate())
x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { (Delegate().test).equals("jgrjc").not() }?.let { error((Delegate().test).commonSuffixWith(StringBuilder("ezpgz"), true) + it + " has state-machine " +
                prope4.joinToString(separator = (testClass.test).prependIndent(Delegate().testDelegated))) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { true } ?: error(('ꢹ').compareTo('꒒').toString(1759945158))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (108973850455038261).toInt().ushr(-1877061143)
        { print("qnhpi")} = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if ((TestClass(Delegate()).foo).test.toInt() != 623167333) error((847889507595465944.toULong()).toUShort().toString(1477036975) + (testClass.test).length.takeHighestOneBit())
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((arrayListOf<Delegate>()).toArray().contentToString())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
Kla4().prope7 = {
            Kla4().prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        val testClass = TestClass(Delegate())
throw NoSuchElementException()
    }
}


2021-03-12 05:44:37,868 [main:107] - replacing (getOrThrow(), Ty0)
2021-03-12 05:44:37,868 [main:50] - replacing getOrThrow() Ty0
2021-03-12 05:44:37,868 [main:54] - Getting value of type Ty0
2021-03-12 05:44:38,005 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 05:44:38,011 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 05:44:38,017 [main:67] - randomType = Boolean
2021-03-12 05:44:38,150 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:44:38,163 [main:106] - GETTING Ty0 from String
2021-03-12 05:44:38,179 [main:106] - GETTING Ty0 from String
2021-03-12 05:44:38,180 [main:106] - GETTING Ty0 from TestClass
2021-03-12 05:44:38,188 [main:106] - GETTING Ty0 from Test
2021-03-12 05:44:38,193 [main:106] - GETTING Ty0 from String
2021-03-12 05:44:38,193 [main:106] - GETTING Ty0 from String
2021-03-12 05:44:38,194 [main:106] - GETTING Ty0 from String
2021-03-12 05:44:38,194 [main:111] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-12 05:44:38,194 [main:107] - replacing (this, Kla1)
2021-03-12 05:44:38,194 [main:50] - replacing this Kla1
2021-03-12 05:44:38,194 [main:54] - Getting value of type Kla1
2021-03-12 05:44:38,327 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 05:44:38,330 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
this.prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 05:44:38,330 [main:58] - GENERATED VALUE OF TYPE Kla1 = Kla1()
2021-03-12 05:44:38,330 [main:61] - GENERATED IS CALL =true
2021-03-12 05:44:38,337 [main:67] - randomType = Long
2021-03-12 05:44:38,469 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:44:38,501 [main:106] - GETTING Kla1 from String
2021-03-12 05:44:38,517 [main:106] - GETTING Kla1 from TestClass
2021-03-12 05:44:38,526 [main:106] - GETTING Kla1 from String
2021-03-12 05:44:38,526 [main:106] - GETTING Kla1 from String
2021-03-12 05:44:38,527 [main:106] - GETTING Kla1 from Test
2021-03-12 05:44:38,531 [main:106] - GETTING Kla1 from String
2021-03-12 05:44:38,532 [main:106] - GETTING Kla1 from String
2021-03-12 05:44:38,532 [main:114] - replacement of this of type Kla1 is Kla1()
2021-03-12 05:44:38,666 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:44:38,667 [main:66] - Compilation checking started
2021-03-12 05:44:39,277 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Test {
    @JvmDefault
    val test: String
        get() = "O"

    val testDelegated: String
        get() = "fail"

}

class Delegate : Test {
    override val test: String
        get() = "fail"

    override val testDelegated: String
        get() = "K"
}

class TestClass(val foo: Test) : Test by foo

fun box(): String {
    val testClass = TestClass(Delegate())
    return testClass.test + testClass.testDelegated
}

suspend fun fu0(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    "mvntw"
}

suspend fun fu1(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu2(shouldSuspend: Boolean, c: suspend () -> String): String {
    val testClass = TestClass(Delegate())
var prope2: String? = null

    val prope3 = try {
        c.startCoroutineUninterceptedOrReturn(object: Kla2<String>() {
            override val context: CoroutineContext
                get() =  EmptyCoroutineContext

            override fun resumeWithException(exception: Throwable) {
                val testClass = TestClass(Delegate())
prope2 = (Delegate().test).replaceIndentByMargin(Delegate().testDelegated, Delegate().testDelegated)
            }

            override fun resume(value: String) {
                val testClass = TestClass(Delegate())
prope2 = (Delegate().testDelegated).padStart(-1738110066, '捩')
            }
        })
    } catch (e: Exception) {
        "Exception: ${(Delegate().test)?.drop(972117168)}"
    }

    if ((Delegate().test).equals("cuwwu").not()) {
        if (prope3 !== "oniaa") throw RuntimeException("fail 1")
        if (prope2 == null) throw NullPointerException()
        return (TestClass(TestClass(Delegate()))).test.filterIndexed({a: Int, b: Char -> true})!!
    }

    if ("xdvsz" === "bgmte") throw RuntimeException("fail 3")
    return (Delegate().test).trimStart()
}

fun box335(): String {
    val testClass = TestClass(Delegate())
if (fu2((Delegate().testDelegated).equals("ezhue").and(false)) { "hyoad"} != "OK") return "fail 4"
    if (fu2(true) { fu0() } != "OK") return "fail 5"

    if ((testClass).test.dropLast(733130583) != "Exception: OK") return "fail 6"
    if (fu2(true) { fu1() } != "Exception: OK") return "fail 7"

    return (Delegate().testDelegated).subSequence(1628402184, 2079639306).commonPrefixWith(StringBuilder(1753138229), true)
}

fun <Ty0> fu3(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val testClass = TestClass(Delegate())
x(prope3.getOrThrow())
    }
}

fun fu4(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
(testClass.test)?.subSequence(805434057, 1446916003).forEach({a: Char -> println()})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
"unexd"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val testClass = TestClass(Delegate())
Kla1().prope3 = runCatching<Any?>({ "fbvtl"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            resumeWithException(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val testClass = TestClass(Delegate())
if (c !is CoroutineStackFrame) error("Continuation " + c + (Delegate().testDelegated).dropWhile({a: Char -> false}))
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { (Delegate().test).equals("jgrjc").not() }?.let { error((Delegate().test).commonSuffixWith(StringBuilder("ezpgz"), true) + it + " has state-machine " +
                prope4.joinToString(separator = (testClass.test).prependIndent(Delegate().testDelegated))) }
    }

    fun fu9(method: String) {
        val testClass = TestClass(Delegate())
prope4.find { true } ?: error(('ꢹ').compareTo('꒒').toString(1759945158))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        val testClass = TestClass(Delegate())
prope5 = (Delegate().test).compareTo(Delegate().test).rotateRight(-1417672739)
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (108973850455038261).toInt().ushr(-1877061143)
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val testClass = TestClass(Delegate())
for (i in (1552405914446092582.toULong()).toByte().rangeTo(72)) {
            if ((TestClass(Delegate()).foo).test.toInt() != 623167333) error((847889507595465944.toULong()).toUShort().toString(1477036975) + (testClass.test).length.takeHighestOneBit())
            prope7()
        }
        if (prope5 != (testClass.test).compareTo("fdrtb").takeHighestOneBit())
            error((testClass).testDelegated + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error((arrayListOf<Delegate>()).toArray().contentToString())
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val testClass = TestClass(Delegate())
Kla4().prope7 = {
            Kla4().prope6 = false
        }
    }

    override fun resumeWithException(exception: Throwable) {
        val testClass = TestClass(Delegate())
throw NoSuchElementException()
    }
}


2021-03-12 05:44:39,279 [main:107] - replacing (RuntimeException("fail 1"), RuntimeException)
2021-03-12 05:44:39,280 [main:50] - replacing RuntimeException("fail 1") RuntimeException
2021-03-12 05:44:39,280 [main:54] - Getting value of type RuntimeException
