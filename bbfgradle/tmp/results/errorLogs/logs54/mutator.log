2021-03-12 00:25:19,570 [main:66] - Compilation checking started
2021-03-12 00:25:21,077 [main:50] - replacing message: String String
2021-03-12 00:25:21,077 [main:54] - Getting value of type String
2021-03-12 00:25:21,268 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:25:21,273 [main:58] - GENERATED VALUE OF TYPE String = "ljnjw"
2021-03-12 00:25:21,274 [main:61] - GENERATED IS CALL =false
2021-03-12 00:25:21,898 [main:67] - randomType = Boolean
2021-03-12 00:25:22,069 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:25:22,112 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@25ab7132]
2021-03-12 00:25:22,263 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:25:22,266 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@439e67cf]
2021-03-12 00:25:22,405 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:22,406 [main:78] - Generated call from random type = (true).compareTo(false).toString(-877077230)
2021-03-12 00:25:22,407 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 00:25:22,408 [main:66] - Compilation checking started
2021-03-12 00:25:22,975 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String = (true).compareTo(false).toString(-877077230), value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}
2021-03-12 00:25:22,975 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:22,976 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 00:25:22,976 [main:66] - Compilation checking started
2021-03-12 00:25:23,588 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String = (true).compareTo(false).toString(-877077230), value: Int = -740302438) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}
2021-03-12 00:25:24,086 [main:43] - GENERATING CALL OF fun logged(message: String, value: Int) =
    value.also { log.append(message) }
2021-03-12 00:25:24,086 [main:61] - WITHOUT TYPE PARAMS = fun logged(message: String, value: Int) =
    value.also { log.append(message) }
2021-03-12 00:25:24,254 [main:302] - generating value of type = String true depth = 1
2021-03-12 00:25:24,254 [main:302] - generating value of type = Int true depth = 1
2021-03-12 00:25:24,255 [main:95] - GENERATED = logged("qgqal", -1803481113)
2021-03-12 00:25:24,381 [main:45] - Trying to change 30 nodes
2021-03-12 00:25:24,384 [main:53] - replacing (log.toString(), String)
2021-03-12 00:25:24,385 [main:50] - replacing log.toString() String
2021-03-12 00:25:24,385 [main:54] - Getting value of type String
2021-03-12 00:25:24,533 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:25:24,534 [main:58] - GENERATED VALUE OF TYPE String = "nazkv"
2021-03-12 00:25:24,534 [main:61] - GENERATED IS CALL =false
2021-03-12 00:25:24,795 [main:67] - randomType = UInt?
2021-03-12 00:25:24,919 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 00:25:25,048 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@4aa11055]
2021-03-12 00:25:25,049 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ca73ab2]
2021-03-12 00:25:25,050 [main:78] - Generated call from random type = (181888912.toUInt())?.toLong().toString(sum)
2021-03-12 00:25:25,059 [main:106] - GETTING String from StringBuilder
2021-03-12 00:25:25,111 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@eecb80d], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37310e63]]
2021-03-12 00:25:25,111 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@eecb80d]
2021-03-12 00:25:25,112 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37310e63]
2021-03-12 00:25:25,211 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:25:25,333 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:25:25,451 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:25:25,454 [main:117] - GENERATED CALL = (log).substring(logged("qgqal", -1803481113)).replaceAfter('장', "ommuc", "htkuq")
2021-03-12 00:25:25,454 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@eecb80d]]
2021-03-12 00:25:25,454 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@eecb80d]
2021-03-12 00:25:25,455 [main:117] - GENERATED CALL = (log).substring(sum)
2021-03-12 00:25:25,455 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@eecb80d], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14278bb5]]
2021-03-12 00:25:25,455 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@eecb80d]
2021-03-12 00:25:25,564 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:25,565 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14278bb5]
2021-03-12 00:25:25,692 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:25,800 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:25,802 [main:117] - GENERATED CALL = (log).substring(-1262974358).removeRange(614308797, 1040513657)
2021-03-12 00:25:25,802 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@5c9fa9f1], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f1a4f8]]
2021-03-12 00:25:25,803 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@5c9fa9f1]
2021-03-12 00:25:25,913 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:26,032 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:26,034 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f1a4f8]
2021-03-12 00:25:26,035 [main:117] - GENERATED CALL = (log).subSequence(983056911, -42944473).substring(sum, sum)
2021-03-12 00:25:26,035 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@eecb80d], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1131a7db]]
2021-03-12 00:25:26,035 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@eecb80d]
2021-03-12 00:25:26,036 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1131a7db]
2021-03-12 00:25:26,038 [main:117] - GENERATED CALL = (log).substring(logged("qgqal", -1803481113)).take(sum)
2021-03-12 00:25:26,038 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@eecb80d], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@588dcc2d]]
2021-03-12 00:25:26,038 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@eecb80d]
2021-03-12 00:25:26,039 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@588dcc2d]
2021-03-12 00:25:26,152 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:25:26,261 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:25:26,264 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:25:26,529 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:25:26,530 [main:95] - GENERATED = StringBuilder("tvcib")
2021-03-12 00:25:26,531 [main:117] - GENERATED CALL = (log).substring(sum).removePrefix(StringBuilder("tvcib"))
2021-03-12 00:25:26,531 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@eecb80d], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62fb4905]]
2021-03-12 00:25:26,531 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@eecb80d]
2021-03-12 00:25:26,628 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:26,629 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62fb4905]
2021-03-12 00:25:26,726 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:25:26,837 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:25:26,838 [main:117] - GENERATED CALL = (log).substring(-1225458068).substringBeforeLast('朗', "jmwka")
2021-03-12 00:25:26,840 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@eecb80d], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ef8b89d]]
2021-03-12 00:25:26,840 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@eecb80d]
2021-03-12 00:25:26,840 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ef8b89d]
2021-03-12 00:25:26,936 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:25:26,937 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:25:26,938 [main:117] - GENERATED CALL = (log).substring(logged("qgqal", -1803481113)).dropWhile({a: Char -> false})
2021-03-12 00:25:26,938 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@1526cb86], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@483ecce2]]
2021-03-12 00:25:26,938 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@1526cb86]
2021-03-12 00:25:26,939 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@483ecce2]
2021-03-12 00:25:26,939 [main:117] - GENERATED CALL = (log).get(logged("qgqal", -1803481113)).titlecase()
2021-03-12 00:25:26,940 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@eecb80d], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f3c022f]]
2021-03-12 00:25:26,940 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@eecb80d]
2021-03-12 00:25:26,940 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f3c022f]
2021-03-12 00:25:26,941 [main:117] - GENERATED CALL = (log).substring(logged("qgqal", -1803481113)).trimIndent()
2021-03-12 00:25:26,941 [main:61] - replacement of log.toString() of type String is (log).substring(logged("qgqal", -1803481113)).take(sum)
2021-03-12 00:25:27,031 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:25:27,032 [main:66] - Compilation checking started
2021-03-12 00:25:27,481 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", (log).substring(logged("qgqal", -1803481113)).take(sum))

    return "OK"
}


2021-03-12 00:25:27,484 [main:53] - replacing (sum, Int)
2021-03-12 00:25:27,484 [main:50] - replacing sum Int
2021-03-12 00:25:27,484 [main:54] - Getting value of type Int
2021-03-12 00:25:27,615 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:27,616 [main:58] - GENERATED VALUE OF TYPE Int = 334028416
2021-03-12 00:25:27,616 [main:61] - GENERATED IS CALL =false
2021-03-12 00:25:27,728 [main:67] - randomType = Byte
2021-03-12 00:25:27,831 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:27,904 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@66094ff0]
2021-03-12 00:25:27,904 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@11969086]
2021-03-12 00:25:28,002 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:25:28,004 [main:78] - Generated call from random type = (43).toChar().minus('篼')
2021-03-12 00:25:28,005 [main:106] - GETTING Int from StringBuilder
2021-03-12 00:25:28,039 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.text.StringBuilder[DeserializedPropertyDescriptor@23d526d4], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@56ee0cfd]]
2021-03-12 00:25:28,040 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@56ee0cfd]
2021-03-12 00:25:28,184 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:28,185 [main:117] - GENERATED CALL = (log).length.rem(-121)
2021-03-12 00:25:28,186 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@5c9fa9f1], public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7faf855c]]
2021-03-12 00:25:28,186 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@5c9fa9f1]
2021-03-12 00:25:28,186 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7faf855c]
2021-03-12 00:25:28,305 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:25:28,305 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:25:28,307 [main:117] - GENERATED CALL = (log).subSequence(sum, sum).indexOfLast({a: Char -> false})
2021-03-12 00:25:28,307 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.text.StringBuilder[DeserializedPropertyDescriptor@23d526d4], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61bfcf43]]
2021-03-12 00:25:28,308 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61bfcf43]
2021-03-12 00:25:28,308 [main:117] - GENERATED CALL = (log).length.and(logged("qgqal", -1803481113))
2021-03-12 00:25:28,309 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@add929e], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@25ab7132]]
2021-03-12 00:25:28,309 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@add929e]
2021-03-12 00:25:28,411 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:25:28,412 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@25ab7132]
2021-03-12 00:25:28,512 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:25:28,513 [main:117] - GENERATED CALL = (log).equals("dzgee").compareTo(true)
2021-03-12 00:25:28,513 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.text.StringBuilder[DeserializedPropertyDescriptor@23d526d4], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2d98c4cd]]
2021-03-12 00:25:28,513 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2d98c4cd]
2021-03-12 00:25:28,514 [main:117] - GENERATED CALL = (log).length.ushr(sum)
2021-03-12 00:25:28,514 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.text.StringBuilder[DeserializedPropertyDescriptor@23d526d4], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@632fce34]]
2021-03-12 00:25:28,514 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@632fce34]
2021-03-12 00:25:28,515 [main:117] - GENERATED CALL = (log).length.unaryMinus()
2021-03-12 00:25:28,515 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.text.StringBuilder[DeserializedPropertyDescriptor@23d526d4], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@69f320de]]
2021-03-12 00:25:28,515 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@69f320de]
2021-03-12 00:25:28,515 [main:117] - GENERATED CALL = (log).length.xor(sum)
2021-03-12 00:25:28,515 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@5c9fa9f1], public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77c9a412]]
2021-03-12 00:25:28,515 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@5c9fa9f1]
2021-03-12 00:25:28,629 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:28,630 [main:149] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77c9a412]
2021-03-12 00:25:28,736 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 00:25:28,832 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 00:25:28,834 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 00:25:28,933 [main:302] - generating value of type = Char true depth = 3
2021-03-12 00:25:28,933 [main:95] - GENERATED = charArrayOf('痛')
2021-03-12 00:25:29,064 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:29,184 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:25:29,185 [main:117] - GENERATED CALL = (log).subSequence(sum, -1522282367).lastIndexOfAny(charArrayOf('痛'), -1779363027, false)
2021-03-12 00:25:29,186 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.text.StringBuilder[DeserializedPropertyDescriptor@23d526d4], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e810089]]
2021-03-12 00:25:29,186 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e810089]
2021-03-12 00:25:29,186 [main:117] - GENERATED CALL = (log).length.shr(sum)
2021-03-12 00:25:29,187 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.text.StringBuilder[DeserializedPropertyDescriptor@23d526d4], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@1d51059e]]
2021-03-12 00:25:29,187 [main:117] - GENERATED CALL = (log).length.absoluteValue
2021-03-12 00:25:29,187 [main:61] - replacement of sum of type Int is (log).subSequence(sum, sum).indexOfLast({a: Char -> false})
2021-03-12 00:25:29,286 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:25:29,286 [main:66] - Compilation checking started
2021-03-12 00:25:29,812 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, (log).subSequence(sum, sum).indexOfLast({a: Char -> false}))

    assertEquals("start;end;step;", (log).substring(logged("qgqal", -1803481113)).take(sum))

    return "OK"
}


2021-03-12 00:25:29,815 [main:53] - replacing (logged("start;", 1)..logged("end;", 8), IntRange)
2021-03-12 00:25:29,815 [main:50] - replacing logged("start;", 1)..logged("end;", 8) IntRange
2021-03-12 00:25:29,815 [main:54] - Getting value of type IntRange
2021-03-12 00:25:29,924 [main:302] - generating value of type = IntRange false depth = 0
2021-03-12 00:25:30,028 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 00:25:30,030 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 00:25:30,338 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:25:30,338 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:25:30,339 [main:95] - GENERATED = IntRange(-1001131533, 1690688778)
2021-03-12 00:25:30,339 [main:58] - GENERATED VALUE OF TYPE IntRange = IntRange(-1001131533, 1690688778)
2021-03-12 00:25:30,339 [main:61] - GENERATED IS CALL =true
2021-03-12 00:25:30,586 [main:67] - randomType = HashMap<Boolean, Char?>
2021-03-12 00:25:30,713 [main:302] - generating value of type = HashMap<Boolean, Char?> false depth = 0
2021-03-12 00:25:30,826 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): HashMap<Boolean, Char?> = TODO()
2021-03-12 00:25:30,829 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): HashMap<Boolean, Char?> = TODO()
2021-03-12 00:25:30,930 [main:95] - GENERATED = linkedMapOf<Boolean, Char?>()
2021-03-12 00:25:31,087 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3909995c]
2021-03-12 00:25:31,188 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:31,190 [main:78] - Generated call from random type = (linkedMapOf<Boolean, Char?>()).size.until(-96)
2021-03-12 00:25:31,191 [main:106] - GETTING IntRange from StringBuilder
2021-03-12 00:25:31,227 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.text.StringBuilder[DeserializedPropertyDescriptor@23d526d4], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@520e1ea5]]
2021-03-12 00:25:31,227 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@520e1ea5]
2021-03-12 00:25:31,329 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:31,330 [main:117] - GENERATED CALL = (log).length.rangeTo(108)
2021-03-12 00:25:31,330 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.text.StringBuilder[DeserializedPropertyDescriptor@23d526d4], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3909995c]]
2021-03-12 00:25:31,330 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3909995c]
2021-03-12 00:25:31,461 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:31,462 [main:117] - GENERATED CALL = (log).length.until(59)
2021-03-12 00:25:31,462 [main:113] - Case = [public val kotlin.CharSequence.indices: kotlin.ranges.IntRange defined in kotlin.text[DeserializedPropertyDescriptor@7168e312]]
2021-03-12 00:25:31,462 [main:117] - GENERATED CALL = (log).indices
2021-03-12 00:25:31,463 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@5c9fa9f1], public val kotlin.CharSequence.indices: kotlin.ranges.IntRange defined in kotlin.text[DeserializedPropertyDescriptor@7168e312]]
2021-03-12 00:25:31,463 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@5c9fa9f1]
2021-03-12 00:25:31,463 [main:117] - GENERATED CALL = (log).subSequence(logged("qgqal", -1803481113), logged("qgqal", -1803481113)).indices
2021-03-12 00:25:31,463 [main:61] - replacement of logged("start;", 1)..logged("end;", 8) of type IntRange is (log).length.until(59)
2021-03-12 00:25:31,575 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:25:31,575 [main:66] - Compilation checking started
2021-03-12 00:25:32,037 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in (((log).length.until(59)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, (log).subSequence(sum, sum).indexOfLast({a: Char -> false}))

    assertEquals("start;end;step;", (log).substring(logged("qgqal", -1803481113)).take(sum))

    return "OK"
}


2021-03-12 00:25:32,039 [main:53] - replacing (2468, Int)
2021-03-12 00:25:32,039 [main:50] - replacing 2468 Int
2021-03-12 00:25:32,039 [main:54] - Getting value of type Int
2021-03-12 00:25:32,155 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:32,156 [main:58] - GENERATED VALUE OF TYPE Int = -377821196
2021-03-12 00:25:32,156 [main:61] - GENERATED IS CALL =false
2021-03-12 00:25:32,298 [main:67] - randomType = Short
2021-03-12 00:25:32,420 [main:302] - generating value of type = Short true depth = 0
2021-03-12 00:25:32,497 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@e8289e4]
2021-03-12 00:25:32,497 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@394a7339]
2021-03-12 00:25:32,498 [main:78] - Generated call from random type = (5562).toByte().unaryMinus()
2021-03-12 00:25:32,498 [main:61] - replacement of 2468 of type Int is (5562).toByte().unaryMinus()
2021-03-12 00:25:32,629 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:25:32,630 [main:66] - Compilation checking started
2021-03-12 00:25:33,035 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in (((log).length.until(59)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals((5562).toByte().unaryMinus(), (log).subSequence(sum, sum).indexOfLast({a: Char -> false}))

    assertEquals("start;end;step;", (log).substring(logged("qgqal", -1803481113)).take(sum))

    return "OK"
}


2021-03-12 00:25:33,036 [main:53] - replacing (2468, Int)
2021-03-12 00:25:33,036 [main:50] - replacing 2468 Int
2021-03-12 00:25:33,036 [main:54] - Getting value of type Int
2021-03-12 00:25:33,137 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:33,137 [main:58] - GENERATED VALUE OF TYPE Int = 1686615699
2021-03-12 00:25:33,138 [main:61] - GENERATED IS CALL =false
2021-03-12 00:25:33,338 [main:67] - randomType = Short?
2021-03-12 00:25:33,437 [main:302] - generating value of type = Short true depth = 0
2021-03-12 00:25:33,500 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c]
2021-03-12 00:25:33,500 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2de829a7]
2021-03-12 00:25:33,501 [main:78] - Generated call from random type = (23243)?.toInt().rotateLeft(logged("qgqal", -1803481113))
2021-03-12 00:25:33,501 [main:106] - GETTING Int from Int
2021-03-12 00:25:33,552 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@173b0b5c]]
2021-03-12 00:25:33,552 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c]
2021-03-12 00:25:33,553 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@173b0b5c]
2021-03-12 00:25:33,553 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toInt().inc()
2021-03-12 00:25:33,553 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@1d51059e]]
2021-03-12 00:25:33,553 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c]
2021-03-12 00:25:33,554 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toInt().absoluteValue
2021-03-12 00:25:33,554 [main:113] - Case = [public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@60d993ec]]
2021-03-12 00:25:33,554 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@60d993ec]
2021-03-12 00:25:33,657 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:33,658 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).div(-36)
2021-03-12 00:25:33,658 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@520e1ea5], public open val start: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@775036a1]]
2021-03-12 00:25:33,658 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@520e1ea5]
2021-03-12 00:25:33,761 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:33,762 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).rangeTo(-73).start
2021-03-12 00:25:33,762 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@793c5b1a], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6e868b0d]]
2021-03-12 00:25:33,762 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@793c5b1a]
2021-03-12 00:25:33,858 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:25:33,859 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6e868b0d]
2021-03-12 00:25:33,859 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).div(-4668466701159032464).countLeadingZeroBits()
2021-03-12 00:25:33,860 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5561cbe0], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@32d5f0be]]
2021-03-12 00:25:33,860 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5561cbe0]
2021-03-12 00:25:33,860 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@32d5f0be]
2021-03-12 00:25:33,948 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:33,949 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toByte().times(-76)
2021-03-12 00:25:33,949 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5aadd895]]
2021-03-12 00:25:33,949 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c]
2021-03-12 00:25:33,949 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5aadd895]
2021-03-12 00:25:33,950 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toInt().unaryPlus()
2021-03-12 00:25:33,950 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@8a77298]]
2021-03-12 00:25:33,950 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c]
2021-03-12 00:25:33,950 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@8a77298]
2021-03-12 00:25:33,950 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toInt().shl(logged("qgqal", -1803481113))
2021-03-12 00:25:33,950 [main:113] - Case = [public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4978a3f5]]
2021-03-12 00:25:33,951 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4978a3f5]
2021-03-12 00:25:34,060 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:34,061 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).plus(25)
2021-03-12 00:25:34,061 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7c52d599]]
2021-03-12 00:25:34,062 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7c52d599]
2021-03-12 00:25:34,063 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).rotateRight(logged("qgqal", -1803481113))
2021-03-12 00:25:34,063 [main:61] - replacement of 2468 of type Int is logged("qgqal", -1803481113)
2021-03-12 00:25:34,182 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 00:25:34,184 [main:53] - replacing (((log).length.until(59)).reversed() step logged("step;", 2), IntProgression)
2021-03-12 00:25:34,185 [main:50] - replacing ((log).length.until(59)).reversed() step logged("step;", 2) IntProgression
2021-03-12 00:25:34,185 [main:54] - Getting value of type IntProgression
2021-03-12 00:25:34,282 [main:302] - generating value of type = IntProgression false depth = 0
2021-03-12 00:25:34,385 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntProgression = TODO()
2021-03-12 00:25:34,387 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntProgression = TODO()
2021-03-12 00:25:34,731 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:25:34,732 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:25:34,732 [main:95] - GENERATED = IntRange(360648846, -1951495403)
2021-03-12 00:25:34,733 [main:58] - GENERATED VALUE OF TYPE IntProgression = IntRange(360648846, -1951495403)
2021-03-12 00:25:34,733 [main:61] - GENERATED IS CALL =true
2021-03-12 00:25:34,734 [main:67] - randomType = Int
2021-03-12 00:25:34,833 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:34,902 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@176c15d8]
2021-03-12 00:25:34,902 [main:149] - GENERATING call of type public infix fun kotlin.Short.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@166c24f0]
2021-03-12 00:25:34,998 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:34,999 [main:78] - Generated call from random type = (1098144074).toShort().downTo(90)
2021-03-12 00:25:34,999 [main:61] - replacement of ((log).length.until(59)).reversed() step logged("step;", 2) of type IntProgression is (1098144074).toShort().downTo(90)
2021-03-12 00:25:35,096 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:25:35,097 [main:66] - Compilation checking started
2021-03-12 00:25:35,505 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((1098144074).toShort().downTo(90)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals((5562).toByte().unaryMinus(), (log).subSequence(sum, sum).indexOfLast({a: Char -> false}))

    assertEquals("start;end;step;", (log).substring(logged("qgqal", -1803481113)).take(sum))

    return "OK"
}


2021-03-12 00:25:35,506 [main:53] - replacing (StringBuilder(), StringBuilder)
2021-03-12 00:25:35,506 [main:50] - replacing StringBuilder() StringBuilder
2021-03-12 00:25:35,506 [main:54] - Getting value of type StringBuilder
2021-03-12 00:25:35,630 [main:302] - generating value of type = StringBuilder false depth = 0
2021-03-12 00:25:35,724 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): StringBuilder = TODO()
2021-03-12 00:25:35,726 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): StringBuilder = TODO()
2021-03-12 00:25:35,922 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:25:35,923 [main:95] - GENERATED = StringBuilder(314863304)
2021-03-12 00:25:35,923 [main:58] - GENERATED VALUE OF TYPE StringBuilder = StringBuilder(314863304)
2021-03-12 00:25:35,923 [main:61] - GENERATED IS CALL =true
2021-03-12 00:25:36,022 [main:67] - randomType = UInt
2021-03-12 00:25:36,128 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 00:25:36,185 [main:106] - GETTING StringBuilder from Int
2021-03-12 00:25:36,230 [main:106] - GETTING StringBuilder from StringBuilder
2021-03-12 00:25:36,254 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.text.StringBuilder.appendLine(): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cdb6566]]
2021-03-12 00:25:36,254 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.text.StringBuilder.appendLine(): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cdb6566]
2021-03-12 00:25:36,254 [main:117] - GENERATED CALL = (log).appendLine()
2021-03-12 00:25:36,254 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.insertRange(index: kotlin.Int, value: kotlin.CharArray, startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ecdb6b6]]
2021-03-12 00:25:36,255 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.insertRange(index: kotlin.Int, value: kotlin.CharArray, startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ecdb6b6]
2021-03-12 00:25:36,343 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 00:25:36,438 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 00:25:36,440 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 00:25:36,534 [main:302] - generating value of type = Char true depth = 3
2021-03-12 00:25:36,535 [main:95] - GENERATED = charArrayOf('쐶')
2021-03-12 00:25:36,536 [main:117] - GENERATED CALL = (log).insertRange(logged("qgqal", -1803481113), charArrayOf('쐶'), logged("qgqal", -1803481113), logged("qgqal", -1803481113))
2021-03-12 00:25:36,536 [main:113] - Case = [public final fun reverse(): kotlin.text.StringBuilder defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@211d8359]]
2021-03-12 00:25:36,537 [main:149] - GENERATING call of type public final fun reverse(): kotlin.text.StringBuilder defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@211d8359]
2021-03-12 00:25:36,537 [main:117] - GENERATED CALL = (log).reverse()
2021-03-12 00:25:36,537 [main:113] - Case = [@kotlin.Deprecated @kotlin.internal.InlineOnly public inline fun kotlin.text.StringBuilder.append(obj: kotlin.Any?): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d9f85c6]]
2021-03-12 00:25:36,537 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.internal.InlineOnly public inline fun kotlin.text.StringBuilder.append(obj: kotlin.Any?): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d9f85c6]
2021-03-12 00:25:36,623 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:25:36,624 [main:117] - GENERATED CALL = (log).append("okozb")
2021-03-12 00:25:36,624 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.deleteAt(index: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33d96e70]]
2021-03-12 00:25:36,624 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.deleteAt(index: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33d96e70]
2021-03-12 00:25:36,625 [main:117] - GENERATED CALL = (log).deleteAt(logged("qgqal", -1803481113))
2021-03-12 00:25:36,625 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun insert(index: kotlin.Int, value: kotlin.Any?): kotlin.text.StringBuilder defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@5dd97fb6]]
2021-03-12 00:25:36,625 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun insert(index: kotlin.Int, value: kotlin.Any?): kotlin.text.StringBuilder defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@5dd97fb6]
2021-03-12 00:25:36,710 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:25:36,711 [main:117] - GENERATED CALL = (log).insert(logged("qgqal", -1803481113), "ldmcz")
2021-03-12 00:25:36,711 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.setRange(startIndex: kotlin.Int, endIndex: kotlin.Int, value: kotlin.String): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15554467]]
2021-03-12 00:25:36,711 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.setRange(startIndex: kotlin.Int, endIndex: kotlin.Int, value: kotlin.String): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15554467]
2021-03-12 00:25:36,808 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:36,904 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:25:36,905 [main:117] - GENERATED CALL = (log).setRange(-123866823, logged("qgqal", -1803481113), "uedfu")
2021-03-12 00:25:36,905 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.deleteRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f4a99fe]]
2021-03-12 00:25:36,905 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.deleteRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f4a99fe]
2021-03-12 00:25:36,906 [main:117] - GENERATED CALL = (log).deleteRange(logged("qgqal", -1803481113), logged("qgqal", -1803481113))
2021-03-12 00:25:36,906 [main:113] - Case = [@kotlin.SinceKotlin public inline fun kotlin.text.StringBuilder.clear(): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41bf2524]]
2021-03-12 00:25:36,906 [main:149] - GENERATING call of type @kotlin.SinceKotlin public inline fun kotlin.text.StringBuilder.clear(): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41bf2524]
2021-03-12 00:25:36,906 [main:117] - GENERATED CALL = (log).clear()
2021-03-12 00:25:36,906 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.appendRange(value: kotlin.CharArray, startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31f61b90]]
2021-03-12 00:25:36,906 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.appendRange(value: kotlin.CharArray, startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@31f61b90]
2021-03-12 00:25:36,999 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 00:25:37,097 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 00:25:37,099 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 00:25:37,186 [main:302] - generating value of type = Char true depth = 3
2021-03-12 00:25:37,187 [main:95] - GENERATED = charArrayOf('壭')
2021-03-12 00:25:37,188 [main:117] - GENERATED CALL = (log).appendRange(charArrayOf('壭'), logged("qgqal", -1803481113), logged("qgqal", -1803481113))
2021-03-12 00:25:37,188 [main:61] - replacement of StringBuilder() of type StringBuilder is (log).deleteAt(logged("qgqal", -1803481113))
2021-03-12 00:25:37,271 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:25:37,271 [main:66] - Compilation checking started
2021-03-12 00:25:37,528 [main:49] - Result = false
Text:
import kotlin.test.*

val log = (log).deleteAt(logged("qgqal", -1803481113))

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((1098144074).toShort().downTo(90)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals((5562).toByte().unaryMinus(), (log).subSequence(sum, sum).indexOfLast({a: Char -> false}))

    assertEquals("start;end;step;", (log).substring(logged("qgqal", -1803481113)).take(sum))

    return "OK"
}


2021-03-12 00:25:37,529 [main:53] - replacing (((log).length.until(59)).reversed(), IntProgression)
2021-03-12 00:25:37,529 [main:50] - replacing ((log).length.until(59)).reversed() IntProgression
2021-03-12 00:25:37,529 [main:54] - Getting value of type IntProgression
2021-03-12 00:25:37,618 [main:302] - generating value of type = IntProgression false depth = 0
2021-03-12 00:25:37,711 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntProgression = TODO()
2021-03-12 00:25:37,712 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntProgression = TODO()
2021-03-12 00:25:37,983 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:25:37,983 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:25:37,984 [main:95] - GENERATED = IntRange(286196117, -565931893)
2021-03-12 00:25:37,984 [main:58] - GENERATED VALUE OF TYPE IntProgression = IntRange(286196117, -565931893)
2021-03-12 00:25:37,984 [main:61] - GENERATED IS CALL =true
2021-03-12 00:25:38,082 [main:67] - randomType = UByte
2021-03-12 00:25:38,223 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 00:25:38,281 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@59feedcc]
2021-03-12 00:25:38,281 [main:149] - GENERATING call of type public infix fun kotlin.Byte.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4e1b36e6]
2021-03-12 00:25:38,366 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:38,367 [main:78] - Generated call from random type = (34.toUByte()).toByte().downTo(67)
2021-03-12 00:25:38,370 [main:106] - GETTING IntProgression from Int
2021-03-12 00:25:38,400 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@380e8b10], public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@343131f7]]
2021-03-12 00:25:38,400 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@380e8b10]
2021-03-12 00:25:38,400 [main:149] - GENERATING call of type public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@343131f7]
2021-03-12 00:25:38,483 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:38,484 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).compareTo(logged("qgqal", -1803481113)).downTo(25)
2021-03-12 00:25:38,484 [main:113] - Case = [public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@343131f7]]
2021-03-12 00:25:38,484 [main:149] - GENERATING call of type public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@343131f7]
2021-03-12 00:25:38,567 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:38,568 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).downTo(37)
2021-03-12 00:25:38,568 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c], public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@343131f7]]
2021-03-12 00:25:38,568 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c]
2021-03-12 00:25:38,568 [main:149] - GENERATING call of type public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@343131f7]
2021-03-12 00:25:38,651 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:38,652 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toInt().downTo(64)
2021-03-12 00:25:38,652 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5561cbe0], public infix fun kotlin.Byte.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4e1b36e6]]
2021-03-12 00:25:38,652 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5561cbe0]
2021-03-12 00:25:38,652 [main:149] - GENERATING call of type public infix fun kotlin.Byte.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4e1b36e6]
2021-03-12 00:25:38,735 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:38,735 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toByte().downTo(97)
2021-03-12 00:25:38,736 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@176c15d8], public infix fun kotlin.Short.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@166c24f0]]
2021-03-12 00:25:38,736 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@176c15d8]
2021-03-12 00:25:38,736 [main:149] - GENERATING call of type public infix fun kotlin.Short.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@166c24f0]
2021-03-12 00:25:38,847 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:38,849 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toShort().downTo(117)
2021-03-12 00:25:38,849 [main:61] - replacement of ((log).length.until(59)).reversed() of type IntProgression is (logged("qgqal", -1803481113)).compareTo(logged("qgqal", -1803481113)).downTo(25)
2021-03-12 00:25:38,947 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:25:38,948 [main:53] - replacing (1, Int)
2021-03-12 00:25:38,948 [main:50] - replacing 1 Int
2021-03-12 00:25:38,948 [main:54] - Getting value of type Int
2021-03-12 00:25:39,034 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:39,035 [main:58] - GENERATED VALUE OF TYPE Int = 1628702767
2021-03-12 00:25:39,035 [main:61] - GENERATED IS CALL =false
2021-03-12 00:25:39,712 [main:67] - randomType = Triple<Boolean, Map<MutableMap<UShort, ULong>, Boolean?>?, Int>
2021-03-12 00:25:39,795 [main:302] - generating value of type = Triple<Boolean, Map<MutableMap<UShort, ULong>, Boolean?>?, Int> false depth = 0
2021-03-12 00:25:39,964 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Boolean, second: Map<MutableMap<UShort, ULong>, Boolean?>?, third: Int): Triple<Boolean, Map<MutableMap<UShort, ULong>, Boolean?>?, Int> = TODO()
2021-03-12 00:25:39,965 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Boolean, second: Map<MutableMap<UShort, ULong>, Boolean?>?, third: Int): Triple<Boolean, Map<MutableMap<UShort, ULong>, Boolean?>?, Int> = TODO()
2021-03-12 00:25:40,075 [main:302] - generating value of type = Boolean true depth = 3
2021-03-12 00:25:40,076 [main:302] - generating value of type = Map<MutableMap<UShort, ULong>, Boolean?> false depth = 3
2021-03-12 00:25:40,172 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(): Map<MutableMap<UShort, ULong>, Boolean?> = TODO()
2021-03-12 00:25:40,173 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(): Map<MutableMap<UShort, ULong>, Boolean?> = TODO()
2021-03-12 00:25:40,259 [main:95] - GENERATED = LinkedHashMap<MutableMap<UShort, ULong>, Boolean?>()
2021-03-12 00:25:40,259 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:25:40,260 [main:95] - GENERATED = Triple<Boolean, Map<MutableMap<UShort, ULong>, Boolean?>?, Int>(false, LinkedHashMap<MutableMap<UShort, ULong>, Boolean?>(), 945738342)
2021-03-12 00:25:40,282 [main:149] - GENERATING call of type public final operator fun component3(): kotlin.Int defined in kotlin.Triple[DeserializedSimpleFunctionDescriptor@12c4dd31]
2021-03-12 00:25:40,283 [main:78] - Generated call from random type = (Triple<Boolean, Map<MutableMap<UShort, ULong>, Boolean?>?, Int>(false, LinkedHashMap<MutableMap<UShort, ULong>, Boolean?>(), 945738342)).component3()
2021-03-12 00:25:40,283 [main:106] - GETTING Int from Int
2021-03-12 00:25:40,325 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@284e134c]]
2021-03-12 00:25:40,325 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c]
2021-03-12 00:25:40,325 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@284e134c]
2021-03-12 00:25:40,325 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toInt().takeLowestOneBit()
2021-03-12 00:25:40,325 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@76b45e28], public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@7030fd3]]
2021-03-12 00:25:40,325 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@76b45e28]
2021-03-12 00:25:40,325 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@7030fd3]
2021-03-12 00:25:40,326 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toLong().toInt()
2021-03-12 00:25:40,326 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5561cbe0], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@fa1da5b]]
2021-03-12 00:25:40,326 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5561cbe0]
2021-03-12 00:25:40,326 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@fa1da5b]
2021-03-12 00:25:40,407 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:40,408 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toByte().div(-19)
2021-03-12 00:25:40,408 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5fe09f92]]
2021-03-12 00:25:40,408 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c]
2021-03-12 00:25:40,408 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5fe09f92]
2021-03-12 00:25:40,409 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toInt().coerceAtLeast(logged("qgqal", -1803481113))
2021-03-12 00:25:40,409 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5001d402], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@2c4069ae]]
2021-03-12 00:25:40,409 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5001d402]
2021-03-12 00:25:40,409 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@2c4069ae]
2021-03-12 00:25:40,492 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:40,493 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toFloat().compareTo(86)
2021-03-12 00:25:40,493 [main:113] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@514ebdbf], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@447e49c]]
2021-03-12 00:25:40,493 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@514ebdbf]
2021-03-12 00:25:40,575 [main:302] - generating value of type = Float true depth = 0
2021-03-12 00:25:40,576 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@447e49c]
2021-03-12 00:25:40,576 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).div(0.9133261f).toRawBits()
2021-03-12 00:25:40,576 [main:113] - Case = [public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@173b0b5c]]
2021-03-12 00:25:40,576 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@173b0b5c]
2021-03-12 00:25:40,577 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).inc()
2021-03-12 00:25:40,577 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@76b45e28], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@cba1c42]]
2021-03-12 00:25:40,577 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@76b45e28]
2021-03-12 00:25:40,577 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toLong().sign
2021-03-12 00:25:40,577 [main:113] - Case = [public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@203cc120]]
2021-03-12 00:25:40,577 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@203cc120]
2021-03-12 00:25:40,578 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toInt()
2021-03-12 00:25:40,578 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@29bbbcd7]]
2021-03-12 00:25:40,578 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@29bbbcd7]
2021-03-12 00:25:40,578 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).takeHighestOneBit()
2021-03-12 00:25:40,578 [main:61] - replacement of 1 of type Int is (logged("qgqal", -1803481113)).toInt()
2021-03-12 00:25:40,680 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:25:40,681 [main:53] - replacing (0, Int)
2021-03-12 00:25:40,681 [main:50] - replacing 0 Int
2021-03-12 00:25:40,681 [main:54] - Getting value of type Int
2021-03-12 00:25:40,771 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:40,771 [main:58] - GENERATED VALUE OF TYPE Int = 544604279
2021-03-12 00:25:40,771 [main:61] - GENERATED IS CALL =false
2021-03-12 00:25:40,857 [main:67] - randomType = Float
2021-03-12 00:25:40,940 [main:302] - generating value of type = Float true depth = 0
2021-03-12 00:25:40,970 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@2c4069ae]
2021-03-12 00:25:41,052 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:41,052 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@c5a853a]
2021-03-12 00:25:41,147 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:41,148 [main:78] - Generated call from random type = (0.768218f).compareTo(19).minus(-76)
2021-03-12 00:25:41,148 [main:106] - GETTING Int from Int
2021-03-12 00:25:41,200 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@380e8b10], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2de829a7]]
2021-03-12 00:25:41,200 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@380e8b10]
2021-03-12 00:25:41,200 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2de829a7]
2021-03-12 00:25:41,282 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:41,283 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).compareTo(logged("qgqal", -1803481113)).rotateLeft(965066776)
2021-03-12 00:25:41,283 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@793c5b1a], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@cba1c42]]
2021-03-12 00:25:41,283 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@793c5b1a]
2021-03-12 00:25:41,364 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:25:41,365 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).div(-8956822088497505253).sign
2021-03-12 00:25:41,365 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@8a77298]]
2021-03-12 00:25:41,365 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c]
2021-03-12 00:25:41,365 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@8a77298]
2021-03-12 00:25:41,365 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toInt().shl(sum)
2021-03-12 00:25:41,365 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@793c5b1a], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4153d05]]
2021-03-12 00:25:41,365 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@793c5b1a]
2021-03-12 00:25:41,446 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:25:41,446 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4153d05]
2021-03-12 00:25:41,447 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).div(3914752606603433584).countTrailingZeroBits()
2021-03-12 00:25:41,447 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@520e1ea5], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.ranges.IntRange.random(): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7c39d86f]]
2021-03-12 00:25:41,447 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@520e1ea5]
2021-03-12 00:25:41,527 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:41,528 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.ranges.IntRange.random(): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7c39d86f]
2021-03-12 00:25:41,528 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).rangeTo(-34).random()
2021-03-12 00:25:41,528 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@1ee88095]]
2021-03-12 00:25:41,528 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb]
2021-03-12 00:25:41,529 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toChar().code
2021-03-12 00:25:41,529 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@632fce34]]
2021-03-12 00:25:41,529 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c]
2021-03-12 00:25:41,529 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@632fce34]
2021-03-12 00:25:41,529 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toInt().unaryMinus()
2021-03-12 00:25:41,529 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@60d993ec]]
2021-03-12 00:25:41,529 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c]
2021-03-12 00:25:41,529 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@60d993ec]
2021-03-12 00:25:41,609 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:41,610 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toInt().div(-20)
2021-03-12 00:25:41,610 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@176c15d8], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45c1455]]
2021-03-12 00:25:41,610 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@176c15d8]
2021-03-12 00:25:41,610 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@45c1455]
2021-03-12 00:25:41,611 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toShort().countTrailingZeroBits()
2021-03-12 00:25:41,611 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2de829a7]]
2021-03-12 00:25:41,611 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2de829a7]
2021-03-12 00:25:41,611 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).rotateLeft(logged("qgqal", -1803481113))
2021-03-12 00:25:41,611 [main:61] - replacement of 0 of type Int is (logged("qgqal", -1803481113)).toInt().shl(sum)
2021-03-12 00:25:41,712 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:25:41,712 [main:66] - Compilation checking started
2021-03-12 00:25:41,984 [main:49] - Result = false
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = (logged("qgqal", -1803481113)).toInt().shl(sum)
    for (i in ((1098144074).toShort().downTo(90)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals((5562).toByte().unaryMinus(), (log).subSequence(sum, sum).indexOfLast({a: Char -> false}))

    assertEquals("start;end;step;", (log).substring(logged("qgqal", -1803481113)).take(sum))

    return "OK"
}


2021-03-12 00:25:41,985 [main:53] - replacing (sum * 10 + i, Int)
2021-03-12 00:25:41,986 [main:50] - replacing sum * 10 + i Int
2021-03-12 00:25:41,986 [main:54] - Getting value of type Int
2021-03-12 00:25:42,069 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:42,069 [main:58] - GENERATED VALUE OF TYPE Int = -1708624395
2021-03-12 00:25:42,069 [main:61] - GENERATED IS CALL =false
2021-03-12 00:25:42,158 [main:67] - randomType = String?
2021-03-12 00:25:42,244 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:25:42,278 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@284e134c]
2021-03-12 00:25:42,278 [main:78] - Generated call from random type = ("pzrbr")?.length.takeLowestOneBit()
2021-03-12 00:25:42,279 [main:106] - GETTING Int from Int
2021-03-12 00:25:42,312 [main:113] - Case = [@kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@56ee0cfd]]
2021-03-12 00:25:42,312 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@56ee0cfd]
2021-03-12 00:25:42,404 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:42,405 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).rem(-122)
2021-03-12 00:25:42,405 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1029f5d2]]
2021-03-12 00:25:42,405 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c]
2021-03-12 00:25:42,405 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1029f5d2]
2021-03-12 00:25:42,487 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:42,488 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toInt().coerceIn(1385091158, logged("qgqal", -1803481113))
2021-03-12 00:25:42,488 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@380e8b10], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@455cd186]]
2021-03-12 00:25:42,488 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@380e8b10]
2021-03-12 00:25:42,574 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:42,574 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@455cd186]
2021-03-12 00:25:42,656 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:42,657 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).compareTo(1999383835).times(90)
2021-03-12 00:25:42,657 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5fe09f92]]
2021-03-12 00:25:42,657 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c]
2021-03-12 00:25:42,657 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5fe09f92]
2021-03-12 00:25:42,658 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toInt().coerceAtLeast(sum)
2021-03-12 00:25:42,658 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c1b9a9a], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3d87b409]]
2021-03-12 00:25:42,658 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c1b9a9a]
2021-03-12 00:25:42,658 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3d87b409]
2021-03-12 00:25:42,738 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:42,739 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toDouble().compareTo(40)
2021-03-12 00:25:42,739 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5561cbe0], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4a92c6e1]]
2021-03-12 00:25:42,739 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5561cbe0]
2021-03-12 00:25:42,739 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4a92c6e1]
2021-03-12 00:25:42,739 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toByte().countLeadingZeroBits()
2021-03-12 00:25:42,739 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2cd3f1c0], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3d87b409]]
2021-03-12 00:25:42,740 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2cd3f1c0]
2021-03-12 00:25:42,821 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:25:42,821 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3d87b409]
2021-03-12 00:25:42,907 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:42,908 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).div(0.9989806922921339).compareTo(-70)
2021-03-12 00:25:42,908 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2c87e895]]
2021-03-12 00:25:42,908 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2c87e895]
2021-03-12 00:25:43,009 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:43,010 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).compareTo(113)
2021-03-12 00:25:43,010 [main:113] - Case = [public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@8a77298]]
2021-03-12 00:25:43,010 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@8a77298]
2021-03-12 00:25:43,011 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).shl(logged("qgqal", -1803481113))
2021-03-12 00:25:43,011 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@380e8b10], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@29bbbcd7]]
2021-03-12 00:25:43,011 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@380e8b10]
2021-03-12 00:25:43,127 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:43,127 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@29bbbcd7]
2021-03-12 00:25:43,128 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).compareTo(-1066812044).takeHighestOneBit()
2021-03-12 00:25:43,128 [main:61] - replacement of sum * 10 + i of type Int is (logged("qgqal", -1803481113)).compareTo(1999383835).times(90)
2021-03-12 00:25:43,233 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:25:43,233 [main:66] - Compilation checking started
2021-03-12 00:25:43,612 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((1098144074).toShort().downTo(90)).reversed()) {
        sum = (logged("qgqal", -1803481113)).compareTo(1999383835).times(90)
    }

    assertEquals((5562).toByte().unaryMinus(), (log).subSequence(sum, sum).indexOfLast({a: Char -> false}))

    assertEquals("start;end;step;", (log).substring(logged("qgqal", -1803481113)).take(sum))

    return "OK"
}


2021-03-12 00:25:43,613 [main:53] - replacing (2, Int)
2021-03-12 00:25:43,613 [main:50] - replacing 2 Int
2021-03-12 00:25:43,613 [main:54] - Getting value of type Int
2021-03-12 00:25:43,694 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:43,694 [main:58] - GENERATED VALUE OF TYPE Int = 1970737041
2021-03-12 00:25:43,694 [main:61] - GENERATED IS CALL =false
2021-03-12 00:25:43,695 [main:67] - randomType = Int
2021-03-12 00:25:43,775 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:43,813 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2cd3f1c0]
2021-03-12 00:25:43,896 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:25:43,897 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@67e42d22]
2021-03-12 00:25:43,897 [main:78] - Generated call from random type = (1735882418).div(0.9314340069802589).roundToInt()
2021-03-12 00:25:43,897 [main:61] - replacement of 2 of type Int is (1735882418).div(0.9314340069802589).roundToInt()
2021-03-12 00:25:43,978 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:25:43,979 [main:53] - replacing (2468, Int)
2021-03-12 00:25:43,979 [main:50] - replacing 2468 Int
2021-03-12 00:25:43,979 [main:54] - Getting value of type Int
2021-03-12 00:25:44,078 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:44,079 [main:58] - GENERATED VALUE OF TYPE Int = 1622886670
2021-03-12 00:25:44,079 [main:61] - GENERATED IS CALL =false
2021-03-12 00:25:44,274 [main:67] - randomType = Function2<Char?, Int, Int>
2021-03-12 00:25:44,274 [main:106] - GETTING Int from Int
2021-03-12 00:25:44,328 [main:113] - Case = [public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e810089]]
2021-03-12 00:25:44,328 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2e810089]
2021-03-12 00:25:44,329 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).shr(logged("qgqal", -1803481113))
2021-03-12 00:25:44,329 [main:113] - Case = [public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4978a3f5]]
2021-03-12 00:25:44,329 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4978a3f5]
2021-03-12 00:25:44,409 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:44,410 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).plus(-34)
2021-03-12 00:25:44,410 [main:113] - Case = [public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5aadd895]]
2021-03-12 00:25:44,410 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5aadd895]
2021-03-12 00:25:44,410 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).unaryPlus()
2021-03-12 00:25:44,410 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@176c15d8], public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@3ed32db7]]
2021-03-12 00:25:44,410 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@176c15d8]
2021-03-12 00:25:44,411 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@3ed32db7]
2021-03-12 00:25:44,411 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toShort().toInt()
2021-03-12 00:25:44,411 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@380e8b10], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@56e68adc]]
2021-03-12 00:25:44,411 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@380e8b10]
2021-03-12 00:25:44,411 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@56e68adc]
2021-03-12 00:25:44,411 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).compareTo(logged("qgqal", -1803481113)).countTrailingZeroBits()
2021-03-12 00:25:44,411 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@380e8b10], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@56ee0cfd]]
2021-03-12 00:25:44,412 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@380e8b10]
2021-03-12 00:25:44,492 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:44,493 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@56ee0cfd]
2021-03-12 00:25:44,573 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:44,573 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).compareTo(2143040060).rem(14)
2021-03-12 00:25:44,574 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5fe09f92]]
2021-03-12 00:25:44,574 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c]
2021-03-12 00:25:44,574 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5fe09f92]
2021-03-12 00:25:44,574 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toInt().coerceAtLeast(logged("qgqal", -1803481113))
2021-03-12 00:25:44,574 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@176c15d8], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2a67af78]]
2021-03-12 00:25:44,574 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@176c15d8]
2021-03-12 00:25:44,574 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2a67af78]
2021-03-12 00:25:44,654 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:44,654 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toShort().rem(41)
2021-03-12 00:25:44,654 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@380e8b10], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@60d993ec]]
2021-03-12 00:25:44,654 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@380e8b10]
2021-03-12 00:25:44,740 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:44,741 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@60d993ec]
2021-03-12 00:25:44,844 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:44,845 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).compareTo(334807521).div(-124)
2021-03-12 00:25:44,845 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@380e8b10], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3be7ff76]]
2021-03-12 00:25:44,845 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@380e8b10]
2021-03-12 00:25:44,845 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3be7ff76]
2021-03-12 00:25:44,846 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).compareTo(logged("qgqal", -1803481113)).dec()
2021-03-12 00:25:44,846 [main:61] - replacement of 2468 of type Int is (logged("qgqal", -1803481113)).compareTo(2143040060).rem(14)
2021-03-12 00:25:44,943 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:25:44,944 [main:53] - replacing (i, Int)
2021-03-12 00:25:44,944 [main:50] - replacing i Int
2021-03-12 00:25:44,944 [main:54] - Getting value of type Int
2021-03-12 00:25:45,024 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:45,024 [main:58] - GENERATED VALUE OF TYPE Int = 158168838
2021-03-12 00:25:45,025 [main:61] - GENERATED IS CALL =false
2021-03-12 00:25:45,025 [main:67] - randomType = Byte
2021-03-12 00:25:45,107 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:45,136 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@65e0cbf8]
2021-03-12 00:25:45,217 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:45,217 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a74933f]
2021-03-12 00:25:45,217 [main:78] - Generated call from random type = (-107).compareTo(-79).inv()
2021-03-12 00:25:45,218 [main:106] - GETTING Int from Int
2021-03-12 00:25:45,250 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@1d51059e]]
2021-03-12 00:25:45,250 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c]
2021-03-12 00:25:45,250 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toInt().absoluteValue
2021-03-12 00:25:45,251 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@176c15d8], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@24ba5996]]
2021-03-12 00:25:45,251 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@176c15d8]
2021-03-12 00:25:45,251 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@24ba5996]
2021-03-12 00:25:45,251 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toShort().countLeadingZeroBits()
2021-03-12 00:25:45,251 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb], public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@4491a3b2]]
2021-03-12 00:25:45,251 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb]
2021-03-12 00:25:45,251 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@4491a3b2]
2021-03-12 00:25:45,332 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:25:45,333 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toChar().compareTo('샓')
2021-03-12 00:25:45,333 [main:113] - Case = [@kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@56ee0cfd]]
2021-03-12 00:25:45,333 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@56ee0cfd]
2021-03-12 00:25:45,418 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:45,419 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).rem(74)
2021-03-12 00:25:45,419 [main:113] - Case = [public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3be7ff76]]
2021-03-12 00:25:45,419 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3be7ff76]
2021-03-12 00:25:45,419 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).dec()
2021-03-12 00:25:45,419 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@23c343e1]]
2021-03-12 00:25:45,419 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@23c343e1]
2021-03-12 00:25:45,420 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).countOneBits()
2021-03-12 00:25:45,420 [main:113] - Case = [public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@a13a3e0]]
2021-03-12 00:25:45,420 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@a13a3e0]
2021-03-12 00:25:45,524 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:45,525 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).coerceAtMost(412642801)
2021-03-12 00:25:45,525 [main:113] - Case = [@kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@6f0bd2d2]]
2021-03-12 00:25:45,525 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).sign
2021-03-12 00:25:45,525 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@76b45e28], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4153d05]]
2021-03-12 00:25:45,525 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@76b45e28]
2021-03-12 00:25:45,525 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4153d05]
2021-03-12 00:25:45,526 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toLong().countTrailingZeroBits()
2021-03-12 00:25:45,526 [main:113] - Case = [public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@203cc120]]
2021-03-12 00:25:45,526 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@203cc120]
2021-03-12 00:25:45,526 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toInt()
2021-03-12 00:25:45,526 [main:61] - replacement of i of type Int is (logged("qgqal", -1803481113)).toChar().compareTo('샓')
2021-03-12 00:25:45,613 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:25:45,614 [main:53] - replacing (sum, Int)
2021-03-12 00:25:45,614 [main:50] - replacing sum Int
2021-03-12 00:25:45,614 [main:54] - Getting value of type Int
2021-03-12 00:25:45,694 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:45,694 [main:58] - GENERATED VALUE OF TYPE Int = -1002486784
2021-03-12 00:25:45,694 [main:61] - GENERATED IS CALL =false
2021-03-12 00:25:45,694 [main:67] - randomType = Byte
2021-03-12 00:25:45,776 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:45,817 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3ea78573]
2021-03-12 00:25:45,897 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:45,898 [main:78] - Generated call from random type = (-111).minus(44)
2021-03-12 00:25:45,898 [main:61] - replacement of sum of type Int is (-111).minus(44)
2021-03-12 00:25:45,979 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:25:45,980 [main:53] - replacing ("end;", String)
2021-03-12 00:25:45,980 [main:50] - replacing "end;" String
2021-03-12 00:25:45,980 [main:54] - Getting value of type String
2021-03-12 00:25:46,083 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:25:46,084 [main:58] - GENERATED VALUE OF TYPE String = "ixuzk"
2021-03-12 00:25:46,084 [main:61] - GENERATED IS CALL =false
2021-03-12 00:25:46,181 [main:67] - randomType = Array<Boolean>
2021-03-12 00:25:46,261 [main:302] - generating value of type = Array<Boolean> false depth = 0
2021-03-12 00:25:46,347 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Boolean): Array<Boolean> = TODO()
2021-03-12 00:25:46,348 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Boolean): Array<Boolean> = TODO()
2021-03-12 00:25:46,607 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:25:46,607 [main:302] - generating value of type = Function1<Int, Boolean> false depth = 3
2021-03-12 00:25:46,608 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:25:46,608 [main:95] - GENERATED = Array<Boolean>(-79109871, {a: Int -> true})
2021-03-12 00:25:46,624 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@37d6fadd]
2021-03-12 00:25:46,721 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:25:46,819 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:25:46,906 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:25:46,990 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:25:47,076 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 00:25:47,076 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 00:25:47,081 [main:78] - Generated call from random type = (Array<Boolean>(-79109871, {a: Int -> true})).joinToString("wmlpq", StringBuilder(), "auzae", logged("qgqal", -1803481113), StringBuilder(), {a: T -> StringBuilder()})
2021-03-12 00:25:47,082 [main:106] - GETTING String from Int
2021-03-12 00:25:47,113 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5561cbe0], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4232d9ff]]
2021-03-12 00:25:47,114 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5561cbe0]
2021-03-12 00:25:47,114 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4232d9ff]
2021-03-12 00:25:47,114 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toByte().toString(logged("qgqal", -1803481113))
2021-03-12 00:25:47,114 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@380e8b10], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@439e67cf]]
2021-03-12 00:25:47,114 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@380e8b10]
2021-03-12 00:25:47,114 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@439e67cf]
2021-03-12 00:25:47,115 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).compareTo(logged("qgqal", -1803481113)).toString(logged("qgqal", -1803481113))
2021-03-12 00:25:47,115 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@450f93f8]]
2021-03-12 00:25:47,115 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb]
2021-03-12 00:25:47,115 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@450f93f8]
2021-03-12 00:25:47,195 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:25:47,196 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toChar().plus("bbgyr")
2021-03-12 00:25:47,196 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@76b45e28], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ca73ab2]]
2021-03-12 00:25:47,196 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@76b45e28]
2021-03-12 00:25:47,196 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ca73ab2]
2021-03-12 00:25:47,196 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toLong().toString(logged("qgqal", -1803481113))
2021-03-12 00:25:47,196 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65ca859b]]
2021-03-12 00:25:47,196 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb]
2021-03-12 00:25:47,197 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65ca859b]
2021-03-12 00:25:47,197 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toChar().uppercase()
2021-03-12 00:25:47,197 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@176c15d8], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dbf27f5]]
2021-03-12 00:25:47,197 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@176c15d8]
2021-03-12 00:25:47,197 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dbf27f5]
2021-03-12 00:25:47,279 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:47,280 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toShort().toString(243723066)
2021-03-12 00:25:47,280 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@793c5b1a], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ca73ab2]]
2021-03-12 00:25:47,281 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@793c5b1a]
2021-03-12 00:25:47,381 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:25:47,381 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ca73ab2]
2021-03-12 00:25:47,382 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).div(7313709112696276592).toString(logged("qgqal", -1803481113))
2021-03-12 00:25:47,382 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a6088d6]]
2021-03-12 00:25:47,382 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb]
2021-03-12 00:25:47,382 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a6088d6]
2021-03-12 00:25:47,382 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toChar().lowercase()
2021-03-12 00:25:47,383 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@439e67cf]]
2021-03-12 00:25:47,383 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@439e67cf]
2021-03-12 00:25:47,383 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toString(logged("qgqal", -1803481113))
2021-03-12 00:25:47,383 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@483ecce2]]
2021-03-12 00:25:47,383 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb]
2021-03-12 00:25:47,383 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@483ecce2]
2021-03-12 00:25:47,383 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toChar().titlecase()
2021-03-12 00:25:47,383 [main:61] - replacement of "end;" of type String is (logged("qgqal", -1803481113)).toChar().lowercase()
2021-03-12 00:25:47,470 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:25:47,471 [main:53] - replacing (((1098144074).toShort().downTo(90)).reversed(), IntProgression)
2021-03-12 00:25:47,471 [main:50] - replacing ((1098144074).toShort().downTo(90)).reversed() IntProgression
2021-03-12 00:25:47,471 [main:54] - Getting value of type IntProgression
2021-03-12 00:25:47,550 [main:302] - generating value of type = IntProgression false depth = 0
2021-03-12 00:25:47,637 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntProgression = TODO()
2021-03-12 00:25:47,638 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntProgression = TODO()
2021-03-12 00:25:47,910 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:25:47,911 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:25:47,911 [main:95] - GENERATED = IntRange(-2096196933, -1856225175)
2021-03-12 00:25:47,911 [main:58] - GENERATED VALUE OF TYPE IntProgression = IntRange(-2096196933, -1856225175)
2021-03-12 00:25:47,911 [main:61] - GENERATED IS CALL =true
2021-03-12 00:25:48,007 [main:67] - randomType = Array<Short>
2021-03-12 00:25:48,089 [main:302] - generating value of type = Array<Short> false depth = 0
2021-03-12 00:25:48,175 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Short): Array<Short> = TODO()
2021-03-12 00:25:48,177 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Short): Array<Short> = TODO()
2021-03-12 00:25:48,457 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:25:48,458 [main:302] - generating value of type = Function1<Int, Short> false depth = 3
2021-03-12 00:25:48,458 [main:302] - generating value of type = Short true depth = 4
2021-03-12 00:25:48,459 [main:95] - GENERATED = Array<Short>(-1569281625, {a: Int -> 22203})
2021-03-12 00:25:48,482 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Short defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@25900478]
2021-03-12 00:25:48,570 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:48,571 [main:149] - GENERATING call of type public infix fun kotlin.Short.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@166c24f0]
2021-03-12 00:25:48,649 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:48,650 [main:78] - Generated call from random type = (Array<Short>(-1569281625, {a: Int -> 22203})).get(577699079).downTo(-56)
2021-03-12 00:25:48,650 [main:61] - replacement of ((1098144074).toShort().downTo(90)).reversed() of type IntProgression is (Array<Short>(-1569281625, {a: Int -> 22203})).get(577699079).downTo(-56)
2021-03-12 00:25:48,728 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:25:48,728 [main:66] - Compilation checking started
2021-03-12 00:25:49,100 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in (Array<Short>(-1569281625, {a: Int -> 22203})).get(577699079).downTo(-56)) {
        sum = (logged("qgqal", -1803481113)).compareTo(1999383835).times(90)
    }

    assertEquals((5562).toByte().unaryMinus(), (log).subSequence(sum, sum).indexOfLast({a: Char -> false}))

    assertEquals("start;end;step;", (log).substring(logged("qgqal", -1803481113)).take(sum))

    return "OK"
}


2021-03-12 00:25:49,101 [main:53] - replacing ("start;end;step;", String)
2021-03-12 00:25:49,102 [main:50] - replacing "start;end;step;" String
2021-03-12 00:25:49,102 [main:54] - Getting value of type String
2021-03-12 00:25:49,192 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:25:49,192 [main:58] - GENERATED VALUE OF TYPE String = "aunda"
2021-03-12 00:25:49,192 [main:61] - GENERATED IS CALL =false
2021-03-12 00:25:49,491 [main:67] - randomType = Triple<UInt, Int, Sequence<Byte>>
2021-03-12 00:25:49,580 [main:302] - generating value of type = Triple<UInt, Int, Sequence<Byte>> false depth = 0
2021-03-12 00:25:49,667 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: UInt, second: Int, third: Sequence<Byte>): Triple<UInt, Int, Sequence<Byte>> = TODO()
2021-03-12 00:25:49,668 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: UInt, second: Int, third: Sequence<Byte>): Triple<UInt, Int, Sequence<Byte>> = TODO()
2021-03-12 00:25:49,754 [main:302] - generating value of type = UInt true depth = 3
2021-03-12 00:25:49,754 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:25:49,755 [main:302] - generating value of type = Sequence<Byte> false depth = 3
2021-03-12 00:25:49,843 [main:43] - GENERATING CALL OF fun <T> sequenceOf(elements: Byte): Sequence<Byte> = TODO()
2021-03-12 00:25:49,844 [main:61] - WITHOUT TYPE PARAMS = fun <T> sequenceOf(elements: Byte): Sequence<Byte> = TODO()
2021-03-12 00:25:49,967 [main:302] - generating value of type = Byte true depth = 6
2021-03-12 00:25:49,967 [main:95] - GENERATED = sequenceOf<Byte>(-60)
2021-03-12 00:25:49,968 [main:95] - GENERATED = Triple<UInt, Int, Sequence<Byte>>(648700481.toUInt(), 1746206186, sequenceOf<Byte>(-60))
2021-03-12 00:25:50,003 [main:149] - GENERATING call of type public fun <T> kotlin.sequences.Sequence<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.sequences[DeserializedSimpleFunctionDescriptor@23f2dff2]
2021-03-12 00:25:50,087 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:25:50,175 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:25:50,176 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:25:50,339 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:25:50,340 [main:95] - GENERATED = StringBuilder(2108477616)
2021-03-12 00:25:50,420 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:25:50,514 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:25:50,515 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:25:50,722 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:25:50,722 [main:95] - GENERATED = StringBuilder("hodgh")
2021-03-12 00:25:50,814 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:25:50,903 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:25:50,904 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:25:51,075 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:25:51,076 [main:95] - GENERATED = StringBuilder(195206844)
2021-03-12 00:25:51,182 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:25:51,275 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:25:51,276 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:25:51,450 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 00:25:51,455 [main:95] - GENERATED = StringBuilder("fcbyh")
2021-03-12 00:25:51,543 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 00:25:51,543 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 00:25:51,550 [main:78] - Generated call from random type = (Triple<UInt, Int, Sequence<Byte>>(648700481.toUInt(), 1746206186, sequenceOf<Byte>(-60))).third.joinToString(StringBuilder(2108477616), StringBuilder("hodgh"), StringBuilder(195206844), logged("qgqal", -1803481113), StringBuilder("fcbyh"), {a: T -> "kuhtp"})
2021-03-12 00:25:51,551 [main:106] - GETTING String from Int
2021-03-12 00:25:51,605 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@439e67cf]]
2021-03-12 00:25:51,605 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c]
2021-03-12 00:25:51,605 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@439e67cf]
2021-03-12 00:25:51,606 [main:117] - GENERATED CALL = (sum).toInt().toString(logged("qgqal", -1803481113))
2021-03-12 00:25:51,606 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65ca859b]]
2021-03-12 00:25:51,606 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb]
2021-03-12 00:25:51,606 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65ca859b]
2021-03-12 00:25:51,607 [main:117] - GENERATED CALL = (sum).toChar().uppercase()
2021-03-12 00:25:51,607 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5561cbe0], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4232d9ff]]
2021-03-12 00:25:51,607 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5561cbe0]
2021-03-12 00:25:51,607 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4232d9ff]
2021-03-12 00:25:51,702 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:51,703 [main:117] - GENERATED CALL = (sum).toByte().toString(-1792304976)
2021-03-12 00:25:51,703 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@76b45e28], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ca73ab2]]
2021-03-12 00:25:51,703 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@76b45e28]
2021-03-12 00:25:51,703 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ca73ab2]
2021-03-12 00:25:51,703 [main:117] - GENERATED CALL = (sum).toLong().toString(sum)
2021-03-12 00:25:51,703 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@793c5b1a], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ca73ab2]]
2021-03-12 00:25:51,703 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@793c5b1a]
2021-03-12 00:25:51,782 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:25:51,783 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ca73ab2]
2021-03-12 00:25:51,783 [main:117] - GENERATED CALL = (sum).div(-8362611629512659463).toString(sum)
2021-03-12 00:25:51,783 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@380e8b10], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@439e67cf]]
2021-03-12 00:25:51,783 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@380e8b10]
2021-03-12 00:25:51,784 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@439e67cf]
2021-03-12 00:25:51,784 [main:117] - GENERATED CALL = (sum).compareTo(logged("qgqal", -1803481113)).toString(logged("qgqal", -1803481113))
2021-03-12 00:25:51,784 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@450f93f8]]
2021-03-12 00:25:51,784 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb]
2021-03-12 00:25:51,784 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@450f93f8]
2021-03-12 00:25:51,888 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:25:51,889 [main:117] - GENERATED CALL = (sum).toChar().plus("pwoeb")
2021-03-12 00:25:51,889 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a6088d6]]
2021-03-12 00:25:51,889 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb]
2021-03-12 00:25:51,889 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a6088d6]
2021-03-12 00:25:51,889 [main:117] - GENERATED CALL = (sum).toChar().lowercase()
2021-03-12 00:25:51,890 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@176c15d8], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dbf27f5]]
2021-03-12 00:25:51,890 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@176c15d8]
2021-03-12 00:25:51,890 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dbf27f5]
2021-03-12 00:25:51,890 [main:117] - GENERATED CALL = (sum).toShort().toString(sum)
2021-03-12 00:25:51,890 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@483ecce2]]
2021-03-12 00:25:51,890 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb]
2021-03-12 00:25:51,891 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@483ecce2]
2021-03-12 00:25:51,891 [main:117] - GENERATED CALL = (sum).toChar().titlecase()
2021-03-12 00:25:51,891 [main:61] - replacement of "start;end;step;" of type String is (sum).toChar().uppercase()
2021-03-12 00:25:52,009 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:25:52,009 [main:66] - Compilation checking started
2021-03-12 00:25:52,406 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in (Array<Short>(-1569281625, {a: Int -> 22203})).get(577699079).downTo(-56)) {
        sum = (logged("qgqal", -1803481113)).compareTo(1999383835).times(90)
    }

    assertEquals((5562).toByte().unaryMinus(), (log).subSequence(sum, sum).indexOfLast({a: Char -> false}))

    assertEquals((sum).toChar().uppercase(), (log).substring(logged("qgqal", -1803481113)).take(sum))

    return "OK"
}


2021-03-12 00:25:52,407 [main:53] - replacing (sum * 10, Int)
2021-03-12 00:25:52,407 [main:50] - replacing sum * 10 Int
2021-03-12 00:25:52,407 [main:54] - Getting value of type Int
2021-03-12 00:25:52,500 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:52,500 [main:58] - GENERATED VALUE OF TYPE Int = 1935147283
2021-03-12 00:25:52,500 [main:61] - GENERATED IS CALL =false
2021-03-12 00:25:52,961 [main:67] - randomType = Pair<Sequence<Float>, Byte?>?
2021-03-12 00:25:53,044 [main:302] - generating value of type = Pair<Sequence<Float>, Byte?> false depth = 0
2021-03-12 00:25:53,128 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Sequence<Float>, second: Byte?): Pair<Sequence<Float>, Byte?> = TODO()
2021-03-12 00:25:53,129 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Sequence<Float>, second: Byte?): Pair<Sequence<Float>, Byte?> = TODO()
2021-03-12 00:25:53,211 [main:302] - generating value of type = Sequence<Float> false depth = 3
2021-03-12 00:25:53,294 [main:43] - GENERATING CALL OF fun <T> emptySequence(): Sequence<Float> = TODO()
2021-03-12 00:25:53,295 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptySequence(): Sequence<Float> = TODO()
2021-03-12 00:25:53,381 [main:95] - GENERATED = emptySequence<Float>()
2021-03-12 00:25:53,381 [main:302] - generating value of type = Byte true depth = 3
2021-03-12 00:25:53,382 [main:95] - GENERATED = Pair<Sequence<Float>, Byte?>(emptySequence<Float>(), -71)
2021-03-12 00:25:53,405 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@33061b48]
2021-03-12 00:25:53,406 [main:78] - Generated call from random type = (Pair<Sequence<Float>, Byte?>(emptySequence<Float>(), -71))?.second?.toInt()!!
2021-03-12 00:25:53,407 [main:106] - GETTING Int from Int
2021-03-12 00:25:53,461 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5001d402], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@2c4069ae]]
2021-03-12 00:25:53,461 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5001d402]
2021-03-12 00:25:53,461 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@2c4069ae]
2021-03-12 00:25:53,567 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:53,568 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toFloat().compareTo(95)
2021-03-12 00:25:53,569 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@23c343e1]]
2021-03-12 00:25:53,569 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c]
2021-03-12 00:25:53,569 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@23c343e1]
2021-03-12 00:25:53,569 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toInt().countOneBits()
2021-03-12 00:25:53,569 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@c5a853a]]
2021-03-12 00:25:53,569 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c]
2021-03-12 00:25:53,569 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@c5a853a]
2021-03-12 00:25:53,661 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:53,662 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toInt().minus(52)
2021-03-12 00:25:53,662 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c1b9a9a], @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@67e42d22]]
2021-03-12 00:25:53,662 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c1b9a9a]
2021-03-12 00:25:53,662 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@67e42d22]
2021-03-12 00:25:53,662 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toDouble().roundToInt()
2021-03-12 00:25:53,662 [main:113] - Case = [public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@60d993ec]]
2021-03-12 00:25:53,663 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@60d993ec]
2021-03-12 00:25:53,743 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:53,744 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).div(76)
2021-03-12 00:25:53,744 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@176c15d8], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@513dc9e2]]
2021-03-12 00:25:53,744 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@176c15d8]
2021-03-12 00:25:53,745 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@513dc9e2]
2021-03-12 00:25:53,745 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toShort().countOneBits()
2021-03-12 00:25:53,745 [main:113] - Case = [@kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@56ee0cfd]]
2021-03-12 00:25:53,745 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@56ee0cfd]
2021-03-12 00:25:53,832 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:53,833 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).rem(-26)
2021-03-12 00:25:53,833 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7c52d599]]
2021-03-12 00:25:53,833 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7c52d599]
2021-03-12 00:25:53,833 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).rotateRight(logged("qgqal", -1803481113))
2021-03-12 00:25:53,833 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5561cbe0], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3ea78573]]
2021-03-12 00:25:53,833 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5561cbe0]
2021-03-12 00:25:53,834 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3ea78573]
2021-03-12 00:25:53,925 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:53,926 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toByte().minus(73)
2021-03-12 00:25:53,926 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5561cbe0], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@43cc840b]]
2021-03-12 00:25:53,926 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5561cbe0]
2021-03-12 00:25:53,927 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@43cc840b]
2021-03-12 00:25:53,927 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toByte().unaryPlus()
2021-03-12 00:25:53,927 [main:61] - replacement of sum * 10 of type Int is (logged("qgqal", -1803481113)).toDouble().roundToInt()
2021-03-12 00:25:54,009 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:25:54,009 [main:53] - replacing (((1098144074).toShort().downTo(90)).reversed(), IntProgression)
2021-03-12 00:25:54,009 [main:50] - replacing ((1098144074).toShort().downTo(90)).reversed() IntProgression
2021-03-12 00:25:54,009 [main:54] - Getting value of type IntProgression
2021-03-12 00:25:54,116 [main:302] - generating value of type = IntProgression false depth = 0
2021-03-12 00:25:54,226 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntProgression = TODO()
2021-03-12 00:25:54,227 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntProgression = TODO()
2021-03-12 00:25:54,474 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:25:54,474 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:25:54,475 [main:95] - GENERATED = IntRange(-2087495259, -193680216)
2021-03-12 00:25:54,475 [main:58] - GENERATED VALUE OF TYPE IntProgression = IntRange(-2087495259, -193680216)
2021-03-12 00:25:54,475 [main:61] - GENERATED IS CALL =true
2021-03-12 00:25:54,642 [main:67] - randomType = ArrayDeque<Byte?>
2021-03-12 00:25:54,724 [main:302] - generating value of type = ArrayDeque<Byte?> false depth = 0
2021-03-12 00:25:54,839 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<Byte?> = TODO()
2021-03-12 00:25:54,841 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<Byte?> = TODO()
2021-03-12 00:25:54,965 [main:95] - GENERATED = ArrayDeque<Byte?>()
2021-03-12 00:25:55,143 [main:149] - GENERATING call of type public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@343131f7]
2021-03-12 00:25:55,222 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:55,222 [main:78] - Generated call from random type = (ArrayDeque<Byte?>()).modCount.downTo(-52)
2021-03-12 00:25:55,222 [main:61] - replacement of ((1098144074).toShort().downTo(90)).reversed() of type IntProgression is (ArrayDeque<Byte?>()).modCount.downTo(-52)
2021-03-12 00:25:55,301 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:25:55,301 [main:53] - replacing (2, Int)
2021-03-12 00:25:55,301 [main:50] - replacing 2 Int
2021-03-12 00:25:55,302 [main:54] - Getting value of type Int
2021-03-12 00:25:55,382 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:55,383 [main:58] - GENERATED VALUE OF TYPE Int = 515509181
2021-03-12 00:25:55,383 [main:61] - GENERATED IS CALL =false
2021-03-12 00:25:55,466 [main:67] - randomType = Float
2021-03-12 00:25:55,545 [main:302] - generating value of type = Float true depth = 0
2021-03-12 00:25:55,582 [main:149] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@538d76b2]
2021-03-12 00:25:55,583 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4a92c6e1]
2021-03-12 00:25:55,583 [main:78] - Generated call from random type = (0.065469384f).toByte().countLeadingZeroBits()
2021-03-12 00:25:55,583 [main:106] - GETTING Int from Int
2021-03-12 00:25:55,622 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@176c15d8], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@53d7ce16]]
2021-03-12 00:25:55,622 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@176c15d8]
2021-03-12 00:25:55,623 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@53d7ce16]
2021-03-12 00:25:55,715 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:55,716 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toShort().plus(125)
2021-03-12 00:25:55,716 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2d98c4cd]]
2021-03-12 00:25:55,716 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c]
2021-03-12 00:25:55,717 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2d98c4cd]
2021-03-12 00:25:55,717 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toInt().ushr(logged("qgqal", -1803481113))
2021-03-12 00:25:55,717 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61bfcf43]]
2021-03-12 00:25:55,717 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c]
2021-03-12 00:25:55,717 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61bfcf43]
2021-03-12 00:25:55,800 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:55,800 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toInt().and(-403513084)
2021-03-12 00:25:55,801 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@793c5b1a], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@cba1c42]]
2021-03-12 00:25:55,801 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@793c5b1a]
2021-03-12 00:25:55,886 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:25:55,886 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).div(356837958872526770).sign
2021-03-12 00:25:55,887 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@176c15d8], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@24ba5996]]
2021-03-12 00:25:55,887 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@176c15d8]
2021-03-12 00:25:55,887 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@24ba5996]
2021-03-12 00:25:55,887 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toShort().countLeadingZeroBits()
2021-03-12 00:25:55,887 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5561cbe0], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@43cc840b]]
2021-03-12 00:25:55,887 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5561cbe0]
2021-03-12 00:25:55,887 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@43cc840b]
2021-03-12 00:25:55,887 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toByte().unaryPlus()
2021-03-12 00:25:55,887 [main:113] - Case = [public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3be7ff76]]
2021-03-12 00:25:55,887 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3be7ff76]
2021-03-12 00:25:55,888 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).dec()
2021-03-12 00:25:55,888 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@76b45e28], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@cba1c42]]
2021-03-12 00:25:55,888 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@76b45e28]
2021-03-12 00:25:55,888 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toLong().sign
2021-03-12 00:25:55,888 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@56ee0cfd]]
2021-03-12 00:25:55,888 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c]
2021-03-12 00:25:55,888 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@56ee0cfd]
2021-03-12 00:25:55,968 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:55,969 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toInt().rem(-29)
2021-03-12 00:25:55,969 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61fe7da7]]
2021-03-12 00:25:55,969 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c]
2021-03-12 00:25:55,969 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61fe7da7]
2021-03-12 00:25:55,969 [main:117] - GENERATED CALL = (logged("qgqal", -1803481113)).toInt().or(logged("qgqal", -1803481113))
2021-03-12 00:25:55,969 [main:61] - replacement of 2 of type Int is (logged("qgqal", -1803481113)).toShort().countLeadingZeroBits()
2021-03-12 00:25:56,047 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:25:56,048 [main:53] - replacing (0, Int)
2021-03-12 00:25:56,048 [main:50] - replacing 0 Int
2021-03-12 00:25:56,048 [main:54] - Getting value of type Int
2021-03-12 00:25:56,128 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:56,129 [main:58] - GENERATED VALUE OF TYPE Int = 2053133271
2021-03-12 00:25:56,129 [main:61] - GENERATED IS CALL =false
2021-03-12 00:25:56,214 [main:67] - randomType = UByte
2021-03-12 00:25:56,315 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 00:25:56,357 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@3dc969e8]
2021-03-12 00:25:56,450 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 00:25:56,451 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4978a3f5]
2021-03-12 00:25:56,532 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:56,533 [main:78] - Generated call from random type = (27.toUByte()).compareTo(24.toUByte()).plus(-37)
2021-03-12 00:25:56,533 [main:106] - GETTING Int from Int
2021-03-12 00:25:56,563 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5561cbe0], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@fa1da5b]]
2021-03-12 00:25:56,563 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5561cbe0]
2021-03-12 00:25:56,563 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@fa1da5b]
2021-03-12 00:25:56,645 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:56,645 [main:117] - GENERATED CALL = (sum).toByte().div(-16)
2021-03-12 00:25:56,645 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@60d993ec]]
2021-03-12 00:25:56,646 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c]
2021-03-12 00:25:56,646 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@60d993ec]
2021-03-12 00:25:56,724 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:56,725 [main:117] - GENERATED CALL = (sum).toInt().div(-54)
2021-03-12 00:25:56,725 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@380e8b10], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2de829a7]]
2021-03-12 00:25:56,725 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@380e8b10]
2021-03-12 00:25:56,804 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:56,805 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2de829a7]
2021-03-12 00:25:56,805 [main:117] - GENERATED CALL = (sum).compareTo(38643900).rotateLeft(sum)
2021-03-12 00:25:56,805 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7c52d599]]
2021-03-12 00:25:56,805 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7c52d599]
2021-03-12 00:25:56,806 [main:117] - GENERATED CALL = (sum).rotateRight(logged("qgqal", -1803481113))
2021-03-12 00:25:56,806 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5561cbe0], public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@33061b48]]
2021-03-12 00:25:56,806 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5561cbe0]
2021-03-12 00:25:56,806 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@33061b48]
2021-03-12 00:25:56,806 [main:117] - GENERATED CALL = (sum).toByte().toInt()
2021-03-12 00:25:56,806 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@520e1ea5], public final val step: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@683b88a4]]
2021-03-12 00:25:56,806 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@520e1ea5]
2021-03-12 00:25:56,883 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:56,884 [main:117] - GENERATED CALL = (sum).rangeTo(92).step
2021-03-12 00:25:56,884 [main:113] - Case = [public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@455cd186]]
2021-03-12 00:25:56,884 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@455cd186]
2021-03-12 00:25:56,962 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:56,963 [main:117] - GENERATED CALL = (sum).times(-112)
2021-03-12 00:25:56,963 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@380e8b10], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61fe7da7]]
2021-03-12 00:25:56,963 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@380e8b10]
2021-03-12 00:25:56,963 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@61fe7da7]
2021-03-12 00:25:56,963 [main:117] - GENERATED CALL = (sum).compareTo(sum).or(sum)
2021-03-12 00:25:56,963 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@380e8b10], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@56ee0cfd]]
2021-03-12 00:25:56,963 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@380e8b10]
2021-03-12 00:25:57,072 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:25:57,073 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@56ee0cfd]
2021-03-12 00:25:57,158 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:57,159 [main:117] - GENERATED CALL = (sum).compareTo(-1770400418).rem(60)
2021-03-12 00:25:57,159 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@561c8763]]
2021-03-12 00:25:57,159 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb]
2021-03-12 00:25:57,159 [main:149] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@561c8763]
2021-03-12 00:25:57,159 [main:117] - GENERATED CALL = (sum).toChar().digitToInt()
2021-03-12 00:25:57,159 [main:61] - replacement of 0 of type Int is (sum).toInt().div(-54)
2021-03-12 00:25:57,240 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:25:57,241 [main:66] - Compilation checking started
2021-03-12 00:25:57,520 [main:49] - Result = false
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = (sum).toInt().div(-54)
    for (i in (Array<Short>(-1569281625, {a: Int -> 22203})).get(577699079).downTo(-56)) {
        sum = (logged("qgqal", -1803481113)).compareTo(1999383835).times(90)
    }

    assertEquals((5562).toByte().unaryMinus(), (log).subSequence(sum, sum).indexOfLast({a: Char -> false}))

    assertEquals((sum).toChar().uppercase(), (log).substring(logged("qgqal", -1803481113)).take(sum))

    return "OK"
}


2021-03-12 00:25:57,520 [main:53] - replacing (logged("start;", (logged("qgqal", -1803481113)).toInt())..logged((logged("qgqal", -1803481113)).toChar().lowercase(), 8), IntRange)
2021-03-12 00:25:57,520 [main:50] - replacing logged("start;", (logged("qgqal", -1803481113)).toInt())..logged((logged("qgqal", -1803481113)).toChar().lowercase(), 8) IntRange
2021-03-12 00:25:57,520 [main:54] - Getting value of type IntRange
2021-03-12 00:25:57,600 [main:302] - generating value of type = IntRange false depth = 0
2021-03-12 00:25:57,684 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 00:25:57,685 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 00:25:57,950 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:25:57,950 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:25:57,951 [main:95] - GENERATED = IntRange(-1775879811, -381110036)
2021-03-12 00:25:57,951 [main:58] - GENERATED VALUE OF TYPE IntRange = IntRange(-1775879811, -381110036)
2021-03-12 00:25:57,951 [main:61] - GENERATED IS CALL =true
2021-03-12 00:25:58,458 [main:67] - randomType = ArrayList<Map<Map<String?, Float>, Short>>?
2021-03-12 00:25:58,539 [main:302] - generating value of type = ArrayList<Map<Map<String?, Float>, Short>> false depth = 0
2021-03-12 00:25:58,645 [main:43] - GENERATING CALL OF fun <E> ArrayList(elements: kotlin.collections.Collection<Map<Map<String?, Float>, Short>>): ArrayList<Map<Map<String?, Float>, Short>> = TODO()
2021-03-12 00:25:58,646 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(elements: kotlin.collections.Collection<Map<Map<String?, Float>, Short>>): ArrayList<Map<Map<String?, Float>, Short>> = TODO()
2021-03-12 00:25:58,820 [main:302] - generating value of type = Collection<Map<Map<String?, Float>, Short>> false depth = 3
2021-03-12 00:25:58,905 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): Collection<Map<Map<Strg?, Float>, Short>> = TODO()
2021-03-12 00:25:58,906 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): Collection<Map<Map<Strg?, Float>, Short>> = TODO()
2021-03-12 00:25:58,987 [main:95] - GENERATED = arrayListOf<Map<Map<String?, Float>, Short>>()
2021-03-12 00:25:58,987 [main:95] - GENERATED = ArrayList<Map<Map<String?, Float>, Short>>(arrayListOf<Map<Map<String?, Float>, Short>>())
2021-03-12 00:25:59,224 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3909995c]
2021-03-12 00:25:59,302 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:25:59,303 [main:78] - Generated call from random type = (ArrayList<Map<Map<String?, Float>, Short>>(arrayListOf<Map<Map<String?, Float>, Short>>()))?.modCount.until(-71)
2021-03-12 00:25:59,303 [main:61] - replacement of logged("start;", (logged("qgqal", -1803481113)).toInt())..logged((logged("qgqal", -1803481113)).toChar().lowercase(), 8) of type IntRange is (ArrayList<Map<Map<String?, Float>, Short>>(arrayListOf<Map<Map<String?, Float>, Short>>()))?.modCount.until(-71)
2021-03-12 00:25:59,386 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:25:59,478 [main:119] - TRYING TO REPLACE CONSTANT 1803481113
2021-03-12 00:25:59,556 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 00:25:59,556 [main:66] - Compilation checking started
2021-03-12 00:25:59,899 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in (Array<Short>(-1569281625, {a: Int -> 22203})).get(577699079).downTo(-56)) {
        sum = (logged("qgqal", -1803481113)).compareTo(1999383835).times(90)
    }

    assertEquals((5562).toByte().unaryMinus(), (log).subSequence(sum, sum).indexOfLast({a: Char -> false}))

    assertEquals((sum).toChar().uppercase(), (log).substring(logged("qgqal", -56)).take(sum))

    return "OK"
}


2021-03-12 00:25:59,899 [main:119] - TRYING TO REPLACE CONSTANT false
2021-03-12 00:25:59,979 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 00:25:59,979 [main:66] - Compilation checking started
2021-03-12 00:26:00,339 [main:119] - TRYING TO REPLACE CONSTANT 5562
2021-03-12 00:26:00,420 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 00:26:00,421 [main:66] - Compilation checking started
2021-03-12 00:26:00,663 [main:49] - Result = false
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in (Array<Short>(-1569281625, {a: Int -> 22203})).get(577699079).downTo(-56)) {
        sum = (logged("qgqal", -1803481113)).compareTo(1999383835).times(90)
    }

    assertEquals((unaryMinus()).toByte().unaryMinus(), (log).subSequence(sum, sum).indexOfLast({a: Char -> false}))

    assertEquals((sum).toChar().uppercase(), (log).substring(logged("qgqal", -56)).take(sum))

    return "OK"
}


2021-03-12 00:26:00,664 [main:119] - TRYING TO REPLACE CONSTANT 90
2021-03-12 00:26:00,756 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 00:26:00,756 [main:66] - Compilation checking started
2021-03-12 00:26:01,042 [main:49] - Result = false
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in (Array<Short>(-1569281625, {a: Int -> 22203})).get(577699079).downTo(-56)) {
        sum = (logged("qgqal", -1803481113)).compareTo(1999383835).times(compareTo(1999383835))
    }

    assertEquals((5562).toByte().unaryMinus(), (log).subSequence(sum, sum).indexOfLast({a: Char -> false}))

    assertEquals((sum).toChar().uppercase(), (log).substring(logged("qgqal", -56)).take(sum))

    return "OK"
}


2021-03-12 00:26:01,042 [main:119] - TRYING TO REPLACE CONSTANT 1999383835
2021-03-12 00:26:01,162 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-12 00:26:01,162 [main:66] - Compilation checking started
2021-03-12 00:26:01,536 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in (Array<Short>(-1569281625, {a: Int -> 22203})).get(577699079).downTo(-56)) {
        sum = (logged("qgqal", -1803481113)).compareTo(-56).times(90)
    }

    assertEquals((5562).toByte().unaryMinus(), (log).subSequence(sum, sum).indexOfLast({a: Char -> false}))

    assertEquals((sum).toChar().uppercase(), (log).substring(logged("qgqal", -56)).take(sum))

    return "OK"
}


2021-03-12 00:26:01,536 [main:119] - TRYING TO REPLACE CONSTANT 1803481113
2021-03-12 00:26:01,620 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 00:26:01,620 [main:66] - Compilation checking started
2021-03-12 00:26:01,997 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in (Array<Short>(-1569281625, {a: Int -> 22203})).get(577699079).downTo(-56)) {
        sum = (logged("qgqal", sum)).compareTo(-56).times(90)
    }

    assertEquals((5562).toByte().unaryMinus(), (log).subSequence(sum, sum).indexOfLast({a: Char -> false}))

    assertEquals((sum).toChar().uppercase(), (log).substring(logged("qgqal", -56)).take(sum))

    return "OK"
}


2021-03-12 00:26:01,997 [main:119] - TRYING TO REPLACE CONSTANT 577699079
2021-03-12 00:26:02,081 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-12 00:26:02,081 [main:66] - Compilation checking started
2021-03-12 00:26:02,408 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in (Array<Short>(-1569281625, {a: Int -> 22203})).get(sum).downTo(-56)) {
        sum = (logged("qgqal", sum)).compareTo(-56).times(90)
    }

    assertEquals((5562).toByte().unaryMinus(), (log).subSequence(sum, sum).indexOfLast({a: Char -> false}))

    assertEquals((sum).toChar().uppercase(), (log).substring(logged("qgqal", -56)).take(sum))

    return "OK"
}


2021-03-12 00:26:02,408 [main:119] - TRYING TO REPLACE CONSTANT 56
2021-03-12 00:26:02,498 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 00:26:02,498 [main:66] - Compilation checking started
2021-03-12 00:26:02,812 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in (Array<Short>(-1569281625, {a: Int -> 22203})).get(sum).downTo(56)) {
        sum = (logged("qgqal", sum)).compareTo(-56).times(90)
    }

    assertEquals((5562).toByte().unaryMinus(), (log).subSequence(sum, sum).indexOfLast({a: Char -> false}))

    assertEquals((sum).toChar().uppercase(), (log).substring(logged("qgqal", -56)).take(sum))

    return "OK"
}


2021-03-12 00:26:02,813 [main:119] - TRYING TO REPLACE CONSTANT 1569281625
2021-03-12 00:26:02,901 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 00:26:02,902 [main:66] - Compilation checking started
2021-03-12 00:26:03,240 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in (Array<Short>(1803481113, {a: Int -> 22203})).get(sum).downTo(56)) {
        sum = (logged("qgqal", sum)).compareTo(-56).times(90)
    }

    assertEquals((5562).toByte().unaryMinus(), (log).subSequence(sum, sum).indexOfLast({a: Char -> false}))

    assertEquals((sum).toChar().uppercase(), (log).substring(logged("qgqal", -56)).take(sum))

    return "OK"
}


2021-03-12 00:26:03,240 [main:119] - TRYING TO REPLACE CONSTANT 22203
2021-03-12 00:26:03,317 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 00:26:03,317 [main:66] - Compilation checking started
2021-03-12 00:26:03,524 [main:49] - Result = false
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in (Array<Short>(1803481113, {a: Int -> get(sum)})).get(sum).downTo(56)) {
        sum = (logged("qgqal", sum)).compareTo(-56).times(90)
    }

    assertEquals((5562).toByte().unaryMinus(), (log).subSequence(sum, sum).indexOfLast({a: Char -> false}))

    assertEquals((sum).toChar().uppercase(), (log).substring(logged("qgqal", -56)).take(sum))

    return "OK"
}


2021-03-12 00:26:03,545 [main:41] - AFTER TRY 0 res = import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}
2021-03-12 00:26:03,841 [main:43] - GENERATING CALL OF fun logged(message: String, value: Int) =
    value.also { log.append(message) }
2021-03-12 00:26:03,841 [main:61] - WITHOUT TYPE PARAMS = fun logged(message: String, value: Int) =
    value.also { log.append(message) }
2021-03-12 00:26:03,916 [main:302] - generating value of type = String true depth = 1
2021-03-12 00:26:03,917 [main:302] - generating value of type = Int true depth = 1
2021-03-12 00:26:03,917 [main:95] - GENERATED = logged("fxukw", -1560474110)
2021-03-12 00:26:04,014 [main:43] - Try №0
2021-03-12 00:26:12,784 [main:48] - Already checked
2021-03-12 00:26:16,281 [main:69] - Trying to insert override fun fu4(exception: Throwable) {
        throw exception
    }
2021-03-12 00:26:16,465 [main:66] - Compilation checking started
2021-03-12 00:26:17,494 [main:103] - Trying to change 143 nodes
2021-03-12 00:26:17,494 [main:107] - replacing ("OK", String)
2021-03-12 00:26:17,495 [main:50] - replacing "OK" String
2021-03-12 00:26:17,495 [main:54] - Getting value of type String
2021-03-12 00:26:17,645 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:26:17,647 [main:58] - GENERATED VALUE OF TYPE String = "cleww"
2021-03-12 00:26:17,647 [main:61] - GENERATED IS CALL =false
2021-03-12 00:26:17,791 [main:67] - randomType = Kla5
2021-03-12 00:26:17,923 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 00:26:17,924 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}
2021-03-12 00:26:17,966 [main:106] - GETTING String from StringBuilder
2021-03-12 00:26:18,008 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@42306a11], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@695773f4]]
2021-03-12 00:26:18,008 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@42306a11]
2021-03-12 00:26:18,158 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:26:18,160 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@695773f4]
2021-03-12 00:26:18,310 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:26:18,440 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:26:18,442 [main:117] - GENERATED CALL = (log).substring(1309811962).substringAfterLast('爎', "fhoee")
2021-03-12 00:26:18,442 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@42306a11], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49afdb60]]
2021-03-12 00:26:18,442 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@42306a11]
2021-03-12 00:26:18,442 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49afdb60]
2021-03-12 00:26:18,580 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 00:26:18,752 [main:43] - GENERATING CALL OF fun <T> listOfNotNull(element: Int): Iterable<Int> = TODO()
2021-03-12 00:26:18,755 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOfNotNull(element: Int): Iterable<Int> = TODO()
2021-03-12 00:26:18,899 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:26:18,901 [main:95] - GENERATED = listOfNotNull<Int>(-27284745)
2021-03-12 00:26:18,901 [main:117] - GENERATED CALL = (log).substring(logged("start;", 1)).slice(listOfNotNull<Int>(-27284745))
2021-03-12 00:26:18,902 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@42306a11], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@219935b7]]
2021-03-12 00:26:18,902 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@42306a11]
2021-03-12 00:26:18,902 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@219935b7]
2021-03-12 00:26:19,040 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:26:19,042 [main:117] - GENERATED CALL = (log).substring(sum * 10).trimMargin("xuqna")
2021-03-12 00:26:19,043 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@42306a11], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a65258d]]
2021-03-12 00:26:19,043 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@42306a11]
2021-03-12 00:26:19,043 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a65258d]
2021-03-12 00:26:19,043 [main:117] - GENERATED CALL = (log).substring(logged("fxukw", -1560474110)).toUpperCase()
2021-03-12 00:26:19,043 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@42306a11], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b644024]]
2021-03-12 00:26:19,043 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@42306a11]
2021-03-12 00:26:19,044 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b644024]
2021-03-12 00:26:19,044 [main:117] - GENERATED CALL = (log).substring(sum * 10).reversed()
2021-03-12 00:26:19,044 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@42306a11], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d75aab7]]
2021-03-12 00:26:19,044 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@42306a11]
2021-03-12 00:26:19,044 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d75aab7]
2021-03-12 00:26:19,184 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:26:19,186 [main:117] - GENERATED CALL = (log).substring(logged("start;", 1)).padStart(logged("fxukw", -1560474110), '聛')
2021-03-12 00:26:19,186 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@42306a11], @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e5c42c8]]
2021-03-12 00:26:19,186 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@42306a11]
2021-03-12 00:26:19,187 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e5c42c8]
2021-03-12 00:26:19,187 [main:117] - GENERATED CALL = (log).substring(logged("fxukw", -1560474110)).substring(sum * 10)
2021-03-12 00:26:19,187 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@42306a11], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b4e516c]]
2021-03-12 00:26:19,187 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@42306a11]
2021-03-12 00:26:19,313 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:26:19,315 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b4e516c]
2021-03-12 00:26:19,316 [main:117] - GENERATED CALL = (log).substring(1849082113).trimEnd()
2021-03-12 00:26:19,316 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@42306a11], public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55c5872]]
2021-03-12 00:26:19,316 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@42306a11]
2021-03-12 00:26:19,447 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:26:19,449 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55c5872]
2021-03-12 00:26:19,574 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:26:19,576 [main:117] - GENERATED CALL = (log).substring(549150836).replaceIndent("nixbl")
2021-03-12 00:26:19,576 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@1da0893], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@483ecce2]]
2021-03-12 00:26:19,576 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@1da0893]
2021-03-12 00:26:19,576 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@483ecce2]
2021-03-12 00:26:19,576 [main:117] - GENERATED CALL = (log).get(var sum =.titlecase()
2021-03-12 00:26:19,577 [main:114] - replacement of "OK" of type String is (log).get(var sum =.titlecase()
2021-03-12 00:26:19,699 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(BINARY_EXPRESSION)
2021-03-12 00:26:19,699 [main:66] - Compilation checking started
2021-03-12 00:26:19,704 [main:71] - Wrong syntax or breaks conditions
2021-03-12 00:26:19,704 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

fun fu0(c: suspend () -> Unit): String {
    var sum = 0
val log = StringBuilder()
var prope2 = false
    c.startCoroutine(fu2 {
        prope2 = true
    })
    if (!prope2) throw RuntimeException("Was not called")
    return (log).get(var sum =.titlecase()
}

fun fu1() {}

fun box193(): String {
    return fu0 {}
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:26:19,706 [main:107] - replacing (true, Boolean)
2021-03-12 00:26:19,707 [main:50] - replacing true Boolean
2021-03-12 00:26:19,707 [main:54] - Getting value of type Boolean
2021-03-12 00:26:19,830 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:26:19,832 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 00:26:19,832 [main:61] - GENERATED IS CALL =false
2021-03-12 00:26:20,018 [main:67] - randomType = UByte
2021-03-12 00:26:20,166 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 00:26:20,202 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@4279087e]
2021-03-12 00:26:20,326 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:26:20,327 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34f661d3]
2021-03-12 00:26:20,327 [main:78] - Generated call from random type = (1.toUByte()).equals("efbya").not()
2021-03-12 00:26:20,328 [main:106] - GETTING Boolean from StringBuilder
2021-03-12 00:26:20,359 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@fafdb88], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34f661d3]]
2021-03-12 00:26:20,359 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@fafdb88]
2021-03-12 00:26:20,489 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:26:20,489 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34f661d3]
2021-03-12 00:26:20,490 [main:117] - GENERATED CALL = (log).equals("qxyom").not()
2021-03-12 00:26:20,490 [main:113] - Case = [public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ee60102]]
2021-03-12 00:26:20,490 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ee60102]
2021-03-12 00:26:20,490 [main:117] - GENERATED CALL = (log).isBlank()
2021-03-12 00:26:20,490 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@1da0893], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a2a215a]]
2021-03-12 00:26:20,490 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@1da0893]
2021-03-12 00:26:20,490 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a2a215a]
2021-03-12 00:26:20,610 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:26:20,736 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:26:20,738 [main:117] - GENERATED CALL = (log).get(logged("start;", 1)).equals('?', false)
2021-03-12 00:26:20,738 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@542071d0]]
2021-03-12 00:26:20,738 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@542071d0]
2021-03-12 00:26:20,739 [main:117] - GENERATED CALL = (log).isNotBlank()
2021-03-12 00:26:20,739 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@1da0893], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f0828ce]]
2021-03-12 00:26:20,739 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@1da0893]
2021-03-12 00:26:20,866 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:26:20,867 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f0828ce]
2021-03-12 00:26:20,868 [main:117] - GENERATED CALL = (log).get(-1796029259).isDigit()
2021-03-12 00:26:20,868 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@1da0893], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@526344ea]]
2021-03-12 00:26:20,868 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@1da0893]
2021-03-12 00:26:20,868 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@526344ea]
2021-03-12 00:26:20,868 [main:117] - GENERATED CALL = (log).get(var sum =.isISOControl()
2021-03-12 00:26:20,868 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@26918705], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d35cd41]]
2021-03-12 00:26:20,869 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@26918705]
2021-03-12 00:26:21,026 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:26:21,174 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:26:21,176 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d35cd41]
2021-03-12 00:26:21,176 [main:117] - GENERATED CALL = (log).subSequence(-76038826, -631659852).isNotEmpty()
2021-03-12 00:26:21,177 [main:113] - Case = [public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43d96b8a]]
2021-03-12 00:26:21,177 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43d96b8a]
2021-03-12 00:26:21,177 [main:117] - GENERATED CALL = (log).none()
2021-03-12 00:26:21,177 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@1da0893], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7945aa1c]]
2021-03-12 00:26:21,177 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@1da0893]
2021-03-12 00:26:21,301 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:26:21,303 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7945aa1c]
2021-03-12 00:26:21,303 [main:117] - GENERATED CALL = (log).get(481362283).isTitleCase()
2021-03-12 00:26:21,303 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@1da0893], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6445fd39]]
2021-03-12 00:26:21,303 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@1da0893]
2021-03-12 00:26:21,303 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6445fd39]
2021-03-12 00:26:21,304 [main:117] - GENERATED CALL = (log).get(var sum =.isLetter()
2021-03-12 00:26:21,304 [main:114] - replacement of true of type Boolean is (log).equals("qxyom").not()
2021-03-12 00:26:21,432 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:26:21,432 [main:66] - Compilation checking started
2021-03-12 00:26:22,078 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

fun fu0(c: suspend () -> Unit): String {
    var sum = 0
val log = StringBuilder()
var prope2 = false
    c.startCoroutine(fu2 {
        prope2 = true
    })
    if (!prope2) throw RuntimeException("Was not called")
    return "OK"
}

fun fu1() {}

fun box193(): String {
    return fu0 {}
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        var sum = 0
val log = StringBuilder()
prope4.find { it?.methodName?.startsWith(method) == (log).equals("qxyom").not() } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:26:22,080 [main:107] - replacing (prope2, Boolean)
2021-03-12 00:26:22,080 [main:50] - replacing prope2 Boolean
2021-03-12 00:26:22,080 [main:54] - Getting value of type Boolean
2021-03-12 00:26:22,206 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:26:22,208 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 00:26:22,208 [main:61] - GENERATED IS CALL =false
2021-03-12 00:26:22,359 [main:67] - randomType = Float
2021-03-12 00:26:22,507 [main:302] - generating value of type = Float true depth = 0
2021-03-12 00:26:22,559 [main:149] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@538d76b2]
2021-03-12 00:26:22,559 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2197f49c]
2021-03-12 00:26:22,694 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:26:22,695 [main:78] - Generated call from random type = (0.69760615f).toByte().equals("pwzqq")
2021-03-12 00:26:22,696 [main:106] - GETTING Boolean from IntProgression
2021-03-12 00:26:22,716 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@a1100b7]]
2021-03-12 00:26:22,716 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@a1100b7]
2021-03-12 00:26:22,717 [main:117] - GENERATED CALL = (((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).none()
2021-03-12 00:26:22,717 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@36023a1a]]
2021-03-12 00:26:22,717 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@36023a1a]
2021-03-12 00:26:22,843 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:26:22,843 [main:117] - GENERATED CALL = (((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).equals("pellg")
2021-03-12 00:26:22,843 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@36023a1a], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34f661d3]]
2021-03-12 00:26:22,843 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@36023a1a]
2021-03-12 00:26:22,975 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:26:22,975 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34f661d3]
2021-03-12 00:26:22,975 [main:117] - GENERATED CALL = (((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).equals("qizjy").not()
2021-03-12 00:26:22,976 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@36023a1a], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5dc4089d]]
2021-03-12 00:26:22,976 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@36023a1a]
2021-03-12 00:26:23,109 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:26:23,109 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5dc4089d]
2021-03-12 00:26:23,266 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:26:23,266 [main:117] - GENERATED CALL = (((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).equals("hsqfj").equals("menpk")
2021-03-12 00:26:23,266 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@36023a1a], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7c97fff8]]
2021-03-12 00:26:23,266 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@36023a1a]
2021-03-12 00:26:23,399 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:26:23,400 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7c97fff8]
2021-03-12 00:26:23,537 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:26:23,539 [main:117] - GENERATED CALL = (((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).equals("abbmm").and(true)
2021-03-12 00:26:23,539 [main:113] - Case = [public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@3ac211a3]]
2021-03-12 00:26:23,539 [main:149] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@3ac211a3]
2021-03-12 00:26:23,539 [main:117] - GENERATED CALL = (((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).isEmpty()
2021-03-12 00:26:23,539 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@36023a1a], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29d38163]]
2021-03-12 00:26:23,540 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@36023a1a]
2021-03-12 00:26:23,712 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:26:23,712 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@29d38163]
2021-03-12 00:26:23,837 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:26:23,838 [main:117] - GENERATED CALL = (((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).equals("arnqj").xor(true)
2021-03-12 00:26:23,839 [main:113] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.all(predicate: (T) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@69edd8d0]]
2021-03-12 00:26:23,839 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.all(predicate: (T) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@69edd8d0]
2021-03-12 00:26:23,960 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-12 00:26:23,962 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:26:23,964 [main:117] - GENERATED CALL = (((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).all({a: T -> false})
2021-03-12 00:26:23,964 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@36023a1a], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4a2ab49e]]
2021-03-12 00:26:23,964 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@36023a1a]
2021-03-12 00:26:24,082 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:26:24,082 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4a2ab49e]
2021-03-12 00:26:24,213 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:26:24,214 [main:117] - GENERATED CALL = (((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).equals("iessy").or(false)
2021-03-12 00:26:24,215 [main:113] - Case = [public open fun iterator(): kotlin.collections.IntIterator defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@bc39a4f], public abstract fun hasNext(): kotlin.Boolean defined in kotlin.collections.IntIterator[DeserializedSimpleFunctionDescriptor@5f425d08]]
2021-03-12 00:26:24,215 [main:149] - GENERATING call of type public open fun iterator(): kotlin.collections.IntIterator defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@bc39a4f]
2021-03-12 00:26:24,215 [main:149] - GENERATING call of type public abstract fun hasNext(): kotlin.Boolean defined in kotlin.collections.IntIterator[DeserializedSimpleFunctionDescriptor@5f425d08]
2021-03-12 00:26:24,215 [main:117] - GENERATED CALL = (((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).iterator().hasNext()
2021-03-12 00:26:24,215 [main:114] - replacement of prope2 of type Boolean is (((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).equals("arnqj").xor(true)
2021-03-12 00:26:24,334 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:26:24,334 [main:66] - Compilation checking started
2021-03-12 00:26:25,004 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

fun fu0(c: suspend () -> Unit): String {
    var sum = 0
val log = StringBuilder()
var prope2 = false
    c.startCoroutine(fu2 {
        prope2 = true
    })
    if (!(((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).equals("arnqj").xor(true)) throw RuntimeException("Was not called")
    return "OK"
}

fun fu1() {}

fun box193(): String {
    return fu0 {}
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        var sum = 0
val log = StringBuilder()
prope4.find { it?.methodName?.startsWith(method) == (log).equals("qxyom").not() } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:26:25,007 [main:107] - replacing (prope5, Int)
2021-03-12 00:26:25,009 [main:50] - replacing prope5 Int
2021-03-12 00:26:25,009 [main:54] - Getting value of type Int
2021-03-12 00:26:25,154 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:26:25,156 [main:58] - GENERATED VALUE OF TYPE Int = 606892349
2021-03-12 00:26:25,156 [main:61] - GENERATED IS CALL =false
2021-03-12 00:26:25,163 [main:67] - randomType = Kla0
2021-03-12 00:26:25,296 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 00:26:25,298 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}
2021-03-12 00:26:25,422 [main:194] - Type params = []
2021-03-12 00:26:25,545 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 00:26:25,668 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:26:25,672 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:26:25,997 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 00:26:26,135 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:26:26,137 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:26:26,640 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-12 00:26:26,774 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 00:26:26,777 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 00:26:27,187 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 00:26:27,187 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:26:27,187 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:26:27,207 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@2805ee0a]
2021-03-12 00:26:27,329 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:26:27,329 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@25ab7132]
2021-03-12 00:26:27,451 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:26:27,453 [main:78] - Generated call from random type = (Kla0()).equals("qqjmy").compareTo(true)
2021-03-12 00:26:27,453 [main:114] - replacement of prope5 of type Int is (Kla0()).equals("qqjmy").compareTo(true)
2021-03-12 00:26:27,623 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:26:27,623 [main:66] - Compilation checking started
2021-03-12 00:26:28,057 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

fun fu0(c: suspend () -> Unit): String {
    var sum = 0
val log = StringBuilder()
var prope2 = false
    c.startCoroutine(fu2 {
        prope2 = true
    })
    if (!(((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).equals("arnqj").xor(true)) throw RuntimeException("Was not called")
    return "OK"
}

fun fu1() {}

fun box193(): String {
    return fu0 {}
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        var sum = 0
val log = StringBuilder()
prope4.find { it?.methodName?.startsWith(method) == (log).equals("qxyom").not() } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        var sum = 0
val log = StringBuilder()
(Kla0()).equals("qqjmy").compareTo(true) = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:26:28,059 [main:107] - replacing ({
        prope3.exceptionOrNull()?.let(x)
    }, Unit?)
2021-03-12 00:26:28,060 [main:50] - replacing {
        var sum = 0
val log = StringBuilder()
prope3.exceptionOrNull()?.let(x)
    } Unit?
2021-03-12 00:26:28,060 [main:54] - Getting value of type Unit?
2021-03-12 00:26:28,187 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 00:26:28,314 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:26:28,317 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:26:28,666 [main:302] - generating value of type = Any false depth = 3
2021-03-12 00:26:28,666 [main:95] - GENERATED = print("fdkrt")
2021-03-12 00:26:28,666 [main:58] - GENERATED VALUE OF TYPE Unit? = print("fdkrt")
2021-03-12 00:26:28,666 [main:61] - GENERATED IS CALL =true
2021-03-12 00:26:28,817 [main:67] - randomType = Boolean?
2021-03-12 00:26:28,941 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:26:28,958 [main:106] - GETTING Unit? from IntProgression
2021-03-12 00:26:28,970 [main:113] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.forEachIndexed(action: (index: kotlin.Int, T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2aa31739]]
2021-03-12 00:26:28,971 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.forEachIndexed(action: (index: kotlin.Int, T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2aa31739]
2021-03-12 00:26:29,088 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, T, Unit> false depth = 0
2021-03-12 00:26:29,090 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:26:29,220 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:26:29,223 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:26:29,492 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:26:29,492 [main:95] - GENERATED = print("vkleh")
2021-03-12 00:26:29,493 [main:117] - GENERATED CALL = ((logged("start;", 1)..logged("end;", 8)).reversed())?.forEachIndexed({a: Int, b: T -> print("vkleh")})
2021-03-12 00:26:29,493 [main:113] - Case = [public abstract operator fun iterator(): kotlin.collections.Iterator<kotlin.Int> defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@530fcdb9], public inline fun <T> kotlin.collections.Iterator<T>.forEach(operation: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1642ae82]]
2021-03-12 00:26:29,493 [main:149] - GENERATING call of type public abstract operator fun iterator(): kotlin.collections.Iterator<kotlin.Int> defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@530fcdb9]
2021-03-12 00:26:29,493 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterator<T>.forEach(operation: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1642ae82]
2021-03-12 00:26:29,614 [main:302] - generating value of type = Function1<T, Unit> false depth = 0
2021-03-12 00:26:29,616 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:26:29,746 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:26:29,749 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:26:30,037 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:26:30,039 [main:95] - GENERATED = check(true)
2021-03-12 00:26:30,040 [main:117] - GENERATED CALL = ((logged("start;", 1)..logged("end;", 8)).reversed())?.iterator().forEach({a: T -> check(true)})
2021-03-12 00:26:30,040 [main:113] - Case = [@kotlin.internal.HidesMembers public inline fun <T> kotlin.collections.Iterable<T>.forEach(action: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4798dff0]]
2021-03-12 00:26:30,040 [main:149] - GENERATING call of type @kotlin.internal.HidesMembers public inline fun <T> kotlin.collections.Iterable<T>.forEach(action: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4798dff0]
2021-03-12 00:26:30,160 [main:302] - generating value of type = Function1<T, Unit> false depth = 0
2021-03-12 00:26:30,162 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:26:30,281 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:26:30,283 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:26:30,668 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:26:30,670 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 00:26:30,672 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 00:26:30,824 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:26:30,828 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:26:31,097 [main:302] - generating value of type = Any false depth = 8
2021-03-12 00:26:31,097 [main:95] - GENERATED = print("vdyxq")
2021-03-12 00:26:31,098 [main:95] - GENERATED = repeat(539583690, {a: Int -> print("vdyxq")})
2021-03-12 00:26:31,098 [main:117] - GENERATED CALL = ((logged("start;", 1)..logged("end;", 8)).reversed())?.forEach({a: T -> repeat(539583690, {a: Int -> print("vdyxq")})})
2021-03-12 00:26:31,098 [main:114] - replacement of {
        var sum = 0
val log = StringBuilder()
prope3.exceptionOrNull()?.let(x)
    } of type Unit? is ((logged("start;", 1)..logged("end;", 8)).reversed())?.forEach({a: T -> repeat(539583690, {a: Int -> print("vdyxq")})})
2021-03-12 00:26:31,213 [main:33] - Trying to replace BLOCK on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 00:26:31,213 [main:66] - Compilation checking started
2021-03-12 00:26:31,217 [main:71] - Wrong syntax or breaks conditions
2021-03-12 00:26:31,218 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

fun fu0(c: suspend () -> Unit): String {
    var sum = 0
val log = StringBuilder()
var prope2 = false
    c.startCoroutine(fu2 {
        prope2 = true
    })
    if (!(((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).equals("arnqj").xor(true)) throw RuntimeException("Was not called")
    return "OK"
}

fun fu1() {}

fun box193(): String {
    return fu0 {}
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) ((logged("start;", 1)..logged("end;", 8)).reversed())?.forEach({a: T -> repeat(539583690, {a: Int -> print("vdyxq")})})
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        var sum = 0
val log = StringBuilder()
prope4.find { it?.methodName?.startsWith(method) == (log).equals("qxyom").not() } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        var sum = 0
val log = StringBuilder()
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:26:31,219 [main:107] - replacing (fu2 {
        prope2 = true
    }, Continuation<Unit>)
2021-03-12 00:26:31,220 [main:50] - replacing fu2 {
        prope2 = true
    } Continuation<Unit>
2021-03-12 00:26:31,220 [main:54] - Getting value of type Continuation<Unit>
2021-03-12 00:26:31,336 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-12 00:26:31,463 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 00:26:31,466 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 00:26:31,897 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 00:26:32,017 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:26:32,020 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:26:32,275 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 00:26:32,400 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:26:32,402 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:26:32,861 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:26:32,861 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:26:32,861 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 00:26:32,861 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-12 00:26:32,868 [main:67] - randomType = Kla1
2021-03-12 00:26:32,987 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 00:26:32,989 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 00:26:33,013 [main:106] - GETTING Continuation<Unit> from IntProgression
2021-03-12 00:26:33,032 [main:106] - GETTING Continuation<Unit> from Int
2021-03-12 00:26:33,084 [main:106] - GETTING Continuation<Unit> from IntRange
2021-03-12 00:26:33,112 [main:106] - GETTING Continuation<Unit> from IntProgression
2021-03-12 00:26:33,113 [main:106] - GETTING Continuation<Unit> from IntRange
2021-03-12 00:26:33,114 [main:106] - GETTING Continuation<Unit> from Int
2021-03-12 00:26:33,115 [main:106] - GETTING Continuation<Unit> from Int
2021-03-12 00:26:33,116 [main:106] - GETTING Continuation<Unit> from IntProgression
2021-03-12 00:26:33,116 [main:106] - GETTING Continuation<Unit> from StringBuilder
2021-03-12 00:26:33,142 [main:111] - Cant find and generate replacement for fu2 {
        prope2 = true
    } type Continuation<Unit>
2021-03-12 00:26:33,142 [main:107] - replacing (prope3.getOrThrow(), Ty0)
2021-03-12 00:26:33,143 [main:50] - replacing prope3.getOrThrow() Ty0
2021-03-12 00:26:33,143 [main:54] - Getting value of type Ty0
2021-03-12 00:26:33,262 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 00:26:33,267 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 00:26:33,538 [main:67] - randomType = Function2<String, Kla4, UByte>
2021-03-12 00:26:33,540 [main:106] - GETTING Ty0 from Int
2021-03-12 00:26:33,589 [main:106] - GETTING Ty0 from IntProgression
2021-03-12 00:26:33,600 [main:106] - GETTING Ty0 from IntRange
2021-03-12 00:26:33,621 [main:106] - GETTING Ty0 from IntProgression
2021-03-12 00:26:33,621 [main:106] - GETTING Ty0 from IntRange
2021-03-12 00:26:33,622 [main:106] - GETTING Ty0 from Int
2021-03-12 00:26:33,623 [main:106] - GETTING Ty0 from IntProgression
2021-03-12 00:26:33,623 [main:106] - GETTING Ty0 from StringBuilder
2021-03-12 00:26:33,641 [main:106] - GETTING Ty0 from Int
2021-03-12 00:26:33,641 [main:111] - Cant find and generate replacement for prope3.getOrThrow() type Ty0
2021-03-12 00:26:33,641 [main:107] - replacing (prope5, Int)
2021-03-12 00:26:33,641 [main:50] - replacing prope5 Int
2021-03-12 00:26:33,641 [main:54] - Getting value of type Int
2021-03-12 00:26:33,756 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:26:33,757 [main:58] - GENERATED VALUE OF TYPE Int = 300469284
2021-03-12 00:26:33,758 [main:61] - GENERATED IS CALL =false
2021-03-12 00:26:33,764 [main:67] - randomType = Kla1
2021-03-12 00:26:33,886 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 00:26:33,888 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 00:26:33,909 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@3b7cf44a]
2021-03-12 00:26:34,027 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:26:34,027 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@25ab7132]
2021-03-12 00:26:34,147 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:26:34,149 [main:78] - Generated call from random type = (Kla1()).equals("nczuk").compareTo(false)
2021-03-12 00:26:34,149 [main:106] - GETTING Int from Int
2021-03-12 00:26:34,182 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@380e8b10], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@c5a853a]]
2021-03-12 00:26:34,182 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@380e8b10]
2021-03-12 00:26:34,296 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:26:34,298 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@c5a853a]
2021-03-12 00:26:34,412 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:26:34,414 [main:117] - GENERATED CALL = (sum * 10).compareTo(1717755592).minus(65)
2021-03-12 00:26:34,414 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@380e8b10], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7c52d599]]
2021-03-12 00:26:34,414 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@380e8b10]
2021-03-12 00:26:34,414 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7c52d599]
2021-03-12 00:26:34,414 [main:117] - GENERATED CALL = (sum * 10).compareTo(logged("start;", 1)).rotateRight(sum * 10)
2021-03-12 00:26:34,414 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@176c15d8], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1f711438]]
2021-03-12 00:26:34,414 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@176c15d8]
2021-03-12 00:26:34,414 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1f711438]
2021-03-12 00:26:34,544 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:26:34,546 [main:117] - GENERATED CALL = (sum * 10).toShort().div(-11)
2021-03-12 00:26:34,546 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@56ee0cfd]]
2021-03-12 00:26:34,546 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c]
2021-03-12 00:26:34,546 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@56ee0cfd]
2021-03-12 00:26:34,678 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:26:34,680 [main:117] - GENERATED CALL = (sum * 10).toInt().rem(-43)
2021-03-12 00:26:34,680 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb], public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1c4b9878]]
2021-03-12 00:26:34,680 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb]
2021-03-12 00:26:34,680 [main:149] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1c4b9878]
2021-03-12 00:26:34,680 [main:117] - GENERATED CALL = (sum * 10).toChar().toInt()
2021-03-12 00:26:34,680 [main:113] - Case = [public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5fe09f92]]
2021-03-12 00:26:34,680 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@5fe09f92]
2021-03-12 00:26:34,796 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:26:34,798 [main:117] - GENERATED CALL = (sum * 10).coerceAtLeast(1595173119)
2021-03-12 00:26:34,798 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5aadd895]]
2021-03-12 00:26:34,798 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c]
2021-03-12 00:26:34,798 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5aadd895]
2021-03-12 00:26:34,798 [main:117] - GENERATED CALL = (sum * 10).toInt().unaryPlus()
2021-03-12 00:26:34,798 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@284e134c]]
2021-03-12 00:26:34,798 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c]
2021-03-12 00:26:34,798 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@284e134c]
2021-03-12 00:26:34,798 [main:117] - GENERATED CALL = (sum * 10).toInt().takeLowestOneBit()
2021-03-12 00:26:34,798 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5561cbe0], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@764f0161]]
2021-03-12 00:26:34,799 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5561cbe0]
2021-03-12 00:26:34,799 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@764f0161]
2021-03-12 00:26:34,920 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:26:34,923 [main:117] - GENERATED CALL = (sum * 10).toByte().plus(110)
2021-03-12 00:26:34,923 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@380e8b10], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@203cc120]]
2021-03-12 00:26:34,923 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@380e8b10]
2021-03-12 00:26:34,923 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@203cc120]
2021-03-12 00:26:34,923 [main:117] - GENERATED CALL = (sum * 10).compareTo(logged("fxukw", -1560474110)).toInt()
2021-03-12 00:26:34,923 [main:114] - replacement of prope5 of type Int is (sum * 10).toShort().div(-11)
2021-03-12 00:26:35,040 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:26:35,041 [main:66] - Compilation checking started
2021-03-12 00:26:35,402 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

fun fu0(c: suspend () -> Unit): String {
    var sum = 0
val log = StringBuilder()
var prope2 = false
    c.startCoroutine(fu2 {
        prope2 = true
    })
    if (!(((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).equals("arnqj").xor(true)) throw RuntimeException("Was not called")
    return "OK"
}

fun fu1() {}

fun box193(): String {
    return fu0 {}
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        var sum = 0
val log = StringBuilder()
if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        var sum = 0
val log = StringBuilder()
prope4.find { it?.methodName?.startsWith(method) == (log).equals("qxyom").not() } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        var sum = 0
val log = StringBuilder()
(sum * 10).toShort().div(-11) = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:26:35,405 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected ", String)
2021-03-12 00:26:35,406 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " String
2021-03-12 00:26:35,406 [main:54] - Getting value of type String
2021-03-12 00:26:35,530 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:26:35,532 [main:58] - GENERATED VALUE OF TYPE String = "yqdis"
2021-03-12 00:26:35,532 [main:61] - GENERATED IS CALL =false
2021-03-12 00:26:35,792 [main:67] - randomType = Long?
2021-03-12 00:26:35,906 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:26:35,940 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c]
2021-03-12 00:26:35,940 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@439e67cf]
2021-03-12 00:26:36,054 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:26:36,056 [main:78] - Generated call from random type = (-6922281940246392482)?.toInt().toString(1625283422)
2021-03-12 00:26:36,057 [main:106] - GETTING String from Int
2021-03-12 00:26:36,089 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@793c5b1a], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ca73ab2]]
2021-03-12 00:26:36,089 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@793c5b1a]
2021-03-12 00:26:36,204 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:26:36,206 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ca73ab2]
2021-03-12 00:26:36,206 [main:117] - GENERATED CALL = (logged("fxukw", -1560474110)).div(598858960497215503).toString(logged("start;", 1))
2021-03-12 00:26:36,206 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a6088d6]]
2021-03-12 00:26:36,206 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb]
2021-03-12 00:26:36,206 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a6088d6]
2021-03-12 00:26:36,207 [main:117] - GENERATED CALL = (logged("fxukw", -1560474110)).toChar().lowercase()
2021-03-12 00:26:36,207 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@439e67cf]]
2021-03-12 00:26:36,207 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@439e67cf]
2021-03-12 00:26:36,207 [main:117] - GENERATED CALL = (logged("fxukw", -1560474110)).toString(logged("fxukw", -1560474110))
2021-03-12 00:26:36,207 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@483ecce2]]
2021-03-12 00:26:36,207 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb]
2021-03-12 00:26:36,207 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@483ecce2]
2021-03-12 00:26:36,207 [main:117] - GENERATED CALL = (logged("fxukw", -1560474110)).toChar().titlecase()
2021-03-12 00:26:36,207 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@76b45e28], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ca73ab2]]
2021-03-12 00:26:36,207 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@76b45e28]
2021-03-12 00:26:36,208 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ca73ab2]
2021-03-12 00:26:36,208 [main:117] - GENERATED CALL = (logged("fxukw", -1560474110)).toLong().toString(sum * 10)
2021-03-12 00:26:36,208 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@439e67cf]]
2021-03-12 00:26:36,208 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c]
2021-03-12 00:26:36,208 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@439e67cf]
2021-03-12 00:26:36,323 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:26:36,325 [main:117] - GENERATED CALL = (logged("fxukw", -1560474110)).toInt().toString(-2128910444)
2021-03-12 00:26:36,326 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@176c15d8], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dbf27f5]]
2021-03-12 00:26:36,326 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@176c15d8]
2021-03-12 00:26:36,326 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dbf27f5]
2021-03-12 00:26:36,326 [main:117] - GENERATED CALL = (logged("fxukw", -1560474110)).toShort().toString(logged("fxukw", -1560474110))
2021-03-12 00:26:36,326 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@450f93f8]]
2021-03-12 00:26:36,326 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb]
2021-03-12 00:26:36,326 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@450f93f8]
2021-03-12 00:26:36,447 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:26:36,449 [main:117] - GENERATED CALL = (logged("fxukw", -1560474110)).toChar().plus("osssl")
2021-03-12 00:26:36,449 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@380e8b10], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@439e67cf]]
2021-03-12 00:26:36,450 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@380e8b10]
2021-03-12 00:26:36,450 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@439e67cf]
2021-03-12 00:26:36,450 [main:117] - GENERATED CALL = (logged("fxukw", -1560474110)).compareTo(var sum =.toString(logged("start;", 1))
2021-03-12 00:26:36,450 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5561cbe0], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4232d9ff]]
2021-03-12 00:26:36,450 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5561cbe0]
2021-03-12 00:26:36,450 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4232d9ff]
2021-03-12 00:26:36,565 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:26:36,567 [main:117] - GENERATED CALL = (logged("fxukw", -1560474110)).toByte().toString(748602996)
2021-03-12 00:26:36,567 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " of type String is (logged("fxukw", -1560474110)).toInt().toString(-2128910444)
2021-03-12 00:26:36,708 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:26:36,709 [main:66] - Compilation checking started
2021-03-12 00:26:37,303 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

fun fu0(c: suspend () -> Unit): String {
    var sum = 0
val log = StringBuilder()
var prope2 = false
    c.startCoroutine(fu2 {
        prope2 = true
    })
    if (!(((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).equals("arnqj").xor(true)) throw RuntimeException("Was not called")
    return "OK"
}

fun fu1() {}

fun box193(): String {
    return fu0 {}
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        var sum = 0
val log = StringBuilder()
if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        var sum = 0
val log = StringBuilder()
prope4.find { it?.methodName?.startsWith(method) == (log).equals("qxyom").not() } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        var sum = 0
val log = StringBuilder()
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((logged("fxukw", -1560474110)).toInt().toString(-2128910444) + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:26:37,305 [main:107] - replacing (getOrThrow(), Any?)
2021-03-12 00:26:37,306 [main:50] - replacing getOrThrow() Any?
2021-03-12 00:26:37,306 [main:54] - Getting value of type Any?
2021-03-12 00:26:37,428 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:26:37,428 [main:58] - GENERATED VALUE OF TYPE Any? = "qsgfl"
2021-03-12 00:26:37,428 [main:61] - GENERATED IS CALL =false
2021-03-12 00:26:37,957 [main:67] - randomType = Pair<Byte, Kla2<Short>>
2021-03-12 00:26:38,084 [main:302] - generating value of type = Pair<Byte, Kla2<Short>> false depth = 0
2021-03-12 00:26:38,209 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Byte, second: Kla2<Short>): Pair<Byte, Kla2<Short>> = TODO()
2021-03-12 00:26:38,212 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Byte, second: Kla2<Short>): Pair<Byte, Kla2<Short>> = TODO()
2021-03-12 00:26:38,335 [main:302] - generating value of type = Byte true depth = 3
2021-03-12 00:26:38,337 [main:302] - generating value of type = Kla2<Short> false depth = 3
2021-03-12 00:26:38,338 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        var sum = 0
val log = StringBuilder()
if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 00:26:38,841 [main:302] - generating value of type = Kla5 false depth = 5
2021-03-12 00:26:38,843 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}
2021-03-12 00:26:38,843 [main:95] - GENERATED = Pair<Byte, Kla2<Short>>(48, Kla5)
2021-03-12 00:26:38,862 [main:106] - GETTING Any? from Int
2021-03-12 00:26:38,906 [main:106] - GETTING Any? from IntRange
2021-03-12 00:26:38,932 [main:106] - GETTING Any? from Int
2021-03-12 00:26:38,933 [main:106] - GETTING Any? from IntProgression
2021-03-12 00:26:38,946 [main:106] - GETTING Any? from Int
2021-03-12 00:26:38,947 [main:106] - GETTING Any? from IntRange
2021-03-12 00:26:38,948 [main:106] - GETTING Any? from IntProgression
2021-03-12 00:26:38,949 [main:106] - GETTING Any? from StringBuilder
2021-03-12 00:26:38,967 [main:106] - GETTING Any? from IntProgression
2021-03-12 00:26:38,967 [main:114] - replacement of getOrThrow() of type Any? is "qsgfl"
2021-03-12 00:26:39,082 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 00:26:39,082 [main:66] - Compilation checking started
2021-03-12 00:26:39,450 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

fun fu0(c: suspend () -> Unit): String {
    var sum = 0
val log = StringBuilder()
var prope2 = false
    c.startCoroutine(fu2 {
        prope2 = true
    })
    if (!(((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).equals("arnqj").xor(true)) throw RuntimeException("Was not called")
    return "OK"
}

fun fu1() {}

fun box193(): String {
    return fu0 {}
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
prope3."qsgfl"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        var sum = 0
val log = StringBuilder()
if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        var sum = 0
val log = StringBuilder()
prope4.find { it?.methodName?.startsWith(method) == (log).equals("qxyom").not() } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        var sum = 0
val log = StringBuilder()
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((logged("fxukw", -1560474110)).toInt().toString(-2128910444) + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:26:39,452 [main:107] - replacing ("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"), String)
2021-03-12 00:26:39,452 [main:50] - replacing "tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n") String
2021-03-12 00:26:39,452 [main:54] - Getting value of type String
2021-03-12 00:26:39,566 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:26:39,568 [main:58] - GENERATED VALUE OF TYPE String = "qcdiq"
2021-03-12 00:26:39,568 [main:61] - GENERATED IS CALL =false
2021-03-12 00:26:39,699 [main:67] - randomType = Char
2021-03-12 00:26:39,816 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:26:39,835 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65ca859b]
2021-03-12 00:26:39,836 [main:78] - Generated call from random type = ('읹').uppercase()
2021-03-12 00:26:39,837 [main:106] - GETTING String from IntRange
2021-03-12 00:26:39,862 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@17ad4591], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@439e67cf]]
2021-03-12 00:26:39,862 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@439e67cf]
2021-03-12 00:26:39,862 [main:117] - GENERATED CALL = ((logged("start;", 1)..logged("end;", 8))).first.toString(logged("start;", 1))
2021-03-12 00:26:39,863 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5f86521c]]
2021-03-12 00:26:39,863 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5f86521c]
2021-03-12 00:26:39,981 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:26:40,102 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:26:40,223 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:26:40,348 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:26:40,482 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 00:26:40,484 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 00:26:40,605 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:26:40,607 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:26:40,853 [main:302] - generating value of type = CharSequence false depth = 4
2021-03-12 00:26:40,857 [main:95] - GENERATED = StringBuilder("ppetf")
2021-03-12 00:26:40,858 [main:117] - GENERATED CALL = ((logged("start;", 1)..logged("end;", 8))).joinToString(StringBuilder(), "ludrm", "yrhum", logged("fxukw", -1560474110), "qsvbu", {a: T -> StringBuilder("ppetf")})
2021-03-12 00:26:40,858 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@33959c2b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@439e67cf]]
2021-03-12 00:26:40,858 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@439e67cf]
2021-03-12 00:26:40,858 [main:117] - GENERATED CALL = ((logged("start;", 1)..logged("end;", 8))).endInclusive.toString(var sum =
2021-03-12 00:26:40,858 [main:114] - replacement of "tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n") of type String is "qcdiq"
2021-03-12 00:26:40,976 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 00:26:40,976 [main:66] - Compilation checking started
2021-03-12 00:26:41,524 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

fun fu0(c: suspend () -> Unit): String {
    var sum = 0
val log = StringBuilder()
var prope2 = false
    c.startCoroutine(fu2 {
        prope2 = true
    })
    if (!(((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).equals("arnqj").xor(true)) throw RuntimeException("Was not called")
    return "OK"
}

fun fu1() {}

fun box193(): String {
    return fu0 {}
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        var sum = 0
val log = StringBuilder()
if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        var sum = 0
val log = StringBuilder()
prope4.find { it?.methodName?.startsWith(method) == (log).equals("qxyom").not() } ?: error("qcdiq")
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        var sum = 0
val log = StringBuilder()
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((logged("fxukw", -1560474110)).toInt().toString(-2128910444) + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:26:41,526 [main:107] - replacing (true, Boolean)
2021-03-12 00:26:41,527 [main:50] - replacing true Boolean
2021-03-12 00:26:41,527 [main:54] - Getting value of type Boolean
2021-03-12 00:26:41,648 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:26:41,649 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 00:26:41,650 [main:61] - GENERATED IS CALL =false
2021-03-12 00:26:42,321 [main:67] - randomType = Map<LinkedHashMap<UShort, Long>, Float>
2021-03-12 00:26:42,322 [main:106] - GETTING Boolean from Int
2021-03-12 00:26:42,352 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@520e1ea5], public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@2a3e2e2e]]
2021-03-12 00:26:42,352 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@520e1ea5]
2021-03-12 00:26:42,466 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:26:42,468 [main:149] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@2a3e2e2e]
2021-03-12 00:26:42,468 [main:117] - GENERATED CALL = (logged("fxukw", -1560474110)).rangeTo(-65).isEmpty()
2021-03-12 00:26:42,468 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2cd3f1c0], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@5a44b349]]
2021-03-12 00:26:42,468 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2cd3f1c0]
2021-03-12 00:26:42,582 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:26:42,583 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@5a44b349]
2021-03-12 00:26:42,584 [main:117] - GENERATED CALL = (logged("fxukw", -1560474110)).div(0.3030337883025088).isFinite()
2021-03-12 00:26:42,584 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@520e1ea5], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@eb069cb]]
2021-03-12 00:26:42,584 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@520e1ea5]
2021-03-12 00:26:42,703 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:26:42,705 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@eb069cb]
2021-03-12 00:26:42,819 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:26:42,821 [main:117] - GENERATED CALL = (logged("fxukw", -1560474110)).rangeTo(15).contains(-1006200388)
2021-03-12 00:26:42,821 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5561cbe0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2197f49c]]
2021-03-12 00:26:42,821 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5561cbe0]
2021-03-12 00:26:42,821 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2197f49c]
2021-03-12 00:26:42,934 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:26:42,934 [main:117] - GENERATED CALL = (logged("fxukw", -1560474110)).toByte().equals("izqub")
2021-03-12 00:26:42,935 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e5517bc], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5dc4089d]]
2021-03-12 00:26:42,935 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e5517bc]
2021-03-12 00:26:43,072 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:26:43,072 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5dc4089d]
2021-03-12 00:26:43,198 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:26:43,198 [main:117] - GENERATED CALL = (logged("fxukw", -1560474110)).equals("jtlex").equals("ejqpv")
2021-03-12 00:26:43,199 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a2a215a]]
2021-03-12 00:26:43,199 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb]
2021-03-12 00:26:43,199 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a2a215a]
2021-03-12 00:26:43,313 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:26:43,427 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:26:43,429 [main:117] - GENERATED CALL = (logged("fxukw", -1560474110)).toChar().equals('៫', true)
2021-03-12 00:26:43,429 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5001d402], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@7ed5d439]]
2021-03-12 00:26:43,429 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5001d402]
2021-03-12 00:26:43,429 [main:149] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@7ed5d439]
2021-03-12 00:26:43,430 [main:117] - GENERATED CALL = (logged("fxukw", -1560474110)).toFloat().isNaN()
2021-03-12 00:26:43,430 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2cd3f1c0], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@206bb3fe]]
2021-03-12 00:26:43,430 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2cd3f1c0]
2021-03-12 00:26:43,543 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:26:43,545 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@206bb3fe]
2021-03-12 00:26:43,545 [main:117] - GENERATED CALL = (logged("fxukw", -1560474110)).div(0.2770037077759038).isInfinite()
2021-03-12 00:26:43,545 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e5517bc], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7c97fff8]]
2021-03-12 00:26:43,545 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e5517bc]
2021-03-12 00:26:43,658 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:26:43,659 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7c97fff8]
2021-03-12 00:26:43,773 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:26:43,775 [main:117] - GENERATED CALL = (logged("fxukw", -1560474110)).equals("jstpf").and(false)
2021-03-12 00:26:43,775 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2cd3f1c0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@47db041b]]
2021-03-12 00:26:43,775 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2cd3f1c0]
2021-03-12 00:26:43,888 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:26:43,890 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@47db041b]
2021-03-12 00:26:44,002 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:26:44,003 [main:117] - GENERATED CALL = (logged("fxukw", -1560474110)).div(0.005402624876050588).equals("wthsj")
2021-03-12 00:26:44,003 [main:114] - replacement of true of type Boolean is (logged("fxukw", -1560474110)).equals("jtlex").equals("ejqpv")
2021-03-12 00:26:44,138 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:26:44,139 [main:66] - Compilation checking started
2021-03-12 00:26:44,695 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

fun fu0(c: suspend () -> Unit): String {
    var sum = 0
val log = StringBuilder()
var prope2 = false
    c.startCoroutine(fu2 {
        prope2 = true
    })
    if (!(((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).equals("arnqj").xor(true)) throw RuntimeException("Was not called")
    return "OK"
}

fun fu1() {}

fun box193(): String {
    return fu0 {}
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        var sum = 0
val log = StringBuilder()
if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        var sum = 0
val log = StringBuilder()
prope4.find { it?.methodName?.startsWith(method) == (logged("fxukw", -1560474110)).equals("jtlex").equals("ejqpv") }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        var sum = 0
val log = StringBuilder()
prope4.find { it?.methodName?.startsWith(method) == (log).equals("qxyom").not() } ?: error("qcdiq")
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        var sum = 0
val log = StringBuilder()
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((logged("fxukw", -1560474110)).toInt().toString(-2128910444) + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:26:44,697 [main:107] - replacing (prope7, Function0<Unit>)
2021-03-12 00:26:44,697 [main:50] - replacing prope7 Function0<Unit>
2021-03-12 00:26:44,697 [main:54] - Getting value of type Function0<Unit>
2021-03-12 00:26:44,812 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 00:26:44,814 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:26:44,931 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:26:44,934 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:26:45,182 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:26:45,183 [main:95] - GENERATED = print("whliq")
2021-03-12 00:26:45,183 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { print("whliq")}
2021-03-12 00:26:45,183 [main:61] - GENERATED IS CALL =false
2021-03-12 00:26:45,311 [main:67] - randomType = UShort
2021-03-12 00:26:45,424 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 00:26:45,453 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 00:26:45,482 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 00:26:45,483 [main:106] - GETTING Function0<Unit> from IntProgression
2021-03-12 00:26:45,495 [main:106] - GETTING Function0<Unit> from IntRange
2021-03-12 00:26:45,531 [main:106] - GETTING Function0<Unit> from StringBuilder
2021-03-12 00:26:45,549 [main:106] - GETTING Function0<Unit> from IntProgression
2021-03-12 00:26:45,550 [main:106] - GETTING Function0<Unit> from IntProgression
2021-03-12 00:26:45,551 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 00:26:45,552 [main:106] - GETTING Function0<Unit> from IntRange
2021-03-12 00:26:45,552 [main:114] - replacement of prope7 of type Function0<Unit> is { print("whliq")}
2021-03-12 00:26:45,666 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 00:26:45,666 [main:66] - Compilation checking started
2021-03-12 00:26:46,015 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

fun fu0(c: suspend () -> Unit): String {
    var sum = 0
val log = StringBuilder()
var prope2 = false
    c.startCoroutine(fu2 {
        prope2 = true
    })
    if (!(((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).equals("arnqj").xor(true)) throw RuntimeException("Was not called")
    return "OK"
}

fun fu1() {}

fun box193(): String {
    return fu0 {}
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        var sum = 0
val log = StringBuilder()
if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        var sum = 0
val log = StringBuilder()
prope4.find { it?.methodName?.startsWith(method) == (logged("fxukw", -1560474110)).equals("jtlex").equals("ejqpv") }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        var sum = 0
val log = StringBuilder()
prope4.find { it?.methodName?.startsWith(method) == (log).equals("qxyom").not() } ?: error("qcdiq")
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        var sum = 0
val log = StringBuilder()
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        { print("whliq")} = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((logged("fxukw", -1560474110)).toInt().toString(-2128910444) + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:26:46,017 [main:107] - replacing (checkFinished && !prope6, Boolean)
2021-03-12 00:26:46,017 [main:50] - replacing checkFinished && !prope6 Boolean
2021-03-12 00:26:46,017 [main:54] - Getting value of type Boolean
2021-03-12 00:26:46,135 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:26:46,137 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 00:26:46,137 [main:61] - GENERATED IS CALL =false
2021-03-12 00:26:46,519 [main:67] - randomType = HashSet<Kla5>
2021-03-12 00:26:46,639 [main:302] - generating value of type = HashSet<Kla5> false depth = 0
2021-03-12 00:26:46,760 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Kla5): HashSet<Kla5> = TODO()
2021-03-12 00:26:46,762 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Kla5): HashSet<Kla5> = TODO()
2021-03-12 00:26:46,882 [main:302] - generating value of type = Kla5 false depth = 3
2021-03-12 00:26:46,884 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}
2021-03-12 00:26:46,884 [main:95] - GENERATED = linkedSetOf<Kla5>(Kla5)
2021-03-12 00:26:46,997 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.isNotEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@27b34cc9]
2021-03-12 00:26:46,997 [main:78] - Generated call from random type = (linkedSetOf<Kla5>(Kla5)).isNotEmpty()
2021-03-12 00:26:46,998 [main:106] - GETTING Boolean from Int
2021-03-12 00:26:47,027 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c1b9a9a], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3d01c301]]
2021-03-12 00:26:47,027 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@1c1b9a9a]
2021-03-12 00:26:47,027 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@3d01c301]
2021-03-12 00:26:47,027 [main:117] - GENERATED CALL = (logged("start;", 1)).toDouble().isNaN()
2021-03-12 00:26:47,027 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ffeac33]]
2021-03-12 00:26:47,027 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb]
2021-03-12 00:26:47,028 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ffeac33]
2021-03-12 00:26:47,028 [main:117] - GENERATED CALL = (logged("start;", 1)).toChar().isLetterOrDigit()
2021-03-12 00:26:47,028 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e5517bc]]
2021-03-12 00:26:47,028 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e5517bc]
2021-03-12 00:26:47,141 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:26:47,142 [main:117] - GENERATED CALL = (logged("start;", 1)).equals("odszm")
2021-03-12 00:26:47,142 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5001d402], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@7ed5d439]]
2021-03-12 00:26:47,142 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5001d402]
2021-03-12 00:26:47,142 [main:149] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@7ed5d439]
2021-03-12 00:26:47,142 [main:117] - GENERATED CALL = (logged("start;", 1)).toFloat().isNaN()
2021-03-12 00:26:47,142 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2cd3f1c0], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@5a44b349]]
2021-03-12 00:26:47,142 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2cd3f1c0]
2021-03-12 00:26:47,255 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:26:47,257 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@5a44b349]
2021-03-12 00:26:47,257 [main:117] - GENERATED CALL = (logged("start;", 1)).div(0.9799048700765662).isFinite()
2021-03-12 00:26:47,257 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@176c15d8], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@cecf41b]]
2021-03-12 00:26:47,257 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@176c15d8]
2021-03-12 00:26:47,257 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@cecf41b]
2021-03-12 00:26:47,371 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:26:47,372 [main:117] - GENERATED CALL = (logged("start;", 1)).toShort().equals("kvjky")
2021-03-12 00:26:47,372 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e5517bc]]
2021-03-12 00:26:47,372 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c]
2021-03-12 00:26:47,372 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e5517bc]
2021-03-12 00:26:47,490 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:26:47,490 [main:117] - GENERATED CALL = (logged("start;", 1)).toInt().equals("hqggs")
2021-03-12 00:26:47,490 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5561cbe0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2197f49c]]
2021-03-12 00:26:47,490 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5561cbe0]
2021-03-12 00:26:47,490 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2197f49c]
2021-03-12 00:26:47,609 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:26:47,610 [main:117] - GENERATED CALL = (logged("start;", 1)).toByte().equals("lhsrb")
2021-03-12 00:26:47,610 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7945aa1c]]
2021-03-12 00:26:47,610 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb]
2021-03-12 00:26:47,610 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7945aa1c]
2021-03-12 00:26:47,610 [main:117] - GENERATED CALL = (logged("start;", 1)).toChar().isTitleCase()
2021-03-12 00:26:47,610 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e5517bc], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4a2ab49e]]
2021-03-12 00:26:47,610 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e5517bc]
2021-03-12 00:26:47,723 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:26:47,724 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4a2ab49e]
2021-03-12 00:26:47,837 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:26:47,839 [main:117] - GENERATED CALL = (logged("start;", 1)).equals("qftzh").or(true)
2021-03-12 00:26:47,839 [main:114] - replacement of checkFinished && !prope6 of type Boolean is (logged("start;", 1)).equals("odszm")
2021-03-12 00:26:47,954 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:26:47,955 [main:66] - Compilation checking started
2021-03-12 00:26:48,552 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

fun fu0(c: suspend () -> Unit): String {
    var sum = 0
val log = StringBuilder()
var prope2 = false
    c.startCoroutine(fu2 {
        prope2 = true
    })
    if (!(((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).equals("arnqj").xor(true)) throw RuntimeException("Was not called")
    return "OK"
}

fun fu1() {}

fun box193(): String {
    return fu0 {}
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        var sum = 0
val log = StringBuilder()
if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        var sum = 0
val log = StringBuilder()
prope4.find { it?.methodName?.startsWith(method) == (logged("fxukw", -1560474110)).equals("jtlex").equals("ejqpv") }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        var sum = 0
val log = StringBuilder()
prope4.find { it?.methodName?.startsWith(method) == (log).equals("qxyom").not() } ?: error("qcdiq")
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        var sum = 0
val log = StringBuilder()
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((logged("fxukw", -1560474110)).toInt().toString(-2128910444) + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((logged("start;", 1)).equals("odszm")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:26:48,555 [main:107] - replacing ("Wrong state-machine generated: it is not finished yet", String)
2021-03-12 00:26:48,555 [main:50] - replacing "Wrong state-machine generated: it is not finished yet" String
2021-03-12 00:26:48,556 [main:54] - Getting value of type String
2021-03-12 00:26:48,705 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:26:48,707 [main:58] - GENERATED VALUE OF TYPE String = "ezkrg"
2021-03-12 00:26:48,707 [main:61] - GENERATED IS CALL =false
2021-03-12 00:26:48,833 [main:67] - randomType = Long
2021-03-12 00:26:48,947 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:26:48,977 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ca73ab2]
2021-03-12 00:26:48,978 [main:78] - Generated call from random type = (1602322444533870866).toString(logged("fxukw", -1560474110))
2021-03-12 00:26:48,979 [main:106] - GETTING String from IntProgression
2021-03-12 00:26:48,989 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@2a40030c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@439e67cf]]
2021-03-12 00:26:48,989 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@439e67cf]
2021-03-12 00:26:49,103 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:26:49,105 [main:117] - GENERATED CALL = ((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2)).first.toString(1484295052)
2021-03-12 00:26:49,105 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5f86521c]]
2021-03-12 00:26:49,105 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5f86521c]
2021-03-12 00:26:49,219 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:26:49,337 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:26:49,339 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:26:49,586 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:26:49,588 [main:95] - GENERATED = StringBuilder("rsfjg")
2021-03-12 00:26:49,707 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:26:49,853 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:26:49,987 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:26:50,107 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:26:50,110 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:26:50,355 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:26:50,357 [main:95] - GENERATED = StringBuilder("rzdbj")
2021-03-12 00:26:50,471 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 00:26:50,473 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 00:26:50,478 [main:117] - GENERATED CALL = ((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2)).joinToString(StringBuilder("rsfjg"), "evhtr", "qnijt", sum * 10, StringBuilder("rzdbj"), {a: T -> "jdoka"})
2021-03-12 00:26:50,478 [main:114] - replacement of "Wrong state-machine generated: it is not finished yet" of type String is (1602322444533870866).toString(logged("fxukw", -1560474110))
2021-03-12 00:26:50,594 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:26:50,594 [main:66] - Compilation checking started
2021-03-12 00:26:51,152 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

fun fu0(c: suspend () -> Unit): String {
    var sum = 0
val log = StringBuilder()
var prope2 = false
    c.startCoroutine(fu2 {
        prope2 = true
    })
    if (!(((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).equals("arnqj").xor(true)) throw RuntimeException("Was not called")
    return "OK"
}

fun fu1() {}

fun box193(): String {
    return fu0 {}
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        var sum = 0
val log = StringBuilder()
if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        var sum = 0
val log = StringBuilder()
prope4.find { it?.methodName?.startsWith(method) == (logged("fxukw", -1560474110)).equals("jtlex").equals("ejqpv") }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        var sum = 0
val log = StringBuilder()
prope4.find { it?.methodName?.startsWith(method) == (log).equals("qxyom").not() } ?: error("qcdiq")
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        var sum = 0
val log = StringBuilder()
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((logged("fxukw", -1560474110)).toInt().toString(-2128910444) + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((logged("start;", 1)).equals("odszm")) error((1602322444533870866).toString(logged("fxukw", -1560474110)))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:26:51,154 [main:107] - replacing (c, SuspendFunction0<Unit>)
2021-03-12 00:26:51,154 [main:50] - replacing c SuspendFunction0<Unit>
2021-03-12 00:26:51,154 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-12 00:26:51,281 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-12 00:26:51,283 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:26:51,424 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:26:51,427 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:26:51,803 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:26:51,805 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:26:51,807 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:26:51,807 [main:95] - GENERATED = check(true, { "tonfo"})
2021-03-12 00:26:51,807 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { check(true, { "tonfo"})}
2021-03-12 00:26:51,808 [main:61] - GENERATED IS CALL =false
2021-03-12 00:26:51,815 [main:67] - randomType = Kla0
2021-03-12 00:26:51,928 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 00:26:51,930 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
prope3.getOrThrow()
    }
}
2021-03-12 00:26:52,045 [main:194] - Type params = []
2021-03-12 00:26:52,159 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 00:26:52,278 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:26:52,281 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:26:52,535 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 00:26:52,657 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:26:52,660 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:26:53,103 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:26:53,104 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:26:53,117 [main:106] - GETTING SuspendFunction0<Unit> from IntProgression
2021-03-12 00:26:53,129 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-12 00:26:53,160 [main:106] - GETTING SuspendFunction0<Unit> from IntRange
2021-03-12 00:26:53,180 [main:106] - GETTING SuspendFunction0<Unit> from StringBuilder
2021-03-12 00:26:53,197 [main:106] - GETTING SuspendFunction0<Unit> from IntRange
2021-03-12 00:26:53,198 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-12 00:26:53,199 [main:106] - GETTING SuspendFunction0<Unit> from IntProgression
2021-03-12 00:26:53,199 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-12 00:26:53,200 [main:106] - GETTING SuspendFunction0<Unit> from IntProgression
2021-03-12 00:26:53,200 [main:114] - replacement of c of type SuspendFunction0<Unit> is { check(true, { "tonfo"})}
2021-03-12 00:26:53,315 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 00:26:53,315 [main:66] - Compilation checking started
2021-03-12 00:26:53,698 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

fun fu0(c: suspend () -> Unit): String {
    var sum = 0
val log = StringBuilder()
var prope2 = false
    { check(true, { "tonfo"})}.startCoroutine(fu2 {
        prope2 = true
    })
    if (!(((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).equals("arnqj").xor(true)) throw RuntimeException("Was not called")
    return "OK"
}

fun fu1() {}

fun box193(): String {
    return fu0 {}
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        var sum = 0
val log = StringBuilder()
if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        var sum = 0
val log = StringBuilder()
prope4.find { it?.methodName?.startsWith(method) == (logged("fxukw", -1560474110)).equals("jtlex").equals("ejqpv") }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        var sum = 0
val log = StringBuilder()
prope4.find { it?.methodName?.startsWith(method) == (log).equals("qxyom").not() } ?: error("qcdiq")
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        var sum = 0
val log = StringBuilder()
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((logged("fxukw", -1560474110)).toInt().toString(-2128910444) + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((logged("start;", 1)).equals("odszm")) error((1602322444533870866).toString(logged("fxukw", -1560474110)))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:26:53,699 [main:107] - replacing (prope3, Result<Ty0>)
2021-03-12 00:26:53,700 [main:50] - replacing prope3 Result<Ty0>
2021-03-12 00:26:53,700 [main:54] - Getting value of type Result<Ty0>
2021-03-12 00:26:53,816 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-12 00:26:53,940 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 00:26:53,943 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 00:26:54,210 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 00:26:54,210 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-12 00:26:55,574 [main:67] - randomType = Function1<Triple<Map<ULong, String>, UInt, Function1<Boolean?, UShort>>?, String>
2021-03-12 00:26:55,575 [main:106] - GETTING Result<Ty0> from Int
2021-03-12 00:26:55,621 [main:106] - GETTING Result<Ty0> from Int
2021-03-12 00:26:55,622 [main:106] - GETTING Result<Ty0> from IntProgression
2021-03-12 00:26:55,642 [main:106] - GETTING Result<Ty0> from IntRange
2021-03-12 00:26:55,675 [main:106] - GETTING Result<Ty0> from IntRange
2021-03-12 00:26:55,677 [main:106] - GETTING Result<Ty0> from IntProgression
2021-03-12 00:26:55,678 [main:106] - GETTING Result<Ty0> from StringBuilder
2021-03-12 00:26:55,696 [main:106] - GETTING Result<Ty0> from Int
2021-03-12 00:26:55,697 [main:106] - GETTING Result<Ty0> from IntProgression
2021-03-12 00:26:55,697 [main:111] - Cant find and generate replacement for prope3 type Result<Ty0>
2021-03-12 00:26:55,698 [main:107] - replacing (0, Int)
2021-03-12 00:26:55,698 [main:50] - replacing 0 Int
2021-03-12 00:26:55,698 [main:54] - Getting value of type Int
2021-03-12 00:26:55,814 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:26:55,816 [main:58] - GENERATED VALUE OF TYPE Int = 358431190
2021-03-12 00:26:55,816 [main:61] - GENERATED IS CALL =false
2021-03-12 00:26:55,962 [main:67] - randomType = UByte
2021-03-12 00:26:56,082 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 00:26:56,113 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@3e4c2637]
2021-03-12 00:26:56,113 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@7a52cdce]
2021-03-12 00:26:56,113 [main:78] - Generated call from random type = (126.toUByte()).toDouble().toInt()
2021-03-12 00:26:56,114 [main:106] - GETTING Int from IntRange
2021-03-12 00:26:56,139 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.collections.Iterable<T>.minWith(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@53d01be]]
2021-03-12 00:26:56,139 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.collections.Iterable<T>.minWith(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@53d01be]
2021-03-12 00:26:56,254 [main:302] - generating value of type = Comparator<in T> false depth = 0
2021-03-12 00:26:56,387 [main:43] - GENERATING CALL OF fun <T> reverseOrder(): Comparator<T> = TODO()
2021-03-12 00:26:56,390 [main:61] - WITHOUT TYPE PARAMS = fun <T> reverseOrder(): Comparator<T> = TODO()
2021-03-12 00:26:56,509 [main:95] - GENERATED = reverseOrder<T>()
2021-03-12 00:26:56,509 [main:117] - GENERATED CALL = (logged("start;", 1)..logged("end;", 8)).minWith(reverseOrder<T>())
2021-03-12 00:26:56,509 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.singleOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6d549137]]
2021-03-12 00:26:56,509 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.singleOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6d549137]
2021-03-12 00:26:56,510 [main:117] - GENERATED CALL = (logged("start;", 1)..logged("end;", 8)).singleOrNull()
2021-03-12 00:26:56,510 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@17ad4591], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@c5a853a]]
2021-03-12 00:26:56,510 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@c5a853a]
2021-03-12 00:26:56,623 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:26:56,625 [main:117] - GENERATED CALL = (logged("start;", 1)..logged("end;", 8)).first.minus(115)
2021-03-12 00:26:56,625 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@33959c2b], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@8a77298]]
2021-03-12 00:26:56,625 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@8a77298]
2021-03-12 00:26:56,626 [main:117] - GENERATED CALL = (logged("start;", 1)..logged("end;", 8)).endInclusive.shl(logged("fxukw", -1560474110))
2021-03-12 00:26:56,626 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@17ad4591], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@455cd186]]
2021-03-12 00:26:56,626 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@455cd186]
2021-03-12 00:26:56,746 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:26:56,749 [main:117] - GENERATED CALL = (logged("start;", 1)..logged("end;", 8)).first.times(90)
2021-03-12 00:26:56,750 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@33959c2b], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1029f5d2]]
2021-03-12 00:26:56,750 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1029f5d2]
2021-03-12 00:26:56,878 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:26:56,880 [main:117] - GENERATED CALL = (logged("start;", 1)..logged("end;", 8)).endInclusive.coerceIn(sum * 10, 966612284)
2021-03-12 00:26:56,880 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.single(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@67cb4d69]]
2021-03-12 00:26:56,880 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.single(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@67cb4d69]
2021-03-12 00:26:56,880 [main:117] - GENERATED CALL = (logged("start;", 1)..logged("end;", 8)).single()
2021-03-12 00:26:56,881 [main:113] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e4add8b]]
2021-03-12 00:26:56,881 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@e4add8b]
2021-03-12 00:26:56,997 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-12 00:26:56,999 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:26:57,001 [main:117] - GENERATED CALL = (logged("start;", 1)..logged("end;", 8)).indexOfLast({a: T -> false})
2021-03-12 00:26:57,001 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@33959c2b], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@455cd186]]
2021-03-12 00:26:57,001 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@455cd186]
2021-03-12 00:26:57,115 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:26:57,117 [main:117] - GENERATED CALL = (logged("start;", 1)..logged("end;", 8)).endInclusive.times(65)
2021-03-12 00:26:57,117 [main:113] - Case = [public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@33959c2b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2de829a7]]
2021-03-12 00:26:57,117 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2de829a7]
2021-03-12 00:26:57,117 [main:117] - GENERATED CALL = (logged("start;", 1)..logged("end;", 8)).endInclusive.rotateLeft(logged("start;", 1))
2021-03-12 00:26:57,117 [main:114] - replacement of 0 of type Int is (logged("start;", 1)..logged("end;", 8)).minWith(reverseOrder<T>())
2021-03-12 00:26:57,232 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:26:57,232 [main:66] - Compilation checking started
2021-03-12 00:26:57,637 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

fun fu0(c: suspend () -> Unit): String {
    var sum = 0
val log = StringBuilder()
var prope2 = false
    c.startCoroutine(fu2 {
        prope2 = true
    })
    if (!(((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).equals("arnqj").xor(true)) throw RuntimeException("Was not called")
    return "OK"
}

fun fu1() {}

fun box193(): String {
    return fu0 {}
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        var sum = 0
val log = StringBuilder()
if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        var sum = 0
val log = StringBuilder()
prope4.find { it?.methodName?.startsWith(method) == (logged("fxukw", -1560474110)).equals("jtlex").equals("ejqpv") }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        var sum = 0
val log = StringBuilder()
prope4.find { it?.methodName?.startsWith(method) == (log).equals("qxyom").not() } ?: error("qcdiq")
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        var sum = 0
val log = StringBuilder()
prope5 = (logged("start;", 1)..logged("end;", 8)).minWith(reverseOrder<T>())
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((logged("fxukw", -1560474110)).toInt().toString(-2128910444) + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((logged("start;", 1)).equals("odszm")) error((1602322444533870866).toString(logged("fxukw", -1560474110)))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:26:57,639 [main:107] - replacing (prope2, Boolean)
2021-03-12 00:26:57,639 [main:50] - replacing prope2 Boolean
2021-03-12 00:26:57,639 [main:54] - Getting value of type Boolean
2021-03-12 00:26:57,763 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:26:57,765 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 00:26:57,765 [main:61] - GENERATED IS CALL =false
2021-03-12 00:26:58,044 [main:67] - randomType = Function2<String, Kla0, UShort>
2021-03-12 00:26:58,045 [main:106] - GETTING Boolean from IntProgression
2021-03-12 00:26:58,064 [main:113] - Case = [public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@3ac211a3]]
2021-03-12 00:26:58,064 [main:149] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@3ac211a3]
2021-03-12 00:26:58,065 [main:117] - GENERATED CALL = (((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).isEmpty()
2021-03-12 00:26:58,065 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.any(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2c072835]]
2021-03-12 00:26:58,065 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.any(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2c072835]
2021-03-12 00:26:58,065 [main:117] - GENERATED CALL = (((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).any()
2021-03-12 00:26:58,065 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@36023a1a], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34f661d3]]
2021-03-12 00:26:58,065 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@36023a1a]
2021-03-12 00:26:58,187 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34f661d3]
2021-03-12 00:26:58,188 [main:117] - GENERATED CALL = (((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).equals(null).not()
2021-03-12 00:26:58,188 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@36023a1a], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7c97fff8]]
2021-03-12 00:26:58,188 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@36023a1a]
2021-03-12 00:26:58,304 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:26:58,304 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7c97fff8]
2021-03-12 00:26:58,420 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:26:58,422 [main:117] - GENERATED CALL = (((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).equals("qvuzm").and(true)
2021-03-12 00:26:58,423 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@36023a1a], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5dc4089d]]
2021-03-12 00:26:58,423 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@36023a1a]
2021-03-12 00:26:58,539 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:26:58,539 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5dc4089d]
2021-03-12 00:26:58,660 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:26:58,660 [main:117] - GENERATED CALL = (((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).equals("ahxnl").equals("aasca")
2021-03-12 00:26:58,660 [main:113] - Case = [public open fun iterator(): kotlin.collections.IntIterator defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@bc39a4f], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.IntIterator[DeserializedSimpleFunctionDescriptor@55dcebd1]]
2021-03-12 00:26:58,661 [main:149] - GENERATING call of type public open fun iterator(): kotlin.collections.IntIterator defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@bc39a4f]
2021-03-12 00:26:58,661 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.IntIterator[DeserializedSimpleFunctionDescriptor@55dcebd1]
2021-03-12 00:26:58,782 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:26:58,782 [main:117] - GENERATED CALL = (((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).iterator().equals("kxopf")
2021-03-12 00:26:58,783 [main:113] - Case = [public operator fun <@kotlin.internal.OnlyInputTypes T> kotlin.collections.Iterable<T>.contains(element: T): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@51b5b2d8]]
2021-03-12 00:26:58,783 [main:149] - GENERATING call of type public operator fun <@kotlin.internal.OnlyInputTypes T> kotlin.collections.Iterable<T>.contains(element: T): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@51b5b2d8]
2021-03-12 00:26:58,899 [main:302] - generating value of type = T false depth = 0
2021-03-12 00:26:59,181 [main:43] - GENERATING CALL OF fun <T> checkNotNull(value: Char, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-12 00:26:59,184 [main:61] - WITHOUT TYPE PARAMS = fun <T> checkNotNull(value: Char, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-12 00:26:59,434 [main:302] - generating value of type = Char true depth = 3
2021-03-12 00:26:59,436 [main:302] - generating value of type = Function0<Any> false depth = 3
2021-03-12 00:26:59,438 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:26:59,438 [main:95] - GENERATED = checkNotNull<Char>('ﰀ', { "jadvt"})
2021-03-12 00:26:59,438 [main:117] - GENERATED CALL = (((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).contains(checkNotNull<Char>('ﰀ', { "jadvt"}))
2021-03-12 00:26:59,439 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@36023a1a]]
2021-03-12 00:26:59,439 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@36023a1a]
2021-03-12 00:26:59,554 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:26:59,554 [main:117] - GENERATED CALL = (((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).equals("ffnjz")
2021-03-12 00:26:59,554 [main:113] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.all(predicate: (T) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@69edd8d0]]
2021-03-12 00:26:59,554 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.all(predicate: (T) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@69edd8d0]
2021-03-12 00:26:59,670 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-12 00:26:59,672 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:26:59,674 [main:117] - GENERATED CALL = (((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).all({a: T -> false})
2021-03-12 00:26:59,674 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@a1100b7]]
2021-03-12 00:26:59,674 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@a1100b7]
2021-03-12 00:26:59,674 [main:117] - GENERATED CALL = (((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).none()
2021-03-12 00:26:59,674 [main:114] - replacement of prope2 of type Boolean is (((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).all({a: T -> false})
2021-03-12 00:26:59,788 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:26:59,789 [main:66] - Compilation checking started
2021-03-12 00:27:00,166 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

fun fu0(c: suspend () -> Unit): String {
    var sum = 0
val log = StringBuilder()
var prope2 = false
    c.startCoroutine(fu2 {
        (((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).all({a: T -> false}) = true
    })
    if (!(((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).equals("arnqj").xor(true)) throw RuntimeException("Was not called")
    return "OK"
}

fun fu1() {}

fun box193(): String {
    return fu0 {}
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        var sum = 0
val log = StringBuilder()
if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        var sum = 0
val log = StringBuilder()
prope4.find { it?.methodName?.startsWith(method) == (logged("fxukw", -1560474110)).equals("jtlex").equals("ejqpv") }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        var sum = 0
val log = StringBuilder()
prope4.find { it?.methodName?.startsWith(method) == (log).equals("qxyom").not() } ?: error("qcdiq")
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        var sum = 0
val log = StringBuilder()
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((logged("fxukw", -1560474110)).toInt().toString(-2128910444) + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((logged("start;", 1)).equals("odszm")) error((1602322444533870866).toString(logged("fxukw", -1560474110)))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:27:00,167 [main:107] - replacing ({}, SuspendFunction0<Unit>)
2021-03-12 00:27:00,168 [main:50] - replacing {} SuspendFunction0<Unit>
2021-03-12 00:27:00,168 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-12 00:27:00,291 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-12 00:27:00,293 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:27:00,414 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:27:00,417 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:27:00,840 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:27:00,842 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 00:27:00,844 [main:302] - generating value of type = Any false depth = 5
2021-03-12 00:27:00,844 [main:95] - GENERATED = require(false, { "wukfk"})
2021-03-12 00:27:00,844 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { require(false, { "wukfk"})}
2021-03-12 00:27:00,844 [main:61] - GENERATED IS CALL =false
2021-03-12 00:27:01,229 [main:67] - randomType = LinkedHashSet<Double?>
2021-03-12 00:27:01,347 [main:302] - generating value of type = LinkedHashSet<Double?> false depth = 0
2021-03-12 00:27:01,469 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Double?> = TODO()
2021-03-12 00:27:01,471 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Double?> = TODO()
2021-03-12 00:27:01,590 [main:95] - GENERATED = linkedSetOf<Double?>()
2021-03-12 00:27:01,710 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-12 00:27:01,743 [main:106] - GETTING SuspendFunction0<Unit> from IntRange
2021-03-12 00:27:01,764 [main:106] - GETTING SuspendFunction0<Unit> from IntProgression
2021-03-12 00:27:01,776 [main:106] - GETTING SuspendFunction0<Unit> from StringBuilder
2021-03-12 00:27:01,796 [main:106] - GETTING SuspendFunction0<Unit> from IntRange
2021-03-12 00:27:01,797 [main:106] - GETTING SuspendFunction0<Unit> from IntProgression
2021-03-12 00:27:01,798 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-12 00:27:01,799 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-12 00:27:01,800 [main:106] - GETTING SuspendFunction0<Unit> from IntProgression
2021-03-12 00:27:01,800 [main:114] - replacement of {} of type SuspendFunction0<Unit> is { require(false, { "wukfk"})}
2021-03-12 00:27:01,915 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:27:01,916 [main:66] - Compilation checking started
2021-03-12 00:27:02,446 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

fun fu0(c: suspend () -> Unit): String {
    var sum = 0
val log = StringBuilder()
var prope2 = false
    c.startCoroutine(fu2 {
        prope2 = true
    })
    if (!(((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).equals("arnqj").xor(true)) throw RuntimeException("Was not called")
    return "OK"
}

fun fu1() {}

fun box193(): String {
    var sum = 0
val log = StringBuilder()
return fu0 { require(false, { "wukfk"})}
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        var sum = 0
val log = StringBuilder()
if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        var sum = 0
val log = StringBuilder()
prope4.find { it?.methodName?.startsWith(method) == (logged("fxukw", -1560474110)).equals("jtlex").equals("ejqpv") }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        var sum = 0
val log = StringBuilder()
prope4.find { it?.methodName?.startsWith(method) == (log).equals("qxyom").not() } ?: error("qcdiq")
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        var sum = 0
val log = StringBuilder()
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((logged("fxukw", -1560474110)).toInt().toString(-2128910444) + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((logged("start;", 1)).equals("odszm")) error((1602322444533870866).toString(logged("fxukw", -1560474110)))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:27:02,449 [main:107] - replacing (", got ", String)
2021-03-12 00:27:02,449 [main:50] - replacing ", got " String
2021-03-12 00:27:02,449 [main:54] - Getting value of type String
2021-03-12 00:27:02,594 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:27:02,596 [main:58] - GENERATED VALUE OF TYPE String = "hnhmv"
2021-03-12 00:27:02,596 [main:61] - GENERATED IS CALL =false
2021-03-12 00:27:02,987 [main:67] - randomType = Sequence<LinkedHashSet<Boolean>>?
2021-03-12 00:27:02,988 [main:106] - GETTING String from Int
2021-03-12 00:27:03,025 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a6088d6]]
2021-03-12 00:27:03,025 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb]
2021-03-12 00:27:03,025 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a6088d6]
2021-03-12 00:27:03,025 [main:117] - GENERATED CALL = (logged("fxukw", -1560474110)).toChar().lowercase()
2021-03-12 00:27:03,025 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@380e8b10], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@439e67cf]]
2021-03-12 00:27:03,025 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@380e8b10]
2021-03-12 00:27:03,026 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@439e67cf]
2021-03-12 00:27:03,026 [main:117] - GENERATED CALL = (logged("fxukw", -1560474110)).compareTo(var sum =.toString(sum * 10)
2021-03-12 00:27:03,026 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@176c15d8], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dbf27f5]]
2021-03-12 00:27:03,026 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@176c15d8]
2021-03-12 00:27:03,026 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dbf27f5]
2021-03-12 00:27:03,143 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:27:03,145 [main:117] - GENERATED CALL = (logged("fxukw", -1560474110)).toShort().toString(-871206369)
2021-03-12 00:27:03,145 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@439e67cf]]
2021-03-12 00:27:03,146 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@439e67cf]
2021-03-12 00:27:03,260 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:27:03,262 [main:117] - GENERATED CALL = (logged("fxukw", -1560474110)).toString(1561324737)
2021-03-12 00:27:03,263 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5561cbe0], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4232d9ff]]
2021-03-12 00:27:03,263 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5561cbe0]
2021-03-12 00:27:03,263 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4232d9ff]
2021-03-12 00:27:03,263 [main:117] - GENERATED CALL = (logged("fxukw", -1560474110)).toByte().toString(var sum =
2021-03-12 00:27:03,263 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@793c5b1a], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ca73ab2]]
2021-03-12 00:27:03,263 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@793c5b1a]
2021-03-12 00:27:03,381 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:27:03,383 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ca73ab2]
2021-03-12 00:27:03,497 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:27:03,499 [main:117] - GENERATED CALL = (logged("fxukw", -1560474110)).div(7447609395649397981).toString(-2135213346)
2021-03-12 00:27:03,499 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@439e67cf]]
2021-03-12 00:27:03,499 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@439ed77c]
2021-03-12 00:27:03,499 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@439e67cf]
2021-03-12 00:27:03,499 [main:117] - GENERATED CALL = (logged("fxukw", -1560474110)).toInt().toString(var sum =
2021-03-12 00:27:03,500 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65ca859b]]
2021-03-12 00:27:03,500 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb]
2021-03-12 00:27:03,500 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65ca859b]
2021-03-12 00:27:03,500 [main:117] - GENERATED CALL = (logged("fxukw", -1560474110)).toChar().uppercase()
2021-03-12 00:27:03,500 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@483ecce2]]
2021-03-12 00:27:03,500 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb]
2021-03-12 00:27:03,500 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@483ecce2]
2021-03-12 00:27:03,500 [main:117] - GENERATED CALL = (logged("fxukw", -1560474110)).toChar().titlecase()
2021-03-12 00:27:03,500 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@450f93f8]]
2021-03-12 00:27:03,500 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb]
2021-03-12 00:27:03,500 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@450f93f8]
2021-03-12 00:27:03,616 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:27:03,618 [main:117] - GENERATED CALL = (logged("fxukw", -1560474110)).toChar().plus("ukbsz")
2021-03-12 00:27:03,618 [main:114] - replacement of ", got " of type String is "hnhmv"
2021-03-12 00:27:03,732 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 00:27:03,732 [main:66] - Compilation checking started
2021-03-12 00:27:04,262 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

fun fu0(c: suspend () -> Unit): String {
    var sum = 0
val log = StringBuilder()
var prope2 = false
    c.startCoroutine(fu2 {
        prope2 = true
    })
    if (!(((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).equals("arnqj").xor(true)) throw RuntimeException("Was not called")
    return "OK"
}

fun fu1() {}

fun box193(): String {
    var sum = 0
val log = StringBuilder()
return fu0 { require(false, { "wukfk"})}
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        var sum = 0
val log = StringBuilder()
if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        var sum = 0
val log = StringBuilder()
prope4.find { it?.methodName?.startsWith(method) == (logged("fxukw", -1560474110)).equals("jtlex").equals("ejqpv") }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        var sum = 0
val log = StringBuilder()
prope4.find { it?.methodName?.startsWith(method) == (log).equals("qxyom").not() } ?: error("qcdiq")
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        var sum = 0
val log = StringBuilder()
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + "hnhmv" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((logged("fxukw", -1560474110)).toInt().toString(-2128910444) + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((logged("start;", 1)).equals("odszm")) error((1602322444533870866).toString(logged("fxukw", -1560474110)))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:27:04,264 [main:107] - replacing (prope3, Result<Ty0>)
2021-03-12 00:27:04,265 [main:50] - replacing prope3 Result<Ty0>
2021-03-12 00:27:04,265 [main:54] - Getting value of type Result<Ty0>
2021-03-12 00:27:04,405 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-12 00:27:04,556 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 00:27:04,559 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 00:27:04,820 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 00:27:04,820 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-12 00:27:04,827 [main:67] - randomType = Kla3
2021-03-12 00:27:04,941 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 00:27:04,943 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        var sum = 0
val log = StringBuilder()
prope4.find { it?.methodName?.startsWith(method) == (logged("fxukw", -1560474110)).equals("jtlex").equals("ejqpv") }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        var sum = 0
val log = StringBuilder()
prope4.find { it?.methodName?.startsWith(method) == (log).equals("qxyom").not() } ?: error("qcdiq")
    }
}
2021-03-12 00:27:04,949 [main:106] - GETTING Result<Ty0> from Int
2021-03-12 00:27:04,998 [main:106] - GETTING Result<Ty0> from Int
2021-03-12 00:27:04,999 [main:106] - GETTING Result<Ty0> from IntProgression
2021-03-12 00:27:05,020 [main:106] - GETTING Result<Ty0> from IntProgression
2021-03-12 00:27:05,021 [main:106] - GETTING Result<Ty0> from StringBuilder
2021-03-12 00:27:05,056 [main:106] - GETTING Result<Ty0> from Int
2021-03-12 00:27:05,057 [main:106] - GETTING Result<Ty0> from IntRange
2021-03-12 00:27:05,098 [main:106] - GETTING Result<Ty0> from IntProgression
2021-03-12 00:27:05,099 [main:106] - GETTING Result<Ty0> from IntRange
2021-03-12 00:27:05,099 [main:111] - Cant find and generate replacement for prope3 type Result<Ty0>
2021-03-12 00:27:05,099 [main:107] - replacing (RuntimeException("Was not called"), RuntimeException)
2021-03-12 00:27:05,100 [main:50] - replacing RuntimeException("Was not called") RuntimeException
2021-03-12 00:27:05,100 [main:54] - Getting value of type RuntimeException
2021-03-12 00:27:05,214 [main:302] - generating value of type = RuntimeException false depth = 0
2021-03-12 00:27:05,337 [main:43] - GENERATING CALL OF fun NullPointerException(message: kotlin.String?): RuntimeException = TODO()
2021-03-12 00:27:05,340 [main:61] - WITHOUT TYPE PARAMS = fun NullPointerException(message: kotlin.String?): RuntimeException = TODO()
2021-03-12 00:27:05,591 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:27:05,593 [main:95] - GENERATED = NullPointerException("bgeyn")
2021-03-12 00:27:05,593 [main:58] - GENERATED VALUE OF TYPE RuntimeException = NullPointerException("bgeyn")
2021-03-12 00:27:05,593 [main:61] - GENERATED IS CALL =true
2021-03-12 00:27:05,734 [main:67] - randomType = LinkedHashMap<Int, Kla3>
2021-03-12 00:27:05,849 [main:302] - generating value of type = LinkedHashMap<Int, Kla3> false depth = 0
2021-03-12 00:27:05,976 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int): LinkedHashMap<Int, Kla3> = TODO()
2021-03-12 00:27:05,979 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int): LinkedHashMap<Int, Kla3> = TODO()
2021-03-12 00:27:06,231 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:27:06,233 [main:95] - GENERATED = LinkedHashMap<Int, Kla3>(-739194476)
2021-03-12 00:27:06,374 [main:106] - GETTING RuntimeException from Int
2021-03-12 00:27:06,404 [main:106] - GETTING RuntimeException from IntProgression
2021-03-12 00:27:06,416 [main:106] - GETTING RuntimeException from Int
2021-03-12 00:27:06,417 [main:106] - GETTING RuntimeException from IntProgression
2021-03-12 00:27:06,417 [main:106] - GETTING RuntimeException from StringBuilder
2021-03-12 00:27:06,434 [main:106] - GETTING RuntimeException from IntRange
2021-03-12 00:27:06,455 [main:106] - GETTING RuntimeException from Int
2021-03-12 00:27:06,456 [main:106] - GETTING RuntimeException from IntProgression
2021-03-12 00:27:06,456 [main:106] - GETTING RuntimeException from IntRange
2021-03-12 00:27:06,456 [main:114] - replacement of RuntimeException("Was not called") of type RuntimeException is NullPointerException("bgeyn")
2021-03-12 00:27:06,576 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:27:06,576 [main:66] - Compilation checking started
2021-03-12 00:27:07,155 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in ((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2)).reversed()) {
        sum = sum * 10 + i
    }

    assertEquals(2468, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

fun fu0(c: suspend () -> Unit): String {
    var sum = 0
val log = StringBuilder()
var prope2 = false
    c.startCoroutine(fu2 {
        prope2 = true
    })
    if (!(((logged("start;", 1)..logged("end;", 8)).reversed() step logged("step;", 2))).equals("arnqj").xor(true)) throw NullPointerException("bgeyn")
    return "OK"
}

fun fu1() {}

fun box193(): String {
    var sum = 0
val log = StringBuilder()
return fu0 { require(false, { "wukfk"})}
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        var sum = 0
val log = StringBuilder()
if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        var sum = 0
val log = StringBuilder()
prope4.find { it?.methodName?.startsWith(method) == (logged("fxukw", -1560474110)).equals("jtlex").equals("ejqpv") }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        var sum = 0
val log = StringBuilder()
prope4.find { it?.methodName?.startsWith(method) == (log).equals("qxyom").not() } ?: error("qcdiq")
    }
}

val prope0 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        var sum = 0
val log = StringBuilder()
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu10() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu11(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + "hnhmv" + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((logged("fxukw", -1560474110)).toInt().toString(-2128910444) + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if ((logged("start;", 1)).equals("odszm")) error((1602322444533870866).toString(logged("fxukw", -1560474110)))
    }
}

val prope1 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:27:07,158 [main:107] - replacing (" is not subtype of CoroutineStackFrame", String)
2021-03-12 00:27:07,159 [main:50] - replacing " is not subtype of CoroutineStackFrame" String
2021-03-12 00:27:07,159 [main:54] - Getting value of type String
2021-03-12 00:27:07,309 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:27:07,311 [main:58] - GENERATED VALUE OF TYPE String = "qhkmp"
2021-03-12 00:27:07,311 [main:61] - GENERATED IS CALL =false
2021-03-12 00:27:07,316 [main:67] - randomType = Int
2021-03-12 00:27:07,446 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:27:07,503 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e7a61eb]
2021-03-12 00:27:07,504 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65ca859b]
2021-03-12 00:27:07,504 [main:78] - Generated call from random type = (1208807107).toChar().uppercase()
2021-03-12 00:27:07,505 [main:106] - GETTING String from IntProgression
2021-03-12 00:27:07,522 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5f86521c]]
2021-03-12 00:27:07,522 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5f86521c]
2021-03-12 00:27:07,639 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:27:07,759 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:27:07,762 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:27:08,013 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:27:08,015 [main:95] - GENERATED = StringBuilder("awggu")
2021-03-12 00:27:08,135 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:27:08,262 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:27:08,404 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:27:08,529 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 00:27:08,531 [main:302] - generating value of type = CharSequence false depth = 1
