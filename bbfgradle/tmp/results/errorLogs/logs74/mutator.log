2021-03-12 03:55:53,810 [main:66] - Compilation checking started
2021-03-12 03:55:56,044 [main:45] - Trying to change 81 nodes
2021-03-12 03:55:56,049 [main:53] - replacing ((String::plus)(PREFIX, Long.MAX_VALUE), String)
2021-03-12 03:55:56,050 [main:50] - replacing (String::plus)(PREFIX, Long.MAX_VALUE) String
2021-03-12 03:55:56,050 [main:54] - Getting value of type String
2021-03-12 03:55:56,226 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:55:56,231 [main:58] - GENERATED VALUE OF TYPE String = "rpwyj"
2021-03-12 03:55:56,231 [main:61] - GENERATED IS CALL =false
2021-03-12 03:55:56,957 [main:67] - randomType = UInt?
2021-03-12 03:55:57,114 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 03:55:57,281 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@5abe86f2]
2021-03-12 03:55:57,282 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5281150f]
2021-03-12 03:55:57,461 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:55:57,464 [main:78] - Generated call from random type = (1413739667.toUInt())?.toShort().toString(-161836382)
2021-03-12 03:55:57,464 [main:106] - GETTING String from String
2021-03-12 03:55:57,513 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f1f24e3]]
2021-03-12 03:55:57,514 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f1f24e3]
2021-03-12 03:55:57,515 [main:117] - GENERATED CALL = (PREFIX).replaceIndent(MAX_LONG)
2021-03-12 03:55:57,517 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e41a4e7]]
2021-03-12 03:55:57,517 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e41a4e7]
2021-03-12 03:55:57,656 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 03:55:57,657 [main:302] - generating value of type = Char true depth = 1
2021-03-12 03:55:57,660 [main:117] - GENERATED CALL = (PREFIX).replaceFirstChar({a: Char -> 'ã» '})
2021-03-12 03:55:57,660 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e8483d9]]
2021-03-12 03:55:57,660 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e8483d9]
2021-03-12 03:55:57,808 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:55:57,809 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:55:57,810 [main:117] - GENERATED CALL = (PREFIX).dropLastWhile({a: Char -> true})
2021-03-12 03:55:57,810 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@376a7dc9]]
2021-03-12 03:55:57,811 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@376a7dc9]
2021-03-12 03:55:57,940 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:55:57,966 [main:117] - GENERATED CALL = (PREFIX).removeSuffix("sikwy")
2021-03-12 03:55:57,966 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5113d1f2]]
2021-03-12 03:55:57,966 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:55:58,093 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:55:58,207 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:55:58,208 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5113d1f2]
2021-03-12 03:55:58,340 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 03:55:58,463 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 03:55:58,466 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 03:55:58,864 [main:302] - generating value of type = String true depth = 3
2021-03-12 03:55:58,865 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 03:55:58,869 [main:95] - GENERATED = Regex("nidbp", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 03:55:58,982 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:55:58,984 [main:117] - GENERATED CALL = (PREFIX).subSequence(-2006279519, -33970355).replaceFirst(Regex("nidbp", kotlin.text.RegexOption.IGNORE_CASE), "ipglt")
2021-03-12 03:55:58,984 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cd86a35]]
2021-03-12 03:55:58,984 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cd86a35]
2021-03-12 03:55:58,985 [main:117] - GENERATED CALL = (PREFIX).lowercase()
2021-03-12 03:55:58,985 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1526b9cd]]
2021-03-12 03:55:58,985 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1526b9cd]
2021-03-12 03:55:59,168 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:55:59,169 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:55:59,171 [main:117] - GENERATED CALL = (PREFIX).filter({a: Char -> true})
2021-03-12 03:55:59,172 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72825613]]
2021-03-12 03:55:59,172 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72825613]
2021-03-12 03:55:59,308 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:55:59,310 [main:117] - GENERATED CALL = (PREFIX).take(150265100)
2021-03-12 03:55:59,310 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c8382fd]]
2021-03-12 03:55:59,310 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:55:59,422 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:55:59,524 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:55:59,525 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c8382fd]
2021-03-12 03:55:59,679 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:55:59,792 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:55:59,794 [main:117] - GENERATED CALL = (PREFIX).subSequence(-686002363, 2123106048).substring(-552411168, 891187795)
2021-03-12 03:55:59,794 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@548f039b]]
2021-03-12 03:55:59,794 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@548f039b]
2021-03-12 03:55:59,795 [main:117] - GENERATED CALL = (PREFIX).decapitalize()
2021-03-12 03:55:59,795 [main:61] - replacement of (String::plus)(PREFIX, Long.MAX_VALUE) of type String is (PREFIX).take(150265100)
2021-03-12 03:55:59,891 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:55:59,892 [main:66] - Compilation checking started
2021-03-12 03:56:00,425 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (PREFIX).take(150265100)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}


2021-03-12 03:56:00,428 [main:53] - replacing (PREFIX.plus(Long.MAX_VALUE), String)
2021-03-12 03:56:00,428 [main:50] - replacing PREFIX.plus(Long.MAX_VALUE) String
2021-03-12 03:56:00,428 [main:54] - Getting value of type String
2021-03-12 03:56:00,552 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:00,552 [main:58] - GENERATED VALUE OF TYPE String = "ixxnb"
2021-03-12 03:56:00,553 [main:61] - GENERATED IS CALL =false
2021-03-12 03:56:00,686 [main:67] - randomType = UShort
2021-03-12 03:56:00,790 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 03:56:00,853 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@20a32ded]
2021-03-12 03:56:00,853 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f6249fa]
2021-03-12 03:56:00,965 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:00,966 [main:78] - Generated call from random type = (28067.toUShort()).toUByte().toString(-280573408)
2021-03-12 03:56:00,966 [main:61] - replacement of PREFIX.plus(Long.MAX_VALUE) of type String is (28067.toUShort()).toUByte().toString(-280573408)
2021-03-12 03:56:01,096 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:56:01,097 [main:66] - Compilation checking started
2021-03-12 03:56:01,799 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != (28067.toUShort()).toUByte().toString(-280573408)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (PREFIX).take(150265100)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}


2021-03-12 03:56:01,802 [main:53] - replacing (PREFIX + MAX_LONG != (28067.toUShort()).toUByte().toString(-280573408), Boolean)
2021-03-12 03:56:01,803 [main:50] - replacing PREFIX + MAX_LONG != (28067.toUShort()).toUByte().toString(-280573408) Boolean
2021-03-12 03:56:01,803 [main:54] - Getting value of type Boolean
2021-03-12 03:56:01,925 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:56:01,926 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 03:56:01,926 [main:61] - GENERATED IS CALL =false
2021-03-12 03:56:01,927 [main:67] - randomType = Boolean
2021-03-12 03:56:02,035 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:56:02,050 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@638b60e5]
2021-03-12 03:56:02,187 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:56:02,188 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@15ee1971]
2021-03-12 03:56:02,321 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:56:02,322 [main:78] - Generated call from random type = (true).compareTo(true).equals("wswls")
2021-03-12 03:56:02,323 [main:106] - GETTING Boolean from String
2021-03-12 03:56:02,357 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a0b1cff]]
2021-03-12 03:56:02,357 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:56:02,463 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:02,567 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:02,568 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a0b1cff]
2021-03-12 03:56:02,568 [main:117] - GENERATED CALL = (MAX_LONG).subSequence(818015847, 711232614).isNotBlank()
2021-03-12 03:56:02,568 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50593a7d]]
2021-03-12 03:56:02,568 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 03:56:02,673 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:02,674 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50593a7d]
2021-03-12 03:56:02,674 [main:117] - GENERATED CALL = (MAX_LONG).get(-295990033).isDigit()
2021-03-12 03:56:02,674 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@779105ad]]
2021-03-12 03:56:02,674 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 03:56:02,838 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:02,839 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@779105ad]
2021-03-12 03:56:02,839 [main:117] - GENERATED CALL = (MAX_LONG).get(113781418).isISOControl()
2021-03-12 03:56:02,839 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b736530]]
2021-03-12 03:56:02,840 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:56:02,948 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:03,056 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:03,057 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b736530]
2021-03-12 03:56:03,058 [main:117] - GENERATED CALL = (MAX_LONG).subSequence(1253785045, -499289298).isBlank()
2021-03-12 03:56:03,058 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d9803b4], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@62532a51]]
2021-03-12 03:56:03,058 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d9803b4]
2021-03-12 03:56:03,163 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@62532a51]
2021-03-12 03:56:03,164 [main:117] - GENERATED CALL = (MAX_LONG).equals(null).not()
2021-03-12 03:56:03,164 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10740bc0]]
2021-03-12 03:56:03,164 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:56:03,296 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:03,416 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:03,417 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10740bc0]
2021-03-12 03:56:03,554 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:03,555 [main:117] - GENERATED CALL = (MAX_LONG).subSequence(-108734581, -658842771).hasSurrogatePairAt(-1144705577)
2021-03-12 03:56:03,555 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20a2adef]]
2021-03-12 03:56:03,555 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 03:56:03,651 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:03,652 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20a2adef]
2021-03-12 03:56:03,652 [main:117] - GENERATED CALL = (MAX_LONG).get(1532759555).isWhitespace()
2021-03-12 03:56:03,653 [main:113] - Case = [public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10740bc0]]
2021-03-12 03:56:03,653 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10740bc0]
2021-03-12 03:56:03,777 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:03,778 [main:117] - GENERATED CALL = (MAX_LONG).hasSurrogatePairAt(1315415808)
2021-03-12 03:56:03,778 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6426b954]]
2021-03-12 03:56:03,779 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 03:56:03,877 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:03,878 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6426b954]
2021-03-12 03:56:03,879 [main:117] - GENERATED CALL = (MAX_LONG).get(-2034511836).isLetter()
2021-03-12 03:56:03,879 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11607f4f]]
2021-03-12 03:56:03,879 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 03:56:03,974 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:03,975 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11607f4f]
2021-03-12 03:56:03,976 [main:117] - GENERATED CALL = (MAX_LONG).get(-1872544893).isDefined()
2021-03-12 03:56:03,976 [main:61] - replacement of PREFIX + MAX_LONG != (28067.toUShort()).toUByte().toString(-280573408) of type Boolean is (MAX_LONG).get(113781418).isISOControl()
2021-03-12 03:56:04,076 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:56:04,076 [main:66] - Compilation checking started
2021-03-12 03:56:04,498 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get(113781418).isISOControl()) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (PREFIX).take(150265100)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}


2021-03-12 03:56:04,501 [main:53] - replacing (String::plus, KFunction2<String, [@kotlin.ParameterName] Any?, String>)
2021-03-12 03:56:04,501 [main:50] - replacing String::plus KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:56:04,501 [main:54] - Getting value of type KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:56:04,626 [main:302] - generating value of type = KFunction2<String, [@kotlin.ParameterName] Any?, String> false depth = 0
2021-03-12 03:56:04,717 [main:58] - GENERATED VALUE OF TYPE KFunction2<String, [@kotlin.ParameterName] Any?, String> = 
2021-03-12 03:56:04,718 [main:67] - randomType = Long
2021-03-12 03:56:04,813 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:56:04,880 [main:106] - GETTING KFunction2<String, [@kotlin.ParameterName] Any?, String> from String
2021-03-12 03:56:04,920 [main:106] - GETTING KFunction2<String, [@kotlin.ParameterName] Any?, String> from String
2021-03-12 03:56:04,920 [main:58] - Cant find and generate replacement for String::plus type KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:56:04,920 [main:53] - replacing (String::plus, KFunction2<String, [@kotlin.ParameterName] Any?, String>)
2021-03-12 03:56:04,920 [main:50] - replacing String::plus KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:56:04,920 [main:54] - Getting value of type KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:56:05,009 [main:302] - generating value of type = KFunction2<String, [@kotlin.ParameterName] Any?, String> false depth = 0
2021-03-12 03:56:05,119 [main:58] - GENERATED VALUE OF TYPE KFunction2<String, [@kotlin.ParameterName] Any?, String> = 
2021-03-12 03:56:05,220 [main:67] - randomType = Short
2021-03-12 03:56:05,316 [main:302] - generating value of type = Short true depth = 0
2021-03-12 03:56:05,384 [main:58] - Cant find and generate replacement for String::plus type KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:56:05,384 [main:53] - replacing (PREFIX, String)
2021-03-12 03:56:05,384 [main:50] - replacing PREFIX String
2021-03-12 03:56:05,384 [main:54] - Getting value of type String
2021-03-12 03:56:05,477 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:05,478 [main:58] - GENERATED VALUE OF TYPE String = "vdort"
2021-03-12 03:56:05,478 [main:61] - GENERATED IS CALL =false
2021-03-12 03:56:06,010 [main:67] - randomType = LinkedHashMap<Long?, Array<UByte>>?
2021-03-12 03:56:06,109 [main:302] - generating value of type = LinkedHashMap<Long?, Array<UByte>> false depth = 0
2021-03-12 03:56:06,207 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Long?, Array<UByte>>): LkedHashMap<Long?, Array<UByte>> = TODO()
2021-03-12 03:56:06,209 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Long?, Array<UByte>>): LkedHashMap<Long?, Array<UByte>> = TODO()
2021-03-12 03:56:06,308 [main:302] - generating value of type = Pair<Long?, Array<UByte>> false depth = 3
2021-03-12 03:56:06,432 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Long?, second: Array<UByte>): Pair<Long?, Array<UByte>> = TODO()
2021-03-12 03:56:06,435 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Long?, second: Array<UByte>): Pair<Long?, Array<UByte>> = TODO()
2021-03-12 03:56:06,570 [main:302] - generating value of type = Long true depth = 6
2021-03-12 03:56:06,570 [main:302] - generating value of type = Array<UByte> false depth = 6
2021-03-12 03:56:06,674 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: UByte): Array<UByte> = TODO()
2021-03-12 03:56:06,677 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: UByte): Array<UByte> = TODO()
2021-03-12 03:56:06,778 [main:302] - generating value of type = UByte true depth = 9
2021-03-12 03:56:06,779 [main:95] - GENERATED = arrayOf<UByte>(88.toUByte())
2021-03-12 03:56:06,779 [main:95] - GENERATED = Pair<Long?, Array<UByte>>(6181938389758129200, arrayOf<UByte>(88.toUByte()))
2021-03-12 03:56:06,780 [main:95] - GENERATED = linkedMapOf<Long?, Array<UByte>>(Pair<Long?, Array<UByte>>(6181938389758129200, arrayOf<UByte>(88.toUByte())))
2021-03-12 03:56:07,015 [main:149] - GENERATING call of type public open fun get(key: kotlin.Long?): kotlin.Array<kotlin.UByte>? defined in kotlin.collections.LinkedHashMap[DeserializedSimpleFunctionDescriptor@55f86b9b]
2021-03-12 03:56:07,126 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:56:07,127 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@36e1b827]
2021-03-12 03:56:07,128 [main:78] - Generated call from random type = (linkedMapOf<Long?, Array<UByte>>(Pair<Long?, Array<UByte>>(6181938389758129200, arrayOf<UByte>(88.toUByte()))))?.get(-4465816820757295827)?.contentToString()!!
2021-03-12 03:56:07,128 [main:61] - replacement of PREFIX of type String is (linkedMapOf<Long?, Array<UByte>>(Pair<Long?, Array<UByte>>(6181938389758129200, arrayOf<UByte>(88.toUByte()))))?.get(-4465816820757295827)?.contentToString()!!
2021-03-12 03:56:07,228 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-12 03:56:07,231 [main:53] - replacing (MAX_LONG, String)
2021-03-12 03:56:07,231 [main:50] - replacing MAX_LONG String
2021-03-12 03:56:07,231 [main:54] - Getting value of type String
2021-03-12 03:56:07,319 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:07,319 [main:58] - GENERATED VALUE OF TYPE String = "cajva"
2021-03-12 03:56:07,320 [main:61] - GENERATED IS CALL =false
2021-03-12 03:56:07,321 [main:67] - randomType = String
2021-03-12 03:56:07,407 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:07,436 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77dbd350]
2021-03-12 03:56:07,527 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:07,528 [main:78] - Generated call from random type = ("aslwh").prependIndent("gjmby")
2021-03-12 03:56:07,528 [main:61] - replacement of MAX_LONG of type String is ("aslwh").prependIndent("gjmby")
2021-03-12 03:56:07,646 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:56:07,647 [main:66] - Compilation checking started
2021-03-12 03:56:08,061 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get(113781418).isISOControl()) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (PREFIX).take(150265100)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + ("aslwh").prependIndent("gjmby") != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}


2021-03-12 03:56:08,063 [main:53] - replacing (Long.MAX_VALUE, Long)
2021-03-12 03:56:08,063 [main:50] - replacing Long.MAX_VALUE Long
2021-03-12 03:56:08,063 [main:54] - Getting value of type Long
2021-03-12 03:56:08,159 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:56:08,159 [main:58] - GENERATED VALUE OF TYPE Long = 5689829245966972338
2021-03-12 03:56:08,160 [main:61] - GENERATED IS CALL =false
2021-03-12 03:56:08,161 [main:67] - randomType = String
2021-03-12 03:56:08,272 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:08,307 [main:149] - GENERATING call of type public fun kotlin.String.toLong(): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61dffd38]
2021-03-12 03:56:08,308 [main:78] - Generated call from random type = ("umnyv").toLong()
2021-03-12 03:56:08,310 [main:106] - GETTING Long from String
2021-03-12 03:56:08,346 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339], public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2271c0ea]]
2021-03-12 03:56:08,347 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339]
2021-03-12 03:56:08,347 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2271c0ea]
2021-03-12 03:56:08,348 [main:117] - GENERATED CALL = (MAX_LONG).compareTo(MAX_LONG).toLong()
2021-03-12 03:56:08,348 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2e465cf2], public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@87a5f58]]
2021-03-12 03:56:08,348 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@87a5f58]
2021-03-12 03:56:08,463 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:56:08,464 [main:117] - GENERATED CALL = (MAX_LONG).length.div(-85349271058114345)
2021-03-12 03:56:08,464 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2e465cf2], public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2271c0ea]]
2021-03-12 03:56:08,464 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2271c0ea]
2021-03-12 03:56:08,465 [main:117] - GENERATED CALL = (MAX_LONG).length.toLong()
2021-03-12 03:56:08,465 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339], public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@87a5f58]]
2021-03-12 03:56:08,465 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339]
2021-03-12 03:56:08,465 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@87a5f58]
2021-03-12 03:56:08,568 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:56:08,569 [main:117] - GENERATED CALL = (MAX_LONG).compareTo(PREFIX).div(34416332891875744)
2021-03-12 03:56:08,569 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2e465cf2], public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@185b9c70]]
2021-03-12 03:56:08,569 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@185b9c70]
2021-03-12 03:56:08,657 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:56:08,658 [main:117] - GENERATED CALL = (MAX_LONG).length.plus(9029613758687230867)
2021-03-12 03:56:08,658 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@492f9cb4]]
2021-03-12 03:56:08,658 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339]
2021-03-12 03:56:08,658 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@492f9cb4]
2021-03-12 03:56:08,743 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:56:08,744 [main:117] - GENERATED CALL = (MAX_LONG).compareTo(PREFIX).rem(-1076466920498892278)
2021-03-12 03:56:08,744 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@d4c88aa]]
2021-03-12 03:56:08,744 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 03:56:08,829 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:08,830 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@d4c88aa]
2021-03-12 03:56:08,830 [main:117] - GENERATED CALL = (MAX_LONG).get(-695298297).toLong()
2021-03-12 03:56:08,830 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339], public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@362381b4]]
2021-03-12 03:56:08,830 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339]
2021-03-12 03:56:08,939 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:08,940 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@362381b4]
2021-03-12 03:56:09,035 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:56:09,036 [main:117] - GENERATED CALL = (MAX_LONG).compareTo("qbuyp").minus(2011345079141284544)
2021-03-12 03:56:09,036 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2e465cf2], public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70b478ce]]
2021-03-12 03:56:09,036 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70b478ce]
2021-03-12 03:56:09,132 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:56:09,133 [main:117] - GENERATED CALL = (MAX_LONG).length.times(563749478773775004)
2021-03-12 03:56:09,134 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339], public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@185b9c70]]
2021-03-12 03:56:09,134 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339]
2021-03-12 03:56:09,134 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@185b9c70]
2021-03-12 03:56:09,232 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:56:09,233 [main:117] - GENERATED CALL = (MAX_LONG).compareTo(MAX_LONG).plus(-3254796571484138050)
2021-03-12 03:56:09,233 [main:61] - replacement of Long.MAX_VALUE of type Long is ("umnyv").toLong()
2021-03-12 03:56:09,327 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:56:09,327 [main:66] - Compilation checking started
2021-03-12 03:56:09,700 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get(113781418).isISOControl()) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (PREFIX).take(150265100)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + ("aslwh").prependIndent("gjmby") != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}


2021-03-12 03:56:09,702 [main:53] - replacing ("fail \"\" +", String)
2021-03-12 03:56:09,702 [main:50] - replacing "fail \"\" +" String
2021-03-12 03:56:09,702 [main:54] - Getting value of type String
2021-03-12 03:56:09,796 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:09,796 [main:58] - GENERATED VALUE OF TYPE String = "krgvo"
2021-03-12 03:56:09,797 [main:61] - GENERATED IS CALL =false
2021-03-12 03:56:09,907 [main:67] - randomType = UInt
2021-03-12 03:56:10,002 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 03:56:10,050 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.ULong): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@42a63133]
2021-03-12 03:56:10,143 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 03:56:10,144 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@191562ec]
2021-03-12 03:56:10,232 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:10,233 [main:78] - Generated call from random type = (305024196.toUInt()).div(5345047085739460898.toULong()).toString(-562554718)
2021-03-12 03:56:10,233 [main:106] - GETTING String from String
2021-03-12 03:56:10,262 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@196815c]]
2021-03-12 03:56:10,262 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339]
2021-03-12 03:56:10,408 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:10,409 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@196815c]
2021-03-12 03:56:10,511 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:10,512 [main:117] - GENERATED CALL = (MAX_LONG).compareTo("wgpqo").toString(1148888471)
2021-03-12 03:56:10,512 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3643ebef]]
2021-03-12 03:56:10,512 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3643ebef]
2021-03-12 03:56:10,513 [main:117] - GENERATED CALL = (MAX_LONG).capitalize()
2021-03-12 03:56:10,513 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ab64eb1]]
2021-03-12 03:56:10,513 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ab64eb1]
2021-03-12 03:56:10,615 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:56:10,620 [main:117] - GENERATED CALL = (MAX_LONG).removePrefix(StringBuilder())
2021-03-12 03:56:10,620 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24f3d945]]
2021-03-12 03:56:10,620 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 03:56:10,706 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:10,707 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24f3d945]
2021-03-12 03:56:10,708 [main:117] - GENERATED CALL = (MAX_LONG).get(-1710937750).titlecase()
2021-03-12 03:56:10,708 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4909267f]]
2021-03-12 03:56:10,708 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4909267f]
2021-03-12 03:56:10,793 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:10,793 [main:117] - GENERATED CALL = (MAX_LONG).drop(-1962626012)
2021-03-12 03:56:10,794 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dcde0a]]
2021-03-12 03:56:10,794 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dcde0a]
2021-03-12 03:56:10,920 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:56:10,920 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:56:10,922 [main:117] - GENERATED CALL = (MAX_LONG).filterNot({a: Char -> true})
2021-03-12 03:56:10,922 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@548f039b]]
2021-03-12 03:56:10,922 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@548f039b]
2021-03-12 03:56:10,923 [main:117] - GENERATED CALL = (MAX_LONG).decapitalize()
2021-03-12 03:56:10,923 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c88e713]]
2021-03-12 03:56:10,923 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c88e713]
2021-03-12 03:56:10,924 [main:117] - GENERATED CALL = (MAX_LONG).trimEnd()
2021-03-12 03:56:10,924 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e428ad4]]
2021-03-12 03:56:10,924 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 03:56:11,031 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:11,032 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e428ad4]
2021-03-12 03:56:11,033 [main:117] - GENERATED CALL = (MAX_LONG).get(1966619944).plus(MAX_LONG)
2021-03-12 03:56:11,033 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7564ea7e]]
2021-03-12 03:56:11,033 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7564ea7e]
2021-03-12 03:56:11,033 [main:117] - GENERATED CALL = (MAX_LONG).uppercase()
2021-03-12 03:56:11,033 [main:61] - replacement of "fail \"\" +" of type String is (MAX_LONG).drop(-1962626012)
2021-03-12 03:56:11,113 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:56:11,114 [main:66] - Compilation checking started
2021-03-12 03:56:11,431 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-1962626012)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get(113781418).isISOControl()) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (PREFIX).take(150265100)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + ("aslwh").prependIndent("gjmby") != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}


2021-03-12 03:56:11,433 [main:53] - replacing ("OK", String)
2021-03-12 03:56:11,433 [main:50] - replacing "OK" String
2021-03-12 03:56:11,433 [main:54] - Getting value of type String
2021-03-12 03:56:11,530 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:11,531 [main:58] - GENERATED VALUE OF TYPE String = "unoye"
2021-03-12 03:56:11,531 [main:61] - GENERATED IS CALL =false
2021-03-12 03:56:11,640 [main:67] - randomType = Collection<Long>
2021-03-12 03:56:11,640 [main:106] - GETTING String from String
2021-03-12 03:56:11,669 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e41a4e7]]
2021-03-12 03:56:11,669 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e41a4e7]
2021-03-12 03:56:11,758 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 03:56:11,758 [main:302] - generating value of type = Char true depth = 1
2021-03-12 03:56:11,759 [main:117] - GENERATED CALL = (PREFIX).replaceFirstChar({a: Char -> 'å¦'})
2021-03-12 03:56:11,759 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@679d2905]]
2021-03-12 03:56:11,760 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@679d2905]
2021-03-12 03:56:11,842 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:11,843 [main:117] - GENERATED CALL = (PREFIX).replaceAfterLast('è¨', PREFIX, PREFIX)
2021-03-12 03:56:11,843 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4533f399]]
2021-03-12 03:56:11,843 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4533f399]
2021-03-12 03:56:11,925 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:56:11,926 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:56:11,926 [main:117] - GENERATED CALL = (PREFIX).takeWhile({a: Char -> true})
2021-03-12 03:56:11,927 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ab64eb1]]
2021-03-12 03:56:11,927 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ab64eb1]
2021-03-12 03:56:12,008 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:56:12,013 [main:117] - GENERATED CALL = (PREFIX).removePrefix(StringBuilder())
2021-03-12 03:56:12,013 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45311397]]
2021-03-12 03:56:12,013 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45311397]
2021-03-12 03:56:12,096 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 03:56:12,096 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:56:12,097 [main:117] - GENERATED CALL = (PREFIX).filterIndexed({a: Int, b: Char -> true})
2021-03-12 03:56:12,098 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494d96f0]]
2021-03-12 03:56:12,098 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:56:12,208 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:12,305 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:12,306 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494d96f0]
2021-03-12 03:56:12,394 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:56:12,484 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:56:12,485 [main:117] - GENERATED CALL = (PREFIX).subSequence(-1680221669, 2009931715).commonSuffixWith("puamo", false)
2021-03-12 03:56:12,485 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e3da54]]
2021-03-12 03:56:12,485 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e3da54]
2021-03-12 03:56:12,566 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:56:12,566 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:56:12,567 [main:117] - GENERATED CALL = (PREFIX).dropWhile({a: Char -> true})
2021-03-12 03:56:12,567 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dcba3be]]
2021-03-12 03:56:12,567 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dcba3be]
2021-03-12 03:56:12,567 [main:117] - GENERATED CALL = (PREFIX).replaceIndentByMargin(PREFIX, PREFIX)
2021-03-12 03:56:12,568 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c521f60]]
2021-03-12 03:56:12,568 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c521f60]
2021-03-12 03:56:12,568 [main:117] - GENERATED CALL = (PREFIX).trimStart()
2021-03-12 03:56:12,568 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ecfbefc]]
2021-03-12 03:56:12,568 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ecfbefc]
2021-03-12 03:56:12,568 [main:117] - GENERATED CALL = (PREFIX).concat(PREFIX)
2021-03-12 03:56:12,568 [main:61] - replacement of "OK" of type String is (PREFIX).subSequence(-1680221669, 2009931715).commonSuffixWith("puamo", false)
2021-03-12 03:56:12,651 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:56:12,651 [main:66] - Compilation checking started
2021-03-12 03:56:12,991 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-1962626012)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get(113781418).isISOControl()) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (PREFIX).take(150265100)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + ("aslwh").prependIndent("gjmby") != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(-1680221669, 2009931715).commonSuffixWith("puamo", false)
}


2021-03-12 03:56:12,993 [main:53] - replacing (PREFIX, String)
2021-03-12 03:56:12,993 [main:50] - replacing PREFIX String
2021-03-12 03:56:12,993 [main:54] - Getting value of type String
2021-03-12 03:56:13,080 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:13,080 [main:58] - GENERATED VALUE OF TYPE String = "xiyqp"
2021-03-12 03:56:13,081 [main:61] - GENERATED IS CALL =false
2021-03-12 03:56:13,186 [main:67] - randomType = UByte
2021-03-12 03:56:13,268 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 03:56:13,303 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f6249fa]
2021-03-12 03:56:13,387 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:13,387 [main:78] - Generated call from random type = (32.toUByte()).toString(-590739902)
2021-03-12 03:56:13,388 [main:106] - GETTING String from String
2021-03-12 03:56:13,407 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1526b9cd]]
2021-03-12 03:56:13,407 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1526b9cd]
2021-03-12 03:56:13,487 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:56:13,488 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:56:13,489 [main:117] - GENERATED CALL = (MAX_LONG).filter({a: Char -> true})
2021-03-12 03:56:13,489 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72825613]]
2021-03-12 03:56:13,489 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72825613]
2021-03-12 03:56:13,584 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:13,585 [main:117] - GENERATED CALL = (MAX_LONG).take(-1186520048)
2021-03-12 03:56:13,585 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21f58cc8]]
2021-03-12 03:56:13,585 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21f58cc8]
2021-03-12 03:56:13,676 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:13,677 [main:117] - GENERATED CALL = (MAX_LONG).replaceBefore('é', MAX_LONG, PREFIX)
2021-03-12 03:56:13,678 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a222c29]]
2021-03-12 03:56:13,678 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a222c29]
2021-03-12 03:56:13,767 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:13,849 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:13,930 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:56:13,931 [main:117] - GENERATED CALL = (MAX_LONG).replaceFirst('ï¤', 'î¿', true)
2021-03-12 03:56:13,931 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494d96f0]]
2021-03-12 03:56:13,931 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494d96f0]
2021-03-12 03:56:14,012 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:56:14,112 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:56:14,113 [main:117] - GENERATED CALL = (MAX_LONG).commonSuffixWith("uexse", true)
2021-03-12 03:56:14,113 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57446851]]
2021-03-12 03:56:14,113 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57446851]
2021-03-12 03:56:14,205 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:14,285 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:14,285 [main:117] - GENERATED CALL = (MAX_LONG).padStart(-987921808, 'ï¥')
2021-03-12 03:56:14,285 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2fe79f34]]
2021-03-12 03:56:14,286 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2fe79f34]
2021-03-12 03:56:14,365 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:56:14,365 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:56:14,366 [main:117] - GENERATED CALL = (MAX_LONG).takeLastWhile({a: Char -> true})
2021-03-12 03:56:14,366 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ab64eb1]]
2021-03-12 03:56:14,366 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ab64eb1]
2021-03-12 03:56:14,448 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:56:14,533 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 03:56:14,534 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 03:56:14,745 [main:302] - generating value of type = String true depth = 3
2021-03-12 03:56:14,745 [main:95] - GENERATED = StringBuilder("fgutz")
2021-03-12 03:56:14,746 [main:117] - GENERATED CALL = (MAX_LONG).removePrefix(StringBuilder("fgutz"))
2021-03-12 03:56:14,746 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e41a4e7]]
2021-03-12 03:56:14,746 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e41a4e7]
2021-03-12 03:56:14,826 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 03:56:14,827 [main:302] - generating value of type = Char true depth = 1
2021-03-12 03:56:14,828 [main:117] - GENERATED CALL = (MAX_LONG).replaceFirstChar({a: Char -> 'Þ'})
2021-03-12 03:56:14,828 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b2c8153]]
2021-03-12 03:56:14,828 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b2c8153]
2021-03-12 03:56:14,910 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:56:15,002 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:56:15,003 [main:117] - GENERATED CALL = (MAX_LONG).commonPrefixWith("hneui", true)
2021-03-12 03:56:15,003 [main:61] - replacement of PREFIX of type String is (MAX_LONG).replaceBefore('é', MAX_LONG, PREFIX)
2021-03-12 03:56:15,111 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:56:15,112 [main:66] - Compilation checking started
2021-03-12 03:56:15,522 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-1962626012)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if ((MAX_LONG).replaceBefore('é', MAX_LONG, PREFIX) + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get(113781418).isISOControl()) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (PREFIX).take(150265100)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + ("aslwh").prependIndent("gjmby") != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(-1680221669, 2009931715).commonSuffixWith("puamo", false)
}


2021-03-12 03:56:15,524 [main:53] - replacing ("fail \"\".plus", String)
2021-03-12 03:56:15,524 [main:50] - replacing "fail \"\".plus" String
2021-03-12 03:56:15,525 [main:54] - Getting value of type String
2021-03-12 03:56:15,624 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:15,625 [main:58] - GENERATED VALUE OF TYPE String = "borio"
2021-03-12 03:56:15,625 [main:61] - GENERATED IS CALL =false
2021-03-12 03:56:15,626 [main:67] - randomType = Long
2021-03-12 03:56:15,720 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:56:15,770 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3911b515]
2021-03-12 03:56:15,849 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:56:15,849 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@196815c]
2021-03-12 03:56:15,930 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:15,943 [main:78] - Generated call from random type = (7447984360640451355).compareTo(110).toString(550029976)
2021-03-12 03:56:15,943 [main:106] - GETTING String from String
2021-03-12 03:56:15,963 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e57d13c]]
2021-03-12 03:56:15,963 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e57d13c]
2021-03-12 03:56:15,964 [main:117] - GENERATED CALL = (MAX_LONG).toUpperCase()
2021-03-12 03:56:15,964 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33fb03c1]]
2021-03-12 03:56:15,964 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33fb03c1]
2021-03-12 03:56:16,047 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:16,134 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:16,135 [main:117] - GENERATED CALL = (MAX_LONG).removeRange(-1795172395, -1003268890)
2021-03-12 03:56:16,135 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4533f399]]
2021-03-12 03:56:16,135 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4533f399]
2021-03-12 03:56:16,218 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:56:16,218 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:56:16,219 [main:117] - GENERATED CALL = (MAX_LONG).takeWhile({a: Char -> false})
2021-03-12 03:56:16,219 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b2c8153]]
2021-03-12 03:56:16,220 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b2c8153]
2021-03-12 03:56:16,306 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:56:16,389 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:56:16,390 [main:117] - GENERATED CALL = (MAX_LONG).commonPrefixWith("oaxph", false)
2021-03-12 03:56:16,390 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1262e19c]]
2021-03-12 03:56:16,390 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1262e19c]
2021-03-12 03:56:16,508 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:16,509 [main:117] - GENERATED CALL = (MAX_LONG).substringAfter('ç¿', PREFIX)
2021-03-12 03:56:16,509 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5da0e191]]
2021-03-12 03:56:16,509 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5da0e191]
2021-03-12 03:56:16,605 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:16,686 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:16,687 [main:117] - GENERATED CALL = (MAX_LONG).substringBeforeLast('ê¥', "jjxtu")
2021-03-12 03:56:16,687 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a222c29]]
2021-03-12 03:56:16,687 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a222c29]
2021-03-12 03:56:16,779 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:16,862 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:16,957 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:56:16,958 [main:117] - GENERATED CALL = (MAX_LONG).replaceFirst('î', '?', true)
2021-03-12 03:56:16,958 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f1f24e3]]
2021-03-12 03:56:16,958 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f1f24e3]
2021-03-12 03:56:16,959 [main:117] - GENERATED CALL = (MAX_LONG).replaceIndent(PREFIX)
2021-03-12 03:56:16,959 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ecfbefc]]
2021-03-12 03:56:16,959 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ecfbefc]
2021-03-12 03:56:16,959 [main:117] - GENERATED CALL = (MAX_LONG).concat(PREFIX)
2021-03-12 03:56:16,959 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45311397]]
2021-03-12 03:56:16,960 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45311397]
2021-03-12 03:56:17,047 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 03:56:17,047 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:56:17,048 [main:117] - GENERATED CALL = (MAX_LONG).filterIndexed({a: Int, b: Char -> false})
2021-03-12 03:56:17,048 [main:61] - replacement of "fail \"\".plus" of type String is (MAX_LONG).toUpperCase()
2021-03-12 03:56:17,135 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:56:17,135 [main:66] - Compilation checking started
2021-03-12 03:56:17,468 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-1962626012)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return (MAX_LONG).toUpperCase()
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if ((MAX_LONG).replaceBefore('é', MAX_LONG, PREFIX) + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get(113781418).isISOControl()) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (PREFIX).take(150265100)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + ("aslwh").prependIndent("gjmby") != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(-1680221669, 2009931715).commonSuffixWith("puamo", false)
}


2021-03-12 03:56:17,468 [main:53] - replacing (PREFIX, String)
2021-03-12 03:56:17,468 [main:50] - replacing PREFIX String
2021-03-12 03:56:17,468 [main:54] - Getting value of type String
2021-03-12 03:56:17,550 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:17,550 [main:58] - GENERATED VALUE OF TYPE String = "qqxfj"
2021-03-12 03:56:17,551 [main:61] - GENERATED IS CALL =false
2021-03-12 03:56:18,134 [main:67] - randomType = Map<Function2<UByte, UShort, String>, ArrayDeque<UByte>>
2021-03-12 03:56:18,134 [main:61] - replacement of PREFIX of type String is "qqxfj"
2021-03-12 03:56:18,231 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 03:56:18,232 [main:53] - replacing ((MAX_LONG).replaceBefore('é', MAX_LONG, PREFIX) + MAX_LONG, String)
2021-03-12 03:56:18,233 [main:50] - replacing (MAX_LONG).replaceBefore('é', MAX_LONG, PREFIX) + MAX_LONG String
2021-03-12 03:56:18,233 [main:54] - Getting value of type String
2021-03-12 03:56:18,322 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:18,323 [main:58] - GENERATED VALUE OF TYPE String = "wplcj"
2021-03-12 03:56:18,323 [main:61] - GENERATED IS CALL =false
2021-03-12 03:56:18,324 [main:67] - randomType = Int
2021-03-12 03:56:18,404 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:18,461 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7a63c66f]
2021-03-12 03:56:18,461 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@196815c]
2021-03-12 03:56:18,544 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:18,544 [main:78] - Generated call from random type = (204209373).toInt().toString(906977388)
2021-03-12 03:56:18,545 [main:106] - GETTING String from String
2021-03-12 03:56:18,569 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e428ad4]]
2021-03-12 03:56:18,569 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 03:56:18,648 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:18,649 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e428ad4]
2021-03-12 03:56:18,649 [main:117] - GENERATED CALL = (MAX_LONG).get(1613276262).plus(MAX_LONG)
2021-03-12 03:56:18,649 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b2c8153]]
2021-03-12 03:56:18,649 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b2c8153]
2021-03-12 03:56:18,729 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:56:18,830 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:56:18,831 [main:117] - GENERATED CALL = (MAX_LONG).commonPrefixWith("hyena", true)
2021-03-12 03:56:18,831 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a222c29]]
2021-03-12 03:56:18,831 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a222c29]
2021-03-12 03:56:18,919 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:19,001 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:19,081 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:56:19,082 [main:117] - GENERATED CALL = (MAX_LONG).replaceFirst('á¾', 'ï¥', false)
2021-03-12 03:56:19,082 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d7a703b]]
2021-03-12 03:56:19,082 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:56:19,162 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:19,266 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:19,266 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d7a703b]
2021-03-12 03:56:19,354 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 03:56:19,436 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 03:56:19,438 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 03:56:19,722 [main:302] - generating value of type = String true depth = 3
2021-03-12 03:56:19,722 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 03:56:19,723 [main:95] - GENERATED = Regex("huhcr", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 03:56:19,827 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 03:56:19,827 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 03:56:19,910 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:56:19,912 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:56:20,079 [main:302] - generating value of type = CharSequence false depth = 4
2021-03-12 03:56:20,083 [main:95] - GENERATED = StringBuilder(StringBuilder())
2021-03-12 03:56:20,083 [main:117] - GENERATED CALL = (MAX_LONG).subSequence(-1711147672, 1722237307).replace(Regex("huhcr", kotlin.text.RegexOption.IGNORE_CASE), {a: MatchResult -> StringBuilder(StringBuilder())})
2021-03-12 03:56:20,084 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55878bcb]]
2021-03-12 03:56:20,084 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55878bcb]
2021-03-12 03:56:20,163 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:56:20,167 [main:117] - GENERATED CALL = (MAX_LONG).removeSurrounding("eqzwf")
2021-03-12 03:56:20,167 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68eb2bf5]]
2021-03-12 03:56:20,167 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68eb2bf5]
2021-03-12 03:56:20,167 [main:117] - GENERATED CALL = (MAX_LONG).trim()
2021-03-12 03:56:20,167 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4533f399]]
2021-03-12 03:56:20,168 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4533f399]
2021-03-12 03:56:20,262 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:56:20,262 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:56:20,263 [main:117] - GENERATED CALL = (MAX_LONG).takeWhile({a: Char -> false})
2021-03-12 03:56:20,263 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dcba3be]]
2021-03-12 03:56:20,264 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dcba3be]
2021-03-12 03:56:20,264 [main:117] - GENERATED CALL = (MAX_LONG).replaceIndentByMargin(MAX_LONG, MAX_LONG)
2021-03-12 03:56:20,264 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c88e713]]
2021-03-12 03:56:20,264 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c88e713]
2021-03-12 03:56:20,264 [main:117] - GENERATED CALL = (MAX_LONG).trimEnd()
2021-03-12 03:56:20,264 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fd784aa]]
2021-03-12 03:56:20,264 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fd784aa]
2021-03-12 03:56:20,366 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:20,367 [main:117] - GENERATED CALL = (MAX_LONG).replaceBeforeLast('ã¼½', MAX_LONG, MAX_LONG)
2021-03-12 03:56:20,367 [main:61] - replacement of (MAX_LONG).replaceBefore('é', MAX_LONG, PREFIX) + MAX_LONG of type String is (MAX_LONG).removeSurrounding("eqzwf")
2021-03-12 03:56:20,447 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:56:20,447 [main:66] - Compilation checking started
2021-03-12 03:56:20,773 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-1962626012)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return (MAX_LONG).toUpperCase()
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if ((MAX_LONG).removeSurrounding("eqzwf") != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get(113781418).isISOControl()) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (PREFIX).take(150265100)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + ("aslwh").prependIndent("gjmby") != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(-1680221669, 2009931715).commonSuffixWith("puamo", false)
}


2021-03-12 03:56:20,774 [main:53] - replacing (PREFIX::plus, KFunction1<[@kotlin.ParameterName] Any?, String>)
2021-03-12 03:56:20,775 [main:50] - replacing PREFIX::plus KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:56:20,775 [main:54] - Getting value of type KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:56:20,855 [main:302] - generating value of type = KFunction1<[@kotlin.ParameterName] Any?, String> false depth = 0
2021-03-12 03:56:20,935 [main:58] - GENERATED VALUE OF TYPE KFunction1<[@kotlin.ParameterName] Any?, String> = 
2021-03-12 03:56:21,033 [main:67] - randomType = UShort
2021-03-12 03:56:21,114 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 03:56:21,153 [main:106] - GETTING KFunction1<[@kotlin.ParameterName] Any?, String> from String
2021-03-12 03:56:21,178 [main:106] - GETTING KFunction1<[@kotlin.ParameterName] Any?, String> from String
2021-03-12 03:56:21,178 [main:58] - Cant find and generate replacement for PREFIX::plus type KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:56:21,179 [main:53] - replacing ("fail \"$PREFIX\" +", String)
2021-03-12 03:56:21,180 [main:50] - replacing "fail \"$PREFIX\" +" String
2021-03-12 03:56:21,180 [main:54] - Getting value of type String
2021-03-12 03:56:21,259 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:21,259 [main:58] - GENERATED VALUE OF TYPE String = "krpvc"
2021-03-12 03:56:21,259 [main:61] - GENERATED IS CALL =false
2021-03-12 03:56:21,260 [main:67] - randomType = Long
2021-03-12 03:56:21,339 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:56:21,371 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2f0564df]
2021-03-12 03:56:21,371 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23c4b3bf]
2021-03-12 03:56:21,372 [main:78] - Generated call from random type = (3850640497408548289).toChar().uppercase()
2021-03-12 03:56:21,372 [main:106] - GETTING String from String
2021-03-12 03:56:21,392 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7564ea7e]]
2021-03-12 03:56:21,392 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7564ea7e]
2021-03-12 03:56:21,392 [main:117] - GENERATED CALL = (MAX_LONG).uppercase()
2021-03-12 03:56:21,392 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ecfbefc]]
2021-03-12 03:56:21,392 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ecfbefc]
2021-03-12 03:56:21,392 [main:117] - GENERATED CALL = (MAX_LONG).concat(PREFIX)
2021-03-12 03:56:21,393 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77dbd350]]
2021-03-12 03:56:21,393 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77dbd350]
2021-03-12 03:56:21,393 [main:117] - GENERATED CALL = (MAX_LONG).prependIndent(PREFIX)
2021-03-12 03:56:21,393 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c521f60]]
2021-03-12 03:56:21,393 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c521f60]
2021-03-12 03:56:21,393 [main:117] - GENERATED CALL = (MAX_LONG).trimStart()
2021-03-12 03:56:21,393 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10a44833]]
2021-03-12 03:56:21,393 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10a44833]
2021-03-12 03:56:21,472 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:21,550 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:21,551 [main:117] - GENERATED CALL = (MAX_LONG).substringAfterLast('î', "iyckn")
2021-03-12 03:56:21,551 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2fe79f34]]
2021-03-12 03:56:21,551 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2fe79f34]
2021-03-12 03:56:21,643 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:56:21,644 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:56:21,645 [main:117] - GENERATED CALL = (MAX_LONG).takeLastWhile({a: Char -> false})
2021-03-12 03:56:21,645 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494d96f0]]
2021-03-12 03:56:21,645 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:56:21,758 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:21,837 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:21,837 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494d96f0]
2021-03-12 03:56:21,916 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:56:21,999 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:56:22,000 [main:117] - GENERATED CALL = (MAX_LONG).subSequence(-228163984, 1954139292).commonSuffixWith("imnty", false)
2021-03-12 03:56:22,000 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4909267f]]
2021-03-12 03:56:22,000 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4909267f]
2021-03-12 03:56:22,109 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:22,110 [main:117] - GENERATED CALL = (MAX_LONG).drop(-211881003)
2021-03-12 03:56:22,110 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e428ad4]]
2021-03-12 03:56:22,110 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 03:56:22,205 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:22,206 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e428ad4]
2021-03-12 03:56:22,206 [main:117] - GENERATED CALL = (MAX_LONG).get(698139718).plus(PREFIX)
2021-03-12 03:56:22,206 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@307cea0a]]
2021-03-12 03:56:22,206 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@307cea0a]
2021-03-12 03:56:22,288 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:56:22,288 [main:117] - GENERATED CALL = (MAX_LONG).plus("enmwl")
2021-03-12 03:56:22,288 [main:61] - replacement of "fail \"$PREFIX\" +" of type String is (MAX_LONG).concat(PREFIX)
2021-03-12 03:56:22,368 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:56:22,368 [main:66] - Compilation checking started
2021-03-12 03:56:22,604 [main:49] - Result = false
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-1962626012)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return (MAX_LONG).toUpperCase()
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if ((MAX_LONG).removeSurrounding("eqzwf") != PREFIX + Long.MAX_VALUE) return (MAX_LONG).concat(PREFIX)
    if ((MAX_LONG).get(113781418).isISOControl()) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (PREFIX).take(150265100)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + ("aslwh").prependIndent("gjmby") != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(-1680221669, 2009931715).commonSuffixWith("puamo", false)
}


2021-03-12 03:56:22,606 [main:53] - replacing (PREFIX + Long.MAX_VALUE, String)
2021-03-12 03:56:22,606 [main:50] - replacing PREFIX + Long.MAX_VALUE String
2021-03-12 03:56:22,606 [main:54] - Getting value of type String
2021-03-12 03:56:22,693 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:22,694 [main:58] - GENERATED VALUE OF TYPE String = "jmxkk"
2021-03-12 03:56:22,694 [main:61] - GENERATED IS CALL =false
2021-03-12 03:56:22,796 [main:67] - randomType = Double
2021-03-12 03:56:22,884 [main:302] - generating value of type = Double true depth = 0
2021-03-12 03:56:22,939 [main:149] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@5f77b570]
2021-03-12 03:56:22,939 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5281150f]
2021-03-12 03:56:23,019 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:23,020 [main:78] - Generated call from random type = (0.4782486079301662).toShort().toString(-556893251)
2021-03-12 03:56:23,020 [main:106] - GETTING String from String
2021-03-12 03:56:23,038 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1839c17c]]
2021-03-12 03:56:23,038 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1839c17c]
2021-03-12 03:56:23,039 [main:117] - GENERATED CALL = (PREFIX).toLowerCase()
2021-03-12 03:56:23,039 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@196815c]]
2021-03-12 03:56:23,039 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339]
2021-03-12 03:56:23,039 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@196815c]
2021-03-12 03:56:23,121 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:23,122 [main:117] - GENERATED CALL = (PREFIX).compareTo(PREFIX).toString(1171648523)
2021-03-12 03:56:23,122 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57446851]]
2021-03-12 03:56:23,122 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57446851]
2021-03-12 03:56:23,208 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:23,288 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:23,289 [main:117] - GENERATED CALL = (PREFIX).padStart(729783834, 'å¤º')
2021-03-12 03:56:23,289 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cd86a35]]
2021-03-12 03:56:23,289 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cd86a35]
2021-03-12 03:56:23,289 [main:117] - GENERATED CALL = (PREFIX).lowercase()
2021-03-12 03:56:23,289 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7564ea7e]]
2021-03-12 03:56:23,289 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7564ea7e]
2021-03-12 03:56:23,290 [main:117] - GENERATED CALL = (PREFIX).uppercase()
2021-03-12 03:56:23,290 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494d96f0]]
2021-03-12 03:56:23,290 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:56:23,370 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:23,468 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:23,469 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494d96f0]
2021-03-12 03:56:23,564 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:56:23,658 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:56:23,659 [main:117] - GENERATED CALL = (PREFIX).subSequence(501746738, -1399610403).commonSuffixWith("qeqdg", false)
2021-03-12 03:56:23,659 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fd784aa]]
2021-03-12 03:56:23,659 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fd784aa]
2021-03-12 03:56:23,738 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:23,738 [main:117] - GENERATED CALL = (PREFIX).replaceBeforeLast('ê·¨', PREFIX, PREFIX)
2021-03-12 03:56:23,738 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dcba3be]]
2021-03-12 03:56:23,738 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dcba3be]
2021-03-12 03:56:23,739 [main:117] - GENERATED CALL = (PREFIX).replaceIndentByMargin(MAX_LONG, PREFIX)
2021-03-12 03:56:23,739 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@166b651c]]
2021-03-12 03:56:23,739 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@166b651c]
2021-03-12 03:56:23,739 [main:117] - GENERATED CALL = (PREFIX).reversed()
2021-03-12 03:56:23,739 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45311397]]
2021-03-12 03:56:23,739 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45311397]
2021-03-12 03:56:23,818 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 03:56:23,819 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:56:23,820 [main:117] - GENERATED CALL = (PREFIX).filterIndexed({a: Int, b: Char -> false})
2021-03-12 03:56:23,820 [main:61] - replacement of PREFIX + Long.MAX_VALUE of type String is "jmxkk"
2021-03-12 03:56:23,899 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 03:56:23,900 [main:66] - Compilation checking started
2021-03-12 03:56:24,216 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-1962626012)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return (MAX_LONG).toUpperCase()
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if ((MAX_LONG).removeSurrounding("eqzwf") != "jmxkk") return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get(113781418).isISOControl()) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (PREFIX).take(150265100)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + ("aslwh").prependIndent("gjmby") != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(-1680221669, 2009931715).commonSuffixWith("puamo", false)
}


2021-03-12 03:56:24,218 [main:53] - replacing ("", String)
2021-03-12 03:56:24,218 [main:50] - replacing "" String
2021-03-12 03:56:24,218 [main:54] - Getting value of type String
2021-03-12 03:56:24,321 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:24,321 [main:58] - GENERATED VALUE OF TYPE String = "bvelp"
2021-03-12 03:56:24,321 [main:61] - GENERATED IS CALL =false
2021-03-12 03:56:24,575 [main:67] - randomType = HashMap<String, UByte>
2021-03-12 03:56:24,653 [main:302] - generating value of type = HashMap<String, UByte> false depth = 0
2021-03-12 03:56:24,736 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(pairs: Pair<String, UByte>): HashMap<Strg, UByte> = TODO()
2021-03-12 03:56:24,738 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(pairs: Pair<String, UByte>): HashMap<Strg, UByte> = TODO()
2021-03-12 03:56:24,843 [main:302] - generating value of type = Pair<String, UByte> false depth = 3
2021-03-12 03:56:24,937 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: String, second: UByte): Pair<String, UByte> = TODO()
2021-03-12 03:56:24,938 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: String, second: UByte): Pair<String, UByte> = TODO()
2021-03-12 03:56:25,021 [main:302] - generating value of type = String true depth = 6
2021-03-12 03:56:25,021 [main:302] - generating value of type = UByte true depth = 6
2021-03-12 03:56:25,022 [main:95] - GENERATED = Pair<String, UByte>("dndif", 9.toUByte())
2021-03-12 03:56:25,022 [main:95] - GENERATED = hashMapOf<String, UByte>(Pair<String, UByte>("dndif", 9.toUByte()))
2021-03-12 03:56:25,145 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@196815c]
2021-03-12 03:56:25,223 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:25,224 [main:78] - Generated call from random type = (hashMapOf<String, UByte>(Pair<String, UByte>("dndif", 9.toUByte()))).size.toString(1923539319)
2021-03-12 03:56:25,224 [main:106] - GETTING String from String
2021-03-12 03:56:25,245 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a222c29]]
2021-03-12 03:56:25,246 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a222c29]
2021-03-12 03:56:25,324 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:25,403 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:25,498 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:56:25,499 [main:117] - GENERATED CALL = (PREFIX).replaceFirst('ä«', 'å', true)
2021-03-12 03:56:25,499 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@726a65dc]]
2021-03-12 03:56:25,499 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@726a65dc]
2021-03-12 03:56:25,587 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:25,667 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:25,667 [main:117] - GENERATED CALL = (PREFIX).padEnd(-1723784182, 'ï¾ª')
2021-03-12 03:56:25,667 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10a44833]]
2021-03-12 03:56:25,667 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10a44833]
2021-03-12 03:56:25,746 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:25,747 [main:117] - GENERATED CALL = (PREFIX).substringAfterLast('ï', MAX_LONG)
2021-03-12 03:56:25,747 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@679d2905]]
2021-03-12 03:56:25,747 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@679d2905]
2021-03-12 03:56:25,825 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:25,902 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:25,903 [main:117] - GENERATED CALL = (PREFIX).replaceAfterLast('â©', PREFIX, "tganu")
2021-03-12 03:56:25,903 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d989160]]
2021-03-12 03:56:25,903 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d989160]
2021-03-12 03:56:25,982 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:25,982 [main:117] - GENERATED CALL = (PREFIX).substring(1542177404)
2021-03-12 03:56:25,982 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21f58cc8]]
2021-03-12 03:56:25,982 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21f58cc8]
2021-03-12 03:56:26,079 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:26,080 [main:117] - GENERATED CALL = (PREFIX).replaceBefore('ä½°', PREFIX, MAX_LONG)
2021-03-12 03:56:26,080 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7564ea7e]]
2021-03-12 03:56:26,080 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7564ea7e]
2021-03-12 03:56:26,080 [main:117] - GENERATED CALL = (PREFIX).uppercase()
2021-03-12 03:56:26,080 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e428ad4]]
2021-03-12 03:56:26,080 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 03:56:26,167 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:26,168 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e428ad4]
2021-03-12 03:56:26,248 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:26,249 [main:117] - GENERATED CALL = (PREFIX).get(1166243691).plus("okorm")
2021-03-12 03:56:26,249 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a284f16]]
2021-03-12 03:56:26,249 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a284f16]
2021-03-12 03:56:26,327 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:26,328 [main:117] - GENERATED CALL = (PREFIX).repeat(-35131252)
2021-03-12 03:56:26,328 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1839c17c]]
2021-03-12 03:56:26,328 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1839c17c]
2021-03-12 03:56:26,328 [main:117] - GENERATED CALL = (PREFIX).toLowerCase()
2021-03-12 03:56:26,328 [main:61] - replacement of "" of type String is (PREFIX).replaceAfterLast('â©', PREFIX, "tganu")
2021-03-12 03:56:26,408 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:56:26,409 [main:66] - Compilation checking started
2021-03-12 03:56:26,712 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-1962626012)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return (MAX_LONG).toUpperCase()
    if (MAX_LONG != (String::plus)((PREFIX).replaceAfterLast('â©', PREFIX, "tganu"), Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if ((MAX_LONG).removeSurrounding("eqzwf") != "jmxkk") return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get(113781418).isISOControl()) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (PREFIX).take(150265100)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + ("aslwh").prependIndent("gjmby") != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(-1680221669, 2009931715).commonSuffixWith("puamo", false)
}


2021-03-12 03:56:26,713 [main:53] - replacing (Long.MAX_VALUE, Long)
2021-03-12 03:56:26,713 [main:50] - replacing Long.MAX_VALUE Long
2021-03-12 03:56:26,714 [main:54] - Getting value of type Long
2021-03-12 03:56:26,793 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:56:26,794 [main:58] - GENERATED VALUE OF TYPE Long = -9178062079379358982
2021-03-12 03:56:26,794 [main:61] - GENERATED IS CALL =false
2021-03-12 03:56:26,895 [main:67] - randomType = Triple<Boolean, Long, Long>
2021-03-12 03:56:26,974 [main:302] - generating value of type = Triple<Boolean, Long, Long> false depth = 0
2021-03-12 03:56:27,057 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Boolean, second: Long, third: Long): Triple<Boolean, Long, Long> = TODO()
2021-03-12 03:56:27,058 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Boolean, second: Long, third: Long): Triple<Boolean, Long, Long> = TODO()
2021-03-12 03:56:27,140 [main:302] - generating value of type = Boolean true depth = 3
2021-03-12 03:56:27,140 [main:302] - generating value of type = Long true depth = 3
2021-03-12 03:56:27,141 [main:302] - generating value of type = Long true depth = 3
2021-03-12 03:56:27,141 [main:95] - GENERATED = Triple<Boolean, Long, Long>(true, 4028864180187556700, 64982134227661328)
2021-03-12 03:56:27,154 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Long): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@472bf56c]
2021-03-12 03:56:27,233 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:56:27,234 [main:78] - Generated call from random type = (Triple<Boolean, Long, Long>(true, 4028864180187556700, 64982134227661328)).second.and(-4211312169511356492)
2021-03-12 03:56:27,234 [main:61] - replacement of Long.MAX_VALUE of type Long is (Triple<Boolean, Long, Long>(true, 4028864180187556700, 64982134227661328)).second.and(-4211312169511356492)
2021-03-12 03:56:27,313 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:56:27,313 [main:66] - Compilation checking started
2021-03-12 03:56:27,707 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-1962626012)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return (MAX_LONG).toUpperCase()
    if (MAX_LONG != (String::plus)((PREFIX).replaceAfterLast('â©', PREFIX, "tganu"), Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)((Triple<Boolean, Long, Long>(true, 4028864180187556700, 64982134227661328)).second.and(-4211312169511356492))) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if ((MAX_LONG).removeSurrounding("eqzwf") != "jmxkk") return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get(113781418).isISOControl()) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (PREFIX).take(150265100)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + ("aslwh").prependIndent("gjmby") != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(-1680221669, 2009931715).commonSuffixWith("puamo", false)
}


2021-03-12 03:56:27,709 [main:53] - replacing (PREFIX + ("aslwh").prependIndent("gjmby"), String)
2021-03-12 03:56:27,710 [main:50] - replacing PREFIX + ("aslwh").prependIndent("gjmby") String
2021-03-12 03:56:27,710 [main:54] - Getting value of type String
2021-03-12 03:56:27,820 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:27,820 [main:58] - GENERATED VALUE OF TYPE String = "qriue"
2021-03-12 03:56:27,821 [main:61] - GENERATED IS CALL =false
2021-03-12 03:56:28,037 [main:67] - randomType = ArrayList<Double>
2021-03-12 03:56:28,134 [main:302] - generating value of type = ArrayList<Double> false depth = 0
2021-03-12 03:56:28,234 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Double): ArrayList<Double> = TODO()
2021-03-12 03:56:28,236 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Double): ArrayList<Double> = TODO()
2021-03-12 03:56:28,328 [main:302] - generating value of type = Double true depth = 3
2021-03-12 03:56:28,330 [main:95] - GENERATED = arrayListOf<Double>(0.6253886532055273)
2021-03-12 03:56:28,530 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@196815c]
2021-03-12 03:56:28,615 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:28,615 [main:78] - Generated call from random type = (arrayListOf<Double>(0.6253886532055273)).modCount.toString(1558709017)
2021-03-12 03:56:28,616 [main:106] - GETTING String from String
2021-03-12 03:56:28,643 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55878bcb]]
2021-03-12 03:56:28,643 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55878bcb]
2021-03-12 03:56:28,756 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:56:28,762 [main:117] - GENERATED CALL = (PREFIX).removeSurrounding("gxszl")
2021-03-12 03:56:28,762 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6358fd25]]
2021-03-12 03:56:28,762 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6358fd25]
2021-03-12 03:56:28,857 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:28,947 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:29,038 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:56:29,039 [main:117] - GENERATED CALL = (PREFIX).replace('æ­¾', 'è¤', false)
2021-03-12 03:56:29,039 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1262e19c]]
2021-03-12 03:56:29,039 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1262e19c]
2021-03-12 03:56:29,121 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:29,202 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:29,203 [main:117] - GENERATED CALL = (PREFIX).substringAfter('ì¦¸', "cbsem")
2021-03-12 03:56:29,203 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@679d2905]]
2021-03-12 03:56:29,203 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@679d2905]
2021-03-12 03:56:29,284 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:29,402 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:29,486 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:29,487 [main:117] - GENERATED CALL = (PREFIX).replaceAfterLast('ì» ', "iyezm", "macpd")
2021-03-12 03:56:29,487 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@307cea0a]]
2021-03-12 03:56:29,487 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@307cea0a]
2021-03-12 03:56:29,610 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:56:29,610 [main:117] - GENERATED CALL = (PREFIX).plus("stdwx")
2021-03-12 03:56:29,610 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ab64eb1]]
2021-03-12 03:56:29,610 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ab64eb1]
2021-03-12 03:56:29,711 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:56:29,715 [main:117] - GENERATED CALL = (PREFIX).removePrefix(StringBuilder())
2021-03-12 03:56:29,716 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e57d13c]]
2021-03-12 03:56:29,716 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e57d13c]
2021-03-12 03:56:29,716 [main:117] - GENERATED CALL = (PREFIX).toUpperCase()
2021-03-12 03:56:29,716 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72825613]]
2021-03-12 03:56:29,716 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72825613]
2021-03-12 03:56:29,798 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:29,799 [main:117] - GENERATED CALL = (PREFIX).take(-1730007046)
2021-03-12 03:56:29,799 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e8483d9]]
2021-03-12 03:56:29,799 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e8483d9]
2021-03-12 03:56:29,880 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:56:29,880 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:56:29,881 [main:117] - GENERATED CALL = (PREFIX).dropLastWhile({a: Char -> false})
2021-03-12 03:56:29,881 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494d96f0]]
2021-03-12 03:56:29,882 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:56:29,962 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:30,044 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:30,045 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494d96f0]
2021-03-12 03:56:30,146 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:56:30,242 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:56:30,243 [main:117] - GENERATED CALL = (PREFIX).subSequence(-1059204891, -312297655).commonSuffixWith("xubtk", false)
2021-03-12 03:56:30,243 [main:61] - replacement of PREFIX + ("aslwh").prependIndent("gjmby") of type String is (arrayListOf<Double>(0.6253886532055273)).modCount.toString(1558709017)
2021-03-12 03:56:30,325 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:56:30,325 [main:66] - Compilation checking started
2021-03-12 03:56:30,625 [main:49] - Result = false
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-1962626012)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return (MAX_LONG).toUpperCase()
    if (MAX_LONG != (String::plus)((PREFIX).replaceAfterLast('â©', PREFIX, "tganu"), Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)((Triple<Boolean, Long, Long>(true, 4028864180187556700, 64982134227661328)).second.and(-4211312169511356492))) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if ((MAX_LONG).removeSurrounding("eqzwf") != "jmxkk") return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get(113781418).isISOControl()) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (PREFIX).take(150265100)) return "fail String::plus($PREFIX, ...)"
    if ((arrayListOf<Double>(0.6253886532055273)).modCount.toString(1558709017) != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(-1680221669, 2009931715).commonSuffixWith("puamo", false)
}


2021-03-12 03:56:30,627 [main:53] - replacing (MAX_LONG, String)
2021-03-12 03:56:30,627 [main:50] - replacing MAX_LONG String
2021-03-12 03:56:30,627 [main:54] - Getting value of type String
2021-03-12 03:56:30,720 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:30,721 [main:58] - GENERATED VALUE OF TYPE String = "vojfk"
2021-03-12 03:56:30,721 [main:61] - GENERATED IS CALL =false
2021-03-12 03:56:30,915 [main:67] - randomType = Set<String>
2021-03-12 03:56:30,915 [main:106] - GETTING String from String
2021-03-12 03:56:30,940 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2273a0a3]]
2021-03-12 03:56:30,940 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2273a0a3]
2021-03-12 03:56:31,036 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 03:56:31,125 [main:43] - GENERATING CALL OF fun <T> mutableListOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 03:56:31,127 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableListOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 03:56:31,214 [main:302] - generating value of type = Int true depth = 3
2021-03-12 03:56:31,215 [main:95] - GENERATED = mutableListOf<Int>(-1139588567)
2021-03-12 03:56:31,215 [main:117] - GENERATED CALL = (PREFIX).slice(mutableListOf<Int>(-1139588567))
2021-03-12 03:56:31,215 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7564ea7e]]
2021-03-12 03:56:31,216 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7564ea7e]
2021-03-12 03:56:31,216 [main:117] - GENERATED CALL = (PREFIX).uppercase()
2021-03-12 03:56:31,216 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@679d2905]]
2021-03-12 03:56:31,216 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@679d2905]
2021-03-12 03:56:31,299 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:31,299 [main:117] - GENERATED CALL = (PREFIX).replaceAfterLast('ï£', PREFIX, PREFIX)
2021-03-12 03:56:31,299 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@492795f3]]
2021-03-12 03:56:31,300 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@492795f3]
2021-03-12 03:56:31,391 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:31,392 [main:117] - GENERATED CALL = (PREFIX).takeLast(-1632825730)
2021-03-12 03:56:31,392 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63dad168]]
2021-03-12 03:56:31,392 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63dad168]
2021-03-12 03:56:31,479 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:31,565 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:31,653 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:56:31,777 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 03:56:31,779 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 03:56:31,979 [main:302] - generating value of type = String true depth = 3
2021-03-12 03:56:31,980 [main:95] - GENERATED = StringBuilder("rrwqe")
2021-03-12 03:56:31,980 [main:117] - GENERATED CALL = (PREFIX).replaceRange(-358612432, 211020712, StringBuilder("rrwqe"))
2021-03-12 03:56:31,980 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@726a65dc]]
2021-03-12 03:56:31,981 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@726a65dc]
2021-03-12 03:56:32,064 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:32,146 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:32,147 [main:117] - GENERATED CALL = (PREFIX).padEnd(-633948277, 'â°')
2021-03-12 03:56:32,147 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494d96f0]]
2021-03-12 03:56:32,148 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:56:32,229 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:32,315 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:32,316 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494d96f0]
2021-03-12 03:56:32,425 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:56:32,525 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:56:32,526 [main:117] - GENERATED CALL = (PREFIX).subSequence(1397089038, 1499001679).commonSuffixWith("jfemb", true)
2021-03-12 03:56:32,526 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c521f60]]
2021-03-12 03:56:32,527 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c521f60]
2021-03-12 03:56:32,527 [main:117] - GENERATED CALL = (PREFIX).trimStart()
2021-03-12 03:56:32,527 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45311397]]
2021-03-12 03:56:32,527 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45311397]
2021-03-12 03:56:32,610 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 03:56:32,610 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:56:32,611 [main:117] - GENERATED CALL = (PREFIX).filterIndexed({a: Int, b: Char -> true})
2021-03-12 03:56:32,611 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e3da54]]
2021-03-12 03:56:32,611 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e3da54]
2021-03-12 03:56:32,691 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:56:32,692 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:56:32,693 [main:117] - GENERATED CALL = (PREFIX).dropWhile({a: Char -> true})
2021-03-12 03:56:32,693 [main:61] - replacement of MAX_LONG of type String is (PREFIX).uppercase()
2021-03-12 03:56:32,772 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:56:32,772 [main:66] - Compilation checking started
2021-03-12 03:56:33,100 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-1962626012)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return (MAX_LONG).toUpperCase()
    if ((PREFIX).uppercase() != (String::plus)((PREFIX).replaceAfterLast('â©', PREFIX, "tganu"), Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)((Triple<Boolean, Long, Long>(true, 4028864180187556700, 64982134227661328)).second.and(-4211312169511356492))) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if ((MAX_LONG).removeSurrounding("eqzwf") != "jmxkk") return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get(113781418).isISOControl()) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (PREFIX).take(150265100)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + ("aslwh").prependIndent("gjmby") != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(-1680221669, 2009931715).commonSuffixWith("puamo", false)
}


2021-03-12 03:56:33,100 [main:53] - replacing (PREFIX, String)
2021-03-12 03:56:33,100 [main:50] - replacing PREFIX String
2021-03-12 03:56:33,100 [main:54] - Getting value of type String
2021-03-12 03:56:33,181 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:33,182 [main:58] - GENERATED VALUE OF TYPE String = "ltdhk"
2021-03-12 03:56:33,182 [main:61] - GENERATED IS CALL =false
2021-03-12 03:56:33,282 [main:67] - randomType = ULong
2021-03-12 03:56:33,363 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 03:56:33,395 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@48067ec7]
2021-03-12 03:56:33,476 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 03:56:33,477 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@196815c]
2021-03-12 03:56:33,558 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:33,558 [main:78] - Generated call from random type = (5930371879356122047.toULong()).compareTo(76.toUByte()).toString(109424210)
2021-03-12 03:56:33,559 [main:61] - replacement of PREFIX of type String is (5930371879356122047.toULong()).compareTo(76.toUByte()).toString(109424210)
2021-03-12 03:56:33,639 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:56:33,640 [main:53] - replacing ("OK", String)
2021-03-12 03:56:33,640 [main:50] - replacing "OK" String
2021-03-12 03:56:33,640 [main:54] - Getting value of type String
2021-03-12 03:56:33,721 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:33,721 [main:58] - GENERATED VALUE OF TYPE String = "smrqv"
2021-03-12 03:56:33,722 [main:61] - GENERATED IS CALL =false
2021-03-12 03:56:33,808 [main:67] - randomType = Short
2021-03-12 03:56:33,891 [main:302] - generating value of type = Short true depth = 0
2021-03-12 03:56:33,931 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@3a24986b]
2021-03-12 03:56:33,931 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24f3d945]
2021-03-12 03:56:33,932 [main:78] - Generated call from random type = (3732).toChar().titlecase()
2021-03-12 03:56:33,932 [main:61] - replacement of "OK" of type String is (3732).toChar().titlecase()
2021-03-12 03:56:34,030 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:56:34,031 [main:53] - replacing ("fail String::plus", String)
2021-03-12 03:56:34,032 [main:50] - replacing "fail String::plus" String
2021-03-12 03:56:34,032 [main:54] - Getting value of type String
2021-03-12 03:56:34,127 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:34,128 [main:58] - GENERATED VALUE OF TYPE String = "vfbaj"
2021-03-12 03:56:34,128 [main:61] - GENERATED IS CALL =false
2021-03-12 03:56:34,564 [main:67] - randomType = LinkedHashSet<MutableMap<UByte, ULong>>
2021-03-12 03:56:34,644 [main:302] - generating value of type = LinkedHashSet<MutableMap<UByte, ULong>> false depth = 0
2021-03-12 03:56:34,751 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<MutableMap<UByte, ULong>> = TODO()
2021-03-12 03:56:34,753 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<MutableMap<UByte, ULong>> = TODO()
2021-03-12 03:56:34,851 [main:95] - GENERATED = linkedSetOf<MutableMap<UByte, ULong>>()
2021-03-12 03:56:35,071 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@4f990248]
2021-03-12 03:56:35,071 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@40724ccd]
2021-03-12 03:56:35,154 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:56:35,240 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:56:35,326 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:56:35,410 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 03:56:35,411 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 03:56:35,615 [main:302] - generating value of type = String true depth = 3
2021-03-12 03:56:35,616 [main:95] - GENERATED = StringBuilder("zwuiz")
2021-03-12 03:56:35,708 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:35,790 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:56:35,875 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 03:56:35,875 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 03:56:35,960 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 03:56:35,962 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 03:56:36,131 [main:302] - generating value of type = String true depth = 4
2021-03-12 03:56:36,131 [main:95] - GENERATED = StringBuilder("rspgx")
2021-03-12 03:56:36,132 [main:78] - Generated call from random type = (linkedSetOf<MutableMap<UByte, ULong>>()).toArray().joinToString("iwrqj", "ftmvg", StringBuilder("zwuiz"), -266565830, StringBuilder(), {a: T -> StringBuilder("rspgx")})
2021-03-12 03:56:36,132 [main:61] - replacement of "fail String::plus" of type String is (linkedSetOf<MutableMap<UByte, ULong>>()).toArray().joinToString("iwrqj", "ftmvg", StringBuilder("zwuiz"), -266565830, StringBuilder(), {a: T -> StringBuilder("rspgx")})
2021-03-12 03:56:36,212 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:56:36,212 [main:66] - Compilation checking started
2021-03-12 03:56:36,661 [main:49] - Result = false
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-1962626012)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return (MAX_LONG).toUpperCase()
    if ((PREFIX).uppercase() != (String::plus)((PREFIX).replaceAfterLast('â©', PREFIX, "tganu"), Long.MAX_VALUE)) return (linkedSetOf<MutableMap<UByte, ULong>>()).toArray().joinToString("iwrqj", "ftmvg", StringBuilder("zwuiz"), -266565830, StringBuilder(), {a: T -> StringBuilder("rspgx")})
    if (MAX_LONG != (""::plus)((Triple<Boolean, Long, Long>(true, 4028864180187556700, 64982134227661328)).second.and(-4211312169511356492))) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if ((MAX_LONG).removeSurrounding("eqzwf") != "jmxkk") return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get(113781418).isISOControl()) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (PREFIX).take(150265100)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + ("aslwh").prependIndent("gjmby") != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(-1680221669, 2009931715).commonSuffixWith("puamo", false)
}


2021-03-12 03:56:36,664 [main:53] - replacing (PREFIX, String)
2021-03-12 03:56:36,664 [main:50] - replacing PREFIX String
2021-03-12 03:56:36,664 [main:54] - Getting value of type String
2021-03-12 03:56:36,770 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:36,771 [main:58] - GENERATED VALUE OF TYPE String = "swuod"
2021-03-12 03:56:36,771 [main:61] - GENERATED IS CALL =false
2021-03-12 03:56:36,877 [main:67] - randomType = Short
2021-03-12 03:56:36,973 [main:302] - generating value of type = Short true depth = 0
2021-03-12 03:56:37,027 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@410dcb8b]
2021-03-12 03:56:37,118 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:56:37,119 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40a7f0de]
2021-03-12 03:56:37,205 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:37,206 [main:78] - Generated call from random type = (9228).div(6324046487934881710).toString(1843489640)
2021-03-12 03:56:37,206 [main:106] - GETTING String from String
2021-03-12 03:56:37,235 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@679d2905]]
2021-03-12 03:56:37,235 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@679d2905]
2021-03-12 03:56:37,323 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:37,411 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:37,412 [main:117] - GENERATED CALL = (PREFIX).replaceAfterLast('æ¨', "nbddl", MAX_LONG)
2021-03-12 03:56:37,412 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63dad168]]
2021-03-12 03:56:37,412 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63dad168]
2021-03-12 03:56:37,502 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:37,604 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:37,699 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:56:37,703 [main:117] - GENERATED CALL = (PREFIX).replaceRange(625564001, 876873498, "ejbcy")
2021-03-12 03:56:37,703 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6358fd25]]
2021-03-12 03:56:37,703 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6358fd25]
2021-03-12 03:56:37,793 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:37,885 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:37,978 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:56:37,980 [main:117] - GENERATED CALL = (PREFIX).replace('Ë', 'é©£', true)
2021-03-12 03:56:37,980 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f24aea4]]
2021-03-12 03:56:37,980 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f24aea4]
2021-03-12 03:56:37,980 [main:117] - GENERATED CALL = (PREFIX).trimIndent()
2021-03-12 03:56:37,980 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e41a4e7]]
2021-03-12 03:56:37,981 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e41a4e7]
2021-03-12 03:56:38,080 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 03:56:38,081 [main:302] - generating value of type = Char true depth = 1
2021-03-12 03:56:38,083 [main:117] - GENERATED CALL = (PREFIX).replaceFirstChar({a: Char -> 'çª¥'})
2021-03-12 03:56:38,083 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fdc3b45]]
2021-03-12 03:56:38,083 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fdc3b45]
2021-03-12 03:56:38,175 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:38,176 [main:117] - GENERATED CALL = (PREFIX).dropLast(578737248)
2021-03-12 03:56:38,177 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3643ebef]]
2021-03-12 03:56:38,177 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3643ebef]
2021-03-12 03:56:38,177 [main:117] - GENERATED CALL = (PREFIX).capitalize()
2021-03-12 03:56:38,177 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e3da54]]
2021-03-12 03:56:38,177 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e3da54]
2021-03-12 03:56:38,269 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:56:38,270 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:56:38,271 [main:117] - GENERATED CALL = (PREFIX).dropWhile({a: Char -> false})
2021-03-12 03:56:38,271 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c521f60]]
2021-03-12 03:56:38,271 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c521f60]
2021-03-12 03:56:38,271 [main:117] - GENERATED CALL = (PREFIX).trimStart()
2021-03-12 03:56:38,272 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dcba3be]]
2021-03-12 03:56:38,272 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dcba3be]
2021-03-12 03:56:38,272 [main:117] - GENERATED CALL = (PREFIX).replaceIndentByMargin(PREFIX, MAX_LONG)
2021-03-12 03:56:38,272 [main:61] - replacement of PREFIX of type String is "swuod"
2021-03-12 03:56:38,389 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 03:56:38,390 [main:66] - Compilation checking started
2021-03-12 03:56:38,820 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-1962626012)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return (MAX_LONG).toUpperCase()
    if ((PREFIX).uppercase() != (String::plus)((PREFIX).replaceAfterLast('â©', PREFIX, "tganu"), Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)((Triple<Boolean, Long, Long>(true, 4028864180187556700, 64982134227661328)).second.and(-4211312169511356492))) return "fail \"\"::plus"

    if ("swuod" + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if ((MAX_LONG).removeSurrounding("eqzwf") != "jmxkk") return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get(113781418).isISOControl()) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (PREFIX).take(150265100)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + ("aslwh").prependIndent("gjmby") != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(-1680221669, 2009931715).commonSuffixWith("puamo", false)
}


2021-03-12 03:56:38,821 [main:53] - replacing ("", String)
2021-03-12 03:56:38,821 [main:50] - replacing "" String
2021-03-12 03:56:38,821 [main:54] - Getting value of type String
2021-03-12 03:56:38,922 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:38,922 [main:58] - GENERATED VALUE OF TYPE String = "djwps"
2021-03-12 03:56:38,923 [main:61] - GENERATED IS CALL =false
2021-03-12 03:56:39,104 [main:67] - randomType = Byte?
2021-03-12 03:56:39,187 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:56:39,240 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@73e08a42]
2021-03-12 03:56:39,240 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e428ad4]
2021-03-12 03:56:39,323 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:39,324 [main:78] - Generated call from random type = (69)?.toChar().plus("jwgqd")
2021-03-12 03:56:39,324 [main:61] - replacement of "" of type String is (69)?.toChar().plus("jwgqd")
2021-03-12 03:56:39,406 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:56:39,407 [main:53] - replacing (String::plus, KFunction2<String, [@kotlin.ParameterName] Any?, String>)
2021-03-12 03:56:39,407 [main:50] - replacing String::plus KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:56:39,407 [main:54] - Getting value of type KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:56:39,503 [main:302] - generating value of type = KFunction2<String, [@kotlin.ParameterName] Any?, String> false depth = 0
2021-03-12 03:56:39,585 [main:58] - GENERATED VALUE OF TYPE KFunction2<String, [@kotlin.ParameterName] Any?, String> = 
2021-03-12 03:56:39,672 [main:67] - randomType = ULong
2021-03-12 03:56:39,758 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 03:56:39,800 [main:58] - Cant find and generate replacement for String::plus type KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:56:39,801 [main:53] - replacing (MAX_LONG, String)
2021-03-12 03:56:39,801 [main:50] - replacing MAX_LONG String
2021-03-12 03:56:39,801 [main:54] - Getting value of type String
2021-03-12 03:56:39,882 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:39,883 [main:58] - GENERATED VALUE OF TYPE String = "lqsrl"
2021-03-12 03:56:39,883 [main:61] - GENERATED IS CALL =false
2021-03-12 03:56:39,968 [main:67] - randomType = Double
2021-03-12 03:56:40,049 [main:302] - generating value of type = Double true depth = 0
2021-03-12 03:56:40,098 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@10013c81]
2021-03-12 03:56:40,180 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:56:40,181 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@196815c]
2021-03-12 03:56:40,264 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:40,265 [main:78] - Generated call from random type = (0.8907109344230011).compareTo(-100).toString(-343607989)
2021-03-12 03:56:40,265 [main:106] - GETTING String from String
2021-03-12 03:56:40,294 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3643ebef]]
2021-03-12 03:56:40,294 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3643ebef]
2021-03-12 03:56:40,295 [main:117] - GENERATED CALL = (PREFIX).capitalize()
2021-03-12 03:56:40,295 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1526b9cd]]
2021-03-12 03:56:40,295 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1526b9cd]
2021-03-12 03:56:40,396 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:56:40,396 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:56:40,397 [main:117] - GENERATED CALL = (PREFIX).filter({a: Char -> true})
2021-03-12 03:56:40,397 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4909267f]]
2021-03-12 03:56:40,397 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4909267f]
2021-03-12 03:56:40,488 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:40,489 [main:117] - GENERATED CALL = (PREFIX).drop(681141366)
2021-03-12 03:56:40,489 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57446851]]
2021-03-12 03:56:40,489 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57446851]
2021-03-12 03:56:40,571 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:40,653 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:40,654 [main:117] - GENERATED CALL = (PREFIX).padStart(281656523, 'á£¥')
2021-03-12 03:56:40,654 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@376a7dc9]]
2021-03-12 03:56:40,654 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@376a7dc9]
2021-03-12 03:56:40,734 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:56:40,817 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 03:56:40,818 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 03:56:40,985 [main:302] - generating value of type = Int true depth = 3
2021-03-12 03:56:40,986 [main:95] - GENERATED = StringBuilder(-514310609)
2021-03-12 03:56:40,986 [main:117] - GENERATED CALL = (PREFIX).removeSuffix(StringBuilder(-514310609))
2021-03-12 03:56:40,986 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@679d2905]]
2021-03-12 03:56:40,986 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@679d2905]
2021-03-12 03:56:41,073 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:41,074 [main:117] - GENERATED CALL = (PREFIX).replaceAfterLast('à»', PREFIX, PREFIX)
2021-03-12 03:56:41,074 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b2c8153]]
2021-03-12 03:56:41,074 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:56:41,172 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:41,263 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:41,263 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b2c8153]
2021-03-12 03:56:41,344 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:56:41,431 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:56:41,431 [main:117] - GENERATED CALL = (PREFIX).subSequence(-321614425, -831548672).commonPrefixWith("qyiwy", true)
2021-03-12 03:56:41,432 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fdc3b45]]
2021-03-12 03:56:41,432 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fdc3b45]
2021-03-12 03:56:41,512 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:41,512 [main:117] - GENERATED CALL = (PREFIX).dropLast(-1274084331)
2021-03-12 03:56:41,512 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@307cea0a]]
2021-03-12 03:56:41,513 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@307cea0a]
2021-03-12 03:56:41,592 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:56:41,592 [main:117] - GENERATED CALL = (PREFIX).plus("fzzqy")
2021-03-12 03:56:41,592 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d989160]]
2021-03-12 03:56:41,592 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d989160]
2021-03-12 03:56:41,671 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:41,672 [main:117] - GENERATED CALL = (PREFIX).substring(1488305660)
2021-03-12 03:56:41,672 [main:61] - replacement of MAX_LONG of type String is (PREFIX).drop(681141366)
2021-03-12 03:56:41,751 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:56:41,752 [main:66] - Compilation checking started
2021-03-12 03:56:42,079 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-1962626012)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return (MAX_LONG).toUpperCase()
    if ((PREFIX).uppercase() != (String::plus)((PREFIX).replaceAfterLast('â©', PREFIX, "tganu"), Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)((Triple<Boolean, Long, Long>(true, 4028864180187556700, 64982134227661328)).second.and(-4211312169511356492))) return "fail \"\"::plus"

    if ("swuod" + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if ((MAX_LONG).removeSurrounding("eqzwf") != "jmxkk") return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get(113781418).isISOControl()) return "fail \"$PREFIX\".plus"
    if (PREFIX + (PREFIX).drop(681141366) != (PREFIX).take(150265100)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + ("aslwh").prependIndent("gjmby") != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(-1680221669, 2009931715).commonSuffixWith("puamo", false)
}


2021-03-12 03:56:42,080 [main:53] - replacing ((String::plus), KFunction2<String, [@kotlin.ParameterName] Any?, String>)
2021-03-12 03:56:42,080 [main:50] - replacing (String::plus) KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:56:42,080 [main:54] - Getting value of type KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:56:42,191 [main:302] - generating value of type = KFunction2<String, [@kotlin.ParameterName] Any?, String> false depth = 0
2021-03-12 03:56:42,280 [main:58] - GENERATED VALUE OF TYPE KFunction2<String, [@kotlin.ParameterName] Any?, String> = 
2021-03-12 03:56:42,461 [main:67] - randomType = UByte?
2021-03-12 03:56:42,541 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 03:56:42,577 [main:58] - Cant find and generate replacement for (String::plus) type KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:56:42,578 [main:53] - replacing (PREFIX, String)
2021-03-12 03:56:42,578 [main:50] - replacing PREFIX String
2021-03-12 03:56:42,578 [main:54] - Getting value of type String
2021-03-12 03:56:42,661 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:42,662 [main:58] - GENERATED VALUE OF TYPE String = "qbfoi"
2021-03-12 03:56:42,662 [main:61] - GENERATED IS CALL =false
2021-03-12 03:56:42,749 [main:67] - randomType = Short
2021-03-12 03:56:42,831 [main:302] - generating value of type = Short true depth = 0
2021-03-12 03:56:42,863 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5281150f]
2021-03-12 03:56:42,943 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:42,944 [main:78] - Generated call from random type = (-23695).toString(2125762466)
2021-03-12 03:56:42,944 [main:106] - GETTING String from String
2021-03-12 03:56:42,968 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45311397]]
2021-03-12 03:56:42,968 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45311397]
2021-03-12 03:56:43,050 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 03:56:43,051 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:56:43,052 [main:117] - GENERATED CALL = (PREFIX).filterIndexed({a: Int, b: Char -> false})
2021-03-12 03:56:43,052 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b2c8153]]
2021-03-12 03:56:43,052 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b2c8153]
2021-03-12 03:56:43,156 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:56:43,255 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:56:43,257 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:56:43,424 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 03:56:43,506 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:56:43,507 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:56:43,681 [main:302] - generating value of type = CharSequence false depth = 6
2021-03-12 03:56:43,684 [main:95] - GENERATED = StringBuilder("rmiek")
2021-03-12 03:56:43,684 [main:95] - GENERATED = StringBuilder(StringBuilder("rmiek"))
2021-03-12 03:56:43,762 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:56:43,763 [main:117] - GENERATED CALL = (PREFIX).commonPrefixWith(StringBuilder(StringBuilder("rmiek")), false)
2021-03-12 03:56:43,763 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d989160]]
2021-03-12 03:56:43,763 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d989160]
2021-03-12 03:56:43,841 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:43,842 [main:117] - GENERATED CALL = (PREFIX).substring(550366655)
2021-03-12 03:56:43,842 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55878bcb]]
2021-03-12 03:56:43,842 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55878bcb]
2021-03-12 03:56:43,952 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:56:44,051 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 03:56:44,053 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 03:56:44,221 [main:302] - generating value of type = String true depth = 3
2021-03-12 03:56:44,222 [main:95] - GENERATED = StringBuilder("hdjpj")
2021-03-12 03:56:44,222 [main:117] - GENERATED CALL = (PREFIX).removeSurrounding(StringBuilder("hdjpj"))
2021-03-12 03:56:44,223 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@166b651c]]
2021-03-12 03:56:44,223 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@166b651c]
2021-03-12 03:56:44,223 [main:117] - GENERATED CALL = (PREFIX).reversed()
2021-03-12 03:56:44,223 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7564ea7e]]
2021-03-12 03:56:44,223 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7564ea7e]
2021-03-12 03:56:44,223 [main:117] - GENERATED CALL = (PREFIX).uppercase()
2021-03-12 03:56:44,223 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@548f039b]]
2021-03-12 03:56:44,223 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@548f039b]
2021-03-12 03:56:44,223 [main:117] - GENERATED CALL = (PREFIX).decapitalize()
2021-03-12 03:56:44,223 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7115a40]]
2021-03-12 03:56:44,224 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7115a40]
2021-03-12 03:56:44,302 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:44,303 [main:117] - GENERATED CALL = (PREFIX).trimMargin("ellwt")
2021-03-12 03:56:44,303 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bdbc0f5]]
2021-03-12 03:56:44,303 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 03:56:44,382 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:44,383 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bdbc0f5]
2021-03-12 03:56:44,384 [main:117] - GENERATED CALL = (PREFIX).get(1015665229).lowercase()
2021-03-12 03:56:44,384 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1526b9cd]]
2021-03-12 03:56:44,384 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1526b9cd]
2021-03-12 03:56:44,463 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:56:44,463 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:56:44,464 [main:117] - GENERATED CALL = (PREFIX).filter({a: Char -> false})
2021-03-12 03:56:44,464 [main:61] - replacement of PREFIX of type String is (PREFIX).removeSurrounding(StringBuilder("hdjpj"))
2021-03-12 03:56:44,543 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:56:44,544 [main:66] - Compilation checking started
2021-03-12 03:56:44,770 [main:49] - Result = false
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-1962626012)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return (MAX_LONG).toUpperCase()
    if ((PREFIX).uppercase() != (String::plus)((PREFIX).replaceAfterLast('â©', PREFIX, "tganu"), Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)((Triple<Boolean, Long, Long>(true, 4028864180187556700, 64982134227661328)).second.and(-4211312169511356492))) return "fail \"\"::plus"

    if ("swuod" + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if ((MAX_LONG).removeSurrounding("eqzwf") != "jmxkk") return "fail \"$(PREFIX).removeSurrounding(StringBuilder("hdjpj"))\" +"
    if ((MAX_LONG).get(113781418).isISOControl()) return "fail \"$PREFIX\".plus"
    if (PREFIX + (PREFIX).drop(681141366) != (PREFIX).take(150265100)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + ("aslwh").prependIndent("gjmby") != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(-1680221669, 2009931715).commonSuffixWith("puamo", false)
}


2021-03-12 03:56:44,772 [main:53] - replacing (Long.MAX_VALUE, Long)
2021-03-12 03:56:44,773 [main:50] - replacing Long.MAX_VALUE Long
2021-03-12 03:56:44,773 [main:54] - Getting value of type Long
2021-03-12 03:56:44,857 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:56:44,857 [main:58] - GENERATED VALUE OF TYPE Long = -7900085405288589560
2021-03-12 03:56:44,858 [main:61] - GENERATED IS CALL =false
2021-03-12 03:56:44,963 [main:67] - randomType = ULong
2021-03-12 03:56:45,044 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 03:56:45,075 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@2f18a1df]
2021-03-12 03:56:45,155 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 03:56:45,155 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70b478ce]
2021-03-12 03:56:45,237 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:56:45,238 [main:78] - Generated call from random type = (7568638189432575571.toULong()).compareTo(92.toUByte()).times(-4839096419512397080)
2021-03-12 03:56:45,239 [main:106] - GETTING Long from String
2021-03-12 03:56:45,265 [main:113] - Case = [public fun kotlin.String.toLong(): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61dffd38]]
2021-03-12 03:56:45,265 [main:149] - GENERATING call of type public fun kotlin.String.toLong(): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61dffd38]
2021-03-12 03:56:45,265 [main:117] - GENERATED CALL = (PREFIX).toLong()
2021-03-12 03:56:45,265 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Long): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b9b513c]]
2021-03-12 03:56:45,265 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:56:45,344 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:45,425 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:45,425 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Long): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b9b513c]
2021-03-12 03:56:45,504 [main:302] - generating value of type = Function1<Char, Long> false depth = 0
2021-03-12 03:56:45,505 [main:302] - generating value of type = Long true depth = 1
2021-03-12 03:56:45,506 [main:117] - GENERATED CALL = (PREFIX).subSequence(354459040, 873712113).sumOf({a: Char -> 3425805604297355212})
2021-03-12 03:56:45,506 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339], public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@185b9c70]]
2021-03-12 03:56:45,506 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339]
2021-03-12 03:56:45,506 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@185b9c70]
2021-03-12 03:56:45,585 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:56:45,586 [main:117] - GENERATED CALL = (PREFIX).compareTo(PREFIX).plus(-414526576886812152)
2021-03-12 03:56:45,586 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2e465cf2], public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70b478ce]]
2021-03-12 03:56:45,586 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70b478ce]
2021-03-12 03:56:45,665 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:56:45,666 [main:117] - GENERATED CALL = (PREFIX).length.times(1665535196187693431)
2021-03-12 03:56:45,666 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339], public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@362381b4]]
2021-03-12 03:56:45,666 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339]
2021-03-12 03:56:45,745 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:45,745 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@362381b4]
2021-03-12 03:56:45,824 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:56:45,825 [main:117] - GENERATED CALL = (PREFIX).compareTo("yktbf").minus(-4664072518003994119)
2021-03-12 03:56:45,825 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339], public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70b478ce]]
2021-03-12 03:56:45,825 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339]
2021-03-12 03:56:45,825 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@70b478ce]
2021-03-12 03:56:45,928 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:56:45,929 [main:117] - GENERATED CALL = (PREFIX).compareTo(MAX_LONG).times(-6758731476894404216)
2021-03-12 03:56:45,929 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2e465cf2], public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@87a5f58]]
2021-03-12 03:56:45,929 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@87a5f58]
2021-03-12 03:56:46,018 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:56:46,019 [main:117] - GENERATED CALL = (PREFIX).length.div(-5571521145527692347)
2021-03-12 03:56:46,019 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2e465cf2], public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2271c0ea]]
2021-03-12 03:56:46,019 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2271c0ea]
2021-03-12 03:56:46,019 [main:117] - GENERATED CALL = (PREFIX).length.toLong()
2021-03-12 03:56:46,019 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2e465cf2], public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@185b9c70]]
2021-03-12 03:56:46,019 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@185b9c70]
2021-03-12 03:56:46,099 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:56:46,099 [main:117] - GENERATED CALL = (PREFIX).length.plus(6355499750703135279)
2021-03-12 03:56:46,100 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Long): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b9b513c]]
2021-03-12 03:56:46,100 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Long): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b9b513c]
2021-03-12 03:56:46,178 [main:302] - generating value of type = Function1<Char, Long> false depth = 0
2021-03-12 03:56:46,179 [main:302] - generating value of type = Long true depth = 1
2021-03-12 03:56:46,179 [main:117] - GENERATED CALL = (PREFIX).sumOf({a: Char -> 5006498158653948338})
2021-03-12 03:56:46,179 [main:61] - replacement of Long.MAX_VALUE of type Long is (PREFIX).compareTo("yktbf").minus(-4664072518003994119)
2021-03-12 03:56:46,258 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:56:46,259 [main:66] - Compilation checking started
2021-03-12 03:56:46,583 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-1962626012)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return (MAX_LONG).toUpperCase()
    if ((PREFIX).uppercase() != (String::plus)((PREFIX).replaceAfterLast('â©', PREFIX, "tganu"), Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)((Triple<Boolean, Long, Long>(true, 4028864180187556700, 64982134227661328)).second.and(-4211312169511356492))) return "fail \"\"::plus"

    if ("swuod" + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if ((MAX_LONG).removeSurrounding("eqzwf") != "jmxkk") return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get(113781418).isISOControl()) return "fail \"$PREFIX\".plus"
    if (PREFIX + (PREFIX).drop(681141366) != (PREFIX).take(150265100)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + ("aslwh").prependIndent("gjmby") != (PREFIX::plus)((PREFIX).compareTo("yktbf").minus(-4664072518003994119))) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(-1680221669, 2009931715).commonSuffixWith("puamo", false)
}


2021-03-12 03:56:46,583 [main:53] - replacing (PREFIX, String)
2021-03-12 03:56:46,583 [main:50] - replacing PREFIX String
2021-03-12 03:56:46,583 [main:54] - Getting value of type String
2021-03-12 03:56:46,680 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:46,680 [main:58] - GENERATED VALUE OF TYPE String = "jrbak"
2021-03-12 03:56:46,680 [main:61] - GENERATED IS CALL =false
2021-03-12 03:56:46,765 [main:67] - randomType = Char?
2021-03-12 03:56:46,844 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:46,867 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5f95e589]
2021-03-12 03:56:46,867 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dc8d80d]
2021-03-12 03:56:46,946 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:46,947 [main:78] - Generated call from random type = ('ì¦©')?.toByte().toString(-2073965014)
2021-03-12 03:56:46,947 [main:61] - replacement of PREFIX of type String is "jrbak"
2021-03-12 03:56:47,045 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 03:56:47,047 [main:53] - replacing (PREFIX, String)
2021-03-12 03:56:47,047 [main:50] - replacing PREFIX String
2021-03-12 03:56:47,047 [main:54] - Getting value of type String
2021-03-12 03:56:47,126 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:47,127 [main:58] - GENERATED VALUE OF TYPE String = "tflpi"
2021-03-12 03:56:47,127 [main:61] - GENERATED IS CALL =false
2021-03-12 03:56:47,294 [main:67] - randomType = ULong?
2021-03-12 03:56:47,374 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 03:56:47,407 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@48e02c50]
2021-03-12 03:56:47,407 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dc8d80d]
2021-03-12 03:56:47,486 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:47,487 [main:78] - Generated call from random type = (6571885173928805743.toULong())?.toByte().toString(1888868390)
2021-03-12 03:56:47,487 [main:106] - GETTING String from String
2021-03-12 03:56:47,510 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e41a4e7]]
2021-03-12 03:56:47,510 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e41a4e7]
2021-03-12 03:56:47,592 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 03:56:47,592 [main:302] - generating value of type = Char true depth = 1
2021-03-12 03:56:47,593 [main:117] - GENERATED CALL = (MAX_LONG).replaceFirstChar({a: Char -> 'ä¯'})
2021-03-12 03:56:47,593 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f1f24e3]]
2021-03-12 03:56:47,593 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f1f24e3]
2021-03-12 03:56:47,593 [main:117] - GENERATED CALL = (MAX_LONG).replaceIndent(PREFIX)
2021-03-12 03:56:47,594 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@307cea0a]]
2021-03-12 03:56:47,594 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@307cea0a]
2021-03-12 03:56:47,673 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:56:47,673 [main:117] - GENERATED CALL = (MAX_LONG).plus("abcki")
2021-03-12 03:56:47,677 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33fb03c1]]
2021-03-12 03:56:47,677 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33fb03c1]
2021-03-12 03:56:47,756 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:47,836 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:47,837 [main:117] - GENERATED CALL = (MAX_LONG).removeRange(-1029980376, -654170888)
2021-03-12 03:56:47,837 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e3da54]]
2021-03-12 03:56:47,837 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e3da54]
2021-03-12 03:56:47,916 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:56:47,916 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:56:47,917 [main:117] - GENERATED CALL = (MAX_LONG).dropWhile({a: Char -> false})
2021-03-12 03:56:47,917 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fdc3b45]]
2021-03-12 03:56:47,917 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fdc3b45]
2021-03-12 03:56:48,021 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:48,022 [main:117] - GENERATED CALL = (MAX_LONG).dropLast(416521925)
2021-03-12 03:56:48,022 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fd784aa]]
2021-03-12 03:56:48,022 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fd784aa]
2021-03-12 03:56:48,110 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:48,202 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:48,202 [main:117] - GENERATED CALL = (MAX_LONG).replaceBeforeLast('ï»', PREFIX, "epqho")
2021-03-12 03:56:48,203 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1526b9cd]]
2021-03-12 03:56:48,203 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1526b9cd]
2021-03-12 03:56:48,283 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:56:48,283 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:56:48,284 [main:117] - GENERATED CALL = (MAX_LONG).filter({a: Char -> true})
2021-03-12 03:56:48,284 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1839c17c]]
2021-03-12 03:56:48,284 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1839c17c]
2021-03-12 03:56:48,284 [main:117] - GENERATED CALL = (MAX_LONG).toLowerCase()
2021-03-12 03:56:48,284 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10a44833]]
2021-03-12 03:56:48,284 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10a44833]
2021-03-12 03:56:48,365 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:48,366 [main:117] - GENERATED CALL = (MAX_LONG).substringAfterLast('æ´', MAX_LONG)
2021-03-12 03:56:48,366 [main:61] - replacement of PREFIX of type String is (MAX_LONG).dropWhile({a: Char -> false})
2021-03-12 03:56:48,446 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:56:48,446 [main:66] - Compilation checking started
2021-03-12 03:56:48,800 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-1962626012)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return (MAX_LONG).toUpperCase()
    if ((PREFIX).uppercase() != (String::plus)((PREFIX).replaceAfterLast('â©', PREFIX, "tganu"), Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)((Triple<Boolean, Long, Long>(true, 4028864180187556700, 64982134227661328)).second.and(-4211312169511356492))) return "fail \"\"::plus"

    if ("swuod" + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if ((MAX_LONG).removeSurrounding("eqzwf") != "jmxkk") return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get(113781418).isISOControl()) return "fail \"$PREFIX\".plus"
    if (PREFIX + (PREFIX).drop(681141366) != (PREFIX).take(150265100)) return "fail String::plus($PREFIX, ...)"
    if ((MAX_LONG).dropWhile({a: Char -> false}) + ("aslwh").prependIndent("gjmby") != (PREFIX::plus)((PREFIX).compareTo("yktbf").minus(-4664072518003994119))) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(-1680221669, 2009931715).commonSuffixWith("puamo", false)
}


2021-03-12 03:56:48,801 [main:53] - replacing (String::plus, KFunction2<String, [@kotlin.ParameterName] Any?, String>)
2021-03-12 03:56:48,802 [main:50] - replacing String::plus KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:56:48,802 [main:54] - Getting value of type KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:56:48,886 [main:302] - generating value of type = KFunction2<String, [@kotlin.ParameterName] Any?, String> false depth = 0
2021-03-12 03:56:48,971 [main:58] - GENERATED VALUE OF TYPE KFunction2<String, [@kotlin.ParameterName] Any?, String> = 
2021-03-12 03:56:49,167 [main:67] - randomType = Double?
2021-03-12 03:56:49,255 [main:302] - generating value of type = Double true depth = 0
2021-03-12 03:56:49,306 [main:106] - GETTING KFunction2<String, [@kotlin.ParameterName] Any?, String> from String
2021-03-12 03:56:49,327 [main:106] - GETTING KFunction2<String, [@kotlin.ParameterName] Any?, String> from String
2021-03-12 03:56:49,327 [main:58] - Cant find and generate replacement for String::plus type KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:56:49,328 [main:53] - replacing (MAX_LONG != "${Long.MAX_VALUE}", Boolean)
2021-03-12 03:56:49,328 [main:50] - replacing MAX_LONG != "${Long.MAX_VALUE}" Boolean
2021-03-12 03:56:49,328 [main:54] - Getting value of type Boolean
2021-03-12 03:56:49,410 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:56:49,410 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 03:56:49,410 [main:61] - GENERATED IS CALL =false
2021-03-12 03:56:49,581 [main:67] - randomType = UByte?
2021-03-12 03:56:49,662 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 03:56:49,691 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@35c45545]
2021-03-12 03:56:49,772 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 03:56:49,773 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@15ee1971]
2021-03-12 03:56:49,853 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:56:49,853 [main:78] - Generated call from random type = (2.toUByte())?.compareTo(13.toUByte()).equals("tqoyv")
2021-03-12 03:56:49,854 [main:106] - GETTING Boolean from String
2021-03-12 03:56:49,871 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ce54cb3]]
2021-03-12 03:56:49,871 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 03:56:49,953 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:49,953 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ce54cb3]
2021-03-12 03:56:49,954 [main:117] - GENERATED CALL = (MAX_LONG).get(-875734008).isLetterOrDigit()
2021-03-12 03:56:49,954 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50593a7d]]
2021-03-12 03:56:49,954 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 03:56:50,038 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:50,038 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50593a7d]
2021-03-12 03:56:50,038 [main:117] - GENERATED CALL = (MAX_LONG).get(2081353719).isDigit()
2021-03-12 03:56:50,039 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6426b954]]
2021-03-12 03:56:50,039 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 03:56:50,120 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:50,121 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6426b954]
2021-03-12 03:56:50,121 [main:117] - GENERATED CALL = (MAX_LONG).get(-1659922164).isLetter()
2021-03-12 03:56:50,121 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d9803b4]]
2021-03-12 03:56:50,121 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d9803b4]
2021-03-12 03:56:50,231 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:56:50,232 [main:117] - GENERATED CALL = (MAX_LONG).equals("bpbsz")
2021-03-12 03:56:50,232 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14d3cac5]]
2021-03-12 03:56:50,232 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 03:56:50,329 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:50,330 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14d3cac5]
2021-03-12 03:56:50,330 [main:117] - GENERATED CALL = (MAX_LONG).get(-318043962).isUpperCase()
2021-03-12 03:56:50,330 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@68996698]]
2021-03-12 03:56:50,330 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:56:50,414 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:50,500 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:50,501 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@68996698]
2021-03-12 03:56:50,584 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:56:50,584 [main:117] - GENERATED CALL = (MAX_LONG).subSequence(315530603, 499618828).equals("fnwhv")
2021-03-12 03:56:50,584 [main:113] - Case = [public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c374a3]]
2021-03-12 03:56:50,585 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c374a3]
2021-03-12 03:56:50,666 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:56:50,667 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:56:50,668 [main:117] - GENERATED CALL = (MAX_LONG).all({a: Char -> false})
2021-03-12 03:56:50,668 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a6a142c]]
2021-03-12 03:56:50,668 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 03:56:50,749 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:50,750 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a6a142c]
2021-03-12 03:56:50,750 [main:117] - GENERATED CALL = (MAX_LONG).get(-124633335).isLowerCase()
2021-03-12 03:56:50,750 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2e465cf2], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@15ee1971]]
2021-03-12 03:56:50,750 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@15ee1971]
2021-03-12 03:56:50,831 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:56:50,831 [main:117] - GENERATED CALL = (MAX_LONG).length.equals("mqicr")
2021-03-12 03:56:50,831 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e60c93f]]
2021-03-12 03:56:50,831 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:56:50,913 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:50,995 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:50,996 [main:149] - GENERATING call of type public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e60c93f]
2021-03-12 03:56:51,104 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:51,192 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:56:51,193 [main:117] - GENERATED CALL = (MAX_LONG).subSequence(212258873, -1503296514).endsWith('ï«®', false)
2021-03-12 03:56:51,193 [main:61] - replacement of MAX_LONG != "${Long.MAX_VALUE}" of type Boolean is (MAX_LONG).subSequence(212258873, -1503296514).endsWith('ï«®', false)
2021-03-12 03:56:51,282 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:56:51,282 [main:66] - Compilation checking started
2021-03-12 03:56:51,584 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if ((MAX_LONG).subSequence(212258873, -1503296514).endsWith('ï«®', false)) return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-1962626012)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return (MAX_LONG).toUpperCase()
    if ((PREFIX).uppercase() != (String::plus)((PREFIX).replaceAfterLast('â©', PREFIX, "tganu"), Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)((Triple<Boolean, Long, Long>(true, 4028864180187556700, 64982134227661328)).second.and(-4211312169511356492))) return "fail \"\"::plus"

    if ("swuod" + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if ((MAX_LONG).removeSurrounding("eqzwf") != "jmxkk") return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get(113781418).isISOControl()) return "fail \"$PREFIX\".plus"
    if (PREFIX + (PREFIX).drop(681141366) != (PREFIX).take(150265100)) return "fail String::plus($PREFIX, ...)"
    if ((MAX_LONG).dropWhile({a: Char -> false}) + ("aslwh").prependIndent("gjmby") != (PREFIX::plus)((PREFIX).compareTo("yktbf").minus(-4664072518003994119))) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(-1680221669, 2009931715).commonSuffixWith("puamo", false)
}


2021-03-12 03:56:51,587 [main:53] - replacing (PREFIX, String)
2021-03-12 03:56:51,588 [main:50] - replacing PREFIX String
2021-03-12 03:56:51,588 [main:54] - Getting value of type String
2021-03-12 03:56:51,672 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:51,673 [main:58] - GENERATED VALUE OF TYPE String = "davgf"
2021-03-12 03:56:51,673 [main:61] - GENERATED IS CALL =false
2021-03-12 03:56:51,675 [main:67] - randomType = Boolean
2021-03-12 03:56:51,755 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:56:51,764 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@638b60e5]
2021-03-12 03:56:51,846 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:56:51,847 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@196815c]
2021-03-12 03:56:51,936 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:51,937 [main:78] - Generated call from random type = (true).compareTo(false).toString(1746108247)
2021-03-12 03:56:51,937 [main:106] - GETTING String from String
2021-03-12 03:56:51,962 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72825613]]
2021-03-12 03:56:51,962 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72825613]
2021-03-12 03:56:52,045 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:52,047 [main:117] - GENERATED CALL = (MAX_LONG).take(-1836925127)
2021-03-12 03:56:52,047 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ab64eb1]]
2021-03-12 03:56:52,047 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ab64eb1]
2021-03-12 03:56:52,130 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:56:52,134 [main:117] - GENERATED CALL = (MAX_LONG).removePrefix("sshry")
2021-03-12 03:56:52,134 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dcde0a]]
2021-03-12 03:56:52,134 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dcde0a]
2021-03-12 03:56:52,239 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:56:52,240 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:56:52,241 [main:117] - GENERATED CALL = (MAX_LONG).filterNot({a: Char -> true})
2021-03-12 03:56:52,241 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4533f399]]
2021-03-12 03:56:52,241 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4533f399]
2021-03-12 03:56:52,330 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:56:52,330 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:56:52,331 [main:117] - GENERATED CALL = (MAX_LONG).takeWhile({a: Char -> false})
2021-03-12 03:56:52,331 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bdbc0f5]]
2021-03-12 03:56:52,331 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 03:56:52,412 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:52,413 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bdbc0f5]
2021-03-12 03:56:52,413 [main:117] - GENERATED CALL = (MAX_LONG).get(-713331493).lowercase()
2021-03-12 03:56:52,413 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b2c8153]]
2021-03-12 03:56:52,413 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b2c8153]
2021-03-12 03:56:52,494 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:56:52,579 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:56:52,580 [main:117] - GENERATED CALL = (MAX_LONG).commonPrefixWith(StringBuilder(), false)
2021-03-12 03:56:52,580 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494d96f0]]
2021-03-12 03:56:52,580 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:56:52,664 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:52,748 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:52,749 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494d96f0]
2021-03-12 03:56:52,834 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:56:52,920 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 03:56:52,921 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 03:56:53,092 [main:302] - generating value of type = Int true depth = 3
2021-03-12 03:56:53,093 [main:95] - GENERATED = StringBuilder(-31533333)
2021-03-12 03:56:53,202 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:56:53,204 [main:117] - GENERATED CALL = (MAX_LONG).subSequence(-1830105640, -1329174438).commonSuffixWith(StringBuilder(-31533333), false)
2021-03-12 03:56:53,204 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e57d13c]]
2021-03-12 03:56:53,204 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e57d13c]
2021-03-12 03:56:53,204 [main:117] - GENERATED CALL = (MAX_LONG).toUpperCase()
2021-03-12 03:56:53,204 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68eb2bf5]]
2021-03-12 03:56:53,204 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68eb2bf5]
2021-03-12 03:56:53,205 [main:117] - GENERATED CALL = (MAX_LONG).trim()
2021-03-12 03:56:53,205 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c521f60]]
2021-03-12 03:56:53,205 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c521f60]
2021-03-12 03:56:53,205 [main:117] - GENERATED CALL = (MAX_LONG).trimStart()
2021-03-12 03:56:53,205 [main:61] - replacement of PREFIX of type String is (MAX_LONG).commonPrefixWith(StringBuilder(), false)
2021-03-12 03:56:53,311 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:56:53,311 [main:66] - Compilation checking started
2021-03-12 03:56:53,641 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if ((MAX_LONG).subSequence(212258873, -1503296514).endsWith('ï«®', false)) return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-1962626012)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return (MAX_LONG).toUpperCase()
    if ((PREFIX).uppercase() != (String::plus)((PREFIX).replaceAfterLast('â©', PREFIX, "tganu"), Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)((Triple<Boolean, Long, Long>(true, 4028864180187556700, 64982134227661328)).second.and(-4211312169511356492))) return "fail \"\"::plus"

    if ("swuod" + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if ((MAX_LONG).removeSurrounding("eqzwf") != "jmxkk") return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get(113781418).isISOControl()) return "fail \"$(MAX_LONG).commonPrefixWith(StringBuilder(), false)\".plus"
    if (PREFIX + (PREFIX).drop(681141366) != (PREFIX).take(150265100)) return "fail String::plus($PREFIX, ...)"
    if ((MAX_LONG).dropWhile({a: Char -> false}) + ("aslwh").prependIndent("gjmby") != (PREFIX::plus)((PREFIX).compareTo("yktbf").minus(-4664072518003994119))) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(-1680221669, 2009931715).commonSuffixWith("puamo", false)
}


2021-03-12 03:56:53,642 [main:53] - replacing ("fail \"\" +", String)
2021-03-12 03:56:53,642 [main:50] - replacing "fail \"\" +" String
2021-03-12 03:56:53,642 [main:54] - Getting value of type String
2021-03-12 03:56:53,734 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:53,735 [main:58] - GENERATED VALUE OF TYPE String = "brukr"
2021-03-12 03:56:53,735 [main:61] - GENERATED IS CALL =false
2021-03-12 03:56:53,736 [main:67] - randomType = Int
2021-03-12 03:56:53,817 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:53,851 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7f466b3c]
2021-03-12 03:56:53,851 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dc8d80d]
2021-03-12 03:56:53,932 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:53,933 [main:78] - Generated call from random type = (-1395162197).toByte().toString(1343448860)
2021-03-12 03:56:53,933 [main:61] - replacement of "fail \"\" +" of type String is "brukr"
2021-03-12 03:56:54,014 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 03:56:54,015 [main:53] - replacing ("swuod" + MAX_LONG, String)
2021-03-12 03:56:54,015 [main:50] - replacing "swuod" + MAX_LONG String
2021-03-12 03:56:54,016 [main:54] - Getting value of type String
2021-03-12 03:56:54,097 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:54,097 [main:58] - GENERATED VALUE OF TYPE String = "qithv"
2021-03-12 03:56:54,098 [main:61] - GENERATED IS CALL =false
2021-03-12 03:56:54,188 [main:67] - randomType = UInt
2021-03-12 03:56:54,272 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 03:56:54,305 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@3e7191fe]
2021-03-12 03:56:54,305 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5281150f]
2021-03-12 03:56:54,405 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:54,406 [main:78] - Generated call from random type = (31871456.toUInt()).toShort().toString(-1375756744)
2021-03-12 03:56:54,406 [main:106] - GETTING String from String
2021-03-12 03:56:54,423 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@726a65dc]]
2021-03-12 03:56:54,423 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@726a65dc]
2021-03-12 03:56:54,504 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:54,585 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:54,586 [main:117] - GENERATED CALL = (PREFIX).padEnd(1751399690, 'è­¤')
2021-03-12 03:56:54,586 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7115a40]]
2021-03-12 03:56:54,586 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7115a40]
2021-03-12 03:56:54,666 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:54,667 [main:117] - GENERATED CALL = (PREFIX).trimMargin("nkegf")
2021-03-12 03:56:54,667 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e3da54]]
2021-03-12 03:56:54,667 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e3da54]
2021-03-12 03:56:54,748 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:56:54,749 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:56:54,750 [main:117] - GENERATED CALL = (PREFIX).dropWhile({a: Char -> true})
2021-03-12 03:56:54,750 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dcba3be]]
2021-03-12 03:56:54,750 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dcba3be]
2021-03-12 03:56:54,831 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:54,832 [main:117] - GENERATED CALL = (PREFIX).replaceIndentByMargin(MAX_LONG, "iqzps")
2021-03-12 03:56:54,832 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b2c8153]]
2021-03-12 03:56:54,832 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:56:54,914 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:54,997 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:54,998 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b2c8153]
2021-03-12 03:56:55,079 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:56:55,163 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:56:55,164 [main:117] - GENERATED CALL = (PREFIX).subSequence(689637404, 2088987605).commonPrefixWith("obzvc", true)
2021-03-12 03:56:55,164 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@196815c]]
2021-03-12 03:56:55,164 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339]
2021-03-12 03:56:55,267 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:55,268 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@196815c]
2021-03-12 03:56:55,362 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:55,363 [main:117] - GENERATED CALL = (PREFIX).compareTo("zulzg").toString(133976581)
2021-03-12 03:56:55,363 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24f3d945]]
2021-03-12 03:56:55,363 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 03:56:55,449 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:55,450 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24f3d945]
2021-03-12 03:56:55,450 [main:117] - GENERATED CALL = (PREFIX).get(-1483412475).titlecase()
2021-03-12 03:56:55,450 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fdc3b45]]
2021-03-12 03:56:55,451 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fdc3b45]
2021-03-12 03:56:55,531 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:55,532 [main:117] - GENERATED CALL = (PREFIX).dropLast(1756743921)
2021-03-12 03:56:55,532 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f24aea4]]
2021-03-12 03:56:55,532 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f24aea4]
2021-03-12 03:56:55,532 [main:117] - GENERATED CALL = (PREFIX).trimIndent()
2021-03-12 03:56:55,532 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6358fd25]]
2021-03-12 03:56:55,532 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6358fd25]
2021-03-12 03:56:55,613 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:55,694 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:55,785 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:56:55,785 [main:117] - GENERATED CALL = (PREFIX).replace('à¬¬', 'í', false)
2021-03-12 03:56:55,786 [main:61] - replacement of "swuod" + MAX_LONG of type String is (PREFIX).dropWhile({a: Char -> true})
2021-03-12 03:56:55,867 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:56:55,867 [main:66] - Compilation checking started
2021-03-12 03:56:56,175 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if ((MAX_LONG).subSequence(212258873, -1503296514).endsWith('ï«®', false)) return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-1962626012)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return (MAX_LONG).toUpperCase()
    if ((PREFIX).uppercase() != (String::plus)((PREFIX).replaceAfterLast('â©', PREFIX, "tganu"), Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)((Triple<Boolean, Long, Long>(true, 4028864180187556700, 64982134227661328)).second.and(-4211312169511356492))) return "fail \"\"::plus"

    if ((PREFIX).dropWhile({a: Char -> true}) != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if ((MAX_LONG).removeSurrounding("eqzwf") != "jmxkk") return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get(113781418).isISOControl()) return "fail \"$(MAX_LONG).commonPrefixWith(StringBuilder(), false)\".plus"
    if (PREFIX + (PREFIX).drop(681141366) != (PREFIX).take(150265100)) return "fail String::plus($PREFIX, ...)"
    if ((MAX_LONG).dropWhile({a: Char -> false}) + ("aslwh").prependIndent("gjmby") != (PREFIX::plus)((PREFIX).compareTo("yktbf").minus(-4664072518003994119))) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(-1680221669, 2009931715).commonSuffixWith("puamo", false)
}


2021-03-12 03:56:56,175 [main:53] - replacing (String::plus, KFunction2<String, [@kotlin.ParameterName] Any?, String>)
2021-03-12 03:56:56,175 [main:50] - replacing String::plus KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:56:56,175 [main:54] - Getting value of type KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:56:56,261 [main:302] - generating value of type = KFunction2<String, [@kotlin.ParameterName] Any?, String> false depth = 0
2021-03-12 03:56:56,366 [main:58] - GENERATED VALUE OF TYPE KFunction2<String, [@kotlin.ParameterName] Any?, String> = 
2021-03-12 03:56:56,460 [main:67] - randomType = Int?
2021-03-12 03:56:56,543 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:56,576 [main:58] - Cant find and generate replacement for String::plus type KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:56:56,577 [main:53] - replacing (PREFIX, String)
2021-03-12 03:56:56,578 [main:50] - replacing PREFIX String
2021-03-12 03:56:56,578 [main:54] - Getting value of type String
2021-03-12 03:56:56,660 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:56,660 [main:58] - GENERATED VALUE OF TYPE String = "ufhad"
2021-03-12 03:56:56,661 [main:61] - GENERATED IS CALL =false
2021-03-12 03:56:56,747 [main:67] - randomType = Short
2021-03-12 03:56:56,830 [main:302] - generating value of type = Short true depth = 0
2021-03-12 03:56:56,861 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@37e7285e]
2021-03-12 03:56:56,944 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:56:56,945 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@196815c]
2021-03-12 03:56:57,026 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:57,027 [main:78] - Generated call from random type = (-13559).compareTo(-14).toString(1806439676)
2021-03-12 03:56:57,027 [main:106] - GETTING String from String
2021-03-12 03:56:57,045 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57446851]]
2021-03-12 03:56:57,045 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57446851]
2021-03-12 03:56:57,127 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:57,210 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:56:57,211 [main:117] - GENERATED CALL = (MAX_LONG).padStart(372301834, 'ç')
2021-03-12 03:56:57,211 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@376a7dc9]]
2021-03-12 03:56:57,211 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@376a7dc9]
2021-03-12 03:56:57,293 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:56:57,403 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 03:56:57,404 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 03:56:57,593 [main:302] - generating value of type = Int true depth = 3
2021-03-12 03:56:57,593 [main:95] - GENERATED = StringBuilder(-668387930)
2021-03-12 03:56:57,594 [main:117] - GENERATED CALL = (MAX_LONG).removeSuffix(StringBuilder(-668387930))
2021-03-12 03:56:57,594 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c8382fd]]
2021-03-12 03:56:57,594 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:56:57,676 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:57,758 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:57,759 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c8382fd]
2021-03-12 03:56:57,841 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:57,924 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:57,925 [main:117] - GENERATED CALL = (MAX_LONG).subSequence(-520581703, -1875670290).substring(1751138549, 701520989)
2021-03-12 03:56:57,925 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e57d13c]]
2021-03-12 03:56:57,925 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e57d13c]
2021-03-12 03:56:57,925 [main:117] - GENERATED CALL = (MAX_LONG).toUpperCase()
2021-03-12 03:56:57,925 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e3da54]]
2021-03-12 03:56:57,925 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e3da54]
2021-03-12 03:56:58,007 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:56:58,007 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:56:58,008 [main:117] - GENERATED CALL = (MAX_LONG).dropWhile({a: Char -> true})
2021-03-12 03:56:58,008 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f24aea4]]
2021-03-12 03:56:58,008 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f24aea4]
2021-03-12 03:56:58,008 [main:117] - GENERATED CALL = (MAX_LONG).trimIndent()
2021-03-12 03:56:58,009 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ab64eb1]]
2021-03-12 03:56:58,009 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ab64eb1]
2021-03-12 03:56:58,091 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:56:58,094 [main:117] - GENERATED CALL = (MAX_LONG).removePrefix("ltvjv")
2021-03-12 03:56:58,095 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bdbc0f5]]
2021-03-12 03:56:58,095 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 03:56:58,177 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:58,178 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bdbc0f5]
2021-03-12 03:56:58,178 [main:117] - GENERATED CALL = (MAX_LONG).get(-2104687999).lowercase()
2021-03-12 03:56:58,178 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f1f24e3]]
2021-03-12 03:56:58,178 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f1f24e3]
2021-03-12 03:56:58,283 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:58,284 [main:117] - GENERATED CALL = (MAX_LONG).replaceIndent("avysc")
2021-03-12 03:56:58,284 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7564ea7e]]
2021-03-12 03:56:58,284 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7564ea7e]
2021-03-12 03:56:58,285 [main:117] - GENERATED CALL = (MAX_LONG).uppercase()
2021-03-12 03:56:58,285 [main:61] - replacement of PREFIX of type String is (MAX_LONG).removeSuffix(StringBuilder(-668387930))
2021-03-12 03:56:58,376 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:56:58,377 [main:66] - Compilation checking started
2021-03-12 03:56:58,706 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if ((MAX_LONG).subSequence(212258873, -1503296514).endsWith('ï«®', false)) return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-1962626012)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return (MAX_LONG).toUpperCase()
    if ((PREFIX).uppercase() != (String::plus)((PREFIX).replaceAfterLast('â©', PREFIX, "tganu"), Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)((Triple<Boolean, Long, Long>(true, 4028864180187556700, 64982134227661328)).second.and(-4211312169511356492))) return "fail \"\"::plus"

    if ((PREFIX).dropWhile({a: Char -> true}) != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if ((MAX_LONG).removeSurrounding("eqzwf") != "jmxkk") return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get(113781418).isISOControl()) return "fail \"$(MAX_LONG).commonPrefixWith(StringBuilder(), false)\".plus"
    if ((MAX_LONG).removeSuffix(StringBuilder(-668387930)) + (PREFIX).drop(681141366) != (PREFIX).take(150265100)) return "fail String::plus($PREFIX, ...)"
    if ((MAX_LONG).dropWhile({a: Char -> false}) + ("aslwh").prependIndent("gjmby") != (PREFIX::plus)((PREFIX).compareTo("yktbf").minus(-4664072518003994119))) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(-1680221669, 2009931715).commonSuffixWith("puamo", false)
}


2021-03-12 03:56:58,706 [main:53] - replacing (PREFIX, String)
2021-03-12 03:56:58,706 [main:50] - replacing PREFIX String
2021-03-12 03:56:58,706 [main:54] - Getting value of type String
2021-03-12 03:56:58,791 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:58,792 [main:58] - GENERATED VALUE OF TYPE String = "fjmrp"
2021-03-12 03:56:58,792 [main:61] - GENERATED IS CALL =false
2021-03-12 03:56:58,972 [main:67] - randomType = LinkedHashMap<Boolean, Short>
2021-03-12 03:56:59,057 [main:302] - generating value of type = LinkedHashMap<Boolean, Short> false depth = 0
2021-03-12 03:56:59,146 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Boolean, Short>): LkedHashMap<Boolean, Short> = TODO()
2021-03-12 03:56:59,147 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Boolean, Short>): LkedHashMap<Boolean, Short> = TODO()
2021-03-12 03:56:59,236 [main:302] - generating value of type = Pair<Boolean, Short> false depth = 3
2021-03-12 03:56:59,328 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Boolean, second: Short): Pair<Boolean, Short> = TODO()
2021-03-12 03:56:59,329 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Boolean, second: Short): Pair<Boolean, Short> = TODO()
2021-03-12 03:56:59,415 [main:302] - generating value of type = Boolean true depth = 6
2021-03-12 03:56:59,416 [main:302] - generating value of type = Short true depth = 6
2021-03-12 03:56:59,416 [main:95] - GENERATED = Pair<Boolean, Short>(true, 31324)
2021-03-12 03:56:59,416 [main:95] - GENERATED = linkedMapOf<Boolean, Short>(Pair<Boolean, Short>(true, 31324))
2021-03-12 03:56:59,567 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@196815c]
2021-03-12 03:56:59,650 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:56:59,651 [main:78] - Generated call from random type = (linkedMapOf<Boolean, Short>(Pair<Boolean, Short>(true, 31324))).size.toString(-210229911)
2021-03-12 03:56:59,651 [main:61] - replacement of PREFIX of type String is "fjmrp"
2021-03-12 03:56:59,733 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 03:56:59,734 [main:53] - replacing ("fail \"\".plus", String)
2021-03-12 03:56:59,734 [main:50] - replacing "fail \"\".plus" String
2021-03-12 03:56:59,734 [main:54] - Getting value of type String
2021-03-12 03:56:59,816 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:56:59,816 [main:58] - GENERATED VALUE OF TYPE String = "narbt"
2021-03-12 03:56:59,816 [main:61] - GENERATED IS CALL =false
2021-03-12 03:57:00,356 [main:67] - randomType = LinkedHashSet<Function1<HashSet<Int?>?, Long?>>
2021-03-12 03:57:00,445 [main:302] - generating value of type = LinkedHashSet<Function1<HashSet<Int?>?, Long?>> false depth = 0
2021-03-12 03:57:00,575 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): LinkedHashSet<Function1<HashSet<Int?>?, Long?>> = TODO()
2021-03-12 03:57:00,577 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): LinkedHashSet<Function1<HashSet<Int?>?, Long?>> = TODO()
2021-03-12 03:57:00,851 [main:302] - generating value of type = Int true depth = 3
2021-03-12 03:57:00,852 [main:302] - generating value of type = Float true depth = 3
2021-03-12 03:57:00,852 [main:95] - GENERATED = LinkedHashSet<Function1<HashSet<Int?>?, Long?>>(-658554125, 0.21276617f)
2021-03-12 03:57:01,056 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@5c1d7f86]
2021-03-12 03:57:01,057 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4b22c9cb]
2021-03-12 03:57:01,057 [main:78] - Generated call from random type = (LinkedHashSet<Function1<HashSet<Int?>?, Long?>>(-658554125, 0.21276617f)).toArray().contentDeepToString()
2021-03-12 03:57:01,057 [main:61] - replacement of "fail \"\".plus" of type String is "narbt"
2021-03-12 03:57:01,140 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 03:57:01,142 [main:53] - replacing (MAX_LONG != (""::plus)((Triple<Boolean, Long, Long>(true, 4028864180187556700, 64982134227661328)).second.and(-4211312169511356492)), Boolean)
2021-03-12 03:57:01,142 [main:50] - replacing MAX_LONG != (""::plus)((Triple<Boolean, Long, Long>(true, 4028864180187556700, 64982134227661328)).second.and(-4211312169511356492)) Boolean
2021-03-12 03:57:01,142 [main:54] - Getting value of type Boolean
2021-03-12 03:57:01,224 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:57:01,225 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 03:57:01,225 [main:61] - GENERATED IS CALL =false
2021-03-12 03:57:01,488 [main:67] - randomType = List<UByte?>
2021-03-12 03:57:01,489 [main:106] - GETTING Boolean from String
2021-03-12 03:57:01,509 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14d3cac5]]
2021-03-12 03:57:01,509 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 03:57:01,591 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:01,592 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14d3cac5]
2021-03-12 03:57:01,592 [main:117] - GENERATED CALL = (MAX_LONG).get(532281181).isUpperCase()
2021-03-12 03:57:01,592 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10740bc0]]
2021-03-12 03:57:01,592 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:57:01,696 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:01,779 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:01,780 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10740bc0]
2021-03-12 03:57:01,863 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:01,864 [main:117] - GENERATED CALL = (MAX_LONG).subSequence(866539853, 242990262).hasSurrogatePairAt(-1946200017)
2021-03-12 03:57:01,864 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e60c93f]]
2021-03-12 03:57:01,864 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:57:01,946 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:02,029 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:02,029 [main:149] - GENERATING call of type public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e60c93f]
2021-03-12 03:57:02,112 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:57:02,195 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:57:02,196 [main:117] - GENERATED CALL = (MAX_LONG).subSequence(-1412132813, 617437628).endsWith('í', true)
2021-03-12 03:57:02,196 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@691c0bdf]]
2021-03-12 03:57:02,196 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:57:02,278 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:02,361 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:02,362 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@691c0bdf]
2021-03-12 03:57:02,362 [main:117] - GENERATED CALL = (MAX_LONG).subSequence(-2004365864, 159863294).isNotEmpty()
2021-03-12 03:57:02,362 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6426b954]]
2021-03-12 03:57:02,363 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 03:57:02,450 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:02,450 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6426b954]
2021-03-12 03:57:02,451 [main:117] - GENERATED CALL = (MAX_LONG).get(-1896895255).isLetter()
2021-03-12 03:57:02,451 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d9803b4], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a1160cb]]
2021-03-12 03:57:02,451 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d9803b4]
2021-03-12 03:57:02,534 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:57:02,534 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2a1160cb]
2021-03-12 03:57:02,616 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:57:02,617 [main:117] - GENERATED CALL = (MAX_LONG).equals("tzyfv").xor(true)
2021-03-12 03:57:02,617 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2e465cf2], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@15ee1971]]
2021-03-12 03:57:02,617 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@15ee1971]
2021-03-12 03:57:02,740 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:57:02,740 [main:117] - GENERATED CALL = (MAX_LONG).length.equals("dhkfy")
2021-03-12 03:57:02,741 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d9803b4], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@62532a51]]
2021-03-12 03:57:02,741 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d9803b4]
2021-03-12 03:57:02,834 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:57:02,834 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@62532a51]
2021-03-12 03:57:02,995 [main:117] - GENERATED CALL = (MAX_LONG).equals("ttbcw").not()
2021-03-12 03:57:02,995 [main:113] - Case = [public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cec3466]]
2021-03-12 03:57:02,995 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cec3466]
2021-03-12 03:57:03,081 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:57:03,166 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:57:03,167 [main:117] - GENERATED CALL = (MAX_LONG).contains('á®¶', true)
2021-03-12 03:57:03,167 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ce54cb3]]
2021-03-12 03:57:03,167 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 03:57:03,252 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:03,252 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ce54cb3]
2021-03-12 03:57:03,253 [main:117] - GENERATED CALL = (MAX_LONG).get(-669699058).isLetterOrDigit()
2021-03-12 03:57:03,253 [main:61] - replacement of MAX_LONG != (""::plus)((Triple<Boolean, Long, Long>(true, 4028864180187556700, 64982134227661328)).second.and(-4211312169511356492)) of type Boolean is (MAX_LONG).equals("tzyfv").xor(true)
2021-03-12 03:57:03,336 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:57:03,337 [main:66] - Compilation checking started
2021-03-12 03:57:03,652 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if ((MAX_LONG).subSequence(212258873, -1503296514).endsWith('ï«®', false)) return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-1962626012)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return (MAX_LONG).toUpperCase()
    if ((PREFIX).uppercase() != (String::plus)((PREFIX).replaceAfterLast('â©', PREFIX, "tganu"), Long.MAX_VALUE)) return "fail String::plus"
    if ((MAX_LONG).equals("tzyfv").xor(true)) return "fail \"\"::plus"

    if ((PREFIX).dropWhile({a: Char -> true}) != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if ((MAX_LONG).removeSurrounding("eqzwf") != "jmxkk") return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get(113781418).isISOControl()) return "fail \"$(MAX_LONG).commonPrefixWith(StringBuilder(), false)\".plus"
    if ((MAX_LONG).removeSuffix(StringBuilder(-668387930)) + (PREFIX).drop(681141366) != (PREFIX).take(150265100)) return "fail String::plus($PREFIX, ...)"
    if ((MAX_LONG).dropWhile({a: Char -> false}) + ("aslwh").prependIndent("gjmby") != (PREFIX::plus)((PREFIX).compareTo("yktbf").minus(-4664072518003994119))) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(-1680221669, 2009931715).commonSuffixWith("puamo", false)
}


2021-03-12 03:57:03,652 [main:53] - replacing ("swuod" + MAX_LONG, String)
2021-03-12 03:57:03,653 [main:50] - replacing "swuod" + MAX_LONG String
2021-03-12 03:57:03,653 [main:54] - Getting value of type String
2021-03-12 03:57:03,747 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:57:03,748 [main:58] - GENERATED VALUE OF TYPE String = "qddgr"
2021-03-12 03:57:03,748 [main:61] - GENERATED IS CALL =false
2021-03-12 03:57:03,833 [main:67] - randomType = Float
2021-03-12 03:57:03,914 [main:302] - generating value of type = Float true depth = 0
2021-03-12 03:57:03,944 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@37b55045]
2021-03-12 03:57:03,945 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23c4b3bf]
2021-03-12 03:57:03,945 [main:78] - Generated call from random type = (0.59366274f).toChar().uppercase()
2021-03-12 03:57:03,945 [main:61] - replacement of "swuod" + MAX_LONG of type String is (0.59366274f).toChar().uppercase()
2021-03-12 03:57:04,025 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:57:04,026 [main:53] - replacing (PREFIX::plus, KFunction1<[@kotlin.ParameterName] Any?, String>)
2021-03-12 03:57:04,027 [main:50] - replacing PREFIX::plus KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:04,027 [main:54] - Getting value of type KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:04,126 [main:302] - generating value of type = KFunction1<[@kotlin.ParameterName] Any?, String> false depth = 0
2021-03-12 03:57:04,207 [main:58] - GENERATED VALUE OF TYPE KFunction1<[@kotlin.ParameterName] Any?, String> = 
2021-03-12 03:57:04,292 [main:67] - randomType = ULong
2021-03-12 03:57:04,373 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 03:57:04,407 [main:106] - GETTING KFunction1<[@kotlin.ParameterName] Any?, String> from String
2021-03-12 03:57:04,427 [main:106] - GETTING KFunction1<[@kotlin.ParameterName] Any?, String> from String
2021-03-12 03:57:04,427 [main:58] - Cant find and generate replacement for PREFIX::plus type KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:04,427 [main:53] - replacing (MAX_LONG, String)
2021-03-12 03:57:04,427 [main:50] - replacing MAX_LONG String
2021-03-12 03:57:04,427 [main:54] - Getting value of type String
2021-03-12 03:57:04,507 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:57:04,508 [main:58] - GENERATED VALUE OF TYPE String = "ldmsl"
2021-03-12 03:57:04,508 [main:61] - GENERATED IS CALL =false
2021-03-12 03:57:04,860 [main:67] - randomType = Map<ArrayList<Long>, Short>
2021-03-12 03:57:04,861 [main:61] - replacement of MAX_LONG of type String is "ldmsl"
2021-03-12 03:57:04,943 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 03:57:04,944 [main:53] - replacing ("fail String::plus", String)
2021-03-12 03:57:04,945 [main:50] - replacing "fail String::plus" String
2021-03-12 03:57:04,945 [main:54] - Getting value of type String
2021-03-12 03:57:05,027 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:57:05,028 [main:58] - GENERATED VALUE OF TYPE String = "uioge"
2021-03-12 03:57:05,028 [main:61] - GENERATED IS CALL =false
2021-03-12 03:57:05,226 [main:67] - randomType = ULong?
2021-03-12 03:57:05,326 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 03:57:05,369 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUInt(): kotlin.UInt defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@ab8e35a]
2021-03-12 03:57:05,370 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79436a50]
2021-03-12 03:57:05,450 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:05,451 [main:78] - Generated call from random type = (8211354071646306278.toULong())?.toUInt().toString(1065812989)
2021-03-12 03:57:05,451 [main:106] - GETTING String from String
2021-03-12 03:57:05,469 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fdc3b45]]
2021-03-12 03:57:05,469 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fdc3b45]
2021-03-12 03:57:05,549 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:05,550 [main:117] - GENERATED CALL = (PREFIX).dropLast(-1845919053)
2021-03-12 03:57:05,550 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a284f16]]
2021-03-12 03:57:05,550 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:57:05,632 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:05,712 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:05,713 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a284f16]
2021-03-12 03:57:05,793 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:05,794 [main:117] - GENERATED CALL = (PREFIX).subSequence(514495728, -330552962).repeat(-436996011)
2021-03-12 03:57:05,794 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45311397]]
2021-03-12 03:57:05,794 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45311397]
2021-03-12 03:57:05,874 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 03:57:05,875 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:57:05,876 [main:117] - GENERATED CALL = (PREFIX).filterIndexed({a: Int, b: Char -> false})
2021-03-12 03:57:05,876 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d989160]]
2021-03-12 03:57:05,876 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d989160]
2021-03-12 03:57:05,956 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:05,957 [main:117] - GENERATED CALL = (PREFIX).substring(32361367)
2021-03-12 03:57:05,957 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@376a7dc9]]
2021-03-12 03:57:05,957 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@376a7dc9]
2021-03-12 03:57:06,038 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:57:06,121 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:57:06,123 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:57:06,332 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 03:57:06,336 [main:95] - GENERATED = StringBuilder("twrmo")
2021-03-12 03:57:06,336 [main:117] - GENERATED CALL = (PREFIX).removeSuffix(StringBuilder("twrmo"))
2021-03-12 03:57:06,336 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494d96f0]]
2021-03-12 03:57:06,336 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:57:06,429 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:06,514 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:06,515 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494d96f0]
2021-03-12 03:57:06,596 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:57:06,680 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:57:06,680 [main:117] - GENERATED CALL = (PREFIX).subSequence(-929963071, -1176472202).commonSuffixWith("uazpt", false)
2021-03-12 03:57:06,681 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72825613]]
2021-03-12 03:57:06,681 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72825613]
2021-03-12 03:57:06,762 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:06,763 [main:117] - GENERATED CALL = (PREFIX).take(1480461537)
2021-03-12 03:57:06,763 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e3da54]]
2021-03-12 03:57:06,763 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e3da54]
2021-03-12 03:57:06,847 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:57:06,847 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:57:06,848 [main:117] - GENERATED CALL = (PREFIX).dropWhile({a: Char -> true})
2021-03-12 03:57:06,848 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ecfbefc]]
2021-03-12 03:57:06,848 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ecfbefc]
2021-03-12 03:57:06,849 [main:117] - GENERATED CALL = (PREFIX).concat(PREFIX)
2021-03-12 03:57:06,849 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fd784aa]]
2021-03-12 03:57:06,849 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fd784aa]
2021-03-12 03:57:06,932 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:57:07,014 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:57:07,015 [main:117] - GENERATED CALL = (PREFIX).replaceBeforeLast('â±°', "qpagk", MAX_LONG)
2021-03-12 03:57:07,015 [main:61] - replacement of "fail String::plus" of type String is PREFIX
2021-03-12 03:57:07,098 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(REFERENCE_EXPRESSION)
2021-03-12 03:57:07,098 [main:66] - Compilation checking started
2021-03-12 03:57:07,458 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if ((MAX_LONG).subSequence(212258873, -1503296514).endsWith('ï«®', false)) return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-1962626012)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return (MAX_LONG).toUpperCase()
    if ((PREFIX).uppercase() != (String::plus)((PREFIX).replaceAfterLast('â©', PREFIX, "tganu"), Long.MAX_VALUE)) return PREFIX
    if ((MAX_LONG).equals("tzyfv").xor(true)) return "fail \"\"::plus"

    if ((PREFIX).dropWhile({a: Char -> true}) != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if ((MAX_LONG).removeSurrounding("eqzwf") != "jmxkk") return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get(113781418).isISOControl()) return "fail \"$(MAX_LONG).commonPrefixWith(StringBuilder(), false)\".plus"
    if ((MAX_LONG).removeSuffix(StringBuilder(-668387930)) + (PREFIX).drop(681141366) != (PREFIX).take(150265100)) return "fail String::plus($PREFIX, ...)"
    if ((MAX_LONG).dropWhile({a: Char -> false}) + ("aslwh").prependIndent("gjmby") != (PREFIX::plus)((PREFIX).compareTo("yktbf").minus(-4664072518003994119))) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(-1680221669, 2009931715).commonSuffixWith("puamo", false)
}


2021-03-12 03:57:07,459 [main:53] - replacing (PREFIX, String)
2021-03-12 03:57:07,460 [main:50] - replacing PREFIX String
2021-03-12 03:57:07,460 [main:54] - Getting value of type String
2021-03-12 03:57:07,541 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:57:07,541 [main:58] - GENERATED VALUE OF TYPE String = "iywgc"
2021-03-12 03:57:07,541 [main:61] - GENERATED IS CALL =false
2021-03-12 03:57:07,626 [main:67] - randomType = Byte
2021-03-12 03:57:07,706 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:57:07,737 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dc8d80d]
2021-03-12 03:57:07,817 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:07,817 [main:78] - Generated call from random type = (-123).toString(172493356)
2021-03-12 03:57:07,817 [main:106] - GETTING String from String
2021-03-12 03:57:07,835 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23c4b3bf]]
2021-03-12 03:57:07,835 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 03:57:07,917 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:07,917 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23c4b3bf]
2021-03-12 03:57:07,918 [main:117] - GENERATED CALL = (PREFIX).get(-863063927).uppercase()
2021-03-12 03:57:07,918 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b2c8153]]
2021-03-12 03:57:07,918 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:57:07,998 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:08,079 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:08,080 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b2c8153]
2021-03-12 03:57:08,162 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:57:08,247 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:57:08,247 [main:117] - GENERATED CALL = (PREFIX).subSequence(-1029684870, 2047432074).commonPrefixWith(StringBuilder(), true)
2021-03-12 03:57:08,247 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33fb03c1]]
2021-03-12 03:57:08,247 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33fb03c1]
2021-03-12 03:57:08,328 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:08,409 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:08,410 [main:117] - GENERATED CALL = (PREFIX).removeRange(641083664, -1135408473)
2021-03-12 03:57:08,410 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dcba3be]]
2021-03-12 03:57:08,410 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dcba3be]
2021-03-12 03:57:08,410 [main:117] - GENERATED CALL = (PREFIX).replaceIndentByMargin(PREFIX, PREFIX)
2021-03-12 03:57:08,410 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4533f399]]
2021-03-12 03:57:08,410 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4533f399]
2021-03-12 03:57:08,522 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:57:08,523 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:57:08,524 [main:117] - GENERATED CALL = (PREFIX).takeWhile({a: Char -> false})
2021-03-12 03:57:08,524 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55878bcb]]
2021-03-12 03:57:08,524 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55878bcb]
2021-03-12 03:57:08,619 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:57:08,623 [main:117] - GENERATED CALL = (PREFIX).removeSurrounding("dwvoq")
2021-03-12 03:57:08,624 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dcde0a]]
2021-03-12 03:57:08,624 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dcde0a]
2021-03-12 03:57:08,706 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:57:08,707 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:57:08,707 [main:117] - GENERATED CALL = (PREFIX).filterNot({a: Char -> true})
2021-03-12 03:57:08,708 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@307cea0a]]
2021-03-12 03:57:08,708 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@307cea0a]
2021-03-12 03:57:08,787 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:57:08,787 [main:117] - GENERATED CALL = (PREFIX).plus("fcpjt")
2021-03-12 03:57:08,788 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6358fd25]]
2021-03-12 03:57:08,788 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6358fd25]
2021-03-12 03:57:08,867 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:57:08,950 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:57:09,041 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:57:09,042 [main:117] - GENERATED CALL = (PREFIX).replace('Ó', 'î¦¼', false)
2021-03-12 03:57:09,042 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63dad168]]
2021-03-12 03:57:09,042 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63dad168]
2021-03-12 03:57:09,123 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:09,204 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:09,285 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:57:09,289 [main:117] - GENERATED CALL = (PREFIX).replaceRange(1626597096, -791284276, "xhshs")
2021-03-12 03:57:09,289 [main:61] - replacement of PREFIX of type String is PREFIX
2021-03-12 03:57:09,370 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 03:57:09,370 [main:53] - replacing (PREFIX, String)
2021-03-12 03:57:09,370 [main:50] - replacing PREFIX String
2021-03-12 03:57:09,370 [main:54] - Getting value of type String
2021-03-12 03:57:09,475 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:57:09,476 [main:58] - GENERATED VALUE OF TYPE String = "qwrsj"
2021-03-12 03:57:09,477 [main:61] - GENERATED IS CALL =false
2021-03-12 03:57:09,678 [main:67] - randomType = Double?
2021-03-12 03:57:09,764 [main:302] - generating value of type = Double true depth = 0
2021-03-12 03:57:09,795 [main:149] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6aa65574]
2021-03-12 03:57:09,795 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dc8d80d]
2021-03-12 03:57:09,877 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:09,878 [main:78] - Generated call from random type = (0.8073601487858334)?.toByte().toString(1001905505)
2021-03-12 03:57:09,878 [main:61] - replacement of PREFIX of type String is (0.8073601487858334)?.toByte().toString(1001905505)
2021-03-12 03:57:09,980 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:57:09,981 [main:53] - replacing (PREFIX, String)
2021-03-12 03:57:09,981 [main:50] - replacing PREFIX String
2021-03-12 03:57:09,981 [main:54] - Getting value of type String
2021-03-12 03:57:10,062 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:57:10,062 [main:58] - GENERATED VALUE OF TYPE String = "dyzrt"
2021-03-12 03:57:10,063 [main:61] - GENERATED IS CALL =false
2021-03-12 03:57:10,064 [main:67] - randomType = Char
2021-03-12 03:57:10,144 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:57:10,166 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24f3d945]
2021-03-12 03:57:10,167 [main:78] - Generated call from random type = ('î­').titlecase()
2021-03-12 03:57:10,167 [main:61] - replacement of PREFIX of type String is ('î­').titlecase()
2021-03-12 03:57:10,247 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:57:10,248 [main:53] - replacing (PREFIX, String)
2021-03-12 03:57:10,248 [main:50] - replacing PREFIX String
2021-03-12 03:57:10,248 [main:54] - Getting value of type String
2021-03-12 03:57:10,328 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:57:10,328 [main:58] - GENERATED VALUE OF TYPE String = "qmjct"
2021-03-12 03:57:10,328 [main:61] - GENERATED IS CALL =false
2021-03-12 03:57:11,157 [main:67] - randomType = Function1<Triple<UInt?, Byte, UInt?>?, Float>
2021-03-12 03:57:11,157 [main:61] - replacement of PREFIX of type String is "qmjct"
2021-03-12 03:57:11,236 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 03:57:11,237 [main:53] - replacing (PREFIX, String)
2021-03-12 03:57:11,238 [main:50] - replacing PREFIX String
2021-03-12 03:57:11,238 [main:54] - Getting value of type String
2021-03-12 03:57:11,322 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:57:11,323 [main:58] - GENERATED VALUE OF TYPE String = "phgpv"
2021-03-12 03:57:11,323 [main:61] - GENERATED IS CALL =false
2021-03-12 03:57:11,326 [main:67] - randomType = Int
2021-03-12 03:57:11,410 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:11,441 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@750a6ac3]
2021-03-12 03:57:11,442 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24f3d945]
2021-03-12 03:57:11,442 [main:78] - Generated call from random type = (-365414426).toChar().titlecase()
2021-03-12 03:57:11,442 [main:106] - GETTING String from String
2021-03-12 03:57:11,458 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a284f16]]
2021-03-12 03:57:11,458 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a284f16]
2021-03-12 03:57:11,560 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:11,561 [main:117] - GENERATED CALL = (PREFIX).repeat(-746054177)
2021-03-12 03:57:11,562 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@548f039b]]
2021-03-12 03:57:11,562 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@548f039b]
2021-03-12 03:57:11,562 [main:117] - GENERATED CALL = (PREFIX).decapitalize()
2021-03-12 03:57:11,562 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e3da54]]
2021-03-12 03:57:11,562 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e3da54]
2021-03-12 03:57:11,656 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:57:11,657 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:57:11,657 [main:117] - GENERATED CALL = (PREFIX).dropWhile({a: Char -> false})
2021-03-12 03:57:11,657 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494d96f0]]
2021-03-12 03:57:11,658 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:57:11,740 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:11,821 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:11,821 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494d96f0]
2021-03-12 03:57:11,901 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:57:11,984 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:57:11,985 [main:117] - GENERATED CALL = (PREFIX).subSequence(38375789, 1641065946).commonSuffixWith("lcqxb", false)
2021-03-12 03:57:11,985 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4533f399]]
2021-03-12 03:57:11,985 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4533f399]
2021-03-12 03:57:12,065 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:57:12,066 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:57:12,067 [main:117] - GENERATED CALL = (PREFIX).takeWhile({a: Char -> false})
2021-03-12 03:57:12,067 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10a44833]]
2021-03-12 03:57:12,067 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10a44833]
2021-03-12 03:57:12,146 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:57:12,147 [main:117] - GENERATED CALL = (PREFIX).substringAfterLast('áª', PREFIX)
2021-03-12 03:57:12,147 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@492795f3]]
2021-03-12 03:57:12,147 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@492795f3]
2021-03-12 03:57:12,227 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:12,228 [main:117] - GENERATED CALL = (PREFIX).takeLast(-1771802422)
2021-03-12 03:57:12,228 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b2c8153]]
2021-03-12 03:57:12,228 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b2c8153]
2021-03-12 03:57:12,307 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:57:12,414 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:57:12,416 [main:117] - GENERATED CALL = (PREFIX).commonPrefixWith("qjisi", false)
2021-03-12 03:57:12,416 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23c4b3bf]]
2021-03-12 03:57:12,416 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 03:57:12,508 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:12,509 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23c4b3bf]
2021-03-12 03:57:12,510 [main:117] - GENERATED CALL = (PREFIX).get(-51486520).uppercase()
2021-03-12 03:57:12,510 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77dbd350]]
2021-03-12 03:57:12,510 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77dbd350]
2021-03-12 03:57:12,510 [main:117] - GENERATED CALL = (PREFIX).prependIndent(MAX_LONG)
2021-03-12 03:57:12,510 [main:61] - replacement of PREFIX of type String is (-365414426).toChar().titlecase()
2021-03-12 03:57:12,599 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:57:12,600 [main:66] - Compilation checking started
2021-03-12 03:57:12,911 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if ((MAX_LONG).subSequence(212258873, -1503296514).endsWith('ï«®', false)) return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-1962626012)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return (MAX_LONG).toUpperCase()
    if ((PREFIX).uppercase() != (String::plus)((PREFIX).replaceAfterLast('â©', PREFIX, "tganu"), Long.MAX_VALUE)) return PREFIX
    if ((MAX_LONG).equals("tzyfv").xor(true)) return "fail \"\"::plus"

    if ((PREFIX).dropWhile({a: Char -> true}) != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if ((MAX_LONG).removeSurrounding("eqzwf") != "jmxkk") return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get(113781418).isISOControl()) return "fail \"$(MAX_LONG).commonPrefixWith(StringBuilder(), false)\".plus"
    if ((MAX_LONG).removeSuffix(StringBuilder(-668387930)) + (PREFIX).drop(681141366) != (PREFIX).take(150265100)) return "fail String::plus($PREFIX, ...)"
    if ((MAX_LONG).dropWhile({a: Char -> false}) + ("aslwh").prependIndent("gjmby") != ((-365414426).toChar().titlecase()::plus)((PREFIX).compareTo("yktbf").minus(-4664072518003994119))) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(-1680221669, 2009931715).commonSuffixWith("puamo", false)
}


2021-03-12 03:57:12,998 [main:119] - TRYING TO REPLACE CONSTANT 150265100
2021-03-12 03:57:13,079 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 03:57:13,080 [main:66] - Compilation checking started
2021-03-12 03:57:13,375 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if ((MAX_LONG).subSequence(212258873, -1503296514).endsWith('ï«®', false)) return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-1962626012)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return (MAX_LONG).toUpperCase()
    if ((PREFIX).uppercase() != (String::plus)((PREFIX).replaceAfterLast('â©', PREFIX, "tganu"), Long.MAX_VALUE)) return PREFIX
    if ((MAX_LONG).equals("tzyfv").xor(true)) return "fail \"\"::plus"

    if ((PREFIX).dropWhile({a: Char -> true}) != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if ((MAX_LONG).removeSurrounding("eqzwf") != "jmxkk") return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get(113781418).isISOControl()) return "fail \"$(MAX_LONG).commonPrefixWith(StringBuilder(), false)\".plus"
    if ((MAX_LONG).removeSuffix(StringBuilder(-668387930)) + (PREFIX).drop(681141366) != (PREFIX).take(1962626012)) return "fail String::plus($PREFIX, ...)"
    if ((MAX_LONG).dropWhile({a: Char -> false}) + ("aslwh").prependIndent("gjmby") != ((-365414426).toChar().titlecase()::plus)((PREFIX).compareTo("yktbf").minus(-4664072518003994119))) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(-1680221669, 2009931715).commonSuffixWith("puamo", false)
}


2021-03-12 03:57:13,375 [main:119] - TRYING TO REPLACE CONSTANT 113781418
2021-03-12 03:57:13,473 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:57:13,473 [main:66] - Compilation checking started
2021-03-12 03:57:13,765 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if ((MAX_LONG).subSequence(212258873, -1503296514).endsWith('ï«®', false)) return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-1962626012)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return (MAX_LONG).toUpperCase()
    if ((PREFIX).uppercase() != (String::plus)((PREFIX).replaceAfterLast('â©', PREFIX, "tganu"), Long.MAX_VALUE)) return PREFIX
    if ((MAX_LONG).equals("tzyfv").xor(true)) return "fail \"\"::plus"

    if ((PREFIX).dropWhile({a: Char -> true}) != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if ((MAX_LONG).removeSurrounding("eqzwf") != "jmxkk") return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get((PREFIX).compareTo("yktbf")).isISOControl()) return "fail \"$(MAX_LONG).commonPrefixWith(StringBuilder(), false)\".plus"
    if ((MAX_LONG).removeSuffix(StringBuilder(-668387930)) + (PREFIX).drop(681141366) != (PREFIX).take(1962626012)) return "fail String::plus($PREFIX, ...)"
    if ((MAX_LONG).dropWhile({a: Char -> false}) + ("aslwh").prependIndent("gjmby") != ((-365414426).toChar().titlecase()::plus)((PREFIX).compareTo("yktbf").minus(-4664072518003994119))) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(-1680221669, 2009931715).commonSuffixWith("puamo", false)
}


2021-03-12 03:57:13,765 [main:119] - TRYING TO REPLACE CONSTANT 1962626012
2021-03-12 03:57:13,868 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 03:57:13,868 [main:66] - Compilation checking started
2021-03-12 03:57:14,146 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if ((MAX_LONG).subSequence(212258873, -1503296514).endsWith('ï«®', false)) return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-365414426)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return (MAX_LONG).toUpperCase()
    if ((PREFIX).uppercase() != (String::plus)((PREFIX).replaceAfterLast('â©', PREFIX, "tganu"), Long.MAX_VALUE)) return PREFIX
    if ((MAX_LONG).equals("tzyfv").xor(true)) return "fail \"\"::plus"

    if ((PREFIX).dropWhile({a: Char -> true}) != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if ((MAX_LONG).removeSurrounding("eqzwf") != "jmxkk") return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get((PREFIX).compareTo("yktbf")).isISOControl()) return "fail \"$(MAX_LONG).commonPrefixWith(StringBuilder(), false)\".plus"
    if ((MAX_LONG).removeSuffix(StringBuilder(-668387930)) + (PREFIX).drop(681141366) != (PREFIX).take(1962626012)) return "fail String::plus($PREFIX, ...)"
    if ((MAX_LONG).dropWhile({a: Char -> false}) + ("aslwh").prependIndent("gjmby") != ((-365414426).toChar().titlecase()::plus)((PREFIX).compareTo("yktbf").minus(-4664072518003994119))) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(-1680221669, 2009931715).commonSuffixWith("puamo", false)
}


2021-03-12 03:57:14,147 [main:119] - TRYING TO REPLACE CONSTANT false
2021-03-12 03:57:14,229 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 03:57:14,230 [main:119] - TRYING TO REPLACE CONSTANT 2009931715
2021-03-12 03:57:14,310 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 03:57:14,310 [main:66] - Compilation checking started
2021-03-12 03:57:14,587 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if ((MAX_LONG).subSequence(212258873, -1503296514).endsWith('ï«®', false)) return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-365414426)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return (MAX_LONG).toUpperCase()
    if ((PREFIX).uppercase() != (String::plus)((PREFIX).replaceAfterLast('â©', PREFIX, "tganu"), Long.MAX_VALUE)) return PREFIX
    if ((MAX_LONG).equals("tzyfv").xor(true)) return "fail \"\"::plus"

    if ((PREFIX).dropWhile({a: Char -> true}) != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if ((MAX_LONG).removeSurrounding("eqzwf") != "jmxkk") return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get((PREFIX).compareTo("yktbf")).isISOControl()) return "fail \"$(MAX_LONG).commonPrefixWith(StringBuilder(), false)\".plus"
    if ((MAX_LONG).removeSuffix(StringBuilder(-668387930)) + (PREFIX).drop(681141366) != (PREFIX).take(1962626012)) return "fail String::plus($PREFIX, ...)"
    if ((MAX_LONG).dropWhile({a: Char -> false}) + ("aslwh").prependIndent("gjmby") != ((-365414426).toChar().titlecase()::plus)((PREFIX).compareTo("yktbf").minus(-4664072518003994119))) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(-1680221669, 1503296514).commonSuffixWith("puamo", false)
}


2021-03-12 03:57:14,587 [main:119] - TRYING TO REPLACE CONSTANT 1680221669
2021-03-12 03:57:14,675 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 03:57:14,675 [main:66] - Compilation checking started
2021-03-12 03:57:14,961 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if ((MAX_LONG).subSequence(212258873, -1503296514).endsWith('ï«®', false)) return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-365414426)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return (MAX_LONG).toUpperCase()
    if ((PREFIX).uppercase() != (String::plus)((PREFIX).replaceAfterLast('â©', PREFIX, "tganu"), Long.MAX_VALUE)) return PREFIX
    if ((MAX_LONG).equals("tzyfv").xor(true)) return "fail \"\"::plus"

    if ((PREFIX).dropWhile({a: Char -> true}) != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if ((MAX_LONG).removeSurrounding("eqzwf") != "jmxkk") return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get((PREFIX).compareTo("yktbf")).isISOControl()) return "fail \"$(MAX_LONG).commonPrefixWith(StringBuilder(), false)\".plus"
    if ((MAX_LONG).removeSuffix(StringBuilder(-668387930)) + (PREFIX).drop(681141366) != (PREFIX).take(1962626012)) return "fail String::plus($PREFIX, ...)"
    if ((MAX_LONG).dropWhile({a: Char -> false}) + ("aslwh").prependIndent("gjmby") != ((-365414426).toChar().titlecase()::plus)((PREFIX).compareTo("yktbf").minus(-4664072518003994119))) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(2009931715, 1503296514).commonSuffixWith("puamo", false)
}


2021-03-12 03:57:14,962 [main:119] - TRYING TO REPLACE CONSTANT 'â©'
2021-03-12 03:57:15,043 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:57:15,043 [main:66] - Compilation checking started
2021-03-12 03:57:15,346 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if ((MAX_LONG).subSequence(212258873, -1503296514).endsWith('ï«®', false)) return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-365414426)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return (MAX_LONG).toUpperCase()
    if ((PREFIX).uppercase() != (String::plus)((PREFIX).replaceAfterLast((MAX_LONG).get((PREFIX).compareTo("yktbf")), PREFIX, "tganu"), Long.MAX_VALUE)) return PREFIX
    if ((MAX_LONG).equals("tzyfv").xor(true)) return "fail \"\"::plus"

    if ((PREFIX).dropWhile({a: Char -> true}) != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if ((MAX_LONG).removeSurrounding("eqzwf") != "jmxkk") return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get((PREFIX).compareTo("yktbf")).isISOControl()) return "fail \"$(MAX_LONG).commonPrefixWith(StringBuilder(), false)\".plus"
    if ((MAX_LONG).removeSuffix(StringBuilder(-668387930)) + (PREFIX).drop(681141366) != (PREFIX).take(1962626012)) return "fail String::plus($PREFIX, ...)"
    if ((MAX_LONG).dropWhile({a: Char -> false}) + ("aslwh").prependIndent("gjmby") != ((-365414426).toChar().titlecase()::plus)((PREFIX).compareTo("yktbf").minus(-4664072518003994119))) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(2009931715, 1503296514).commonSuffixWith("puamo", false)
}


2021-03-12 03:57:15,346 [main:119] - TRYING TO REPLACE CONSTANT 681141366
2021-03-12 03:57:15,428 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 03:57:15,428 [main:66] - Compilation checking started
2021-03-12 03:57:15,704 [main:119] - TRYING TO REPLACE CONSTANT 4664072518003994119
2021-03-12 03:57:15,786 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 03:57:15,786 [main:66] - Compilation checking started
2021-03-12 03:57:16,075 [main:119] - TRYING TO REPLACE CONSTANT false
2021-03-12 03:57:16,165 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 03:57:16,165 [main:66] - Compilation checking started
2021-03-12 03:57:16,442 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if ((MAX_LONG).subSequence(212258873, -1503296514).endsWith('ï«®', false)) return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-365414426)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return (MAX_LONG).toUpperCase()
    if ((PREFIX).uppercase() != (String::plus)((PREFIX).replaceAfterLast((MAX_LONG).get((PREFIX).compareTo("yktbf")), PREFIX, "tganu"), Long.MAX_VALUE)) return PREFIX
    if ((MAX_LONG).equals("tzyfv").xor(true)) return "fail \"\"::plus"

    if ((PREFIX).dropWhile({a: Char -> true}) != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if ((MAX_LONG).removeSurrounding("eqzwf") != "jmxkk") return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get((PREFIX).compareTo("yktbf")).isISOControl()) return "fail \"$(MAX_LONG).commonPrefixWith(StringBuilder(), false)\".plus"
    if ((MAX_LONG).removeSuffix(StringBuilder(-668387930)) + (PREFIX).drop(681141366) != (PREFIX).take(1962626012)) return "fail String::plus($PREFIX, ...)"
    if ((MAX_LONG).dropWhile({a: Char -> true}) + ("aslwh").prependIndent("gjmby") != ((-365414426).toChar().titlecase()::plus)((PREFIX).compareTo("yktbf").minus(-4664072518003994119))) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(2009931715, 1503296514).commonSuffixWith("puamo", false)
}


2021-03-12 03:57:16,442 [main:119] - TRYING TO REPLACE CONSTANT 'ï«®'
2021-03-12 03:57:16,553 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 03:57:16,553 [main:66] - Compilation checking started
2021-03-12 03:57:16,805 [main:49] - Result = false
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if ((MAX_LONG).subSequence(212258873, -1503296514).endsWith(toChar(), false)) return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-365414426)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return (MAX_LONG).toUpperCase()
    if ((PREFIX).uppercase() != (String::plus)((PREFIX).replaceAfterLast((MAX_LONG).get((PREFIX).compareTo("yktbf")), PREFIX, "tganu"), Long.MAX_VALUE)) return PREFIX
    if ((MAX_LONG).equals("tzyfv").xor(true)) return "fail \"\"::plus"

    if ((PREFIX).dropWhile({a: Char -> true}) != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if ((MAX_LONG).removeSurrounding("eqzwf") != "jmxkk") return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get((PREFIX).compareTo("yktbf")).isISOControl()) return "fail \"$(MAX_LONG).commonPrefixWith(StringBuilder(), false)\".plus"
    if ((MAX_LONG).removeSuffix(StringBuilder(-668387930)) + (PREFIX).drop(681141366) != (PREFIX).take(1962626012)) return "fail String::plus($PREFIX, ...)"
    if ((MAX_LONG).dropWhile({a: Char -> true}) + ("aslwh").prependIndent("gjmby") != ((-365414426).toChar().titlecase()::plus)((PREFIX).compareTo("yktbf").minus(-4664072518003994119))) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(2009931715, 1503296514).commonSuffixWith("puamo", false)
}


2021-03-12 03:57:16,806 [main:119] - TRYING TO REPLACE CONSTANT false
2021-03-12 03:57:16,915 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 03:57:16,916 [main:66] - Compilation checking started
2021-03-12 03:57:17,204 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if ((MAX_LONG).subSequence(212258873, -1503296514).endsWith('ï«®', true)) return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-365414426)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return (MAX_LONG).toUpperCase()
    if ((PREFIX).uppercase() != (String::plus)((PREFIX).replaceAfterLast((MAX_LONG).get((PREFIX).compareTo("yktbf")), PREFIX, "tganu"), Long.MAX_VALUE)) return PREFIX
    if ((MAX_LONG).equals("tzyfv").xor(true)) return "fail \"\"::plus"

    if ((PREFIX).dropWhile({a: Char -> true}) != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if ((MAX_LONG).removeSurrounding("eqzwf") != "jmxkk") return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get((PREFIX).compareTo("yktbf")).isISOControl()) return "fail \"$(MAX_LONG).commonPrefixWith(StringBuilder(), false)\".plus"
    if ((MAX_LONG).removeSuffix(StringBuilder(-668387930)) + (PREFIX).drop(681141366) != (PREFIX).take(1962626012)) return "fail String::plus($PREFIX, ...)"
    if ((MAX_LONG).dropWhile({a: Char -> true}) + ("aslwh").prependIndent("gjmby") != ((-365414426).toChar().titlecase()::plus)((PREFIX).compareTo("yktbf").minus(-4664072518003994119))) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(2009931715, 1503296514).commonSuffixWith("puamo", false)
}


2021-03-12 03:57:17,205 [main:119] - TRYING TO REPLACE CONSTANT 212258873
2021-03-12 03:57:17,288 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PARENTHESIZED)
2021-03-12 03:57:17,288 [main:66] - Compilation checking started
2021-03-12 03:57:17,591 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if ((MAX_LONG).subSequence((-365414426), -1503296514).endsWith('ï«®', true)) return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-365414426)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return (MAX_LONG).toUpperCase()
    if ((PREFIX).uppercase() != (String::plus)((PREFIX).replaceAfterLast((MAX_LONG).get((PREFIX).compareTo("yktbf")), PREFIX, "tganu"), Long.MAX_VALUE)) return PREFIX
    if ((MAX_LONG).equals("tzyfv").xor(true)) return "fail \"\"::plus"

    if ((PREFIX).dropWhile({a: Char -> true}) != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if ((MAX_LONG).removeSurrounding("eqzwf") != "jmxkk") return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get((PREFIX).compareTo("yktbf")).isISOControl()) return "fail \"$(MAX_LONG).commonPrefixWith(StringBuilder(), false)\".plus"
    if ((MAX_LONG).removeSuffix(StringBuilder(-668387930)) + (PREFIX).drop(681141366) != (PREFIX).take(1962626012)) return "fail String::plus($PREFIX, ...)"
    if ((MAX_LONG).dropWhile({a: Char -> true}) + ("aslwh").prependIndent("gjmby") != ((-365414426).toChar().titlecase()::plus)((PREFIX).compareTo("yktbf").minus(-4664072518003994119))) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(2009931715, 1503296514).commonSuffixWith("puamo", false)
}


2021-03-12 03:57:17,592 [main:119] - TRYING TO REPLACE CONSTANT 1503296514
2021-03-12 03:57:17,675 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 03:57:17,676 [main:66] - Compilation checking started
2021-03-12 03:57:17,954 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if ((MAX_LONG).subSequence((-365414426), 1962626012).endsWith('ï«®', true)) return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-365414426)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return (MAX_LONG).toUpperCase()
    if ((PREFIX).uppercase() != (String::plus)((PREFIX).replaceAfterLast((MAX_LONG).get((PREFIX).compareTo("yktbf")), PREFIX, "tganu"), Long.MAX_VALUE)) return PREFIX
    if ((MAX_LONG).equals("tzyfv").xor(true)) return "fail \"\"::plus"

    if ((PREFIX).dropWhile({a: Char -> true}) != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if ((MAX_LONG).removeSurrounding("eqzwf") != "jmxkk") return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get((PREFIX).compareTo("yktbf")).isISOControl()) return "fail \"$(MAX_LONG).commonPrefixWith(StringBuilder(), false)\".plus"
    if ((MAX_LONG).removeSuffix(StringBuilder(-668387930)) + (PREFIX).drop(681141366) != (PREFIX).take(1962626012)) return "fail String::plus($PREFIX, ...)"
    if ((MAX_LONG).dropWhile({a: Char -> true}) + ("aslwh").prependIndent("gjmby") != ((-365414426).toChar().titlecase()::plus)((PREFIX).compareTo("yktbf").minus(-4664072518003994119))) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(2009931715, 1503296514).commonSuffixWith("puamo", false)
}


2021-03-12 03:57:17,954 [main:119] - TRYING TO REPLACE CONSTANT false
2021-03-12 03:57:18,038 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 03:57:18,039 [main:66] - Compilation checking started
2021-03-12 03:57:18,345 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if ((MAX_LONG).subSequence((-365414426), 1962626012).endsWith('ï«®', true)) return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-365414426)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return (MAX_LONG).toUpperCase()
    if ((PREFIX).uppercase() != (String::plus)((PREFIX).replaceAfterLast((MAX_LONG).get((PREFIX).compareTo("yktbf")), PREFIX, "tganu"), Long.MAX_VALUE)) return PREFIX
    if ((MAX_LONG).equals("tzyfv").xor(true)) return "fail \"\"::plus"

    if ((PREFIX).dropWhile({a: Char -> true}) != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if ((MAX_LONG).removeSurrounding("eqzwf") != "jmxkk") return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get((PREFIX).compareTo("yktbf")).isISOControl()) return "fail \"$(MAX_LONG).commonPrefixWith(StringBuilder(), endsWith('ï«®', true))\".plus"
    if ((MAX_LONG).removeSuffix(StringBuilder(-668387930)) + (PREFIX).drop(681141366) != (PREFIX).take(1962626012)) return "fail String::plus($PREFIX, ...)"
    if ((MAX_LONG).dropWhile({a: Char -> true}) + ("aslwh").prependIndent("gjmby") != ((-365414426).toChar().titlecase()::plus)((PREFIX).compareTo("yktbf").minus(-4664072518003994119))) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(2009931715, 1503296514).commonSuffixWith("puamo", false)
}


2021-03-12 03:57:18,346 [main:119] - TRYING TO REPLACE CONSTANT true
2021-03-12 03:57:18,434 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:57:18,434 [main:66] - Compilation checking started
2021-03-12 03:57:18,744 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if ((MAX_LONG).subSequence((-365414426), 1962626012).endsWith('ï«®', true)) return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-365414426)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return (MAX_LONG).toUpperCase()
    if ((PREFIX).uppercase() != (String::plus)((PREFIX).replaceAfterLast((MAX_LONG).get((PREFIX).compareTo("yktbf")), PREFIX, "tganu"), Long.MAX_VALUE)) return PREFIX
    if ((MAX_LONG).equals("tzyfv").xor(true)) return "fail \"\"::plus"

    if ((PREFIX).dropWhile({a: Char -> (MAX_LONG).subSequence((-365414426), 1962626012).endsWith('ï«®', true)}) != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if ((MAX_LONG).removeSurrounding("eqzwf") != "jmxkk") return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get((PREFIX).compareTo("yktbf")).isISOControl()) return "fail \"$(MAX_LONG).commonPrefixWith(StringBuilder(), endsWith('ï«®', true))\".plus"
    if ((MAX_LONG).removeSuffix(StringBuilder(-668387930)) + (PREFIX).drop(681141366) != (PREFIX).take(1962626012)) return "fail String::plus($PREFIX, ...)"
    if ((MAX_LONG).dropWhile({a: Char -> true}) + ("aslwh").prependIndent("gjmby") != ((-365414426).toChar().titlecase()::plus)((PREFIX).compareTo("yktbf").minus(-4664072518003994119))) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(2009931715, 1503296514).commonSuffixWith("puamo", false)
}


2021-03-12 03:57:18,744 [main:119] - TRYING TO REPLACE CONSTANT 668387930
2021-03-12 03:57:18,831 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 03:57:18,831 [main:66] - Compilation checking started
2021-03-12 03:57:19,132 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if ((MAX_LONG).subSequence((-365414426), 1962626012).endsWith('ï«®', true)) return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-365414426)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return (MAX_LONG).toUpperCase()
    if ((PREFIX).uppercase() != (String::plus)((PREFIX).replaceAfterLast((MAX_LONG).get((PREFIX).compareTo("yktbf")), PREFIX, "tganu"), Long.MAX_VALUE)) return PREFIX
    if ((MAX_LONG).equals("tzyfv").xor(true)) return "fail \"\"::plus"

    if ((PREFIX).dropWhile({a: Char -> (MAX_LONG).subSequence((-365414426), 1962626012).endsWith('ï«®', true)}) != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if ((MAX_LONG).removeSurrounding("eqzwf") != "jmxkk") return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get((PREFIX).compareTo("yktbf")).isISOControl()) return "fail \"$(MAX_LONG).commonPrefixWith(StringBuilder(), endsWith('ï«®', true))\".plus"
    if ((MAX_LONG).removeSuffix(StringBuilder(-1962626012)) + (PREFIX).drop(681141366) != (PREFIX).take(1962626012)) return "fail String::plus($PREFIX, ...)"
    if ((MAX_LONG).dropWhile({a: Char -> true}) + ("aslwh").prependIndent("gjmby") != ((-365414426).toChar().titlecase()::plus)((PREFIX).compareTo("yktbf").minus(-4664072518003994119))) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(2009931715, 1503296514).commonSuffixWith("puamo", false)
}


2021-03-12 03:57:19,132 [main:119] - TRYING TO REPLACE CONSTANT true
2021-03-12 03:57:19,216 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:57:19,216 [main:66] - Compilation checking started
2021-03-12 03:57:19,511 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if ((MAX_LONG).subSequence((-365414426), 1962626012).endsWith('ï«®', true)) return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-365414426)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return (MAX_LONG).toUpperCase()
    if ((PREFIX).uppercase() != (String::plus)((PREFIX).replaceAfterLast((MAX_LONG).get((PREFIX).compareTo("yktbf")), PREFIX, "tganu"), Long.MAX_VALUE)) return PREFIX
    if ((MAX_LONG).equals("tzyfv").xor((MAX_LONG).subSequence((-365414426), 1962626012).endsWith('ï«®', true))) return "fail \"\"::plus"

    if ((PREFIX).dropWhile({a: Char -> (MAX_LONG).subSequence((-365414426), 1962626012).endsWith('ï«®', true)}) != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if ((MAX_LONG).removeSurrounding("eqzwf") != "jmxkk") return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get((PREFIX).compareTo("yktbf")).isISOControl()) return "fail \"$(MAX_LONG).commonPrefixWith(StringBuilder(), endsWith('ï«®', true))\".plus"
    if ((MAX_LONG).removeSuffix(StringBuilder(-1962626012)) + (PREFIX).drop(681141366) != (PREFIX).take(1962626012)) return "fail String::plus($PREFIX, ...)"
    if ((MAX_LONG).dropWhile({a: Char -> true}) + ("aslwh").prependIndent("gjmby") != ((-365414426).toChar().titlecase()::plus)((PREFIX).compareTo("yktbf").minus(-4664072518003994119))) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(2009931715, 1503296514).commonSuffixWith("puamo", false)
}


2021-03-12 03:57:19,511 [main:119] - TRYING TO REPLACE CONSTANT 365414426
2021-03-12 03:57:19,617 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 03:57:19,617 [main:66] - Compilation checking started
2021-03-12 03:57:19,913 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if ((MAX_LONG).subSequence((-365414426), 1962626012).endsWith('ï«®', true)) return "fail template"
    if (MAX_LONG != "" + ("umnyv").toLong()) return (MAX_LONG).drop(-365414426)
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return (MAX_LONG).toUpperCase()
    if ((PREFIX).uppercase() != (String::plus)((PREFIX).replaceAfterLast((MAX_LONG).get((PREFIX).compareTo("yktbf")), PREFIX, "tganu"), Long.MAX_VALUE)) return PREFIX
    if ((MAX_LONG).equals("tzyfv").xor((MAX_LONG).subSequence((-365414426), 1962626012).endsWith('ï«®', true))) return "fail \"\"::plus"

    if ((PREFIX).dropWhile({a: Char -> (MAX_LONG).subSequence((-365414426), 1962626012).endsWith('ï«®', true)}) != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if ((MAX_LONG).removeSurrounding("eqzwf") != "jmxkk") return "fail \"$PREFIX\" +"
    if ((MAX_LONG).get((PREFIX).compareTo("yktbf")).isISOControl()) return "fail \"$(MAX_LONG).commonPrefixWith(StringBuilder(), endsWith('ï«®', true))\".plus"
    if ((MAX_LONG).removeSuffix(StringBuilder(-1962626012)) + (PREFIX).drop(681141366) != (PREFIX).take(1962626012)) return "fail String::plus($PREFIX, ...)"
    if ((MAX_LONG).dropWhile({a: Char -> true}) + ("aslwh").prependIndent("gjmby") != ((-1503296514).toChar().titlecase()::plus)((PREFIX).compareTo("yktbf").minus(-4664072518003994119))) return "fail \"$PREFIX\"::plus"

    return (PREFIX).subSequence(2009931715, 1503296514).commonSuffixWith("puamo", false)
}


2021-03-12 03:57:19,937 [main:41] - AFTER TRY 0 res = val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}
2021-03-12 03:57:20,236 [main:43] - Try â0
2021-03-12 03:57:21,265 [main:69] - Trying to insert fun box204(): String {
    fu0()
    return prope0
}
2021-03-12 03:57:21,423 [main:66] - Compilation checking started
2021-03-12 03:57:21,991 [main:103] - Trying to change 9 nodes
2021-03-12 03:57:21,991 [main:107] - replacing ("OK", String)
2021-03-12 03:57:21,994 [main:50] - replacing "OK" String
2021-03-12 03:57:21,994 [main:54] - Getting value of type String
2021-03-12 03:57:22,096 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:57:22,096 [main:58] - GENERATED VALUE OF TYPE String = "yzmcv"
2021-03-12 03:57:22,097 [main:61] - GENERATED IS CALL =false
2021-03-12 03:57:22,200 [main:67] - randomType = Int
2021-03-12 03:57:22,289 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:22,329 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@750a6ac3]
2021-03-12 03:57:22,330 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23c4b3bf]
2021-03-12 03:57:22,330 [main:78] - Generated call from random type = (-933092785).toChar().uppercase()
2021-03-12 03:57:22,331 [main:106] - GETTING String from Companion
2021-03-12 03:57:22,337 [main:113] - Case = [public const final val MAX_VALUE: kotlin.Long defined in kotlin.Long.Companion[DeserializedPropertyDescriptor@18de437d], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40a7f0de]]
2021-03-12 03:57:22,337 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40a7f0de]
2021-03-12 03:57:22,426 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:22,427 [main:117] - GENERATED CALL = (Long).MAX_VALUE.toString(1821468571)
2021-03-12 03:57:22,427 [main:113] - Case = [@kotlin.SinceKotlin public const final val SIZE_BITS: kotlin.Int defined in kotlin.Long.Companion[DeserializedPropertyDescriptor@404e7468], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@196815c]]
2021-03-12 03:57:22,427 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@196815c]
2021-03-12 03:57:22,521 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:22,521 [main:117] - GENERATED CALL = (Long).SIZE_BITS.toString(-380279985)
2021-03-12 03:57:22,521 [main:114] - replacement of "OK" of type String is (-933092785).toChar().uppercase()
2021-03-12 03:57:22,614 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:57:22,615 [main:66] - Compilation checking started
2021-03-12 03:57:23,046 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = ""

inline fun fu0(vararg s : () -> String = arrayOf({ (-933092785).toChar().uppercase() })) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in s) {
        prope0 += p()
    }
}

fun box204(): String {
    fu0()
    return prope0
}


2021-03-12 03:57:23,046 [main:107] - replacing (prope0, String)
2021-03-12 03:57:23,048 [main:50] - replacing prope0 String
2021-03-12 03:57:23,048 [main:54] - Getting value of type String
2021-03-12 03:57:23,157 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:57:23,158 [main:58] - GENERATED VALUE OF TYPE String = "upxpg"
2021-03-12 03:57:23,158 [main:61] - GENERATED IS CALL =false
2021-03-12 03:57:23,343 [main:67] - randomType = Float?
2021-03-12 03:57:23,432 [main:302] - generating value of type = Float true depth = 0
2021-03-12 03:57:23,470 [main:149] - GENERATING call of type @kotlin.Deprecated public open fun toShort(): kotlin.Short defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@372bcdc6]
2021-03-12 03:57:23,470 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5281150f]
2021-03-12 03:57:23,559 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:23,560 [main:78] - Generated call from random type = (0.99490833f)?.toShort().toString(1797276788)
2021-03-12 03:57:23,562 [main:106] - GETTING String from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:23,621 [main:113] - Case = [public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@418bd193], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68eb2bf5]]
2021-03-12 03:57:23,622 [main:149] - GENERATING call of type public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@418bd193]
2021-03-12 03:57:23,722 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:57:23,723 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68eb2bf5]
2021-03-12 03:57:23,723 [main:117] - GENERATED CALL = ((""::plus)).invoke("dcthk").trim()
2021-03-12 03:57:23,723 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@35c25636], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@726a65dc]]
2021-03-12 03:57:23,723 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@726a65dc]
2021-03-12 03:57:23,821 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:23,916 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:57:23,917 [main:117] - GENERATED CALL = ((""::plus)).name.padEnd(842223825, 'á')
2021-03-12 03:57:23,917 [main:113] - Case = [public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@418bd193], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eff31b5]]
2021-03-12 03:57:23,917 [main:149] - GENERATING call of type public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@418bd193]
2021-03-12 03:57:24,012 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:57:24,013 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eff31b5]
2021-03-12 03:57:24,108 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:57:24,109 [main:117] - GENERATED CALL = ((""::plus)).invoke("gapij").substringBefore('î·', PREFIX)
2021-03-12 03:57:24,109 [main:113] - Case = [public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@418bd193], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4533f399]]
2021-03-12 03:57:24,109 [main:149] - GENERATING call of type public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@418bd193]
2021-03-12 03:57:24,205 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:57:24,205 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4533f399]
2021-03-12 03:57:24,330 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:57:24,331 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:57:24,333 [main:117] - GENERATED CALL = ((""::plus)).invoke("iitxj").takeWhile({a: Char -> false})
2021-03-12 03:57:24,333 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@35c25636], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33fb03c1]]
2021-03-12 03:57:24,333 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33fb03c1]
2021-03-12 03:57:24,473 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:24,568 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:24,569 [main:117] - GENERATED CALL = ((""::plus)).name.removeRange(-1153986731, -332273191)
2021-03-12 03:57:24,569 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@35c25636], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1526b9cd]]
2021-03-12 03:57:24,570 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1526b9cd]
2021-03-12 03:57:24,658 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:57:24,658 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:57:24,659 [main:117] - GENERATED CALL = ((""::plus)).name.filter({a: Char -> true})
2021-03-12 03:57:24,659 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@35c25636], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57446851]]
2021-03-12 03:57:24,659 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57446851]
2021-03-12 03:57:24,745 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:24,843 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:57:24,843 [main:117] - GENERATED CALL = ((""::plus)).name.padStart(-1460036499, 'î¤')
2021-03-12 03:57:24,844 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@35c25636], public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f1f24e3]]
2021-03-12 03:57:24,844 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f1f24e3]
2021-03-12 03:57:24,844 [main:117] - GENERATED CALL = ((""::plus)).name.replaceIndent(PREFIX)
2021-03-12 03:57:24,844 [main:113] - Case = [public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@418bd193], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5da0e191]]
2021-03-12 03:57:24,844 [main:149] - GENERATING call of type public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@418bd193]
2021-03-12 03:57:24,929 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5da0e191]
2021-03-12 03:57:25,017 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:57:25,018 [main:117] - GENERATED CALL = ((""::plus)).invoke(null).substringBeforeLast('æ¹', MAX_LONG)
2021-03-12 03:57:25,018 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@35c25636]]
2021-03-12 03:57:25,018 [main:117] - GENERATED CALL = ((""::plus)).name
2021-03-12 03:57:25,018 [main:114] - replacement of prope0 of type String is ((""::plus)).name.removeRange(-1153986731, -332273191)
2021-03-12 03:57:25,110 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:57:25,110 [main:66] - Compilation checking started
2021-03-12 03:57:25,452 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = ""

inline fun fu0(vararg s : () -> String = arrayOf({ (-933092785).toChar().uppercase() })) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in s) {
        prope0 += p()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, -332273191)
}


2021-03-12 03:57:25,452 [main:107] - replacing (p, Function0<String>)
2021-03-12 03:57:25,452 [main:50] - replacing p Function0<String>
2021-03-12 03:57:25,452 [main:54] - Getting value of type Function0<String>
2021-03-12 03:57:25,553 [main:302] - generating value of type = Function0<String> false depth = 0
2021-03-12 03:57:25,553 [main:302] - generating value of type = String true depth = 1
2021-03-12 03:57:25,554 [main:58] - GENERATED VALUE OF TYPE Function0<String> = { "sodos"}
2021-03-12 03:57:25,554 [main:61] - GENERATED IS CALL =false
2021-03-12 03:57:25,769 [main:67] - randomType = LinkedHashSet<Byte>
2021-03-12 03:57:25,862 [main:302] - generating value of type = LinkedHashSet<Byte> false depth = 0
2021-03-12 03:57:25,965 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Byte> = TODO()
2021-03-12 03:57:25,967 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Byte> = TODO()
2021-03-12 03:57:26,064 [main:95] - GENERATED = linkedSetOf<Byte>()
2021-03-12 03:57:26,223 [main:106] - GETTING Function0<String> from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:26,266 [main:106] - GETTING Function0<String> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:26,309 [main:106] - GETTING Function0<String> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:26,310 [main:106] - GETTING Function0<String> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:26,311 [main:106] - GETTING Function0<String> from Companion
2021-03-12 03:57:26,318 [main:106] - GETTING Function0<String> from String
2021-03-12 03:57:26,336 [main:106] - GETTING Function0<String> from String
2021-03-12 03:57:26,337 [main:106] - GETTING Function0<String> from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:26,338 [main:106] - GETTING Function0<String> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:26,339 [main:106] - GETTING Function0<String> from String
2021-03-12 03:57:26,339 [main:114] - replacement of p of type Function0<String> is { "sodos"}
2021-03-12 03:57:26,423 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 03:57:26,424 [main:66] - Compilation checking started
2021-03-12 03:57:26,765 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = ""

inline fun fu0(vararg s : () -> String = arrayOf({ (-933092785).toChar().uppercase() })) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in s) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, -332273191)
}


2021-03-12 03:57:26,765 [main:107] - replacing (s, Array<out Function0<String>>)
2021-03-12 03:57:26,765 [main:50] - replacing s Array<out Function0<String>>
2021-03-12 03:57:26,765 [main:54] - Getting value of type Array<out Function0<String>>
2021-03-12 03:57:26,853 [main:302] - generating value of type = Array<out Function0<String>> false depth = 0
2021-03-12 03:57:26,946 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: Function0<String>): Array<Function0<Strg>> = TODO()
2021-03-12 03:57:26,947 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: Function0<String>): Array<Function0<Strg>> = TODO()
2021-03-12 03:57:27,037 [main:302] - generating value of type = Function0<String> false depth = 3
2021-03-12 03:57:27,038 [main:302] - generating value of type = String true depth = 4
2021-03-12 03:57:27,039 [main:95] - GENERATED = arrayOf<Function0<String>>({ "duzsb"})
2021-03-12 03:57:27,039 [main:58] - GENERATED VALUE OF TYPE Array<out Function0<String>> = arrayOf<Function0<String>>({ "duzsb"})
2021-03-12 03:57:27,039 [main:61] - GENERATED IS CALL =true
2021-03-12 03:57:27,135 [main:67] - randomType = Byte
2021-03-12 03:57:27,244 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:57:27,279 [main:106] - GETTING Array<out Function0<String>> from String
2021-03-12 03:57:27,299 [main:106] - GETTING Array<out Function0<String>> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:27,342 [main:106] - GETTING Array<out Function0<String>> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:27,343 [main:106] - GETTING Array<out Function0<String>> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:27,345 [main:106] - GETTING Array<out Function0<String>> from String
2021-03-12 03:57:27,346 [main:106] - GETTING Array<out Function0<String>> from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:27,390 [main:106] - GETTING Array<out Function0<String>> from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:27,391 [main:106] - GETTING Array<out Function0<String>> from String
2021-03-12 03:57:27,392 [main:106] - GETTING Array<out Function0<String>> from Companion
2021-03-12 03:57:27,400 [main:106] - GETTING Array<out Function0<String>> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:27,400 [main:114] - replacement of s of type Array<out Function0<String>> is arrayOf<Function0<String>>({ "duzsb"})
2021-03-12 03:57:27,484 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 03:57:27,485 [main:66] - Compilation checking started
2021-03-12 03:57:27,829 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = ""

inline fun fu0(vararg s : () -> String = arrayOf({ (-933092785).toChar().uppercase() })) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, -332273191)
}


2021-03-12 03:57:27,829 [main:107] - replacing ({ (-933092785).toChar().uppercase() }, Function0<String>)
2021-03-12 03:57:27,829 [main:50] - replacing { (-933092785).toChar().uppercase() } Function0<String>
2021-03-12 03:57:27,829 [main:54] - Getting value of type Function0<String>
2021-03-12 03:57:27,933 [main:302] - generating value of type = Function0<String> false depth = 0
2021-03-12 03:57:27,933 [main:302] - generating value of type = String true depth = 1
2021-03-12 03:57:27,934 [main:58] - GENERATED VALUE OF TYPE Function0<String> = { "cwadt"}
2021-03-12 03:57:27,934 [main:61] - GENERATED IS CALL =false
2021-03-12 03:57:28,120 [main:67] - randomType = UByte?
2021-03-12 03:57:28,213 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 03:57:28,255 [main:106] - GETTING Function0<String> from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:28,299 [main:106] - GETTING Function0<String> from Companion
2021-03-12 03:57:28,305 [main:106] - GETTING Function0<String> from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:28,306 [main:106] - GETTING Function0<String> from String
2021-03-12 03:57:28,325 [main:106] - GETTING Function0<String> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:28,368 [main:106] - GETTING Function0<String> from String
2021-03-12 03:57:28,370 [main:106] - GETTING Function0<String> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:28,371 [main:106] - GETTING Function0<String> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:28,372 [main:106] - GETTING Function0<String> from String
2021-03-12 03:57:28,373 [main:106] - GETTING Function0<String> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:28,373 [main:114] - replacement of { (-933092785).toChar().uppercase() } of type Function0<String> is { "cwadt"}
2021-03-12 03:57:28,458 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 03:57:28,458 [main:66] - Compilation checking started
2021-03-12 03:57:28,846 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = ""

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, -332273191)
}


2021-03-12 03:57:28,847 [main:107] - replacing ("", String)
2021-03-12 03:57:28,847 [main:50] - replacing "" String
2021-03-12 03:57:28,847 [main:54] - Getting value of type String
2021-03-12 03:57:28,974 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:57:28,974 [main:58] - GENERATED VALUE OF TYPE String = "hryyr"
2021-03-12 03:57:28,975 [main:61] - GENERATED IS CALL =false
2021-03-12 03:57:29,171 [main:67] - randomType = Short?
2021-03-12 03:57:29,260 [main:302] - generating value of type = Short true depth = 0
2021-03-12 03:57:29,295 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Short defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@282f18d1]
2021-03-12 03:57:29,295 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5281150f]
2021-03-12 03:57:29,379 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:29,380 [main:78] - Generated call from random type = (28792)?.dec().toString(1181042317)
2021-03-12 03:57:29,381 [main:106] - GETTING String from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:29,431 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@35c25636], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@679d2905]]
2021-03-12 03:57:29,432 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@679d2905]
2021-03-12 03:57:29,520 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:57:29,521 [main:117] - GENERATED CALL = (""::plus).name.replaceAfterLast('éº°', val MAX_LONG =
2021-03-12 03:57:29,521 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@35c25636], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1526b9cd]]
2021-03-12 03:57:29,521 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1526b9cd]
2021-03-12 03:57:29,606 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:57:29,606 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:57:29,607 [main:117] - GENERATED CALL = (""::plus).name.filter({a: Char -> true})
2021-03-12 03:57:29,607 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@35c25636], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7115a40]]
2021-03-12 03:57:29,607 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7115a40]
2021-03-12 03:57:29,608 [main:117] - GENERATED CALL = (""::plus).name.trimMargin(val PREFIX =
2021-03-12 03:57:29,608 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@35c25636], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e8483d9]]
2021-03-12 03:57:29,608 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e8483d9]
2021-03-12 03:57:29,694 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:57:29,695 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:57:29,695 [main:117] - GENERATED CALL = (""::plus).name.dropLastWhile({a: Char -> true})
2021-03-12 03:57:29,696 [main:113] - Case = [public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@56adc8c9], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c521f60]]
2021-03-12 03:57:29,696 [main:149] - GENERATING call of type public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@56adc8c9]
2021-03-12 03:57:29,780 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:57:29,780 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c521f60]
2021-03-12 03:57:29,781 [main:117] - GENERATED CALL = (""::plus).invoke("ssdtf").trimStart()
2021-03-12 03:57:29,781 [main:113] - Case = [public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@56adc8c9], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ab64eb1]]
2021-03-12 03:57:29,781 [main:149] - GENERATING call of type public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@56adc8c9]
2021-03-12 03:57:29,867 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:57:29,867 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ab64eb1]
2021-03-12 03:57:29,954 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:57:30,042 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 03:57:30,044 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 03:57:30,268 [main:302] - generating value of type = String true depth = 3
2021-03-12 03:57:30,269 [main:95] - GENERATED = StringBuilder("nkbtr")
2021-03-12 03:57:30,269 [main:117] - GENERATED CALL = (""::plus).invoke("iprqb").removePrefix(StringBuilder("nkbtr"))
2021-03-12 03:57:30,269 [main:113] - Case = [public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@56adc8c9], public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dcba3be]]
2021-03-12 03:57:30,269 [main:149] - GENERATING call of type public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@56adc8c9]
2021-03-12 03:57:30,366 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:57:30,366 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dcba3be]
2021-03-12 03:57:30,367 [main:117] - GENERATED CALL = (""::plus).invoke("xrwdm").replaceIndentByMargin(val PREFIX =
2021-03-12 03:57:30,367 [main:113] - Case = [public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@56adc8c9], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e8483d9]]
2021-03-12 03:57:30,367 [main:149] - GENERATING call of type public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@56adc8c9]
2021-03-12 03:57:30,455 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:57:30,455 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e8483d9]
2021-03-12 03:57:30,539 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:57:30,539 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:57:30,540 [main:117] - GENERATED CALL = (""::plus).invoke("mcfvi").dropLastWhile({a: Char -> true})
2021-03-12 03:57:30,540 [main:113] - Case = [public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@56adc8c9], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fdc3b45]]
2021-03-12 03:57:30,540 [main:149] - GENERATING call of type public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@56adc8c9]
2021-03-12 03:57:30,626 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:57:30,626 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fdc3b45]
2021-03-12 03:57:30,710 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:30,710 [main:117] - GENERATED CALL = (""::plus).invoke("wtjys").dropLast(-1356260210)
2021-03-12 03:57:30,711 [main:113] - Case = [public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@56adc8c9], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c88e713]]
2021-03-12 03:57:30,711 [main:149] - GENERATING call of type public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@56adc8c9]
2021-03-12 03:57:30,796 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:57:30,796 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c88e713]
2021-03-12 03:57:30,796 [main:117] - GENERATED CALL = (""::plus).invoke("pxnqf").trimEnd()
2021-03-12 03:57:30,796 [main:114] - replacement of "" of type String is (""::plus).invoke("ssdtf").trimStart()
2021-03-12 03:57:30,882 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:57:30,882 [main:66] - Compilation checking started
2021-03-12 03:57:31,222 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, -332273191)
}


2021-03-12 03:57:31,223 [main:107] - replacing (arrayOf({ "cwadt"}), Array<Function0<String>>)
2021-03-12 03:57:31,223 [main:50] - replacing arrayOf({ "cwadt"}) Array<Function0<String>>
2021-03-12 03:57:31,223 [main:54] - Getting value of type Array<Function0<String>>
2021-03-12 03:57:31,332 [main:302] - generating value of type = Array<Function0<String>> false depth = 0
2021-03-12 03:57:31,443 [main:43] - GENERATING CALL OF fun <T> arrayOfNulls(size: kotlin.Int): Array<Function0<Strg>> = TODO()
2021-03-12 03:57:31,445 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOfNulls(size: kotlin.Int): Array<Function0<Strg>> = TODO()
2021-03-12 03:57:31,665 [main:302] - generating value of type = Int true depth = 3
2021-03-12 03:57:31,665 [main:95] - GENERATED = arrayOfNulls<Function0<String>>(374345130)
2021-03-12 03:57:31,666 [main:58] - GENERATED VALUE OF TYPE Array<Function0<String>> = arrayOfNulls<Function0<String>>(374345130)
2021-03-12 03:57:31,666 [main:61] - GENERATED IS CALL =true
2021-03-12 03:57:31,772 [main:67] - randomType = Short
2021-03-12 03:57:31,858 [main:302] - generating value of type = Short true depth = 0
2021-03-12 03:57:31,904 [main:106] - GETTING Array<Function0<String>> from String
2021-03-12 03:57:31,931 [main:106] - GETTING Array<Function0<String>> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:31,985 [main:106] - GETTING Array<Function0<String>> from Companion
2021-03-12 03:57:31,997 [main:106] - GETTING Array<Function0<String>> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:31,998 [main:106] - GETTING Array<Function0<String>> from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:32,046 [main:106] - GETTING Array<Function0<String>> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:32,047 [main:106] - GETTING Array<Function0<String>> from String
2021-03-12 03:57:32,049 [main:106] - GETTING Array<Function0<String>> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:32,050 [main:106] - GETTING Array<Function0<String>> from String
2021-03-12 03:57:32,051 [main:106] - GETTING Array<Function0<String>> from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:32,051 [main:114] - replacement of arrayOf({ "cwadt"}) of type Array<Function0<String>> is arrayOfNulls<Function0<String>>(374345130)
2021-03-12 03:57:32,134 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 03:57:32,135 [main:66] - Compilation checking started
2021-03-12 03:57:32,362 [main:49] - Result = false
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOfNulls<Function0<String>>(374345130)) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, -332273191)
}


2021-03-12 03:57:32,478 [main:141] - TRYING TO REPLACE CONSTANT 1153986731
2021-03-12 03:57:32,569 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 03:57:32,570 [main:66] - Compilation checking started
2021-03-12 03:57:32,893 [main:141] - TRYING TO REPLACE CONSTANT 332273191
2021-03-12 03:57:32,990 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 03:57:32,990 [main:66] - Compilation checking started
2021-03-12 03:57:33,344 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}


2021-03-12 03:57:33,344 [main:41] - AFTER TRY 1 res = val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}


2021-03-12 03:57:33,696 [main:43] - GENERATING CALL OF inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}
2021-03-12 03:57:33,697 [main:61] - WITHOUT TYPE PARAMS = inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}
2021-03-12 03:57:33,877 [main:302] - generating value of type = Function0<String> false depth = 1
2021-03-12 03:57:33,877 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:57:33,878 [main:95] - GENERATED = fu0({ "nzqyo"})
2021-03-12 03:57:33,964 [main:43] - Try â1
2021-03-12 03:57:35,198 [main:69] - Trying to insert fun box580(): String {
    fu5(arrayOf(""))
    return "OK"
}
2021-03-12 03:57:35,338 [main:66] - Compilation checking started
2021-03-12 03:57:35,946 [main:103] - Trying to change 18 nodes
2021-03-12 03:57:35,947 [main:107] - replacing (a, Array<String>)
2021-03-12 03:57:35,948 [main:50] - replacing a Array<String>
2021-03-12 03:57:35,948 [main:54] - Getting value of type Array<String>
2021-03-12 03:57:36,068 [main:302] - generating value of type = Array<String> false depth = 0
2021-03-12 03:57:36,200 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: String): Array<Strg> = TODO()
2021-03-12 03:57:36,202 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: String): Array<Strg> = TODO()
2021-03-12 03:57:36,313 [main:302] - generating value of type = String true depth = 3
2021-03-12 03:57:36,314 [main:95] - GENERATED = arrayOf<String>("cwqzi")
2021-03-12 03:57:36,314 [main:58] - GENERATED VALUE OF TYPE Array<String> = arrayOf<String>("cwqzi")
2021-03-12 03:57:36,314 [main:61] - GENERATED IS CALL =true
2021-03-12 03:57:36,316 [main:67] - randomType = Long
2021-03-12 03:57:36,417 [main:302] - generating value of type = Long true depth = 0
2021-03-12 03:57:36,464 [main:106] - GETTING Array<String> from String
2021-03-12 03:57:36,482 [main:106] - GETTING Array<String> from String
2021-03-12 03:57:36,483 [main:106] - GETTING Array<String> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:36,526 [main:106] - GETTING Array<String> from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:36,571 [main:106] - GETTING Array<String> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:36,572 [main:106] - GETTING Array<String> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:36,573 [main:106] - GETTING Array<String> from String
2021-03-12 03:57:36,574 [main:106] - GETTING Array<String> from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:36,575 [main:106] - GETTING Array<String> from Companion
2021-03-12 03:57:36,582 [main:106] - GETTING Array<String> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:36,584 [main:106] - GETTING Array<String> from String
2021-03-12 03:57:36,585 [main:106] - GETTING Array<String> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:36,585 [main:114] - replacement of a of type Array<String> is arrayOf<String>("cwqzi")
2021-03-12 03:57:36,704 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 03:57:36,704 [main:66] - Compilation checking started
2021-03-12 03:57:37,131 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    for (string in this) {
        fn(fu1() ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    fu5(arrayOf(""))
    return "OK"
}


2021-03-12 03:57:37,131 [main:107] - replacing (it, String)
2021-03-12 03:57:37,133 [main:50] - replacing it String
2021-03-12 03:57:37,133 [main:54] - Getting value of type String
2021-03-12 03:57:37,248 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:57:37,249 [main:58] - GENERATED VALUE OF TYPE String = "qxxlq"
2021-03-12 03:57:37,249 [main:61] - GENERATED IS CALL =false
2021-03-12 03:57:37,356 [main:67] - randomType = ULong
2021-03-12 03:57:37,454 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 03:57:37,489 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@3b4d4ec]
2021-03-12 03:57:37,489 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dc8d80d]
2021-03-12 03:57:37,586 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:37,587 [main:78] - Generated call from random type = (4415301351395298720.toULong()).toByte().toString(-496791301)
2021-03-12 03:57:37,588 [main:106] - GETTING String from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:37,643 [main:113] - Case = [public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@4f4c44ce], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5da0e191]]
2021-03-12 03:57:37,643 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@4f4c44ce]
2021-03-12 03:57:37,752 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:57:37,752 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5da0e191]
2021-03-12 03:57:37,864 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:57:37,970 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:57:37,971 [main:117] - GENERATED CALL = ((String::plus)).invoke(PREFIX, "ucmon").substringBeforeLast('ê', "crusr")
2021-03-12 03:57:37,971 [main:113] - Case = [public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@4f4c44ce], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2fe79f34]]
2021-03-12 03:57:37,971 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@4f4c44ce]
2021-03-12 03:57:38,074 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:57:38,074 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2fe79f34]
2021-03-12 03:57:38,179 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:57:38,180 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:57:38,181 [main:117] - GENERATED CALL = ((String::plus)).invoke(((""::plus)).name, "qolyq").takeLastWhile({a: Char -> false})
2021-03-12 03:57:38,181 [main:113] - Case = [public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@4f4c44ce], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@492795f3]]
2021-03-12 03:57:38,181 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@4f4c44ce]
2021-03-12 03:57:38,279 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:57:38,279 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@492795f3]
2021-03-12 03:57:38,379 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:38,380 [main:117] - GENERATED CALL = ((String::plus)).invoke(MAX_LONG, "kpmtl").takeLast(-1287572317)
2021-03-12 03:57:38,380 [main:113] - Case = [public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@4f4c44ce], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@678d6ca3]]
2021-03-12 03:57:38,380 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@4f4c44ce]
2021-03-12 03:57:38,511 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:57:38,613 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:57:38,613 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@678d6ca3]
2021-03-12 03:57:38,716 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:57:38,717 [main:117] - GENERATED CALL = ((String::plus)).invoke("rkjzo", "bdwby").replaceAfter('ê«', val PREFIX =
2021-03-12 03:57:38,717 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@6edddf24], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f24aea4]]
2021-03-12 03:57:38,717 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f24aea4]
2021-03-12 03:57:38,717 [main:117] - GENERATED CALL = ((String::plus)).name.trimIndent()
2021-03-12 03:57:38,717 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@6edddf24], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ecfbefc]]
2021-03-12 03:57:38,717 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ecfbefc]
2021-03-12 03:57:38,718 [main:117] - GENERATED CALL = ((String::plus)).name.concat(MAX_LONG)
2021-03-12 03:57:38,718 [main:113] - Case = [public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@4f4c44ce], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c521f60]]
2021-03-12 03:57:38,718 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@4f4c44ce]
2021-03-12 03:57:38,819 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:57:38,820 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c521f60]
2021-03-12 03:57:38,820 [main:117] - GENERATED CALL = ((String::plus)).invoke(var prope0 = (""::plus).invoke("ssdtf").trimStart().trimStart()
2021-03-12 03:57:38,820 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@6edddf24], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6358fd25]]
2021-03-12 03:57:38,820 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6358fd25]
2021-03-12 03:57:38,915 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:57:39,010 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:57:39,105 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:57:39,106 [main:117] - GENERATED CALL = ((String::plus)).name.replace('å¦', 'â', false)
2021-03-12 03:57:39,107 [main:113] - Case = [public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@4f4c44ce], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a222c29]]
2021-03-12 03:57:39,107 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@4f4c44ce]
2021-03-12 03:57:39,204 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:57:39,205 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a222c29]
2021-03-12 03:57:39,298 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:57:39,396 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:57:39,499 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:57:39,501 [main:117] - GENERATED CALL = ((String::plus)).invoke(var prope0 = (""::plus).invoke("ssdtf").trimStart().replaceFirst('î¨¼', 'æ¿', true)
2021-03-12 03:57:39,501 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@6edddf24], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33fb03c1]]
2021-03-12 03:57:39,501 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33fb03c1]
2021-03-12 03:57:39,607 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:39,712 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:39,713 [main:117] - GENERATED CALL = ((String::plus)).name.removeRange(-742314480, -730460854)
2021-03-12 03:57:39,713 [main:114] - replacement of it of type String is ((String::plus)).name.concat(MAX_LONG)
2021-03-12 03:57:39,887 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:57:39,887 [main:66] - Compilation checking started
2021-03-12 03:57:40,212 [main:49] - Result = false
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    for (string in this) {
        fn(fu1() ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(((String::plus)).name.concat(MAX_LONG)) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    fu5(arrayOf(""))
    return "OK"
}


2021-03-12 03:57:40,213 [main:107] - replacing (fu1(), String?)
2021-03-12 03:57:40,214 [main:50] - replacing fu1() String?
2021-03-12 03:57:40,214 [main:54] - Getting value of type String?
2021-03-12 03:57:40,316 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:57:40,318 [main:58] - GENERATED VALUE OF TYPE String? = "thcbo"
2021-03-12 03:57:40,318 [main:61] - GENERATED IS CALL =false
2021-03-12 03:57:40,422 [main:67] - randomType = Double
2021-03-12 03:57:40,516 [main:302] - generating value of type = Double true depth = 0
2021-03-12 03:57:40,553 [main:149] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6aa65574]
2021-03-12 03:57:40,554 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dc8d80d]
2021-03-12 03:57:40,652 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:40,653 [main:78] - Generated call from random type = (0.6944959309243238).toByte().toString(1042941104)
2021-03-12 03:57:40,653 [main:114] - replacement of fu1() of type String? is (0.6944959309243238).toByte().toString(1042941104)
2021-03-12 03:57:40,754 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:57:40,754 [main:66] - Compilation checking started
2021-03-12 03:57:41,186 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in this) {
        fn((0.6944959309243238).toByte().toString(1042941104) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    fu5(arrayOf(""))
    return "OK"
}


2021-03-12 03:57:41,187 [main:107] - replacing ({}, Function1<String, Unit>)
2021-03-12 03:57:41,187 [main:50] - replacing {} Function1<String, Unit>
2021-03-12 03:57:41,187 [main:54] - Getting value of type Function1<String, Unit>
2021-03-12 03:57:41,310 [main:302] - generating value of type = Function1<String, Unit> false depth = 0
2021-03-12 03:57:41,311 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 03:57:41,435 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 03:57:41,437 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 03:57:41,685 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 03:57:41,686 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 03:57:41,791 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 03:57:41,793 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 03:57:42,010 [main:302] - generating value of type = Any false depth = 8
2021-03-12 03:57:42,011 [main:95] - GENERATED = println("hjuez")
2021-03-12 03:57:42,011 [main:95] - GENERATED = contract({ println("hjuez")})
2021-03-12 03:57:42,011 [main:58] - GENERATED VALUE OF TYPE Function1<String, Unit> = {a: String -> contract({ println("hjuez")})}
2021-03-12 03:57:42,011 [main:61] - GENERATED IS CALL =false
2021-03-12 03:57:42,130 [main:67] - randomType = Set<Byte>
2021-03-12 03:57:42,131 [main:106] - GETTING Function1<String, Unit> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:42,191 [main:106] - GETTING Function1<String, Unit> from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:42,238 [main:106] - GETTING Function1<String, Unit> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:42,239 [main:106] - GETTING Function1<String, Unit> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:42,240 [main:106] - GETTING Function1<String, Unit> from String
2021-03-12 03:57:42,261 [main:106] - GETTING Function1<String, Unit> from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:42,262 [main:106] - GETTING Function1<String, Unit> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:42,264 [main:106] - GETTING Function1<String, Unit> from Companion
2021-03-12 03:57:42,274 [main:106] - GETTING Function1<String, Unit> from String
2021-03-12 03:57:42,276 [main:106] - GETTING Function1<String, Unit> from String
2021-03-12 03:57:42,277 [main:106] - GETTING Function1<String, Unit> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:42,278 [main:106] - GETTING Function1<String, Unit> from String
2021-03-12 03:57:42,279 [main:114] - replacement of {} of type Function1<String, Unit> is {a: String -> contract({ println("hjuez")})}
2021-03-12 03:57:42,377 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 03:57:42,378 [main:66] - Compilation checking started
2021-03-12 03:57:42,652 [main:49] - Result = false
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in this) {
        fn((0.6944959309243238).toByte().toString(1042941104) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> contract({ println("hjuez")})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    fu5(arrayOf(""))
    return "OK"
}


2021-03-12 03:57:42,653 [main:107] - replacing ("", String)
2021-03-12 03:57:42,655 [main:50] - replacing "" String
2021-03-12 03:57:42,655 [main:54] - Getting value of type String
2021-03-12 03:57:42,767 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:57:42,768 [main:58] - GENERATED VALUE OF TYPE String = "scycs"
2021-03-12 03:57:42,768 [main:61] - GENERATED IS CALL =false
2021-03-12 03:57:42,979 [main:67] - randomType = ArrayList<Short>
2021-03-12 03:57:43,075 [main:302] - generating value of type = ArrayList<Short> false depth = 0
2021-03-12 03:57:43,173 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Short> = TODO()
2021-03-12 03:57:43,175 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Short> = TODO()
2021-03-12 03:57:43,307 [main:95] - GENERATED = arrayListOf<Short>()
2021-03-12 03:57:43,431 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Short defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@27c193d]
2021-03-12 03:57:43,525 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:43,526 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5281150f]
2021-03-12 03:57:43,622 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:43,623 [main:78] - Generated call from random type = (arrayListOf<Short>()).get(295951683).toString(-598099311)
2021-03-12 03:57:43,623 [main:114] - replacement of "" of type String is (arrayListOf<Short>()).get(295951683).toString(-598099311)
2021-03-12 03:57:43,718 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:57:43,719 [main:66] - Compilation checking started
2021-03-12 03:57:44,161 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in this) {
        fn((0.6944959309243238).toByte().toString(1042941104) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(295951683).toString(-598099311)))
    return "OK"
}


2021-03-12 03:57:44,162 [main:107] - replacing (this, Array<String>)
2021-03-12 03:57:44,162 [main:50] - replacing this Array<String>
2021-03-12 03:57:44,162 [main:54] - Getting value of type Array<String>
2021-03-12 03:57:44,291 [main:302] - generating value of type = Array<String> false depth = 0
2021-03-12 03:57:44,415 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->String): Array<String> = TODO()
2021-03-12 03:57:44,416 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->String): Array<String> = TODO()
2021-03-12 03:57:44,748 [main:302] - generating value of type = Int true depth = 3
2021-03-12 03:57:44,749 [main:302] - generating value of type = Function1<Int, String> false depth = 3
2021-03-12 03:57:44,750 [main:302] - generating value of type = String true depth = 4
2021-03-12 03:57:44,751 [main:95] - GENERATED = Array<String>(-134024629, {a: Int -> "xswhp"})
2021-03-12 03:57:44,751 [main:58] - GENERATED VALUE OF TYPE Array<String> = Array<String>(-134024629, {a: Int -> "xswhp"})
2021-03-12 03:57:44,751 [main:61] - GENERATED IS CALL =true
2021-03-12 03:57:45,071 [main:67] - randomType = LinkedHashMap<UShort, ULong>
2021-03-12 03:57:45,196 [main:302] - generating value of type = LinkedHashMap<UShort, ULong> false depth = 0
2021-03-12 03:57:45,296 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<UShort, ULong>): LkedHashMap<UShort, ULong> = TODO()
2021-03-12 03:57:45,298 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<UShort, ULong>): LkedHashMap<UShort, ULong> = TODO()
2021-03-12 03:57:45,400 [main:302] - generating value of type = Pair<UShort, ULong> false depth = 3
2021-03-12 03:57:45,504 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: UShort, second: ULong): Pair<UShort, ULong> = TODO()
2021-03-12 03:57:45,506 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: UShort, second: ULong): Pair<UShort, ULong> = TODO()
2021-03-12 03:57:45,607 [main:302] - generating value of type = UShort true depth = 6
2021-03-12 03:57:45,608 [main:302] - generating value of type = ULong true depth = 6
2021-03-12 03:57:45,609 [main:95] - GENERATED = Pair<UShort, ULong>(17468.toUShort(), 5323824674166651750.toULong())
2021-03-12 03:57:45,609 [main:95] - GENERATED = linkedMapOf<UShort, ULong>(Pair<UShort, ULong>(17468.toUShort(), 5323824674166651750.toULong()))
2021-03-12 03:57:45,734 [main:106] - GETTING Array<String> from String
2021-03-12 03:57:45,752 [main:106] - GETTING Array<String> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:45,795 [main:106] - GETTING Array<String> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:45,796 [main:106] - GETTING Array<String> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:45,797 [main:106] - GETTING Array<String> from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:45,841 [main:106] - GETTING Array<String> from String
2021-03-12 03:57:45,842 [main:106] - GETTING Array<String> from String
2021-03-12 03:57:45,843 [main:106] - GETTING Array<String> from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:45,844 [main:106] - GETTING Array<String> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:45,845 [main:106] - GETTING Array<String> from String
2021-03-12 03:57:45,846 [main:106] - GETTING Array<String> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:45,847 [main:106] - GETTING Array<String> from Companion
2021-03-12 03:57:45,854 [main:114] - replacement of this of type Array<String> is Array<String>(-134024629, {a: Int -> "xswhp"})
2021-03-12 03:57:45,950 [main:33] - Trying to replace Element(THIS_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 03:57:45,951 [main:66] - Compilation checking started
2021-03-12 03:57:46,435 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(-134024629, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(1042941104) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(295951683).toString(-598099311)))
    return "OK"
}


2021-03-12 03:57:46,436 [main:107] - replacing ("OK", String)
2021-03-12 03:57:46,436 [main:50] - replacing "OK" String
2021-03-12 03:57:46,436 [main:54] - Getting value of type String
2021-03-12 03:57:46,541 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:57:46,542 [main:58] - GENERATED VALUE OF TYPE String = "iamxz"
2021-03-12 03:57:46,543 [main:61] - GENERATED IS CALL =false
2021-03-12 03:57:46,651 [main:67] - randomType = ArrayList<Int>
2021-03-12 03:57:46,750 [main:302] - generating value of type = ArrayList<Int> false depth = 0
2021-03-12 03:57:46,853 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Int): ArrayList<Int> = TODO()
2021-03-12 03:57:46,854 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Int): ArrayList<Int> = TODO()
2021-03-12 03:57:46,973 [main:302] - generating value of type = Int true depth = 3
2021-03-12 03:57:46,975 [main:95] - GENERATED = arrayListOf<Int>(451016122)
2021-03-12 03:57:47,129 [main:149] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@3cfa479c]
2021-03-12 03:57:47,129 [main:149] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@40724ccd]
2021-03-12 03:57:47,228 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:57:47,327 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:57:47,435 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:57:47,538 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 03:57:47,540 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 03:57:47,756 [main:302] - generating value of type = String true depth = 3
2021-03-12 03:57:47,758 [main:95] - GENERATED = StringBuilder("hlyrn")
2021-03-12 03:57:47,854 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:47,951 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:57:48,051 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 03:57:48,053 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 03:57:48,057 [main:78] - Generated call from random type = (arrayListOf<Int>(451016122)).toArray().joinToString("mrkkb", "fpirt", StringBuilder("hlyrn"), 1179150559, StringBuilder(), {a: T -> "dpmhx"})
2021-03-12 03:57:48,058 [main:106] - GETTING String from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:48,102 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@6edddf24], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c521f60]]
2021-03-12 03:57:48,102 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c521f60]
2021-03-12 03:57:48,103 [main:117] - GENERATED CALL = (String::plus).name.trimStart()
2021-03-12 03:57:48,103 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@6edddf24], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e3da54]]
2021-03-12 03:57:48,103 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e3da54]
2021-03-12 03:57:48,198 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:57:48,199 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:57:48,200 [main:117] - GENERATED CALL = (String::plus).name.dropWhile({a: Char -> false})
2021-03-12 03:57:48,200 [main:113] - Case = [public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@3af2b45b], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72825613]]
2021-03-12 03:57:48,200 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@3af2b45b]
2021-03-12 03:57:48,295 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:57:48,296 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72825613]
2021-03-12 03:57:48,393 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:57:48,394 [main:117] - GENERATED CALL = (String::plus).invoke(var prope0 = (""::plus).invoke("ssdtf").trimStart().take(-2127889382)
2021-03-12 03:57:48,394 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@6edddf24], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6358fd25]]
2021-03-12 03:57:48,394 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6358fd25]
2021-03-12 03:57:48,490 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:57:48,586 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:57:48,719 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:57:48,721 [main:117] - GENERATED CALL = (String::plus).name.replace('æ©¾', 'á³', true)
2021-03-12 03:57:48,721 [main:113] - Case = [public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@3af2b45b], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55878bcb]]
2021-03-12 03:57:48,721 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@3af2b45b]
2021-03-12 03:57:48,824 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:57:48,825 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55878bcb]
2021-03-12 03:57:48,940 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:57:49,044 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 03:57:49,046 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 03:57:49,248 [main:302] - generating value of type = Int true depth = 3
2021-03-12 03:57:49,249 [main:95] - GENERATED = StringBuilder(-2002945695)
2021-03-12 03:57:49,249 [main:117] - GENERATED CALL = (String::plus).invoke(val MAX_LONG =.removeSurrounding(StringBuilder(-2002945695))
2021-03-12 03:57:49,249 [main:113] - Case = [public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@3af2b45b], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@307cea0a]]
2021-03-12 03:57:49,249 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@3af2b45b]
2021-03-12 03:57:49,344 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:57:49,345 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@307cea0a]
2021-03-12 03:57:49,440 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:57:49,440 [main:117] - GENERATED CALL = (String::plus).invoke(MAX_LONG, "vhvhf").plus("smyfs")
2021-03-12 03:57:49,440 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@6edddf24], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2fe79f34]]
2021-03-12 03:57:49,440 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2fe79f34]
2021-03-12 03:57:49,535 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:57:49,536 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:57:49,538 [main:117] - GENERATED CALL = (String::plus).name.takeLastWhile({a: Char -> false})
2021-03-12 03:57:49,538 [main:113] - Case = [public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@3af2b45b], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@376a7dc9]]
2021-03-12 03:57:49,538 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@3af2b45b]
2021-03-12 03:57:49,633 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:57:49,633 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@376a7dc9]
2021-03-12 03:57:49,728 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:57:49,828 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 03:57:49,830 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 03:57:50,033 [main:302] - generating value of type = String true depth = 3
2021-03-12 03:57:50,034 [main:95] - GENERATED = StringBuilder("tltbh")
2021-03-12 03:57:50,034 [main:117] - GENERATED CALL = (String::plus).invoke(var prope0 = (""::plus).invoke("ssdtf").trimStart().removeSuffix(StringBuilder("tltbh"))
2021-03-12 03:57:50,035 [main:113] - Case = [public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@3af2b45b], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4533f399]]
2021-03-12 03:57:50,035 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@3af2b45b]
2021-03-12 03:57:50,172 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:57:50,283 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:57:50,283 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4533f399]
2021-03-12 03:57:50,403 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:57:50,404 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:57:50,405 [main:117] - GENERATED CALL = (String::plus).invoke("litbx", "ankjf").takeWhile({a: Char -> false})
2021-03-12 03:57:50,405 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@6edddf24], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eff31b5]]
2021-03-12 03:57:50,406 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eff31b5]
2021-03-12 03:57:50,505 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:57:50,507 [main:117] - GENERATED CALL = (String::plus).name.substringBefore('ä', MAX_LONG)
2021-03-12 03:57:50,507 [main:114] - replacement of "OK" of type String is (String::plus).name.replace('æ©¾', 'á³', true)
2021-03-12 03:57:50,603 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:57:50,603 [main:66] - Compilation checking started
2021-03-12 03:57:51,033 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(-134024629, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(1042941104) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(295951683).toString(-598099311)))
    return (String::plus).name.replace('æ©¾', 'á³', true)
}


2021-03-12 03:57:51,034 [main:107] - replacing ({}, Function1<String, Unit>)
2021-03-12 03:57:51,034 [main:50] - replacing {} Function1<String, Unit>
2021-03-12 03:57:51,035 [main:54] - Getting value of type Function1<String, Unit>
2021-03-12 03:57:51,155 [main:302] - generating value of type = Function1<String, Unit> false depth = 0
2021-03-12 03:57:51,156 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 03:57:51,257 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 03:57:51,259 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 03:57:51,575 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 03:57:51,576 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 03:57:51,577 [main:302] - generating value of type = Any false depth = 5
2021-03-12 03:57:51,578 [main:95] - GENERATED = check(false, { "hhckk"})
2021-03-12 03:57:51,578 [main:58] - GENERATED VALUE OF TYPE Function1<String, Unit> = {a: String -> check(false, { "hhckk"})}
2021-03-12 03:57:51,578 [main:61] - GENERATED IS CALL =false
2021-03-12 03:57:51,698 [main:67] - randomType = Sequence<Short>
2021-03-12 03:57:51,700 [main:106] - GETTING Function1<String, Unit> from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:51,765 [main:106] - GETTING Function1<String, Unit> from String
2021-03-12 03:57:51,796 [main:106] - GETTING Function1<String, Unit> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:51,852 [main:106] - GETTING Function1<String, Unit> from String
2021-03-12 03:57:51,853 [main:106] - GETTING Function1<String, Unit> from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:51,855 [main:106] - GETTING Function1<String, Unit> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:51,856 [main:106] - GETTING Function1<String, Unit> from Companion
2021-03-12 03:57:51,865 [main:106] - GETTING Function1<String, Unit> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:51,866 [main:106] - GETTING Function1<String, Unit> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:51,867 [main:106] - GETTING Function1<String, Unit> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:57:51,868 [main:106] - GETTING Function1<String, Unit> from String
2021-03-12 03:57:51,869 [main:106] - GETTING Function1<String, Unit> from String
2021-03-12 03:57:51,869 [main:114] - replacement of {} of type Function1<String, Unit> is {a: String -> check(false, { "hhckk"})}
2021-03-12 03:57:51,965 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 03:57:51,965 [main:66] - Compilation checking started
2021-03-12 03:57:52,464 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(-134024629, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(1042941104) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(false, { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(295951683).toString(-598099311)))
    return (String::plus).name.replace('æ©¾', 'á³', true)
}


2021-03-12 03:57:52,576 [main:141] - TRYING TO REPLACE CONSTANT 0.6944959309243238
2021-03-12 03:57:52,682 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(FLOAT_CONSTANT)
2021-03-12 03:57:52,682 [main:66] - Compilation checking started
2021-03-12 03:57:53,092 [main:141] - TRYING TO REPLACE CONSTANT 1042941104
2021-03-12 03:57:53,197 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 03:57:53,198 [main:66] - Compilation checking started
2021-03-12 03:57:53,663 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(-134024629, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(false, { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(295951683).toString(-598099311)))
    return (String::plus).name.replace('æ©¾', 'á³', true)
}


2021-03-12 03:57:53,663 [main:141] - TRYING TO REPLACE CONSTANT 295951683
2021-03-12 03:57:53,766 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 03:57:53,766 [main:66] - Compilation checking started
2021-03-12 03:57:54,185 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(-134024629, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(false, { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(-598099311)))
    return (String::plus).name.replace('æ©¾', 'á³', true)
}


2021-03-12 03:57:54,185 [main:141] - TRYING TO REPLACE CONSTANT 598099311
2021-03-12 03:57:54,286 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 03:57:54,286 [main:66] - Compilation checking started
2021-03-12 03:57:54,750 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(-134024629, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(false, { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('æ©¾', 'á³', true)
}


2021-03-12 03:57:54,751 [main:141] - TRYING TO REPLACE CONSTANT 134024629
2021-03-12 03:57:54,846 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 03:57:54,846 [main:66] - Compilation checking started
2021-03-12 03:57:55,267 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(false, { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('æ©¾', 'á³', true)
}


2021-03-12 03:57:55,268 [main:141] - TRYING TO REPLACE CONSTANT 'æ©¾'
2021-03-12 03:57:55,387 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CHARACTER_CONSTANT)
2021-03-12 03:57:55,387 [main:66] - Compilation checking started
2021-03-12 03:57:55,812 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(false, { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'á³', true)
}


2021-03-12 03:57:55,812 [main:141] - TRYING TO REPLACE CONSTANT 'á³'
2021-03-12 03:57:55,941 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CHARACTER_CONSTANT)
2021-03-12 03:57:55,942 [main:66] - Compilation checking started
2021-03-12 03:57:56,356 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(false, { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', true)
}


2021-03-12 03:57:56,357 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 03:57:56,471 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BINARY_EXPRESSION)
2021-03-12 03:57:56,471 [main:66] - Compilation checking started
2021-03-12 03:57:56,897 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(false, { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}


2021-03-12 03:57:56,897 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-12 03:57:56,997 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BINARY_EXPRESSION)
2021-03-12 03:57:56,997 [main:66] - Compilation checking started
2021-03-12 03:57:57,426 [main:53] - Result = true
Text:
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}


2021-03-12 03:57:57,427 [main:41] - AFTER TRY 2 res = val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}


2021-03-12 03:57:57,816 [main:43] - GENERATING CALL OF inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}
2021-03-12 03:57:57,817 [main:61] - WITHOUT TYPE PARAMS = inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}
2021-03-12 03:57:58,021 [main:302] - generating value of type = Function0<String> false depth = 1
2021-03-12 03:57:58,022 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:57:58,023 [main:95] - GENERATED = fu0({ "vcwgq"})
2021-03-12 03:57:58,129 [main:43] - GENERATING CALL OF inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}
2021-03-12 03:57:58,130 [main:61] - WITHOUT TYPE PARAMS = inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}
2021-03-12 03:57:58,337 [main:302] - generating value of type = Function1<String, Unit> false depth = 1
2021-03-12 03:57:58,338 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 03:57:58,441 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 03:57:58,443 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 03:57:58,790 [main:302] - generating value of type = Boolean true depth = 5
2021-03-12 03:57:58,792 [main:302] - generating value of type = Function0<Any> false depth = 5
2021-03-12 03:57:58,793 [main:302] - generating value of type = Any false depth = 6
2021-03-12 03:57:58,793 [main:95] - GENERATED = require(false, { "tzgcx"})
2021-03-12 03:57:58,793 [main:302] - generating value of type = Array<String> false depth = 1
2021-03-12 03:57:58,896 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: String): Array<Strg> = TODO()
2021-03-12 03:57:58,898 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: String): Array<Strg> = TODO()
2021-03-12 03:57:59,000 [main:302] - generating value of type = String true depth = 4
2021-03-12 03:57:59,001 [main:95] - GENERATED = arrayOf<String>("vlloj")
2021-03-12 03:57:59,002 [main:95] - GENERATED = arrayOf<String>("vlloj").fu2({a: String -> require(false, { "tzgcx"})})
2021-03-12 03:57:59,100 [main:43] - GENERATING CALL OF fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}
2021-03-12 03:57:59,101 [main:61] - WITHOUT TYPE PARAMS = fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}
2021-03-12 03:57:59,310 [main:302] - generating value of type = Function1<String, Unit> false depth = 1
2021-03-12 03:57:59,311 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 03:57:59,413 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 03:57:59,415 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 03:57:59,730 [main:302] - generating value of type = Boolean true depth = 5
2021-03-12 03:57:59,732 [main:302] - generating value of type = Function0<Any> false depth = 5
2021-03-12 03:57:59,733 [main:302] - generating value of type = Any false depth = 6
2021-03-12 03:57:59,733 [main:95] - GENERATED = require(false, { "dlruy"})
2021-03-12 03:57:59,733 [main:302] - generating value of type = Array<String> false depth = 1
2021-03-12 03:57:59,833 [main:43] - GENERATING CALL OF fun <T> arrayOfNulls(size: kotlin.Int): Array<Strg> = TODO()
2021-03-12 03:57:59,835 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOfNulls(size: kotlin.Int): Array<Strg> = TODO()
2021-03-12 03:58:00,042 [main:302] - generating value of type = Int true depth = 4
2021-03-12 03:58:00,043 [main:95] - GENERATED = arrayOfNulls<String>(-376559766)
2021-03-12 03:58:00,043 [main:95] - GENERATED = arrayOfNulls<String>(-376559766).fu3({a: String -> require(false, { "dlruy"})})
2021-03-12 03:58:00,185 [main:43] - GENERATING CALL OF inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}
2021-03-12 03:58:00,186 [main:61] - WITHOUT TYPE PARAMS = inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}
2021-03-12 03:58:00,421 [main:302] - generating value of type = Function1<String, Unit> false depth = 1
2021-03-12 03:58:00,422 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 03:58:00,523 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 03:58:00,525 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 03:58:00,833 [main:302] - generating value of type = Boolean true depth = 5
2021-03-12 03:58:00,834 [main:302] - generating value of type = Function0<Any> false depth = 5
2021-03-12 03:58:00,835 [main:302] - generating value of type = Any false depth = 6
2021-03-12 03:58:00,836 [main:95] - GENERATED = check(true, { "fwkzq"})
2021-03-12 03:58:00,836 [main:302] - generating value of type = Array<String> false depth = 1
2021-03-12 03:58:00,935 [main:43] - GENERATING CALL OF fun <T> enumValues(): Array<Strg> = TODO()
2021-03-12 03:58:00,937 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValues(): Array<Strg> = TODO()
2021-03-12 03:58:01,035 [main:95] - GENERATED = enumValues<String>()
2021-03-12 03:58:01,035 [main:95] - GENERATED = enumValues<String>().fu4({a: String -> check(true, { "fwkzq"})})
2021-03-12 03:58:01,134 [main:43] - GENERATING CALL OF fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}
2021-03-12 03:58:01,135 [main:61] - WITHOUT TYPE PARAMS = fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}
2021-03-12 03:58:01,232 [main:302] - generating value of type = Array<String> false depth = 1
2021-03-12 03:58:01,331 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Strg> = TODO()
2021-03-12 03:58:01,333 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Strg> = TODO()
2021-03-12 03:58:01,431 [main:95] - GENERATED = emptyArray<String>()
2021-03-12 03:58:01,431 [main:95] - GENERATED = fu5(emptyArray<String>())
2021-03-12 03:58:01,540 [main:43] - Try â2
2021-03-12 03:58:12,105 [main:69] - Trying to insert override fun call(): String {
        prope4.await()
        return when (executionType) {
            Kla1.Kla3 -> fu9()
            Kla1.Kla4 -> fu10()
            Kla1.Kla5 -> fu11()
            Kla1.Kla6 -> fu12()
            Kla1.Kla7 -> fu13()
            Kla1.Kla8 -> fu14()
            Kla1.Kla9 -> fu15()
            else -> "fail"
        }
    }
2021-03-12 03:58:12,315 [main:66] - Compilation checking started
2021-03-12 03:58:13,353 [main:103] - Trying to change 157 nodes
2021-03-12 03:58:13,353 [main:107] - replacing (e, Kla0)
2021-03-12 03:58:13,355 [main:50] - replacing e Kla0
2021-03-12 03:58:13,355 [main:54] - Getting value of type Kla0
2021-03-12 03:58:13,534 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 03:58:13,537 [main:112] - generating klass Kla0 text = class Kla0(message: String): Exception(message)
2021-03-12 03:58:13,683 [main:194] - Type params = []
2021-03-12 03:58:13,839 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:58:13,843 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0("aoldb")
2021-03-12 03:58:13,843 [main:61] - GENERATED IS CALL =true
2021-03-12 03:58:13,853 [main:67] - randomType = Kla0
2021-03-12 03:58:14,004 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 03:58:14,007 [main:112] - generating klass Kla0 text = class Kla0(message: String): Exception(message)
2021-03-12 03:58:14,151 [main:194] - Type params = []
2021-03-12 03:58:14,305 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:58:14,339 [main:106] - GETTING Kla0 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:14,399 [main:106] - GETTING Kla0 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:14,400 [main:106] - GETTING Kla0 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:14,401 [main:106] - GETTING Kla0 from Short
2021-03-12 03:58:14,462 [main:106] - GETTING Kla0 from ArrayList<Short>
2021-03-12 03:58:14,633 [main:106] - GETTING Kla0 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:14,633 [main:106] - GETTING Kla0 from String
2021-03-12 03:58:14,654 [main:106] - GETTING Kla0 from Companion
2021-03-12 03:58:14,664 [main:106] - GETTING Kla0 from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:14,715 [main:106] - GETTING Kla0 from String
2021-03-12 03:58:14,716 [main:106] - GETTING Kla0 from String
2021-03-12 03:58:14,716 [main:106] - GETTING Kla0 from String?
2021-03-12 03:58:14,751 [main:106] - GETTING Kla0 from String
2021-03-12 03:58:14,751 [main:106] - GETTING Kla0 from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:14,752 [main:106] - GETTING Kla0 from String
2021-03-12 03:58:14,753 [main:106] - GETTING Kla0 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:14,754 [main:106] - GETTING Kla0 from String
2021-03-12 03:58:14,754 [main:106] - GETTING Kla0 from ArrayList<Short>
2021-03-12 03:58:14,754 [main:114] - replacement of e of type Kla0 is Kla0("aoldb")
2021-03-12 03:58:14,899 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 03:58:14,899 [main:66] - Compilation checking started
2021-03-12 03:58:15,626 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = 0;

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        prope4.await()
        return when (executionType) {
            Kla1.Kla3 -> fu9()
            Kla1.Kla4 -> fu10()
            Kla1.Kla5 -> fu11()
            Kla1.Kla6 -> fu12()
            Kla1.Kla7 -> fu13()
            Kla1.Kla8 -> fu14()
            Kla1.Kla9 -> fu15()
            else -> "fail"
        }
    }

    private fun fu8() {
        prope6.add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        synchronized(prope5) {
            fu8()
        }
        return executionType.toString()
    }


    fun fu10(): String {
        synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return e.message!!
            }
        }
        return "fail"
    }

    fun fu12(): String {
        synchronized(prope5) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return Kla0("aoldb").message!!
            } finally {
                "123"
            }
        }
        return "fail"
    }

    fun fu14(): String {
        synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return "fail1"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu15(): String {
        synchronized(prope5) {
            try {
                try {
                    fu8()
                    throw Kla0(executionType.name)
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return executionType.name
                }
            } finally {
                val prope11 = 1 + 1
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in 1..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (prope6[i - 1] != i)
                return "fail $i != ${prope6[i]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != type.name) return "failed result ${f.get()} != ${type.name}"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    return fu6 (type) { Kla2(it.toString(), type) }
}

fun box962(): String {
    try {
        for (type in Kla1.values()) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:58:15,628 [main:107] - replacing (fu10(), String)
2021-03-12 03:58:15,629 [main:50] - replacing fu10() String
2021-03-12 03:58:15,629 [main:54] - Getting value of type String
2021-03-12 03:58:15,792 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:58:15,795 [main:58] - GENERATED VALUE OF TYPE String = "srbzn"
2021-03-12 03:58:15,795 [main:61] - GENERATED IS CALL =false
2021-03-12 03:58:16,128 [main:67] - randomType = UByte?
2021-03-12 03:58:16,276 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 03:58:16,323 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@52916f75]
2021-03-12 03:58:16,476 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 03:58:16,478 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@196815c]
2021-03-12 03:58:16,621 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:58:16,623 [main:78] - Generated call from random type = (89.toUByte())?.compareTo(27.toUByte()).toString(776369080)
2021-03-12 03:58:16,623 [main:114] - replacement of fu10() of type String is (89.toUByte())?.compareTo(27.toUByte()).toString(776369080)
2021-03-12 03:58:16,770 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:58:16,770 [main:66] - Compilation checking started
2021-03-12 03:58:17,570 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = 0;

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return when (executionType) {
            Kla1.Kla3 -> fu9()
            Kla1.Kla4 -> (89.toUByte())?.compareTo(27.toUByte()).toString(776369080)
            Kla1.Kla5 -> fu11()
            Kla1.Kla6 -> fu12()
            Kla1.Kla7 -> fu13()
            Kla1.Kla8 -> fu14()
            Kla1.Kla9 -> fu15()
            else -> "fail"
        }
    }

    private fun fu8() {
        prope6.add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        synchronized(prope5) {
            fu8()
        }
        return executionType.toString()
    }


    fun fu10(): String {
        synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return e.message!!
            }
        }
        return "fail"
    }

    fun fu12(): String {
        synchronized(prope5) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return Kla0("aoldb").message!!
            } finally {
                "123"
            }
        }
        return "fail"
    }

    fun fu14(): String {
        synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return "fail1"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu15(): String {
        synchronized(prope5) {
            try {
                try {
                    fu8()
                    throw Kla0(executionType.name)
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return executionType.name
                }
            } finally {
                val prope11 = 1 + 1
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in 1..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (prope6[i - 1] != i)
                return "fail $i != ${prope6[i]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != type.name) return "failed result ${f.get()} != ${type.name}"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    return fu6 (type) { Kla2(it.toString(), type) }
}

fun box962(): String {
    try {
        for (type in Kla1.values()) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:58:17,572 [main:107] - replacing (prope5, Any)
2021-03-12 03:58:17,573 [main:50] - replacing prope5 Any
2021-03-12 03:58:17,573 [main:54] - Getting value of type Any
2021-03-12 03:58:17,725 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:58:17,725 [main:58] - GENERATED VALUE OF TYPE Any = "vdtau"
2021-03-12 03:58:17,725 [main:61] - GENERATED IS CALL =false
2021-03-12 03:58:18,072 [main:67] - randomType = ArrayList<UShort>
2021-03-12 03:58:18,232 [main:302] - generating value of type = ArrayList<UShort> false depth = 0
2021-03-12 03:58:18,396 [main:43] - GENERATING CALL OF fun <E> ArrayList(elements: kotlin.collections.Collection<UShort>): ArrayList<UShort> = TODO()
2021-03-12 03:58:18,400 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(elements: kotlin.collections.Collection<UShort>): ArrayList<UShort> = TODO()
2021-03-12 03:58:18,734 [main:302] - generating value of type = Collection<UShort> false depth = 3
2021-03-12 03:58:18,883 [main:43] - GENERATING CALL OF fun <E> buildList(builderAction: kotlin.collections.MutableList<UShort>.()->kotlin.Unit): Collection<UShort> = TODO()
2021-03-12 03:58:18,887 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildList(builderAction: kotlin.collections.MutableList<UShort>.()->kotlin.Unit): Collection<UShort> = TODO()
2021-03-12 03:58:19,285 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableList<UShort>, Unit> false depth = 6
2021-03-12 03:58:19,288 [main:302] - generating value of type = Unit false depth = 7
2021-03-12 03:58:19,294 [main:95] - GENERATED = buildList<UShort>({ println()})
2021-03-12 03:58:19,295 [main:95] - GENERATED = ArrayList<UShort>(buildList<UShort>({ println()}))
2021-03-12 03:58:19,474 [main:149] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@7bcb4e40]
2021-03-12 03:58:19,474 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Any? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@7b13c013]
2021-03-12 03:58:19,619 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:58:19,622 [main:78] - Generated call from random type = (ArrayList<UShort>(buildList<UShort>({ println()}))).toArray().get(-1669962536)!!
2021-03-12 03:58:19,627 [main:106] - GETTING Any from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:19,680 [main:106] - GETTING Any from String
2021-03-12 03:58:19,708 [main:114] - replacement of prope5 of type Any is (String::plus).name
2021-03-12 03:58:19,850 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:58:19,850 [main:66] - Compilation checking started
2021-03-12 03:58:20,474 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = 0;

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return when (executionType) {
            Kla1.Kla3 -> fu9()
            Kla1.Kla4 -> (89.toUByte())?.compareTo(27.toUByte()).toString(776369080)
            Kla1.Kla5 -> fu11()
            Kla1.Kla6 -> fu12()
            Kla1.Kla7 -> fu13()
            Kla1.Kla8 -> fu14()
            Kla1.Kla9 -> fu15()
            else -> "fail"
        }
    }

    private fun fu8() {
        prope6.add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        synchronized(prope5) {
            fu8()
        }
        return executionType.toString()
    }


    fun fu10(): String {
        synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return e.message!!
            }
        }
        return "fail"
    }

    fun fu12(): String {
        synchronized(prope5) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return Kla0("aoldb").message!!
            } finally {
                "123"
            }
        }
        return "fail"
    }

    fun fu14(): String {
        synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return "fail1"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0(executionType.name)
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return executionType.name
                }
            } finally {
                val prope11 = 1 + 1
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in 1..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (prope6[i - 1] != i)
                return "fail $i != ${prope6[i]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != type.name) return "failed result ${f.get()} != ${type.name}"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    return fu6 (type) { Kla2(it.toString(), type) }
}

fun box962(): String {
    try {
        for (type in Kla1.values()) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:58:20,476 [main:107] - replacing (executionType.toString(), String)
2021-03-12 03:58:20,477 [main:50] - replacing executionType.toString() String
2021-03-12 03:58:20,477 [main:54] - Getting value of type String
2021-03-12 03:58:20,631 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:58:20,635 [main:58] - GENERATED VALUE OF TYPE String = "ndkod"
2021-03-12 03:58:20,635 [main:61] - GENERATED IS CALL =false
2021-03-12 03:58:21,007 [main:67] - randomType = UShort?
2021-03-12 03:58:21,178 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 03:58:21,213 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@623d70f2]
2021-03-12 03:58:21,214 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f6249fa]
2021-03-12 03:58:21,358 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:58:21,361 [main:78] - Generated call from random type = (22510.toUShort())?.toUByte().toString(-563815878)
2021-03-12 03:58:21,362 [main:106] - GETTING String from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:21,414 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@fae7e73], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@678d6ca3]]
2021-03-12 03:58:21,414 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@678d6ca3]
2021-03-12 03:58:21,558 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:58:21,561 [main:117] - GENERATED CALL = ((String::plus)).name.replaceAfter('ç', var prope0 = (""::plus).invoke("ssdtf").trimStart()
2021-03-12 03:58:21,561 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@fae7e73], public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dcba3be]]
2021-03-12 03:58:21,561 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dcba3be]
2021-03-12 03:58:21,702 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:58:21,849 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:58:21,852 [main:117] - GENERATED CALL = ((String::plus)).name.replaceIndentByMargin("ygerw", "qmnrt")
2021-03-12 03:58:21,852 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@fae7e73], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eff31b5]]
2021-03-12 03:58:21,852 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eff31b5]
2021-03-12 03:58:21,998 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:58:22,001 [main:117] - GENERATED CALL = ((String::plus)).name.substringBefore('ê', (String::plus).name)
2021-03-12 03:58:22,001 [main:113] - Case = [public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@39a8d94a], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ab64eb1]]
2021-03-12 03:58:22,001 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@39a8d94a]
2021-03-12 03:58:22,148 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:58:22,299 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:58:22,299 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ab64eb1]
2021-03-12 03:58:22,453 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:58:22,459 [main:117] - GENERATED CALL = ((String::plus)).invoke("kaezt", "sqsct").removePrefix("jnffw")
2021-03-12 03:58:22,459 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@fae7e73], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6358fd25]]
2021-03-12 03:58:22,459 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6358fd25]
2021-03-12 03:58:22,604 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:58:22,795 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:58:22,967 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:58:22,970 [main:117] - GENERATED CALL = ((String::plus)).name.replace('ê«', 'ê', true)
2021-03-12 03:58:22,970 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@fae7e73], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77dbd350]]
2021-03-12 03:58:22,970 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77dbd350]
2021-03-12 03:58:23,128 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:58:23,131 [main:117] - GENERATED CALL = ((String::plus)).name.prependIndent("dubce")
2021-03-12 03:58:23,131 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@fae7e73], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e41a4e7]]
2021-03-12 03:58:23,132 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e41a4e7]
2021-03-12 03:58:23,277 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 03:58:23,280 [main:302] - generating value of type = Char true depth = 1
2021-03-12 03:58:23,282 [main:117] - GENERATED CALL = ((String::plus)).name.replaceFirstChar({a: Char -> 'î'})
2021-03-12 03:58:23,283 [main:113] - Case = [public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@39a8d94a], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@678d6ca3]]
2021-03-12 03:58:23,283 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@39a8d94a]
2021-03-12 03:58:23,424 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:58:23,568 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:58:23,568 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@678d6ca3]
2021-03-12 03:58:23,709 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:58:23,859 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:58:23,862 [main:117] - GENERATED CALL = ((String::plus)).invoke("urwgg", "daotj").replaceAfter('ã¯', "xmicc", val MAX_LONG =
2021-03-12 03:58:24,023 [main:113] - Case = [public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@39a8d94a], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c88e713]]
2021-03-12 03:58:24,023 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@39a8d94a]
2021-03-12 03:58:24,165 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:58:24,337 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:58:24,337 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c88e713]
2021-03-12 03:58:24,337 [main:117] - GENERATED CALL = ((String::plus)).invoke("irnwr", "xawqs").trimEnd()
2021-03-12 03:58:24,337 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@fae7e73]]
2021-03-12 03:58:24,338 [main:117] - GENERATED CALL = ((String::plus)).name
2021-03-12 03:58:24,338 [main:114] - replacement of executionType.toString() of type String is ((String::plus)).invoke("urwgg", "daotj").replaceAfter('ã¯', "xmicc", val MAX_LONG =
2021-03-12 03:58:24,505 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 03:58:24,506 [main:66] - Compilation checking started
2021-03-12 03:58:24,512 [main:71] - Wrong syntax or breaks conditions
2021-03-12 03:58:24,512 [main:49] - Result = false
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = 0;

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return when (executionType) {
            Kla1.Kla3 -> fu9()
            Kla1.Kla4 -> (89.toUByte())?.compareTo(27.toUByte()).toString(776369080)
            Kla1.Kla5 -> fu11()
            Kla1.Kla6 -> fu12()
            Kla1.Kla7 -> fu13()
            Kla1.Kla8 -> fu14()
            Kla1.Kla9 -> fu15()
            else -> "fail"
        }
    }

    private fun fu8() {
        prope6.add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return ((String::plus)).invoke("urwgg", "daotj").replaceAfter('ã¯', "xmicc", val MAX_LONG =
    }


    fun fu10(): String {
        synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return e.message!!
            }
        }
        return "fail"
    }

    fun fu12(): String {
        synchronized(prope5) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return Kla0("aoldb").message!!
            } finally {
                "123"
            }
        }
        return "fail"
    }

    fun fu14(): String {
        synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return "fail1"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0(executionType.name)
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return executionType.name
                }
            } finally {
                val prope11 = 1 + 1
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in 1..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (prope6[i - 1] != i)
                return "fail $i != ${prope6[i]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != type.name) return "failed result ${f.get()} != ${type.name}"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    return fu6 (type) { Kla2(it.toString(), type) }
}

fun box962(): String {
    try {
        for (type in Kla1.values()) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:58:24,514 [main:107] - replacing (i, Int)
2021-03-12 03:58:24,516 [main:50] - replacing i Int
2021-03-12 03:58:24,516 [main:54] - Getting value of type Int
2021-03-12 03:58:24,664 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:58:24,667 [main:58] - GENERATED VALUE OF TYPE Int = -1271101393
2021-03-12 03:58:24,667 [main:61] - GENERATED IS CALL =false
2021-03-12 03:58:24,677 [main:67] - randomType = Kla1
2021-03-12 03:58:24,820 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 03:58:24,822 [main:112] - generating klass Kla1 text = enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}
2021-03-12 03:58:24,847 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@40beeda]
2021-03-12 03:58:24,847 [main:78] - Generated call from random type = (Kla1.Kla8).ordinal.toInt()
2021-03-12 03:58:24,848 [main:106] - GETTING Int from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:24,892 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@fae7e73], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15eab608]]
2021-03-12 03:58:24,892 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15eab608]
2021-03-12 03:58:24,893 [main:117] - GENERATED CALL = (String::plus).name.toInt()
2021-03-12 03:58:24,893 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@fae7e73], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2e465cf2]]
2021-03-12 03:58:24,893 [main:117] - GENERATED CALL = (String::plus).name.length
2021-03-12 03:58:24,893 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@2f2f82bf], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@638b60e5]]
2021-03-12 03:58:24,893 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@2f2f82bf]
2021-03-12 03:58:25,033 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:58:25,034 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@638b60e5]
2021-03-12 03:58:25,175 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:58:25,177 [main:117] - GENERATED CALL = (String::plus).equals("sqavy").compareTo(true)
2021-03-12 03:58:25,177 [main:113] - Case = [public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@65f48d96], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2e465cf2]]
2021-03-12 03:58:25,178 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@65f48d96]
2021-03-12 03:58:25,320 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:58:25,320 [main:117] - GENERATED CALL = (String::plus).invoke(var prope0 = (""::plus).invoke("ssdtf").trimStart().length
2021-03-12 03:58:25,321 [main:113] - Case = [public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@65f48d96], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17b2dc31]]
2021-03-12 03:58:25,321 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@65f48d96]
2021-03-12 03:58:25,465 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:58:25,465 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17b2dc31]
2021-03-12 03:58:25,616 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:58:25,619 [main:117] - GENERATED CALL = (String::plus).invoke(val PREFIX =.compareTo(val MAX_LONG =
2021-03-12 03:58:25,619 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@fae7e73], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17b2dc31]]
2021-03-12 03:58:25,620 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17b2dc31]
2021-03-12 03:58:25,800 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:58:25,803 [main:117] - GENERATED CALL = (String::plus).name.compareTo(val PREFIX =
2021-03-12 03:58:25,803 [main:113] - Case = [public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@65f48d96], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15eab608]]
2021-03-12 03:58:25,803 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@65f48d96]
2021-03-12 03:58:25,980 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:58:25,980 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15eab608]
2021-03-12 03:58:25,980 [main:117] - GENERATED CALL = (String::plus).invoke(PREFIX, "hylwd").toInt()
2021-03-12 03:58:25,980 [main:114] - replacement of i of type Int is -1271101393
2021-03-12 03:58:26,133 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 03:58:26,133 [main:66] - Compilation checking started
2021-03-12 03:58:26,797 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = 0;

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return when (executionType) {
            Kla1.Kla3 -> fu9()
            Kla1.Kla4 -> (89.toUByte())?.compareTo(27.toUByte()).toString(776369080)
            Kla1.Kla5 -> fu11()
            Kla1.Kla6 -> fu12()
            Kla1.Kla7 -> fu13()
            Kla1.Kla8 -> fu14()
            Kla1.Kla9 -> fu15()
            else -> "fail"
        }
    }

    private fun fu8() {
        prope6.add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return executionType.toString()
    }


    fun fu10(): String {
        synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return e.message!!
            }
        }
        return "fail"
    }

    fun fu12(): String {
        synchronized(prope5) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return Kla0("aoldb").message!!
            } finally {
                "123"
            }
        }
        return "fail"
    }

    fun fu14(): String {
        synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return "fail1"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0(executionType.name)
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return executionType.name
                }
            } finally {
                val prope11 = 1 + 1
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in 1..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (prope6[i - 1] != i)
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != type.name) return "failed result ${f.get()} != ${type.name}"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    return fu6 (type) { Kla2(it.toString(), type) }
}

fun box962(): String {
    try {
        for (type in Kla1.values()) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:58:26,800 [main:107] - replacing (values(), Array<Kla1>)
2021-03-12 03:58:26,802 [main:50] - replacing values() Array<Kla1>
2021-03-12 03:58:26,802 [main:54] - Getting value of type Array<Kla1>
2021-03-12 03:58:26,955 [main:302] - generating value of type = Array<Kla1> false depth = 0
2021-03-12 03:58:27,104 [main:43] - GENERATING CALL OF fun <T> enumValues(): Array<Kla1> = TODO()
2021-03-12 03:58:27,108 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValues(): Array<Kla1> = TODO()
2021-03-12 03:58:27,264 [main:95] - GENERATED = enumValues<Kla1>()
2021-03-12 03:58:27,264 [main:58] - GENERATED VALUE OF TYPE Array<Kla1> = enumValues<Kla1>()
2021-03-12 03:58:27,264 [main:61] - GENERATED IS CALL =true
2021-03-12 03:58:27,447 [main:67] - randomType = Kla2?
2021-03-12 03:58:27,605 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 03:58:27,608 [main:112] - generating klass Kla2 text = class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return when (executionType) {
            Kla1.Kla3 -> fu9()
            Kla1.Kla4 -> (89.toUByte())?.compareTo(27.toUByte()).toString(776369080)
            Kla1.Kla5 -> fu11()
            Kla1.Kla6 -> fu12()
            Kla1.Kla7 -> fu13()
            Kla1.Kla8 -> fu14()
            Kla1.Kla9 -> fu15()
            else -> "fail"
        }
    }

    private fun fu8() {
        prope6.add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return executionType.toString()
    }


    fun fu10(): String {
        synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return e.message!!
            }
        }
        return "fail"
    }

    fun fu12(): String {
        synchronized(prope5) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return Kla0("aoldb").message!!
            } finally {
                "123"
            }
        }
        return "fail"
    }

    fun fu14(): String {
        synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return "fail1"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0(executionType.name)
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return executionType.name
                }
            } finally {
                val prope11 = 1 + 1
            }
        }
        return "fail"
    }
}
2021-03-12 03:58:27,759 [main:194] - Type params = []
2021-03-12 03:58:27,937 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:58:27,940 [main:302] - generating value of type = Kla1 false depth = 2
2021-03-12 03:58:27,943 [main:112] - generating klass Kla1 text = enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}
2021-03-12 03:58:27,953 [main:106] - GETTING Array<Kla1> from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:27,998 [main:106] - GETTING Array<Kla1> from ArrayList<Short>
2021-03-12 03:58:28,120 [main:106] - GETTING Array<Kla1> from String
2021-03-12 03:58:28,145 [main:106] - GETTING Array<Kla1> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:28,195 [main:106] - GETTING Array<Kla1> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:28,197 [main:106] - GETTING Array<Kla1> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:28,198 [main:106] - GETTING Array<Kla1> from String?
2021-03-12 03:58:28,231 [main:106] - GETTING Array<Kla1> from String
2021-03-12 03:58:28,232 [main:106] - GETTING Array<Kla1> from String
2021-03-12 03:58:28,233 [main:106] - GETTING Array<Kla1> from String
2021-03-12 03:58:28,234 [main:106] - GETTING Array<Kla1> from Companion
2021-03-12 03:58:28,245 [main:106] - GETTING Array<Kla1> from ArrayList<Short>
2021-03-12 03:58:28,246 [main:106] - GETTING Array<Kla1> from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:28,247 [main:106] - GETTING Array<Kla1> from String
2021-03-12 03:58:28,248 [main:106] - GETTING Array<Kla1> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:28,249 [main:106] - GETTING Array<Kla1> from String
2021-03-12 03:58:28,251 [main:106] - GETTING Array<Kla1> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:28,252 [main:106] - GETTING Array<Kla1> from Short
2021-03-12 03:58:28,300 [main:114] - replacement of values() of type Array<Kla1> is enumValues<Kla1>()
2021-03-12 03:58:28,451 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 03:58:28,452 [main:66] - Compilation checking started
2021-03-12 03:58:28,846 [main:49] - Result = false
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = 0;

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return when (executionType) {
            Kla1.Kla3 -> fu9()
            Kla1.Kla4 -> (89.toUByte())?.compareTo(27.toUByte()).toString(776369080)
            Kla1.Kla5 -> fu11()
            Kla1.Kla6 -> fu12()
            Kla1.Kla7 -> fu13()
            Kla1.Kla8 -> fu14()
            Kla1.Kla9 -> fu15()
            else -> "fail"
        }
    }

    private fun fu8() {
        prope6.add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return executionType.toString()
    }


    fun fu10(): String {
        synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return e.message!!
            }
        }
        return "fail"
    }

    fun fu12(): String {
        synchronized(prope5) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return Kla0("aoldb").message!!
            } finally {
                "123"
            }
        }
        return "fail"
    }

    fun fu14(): String {
        synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return "fail1"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0(executionType.name)
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return executionType.name
                }
            } finally {
                val prope11 = 1 + 1
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in 1..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (prope6[i - 1] != i)
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != type.name) return "failed result ${f.get()} != ${type.name}"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    return fu6 (type) { Kla2(it.toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in Kla1.enumValues<Kla1>()) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:58:28,848 [main:107] - replacing (executionType, Kla1)
2021-03-12 03:58:28,849 [main:50] - replacing executionType Kla1
2021-03-12 03:58:28,849 [main:54] - Getting value of type Kla1
2021-03-12 03:58:28,998 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 03:58:29,001 [main:112] - generating klass Kla1 text = enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}
2021-03-12 03:58:29,001 [main:58] - GENERATED VALUE OF TYPE Kla1 = Kla1.Kla6
2021-03-12 03:58:29,001 [main:61] - GENERATED IS CALL =false
2021-03-12 03:58:29,894 [main:67] - randomType = ArrayDeque<Pair<ArrayList<Char>, Kla2?>>?
2021-03-12 03:58:30,038 [main:302] - generating value of type = ArrayDeque<Pair<ArrayList<Char>, Kla2?>> false depth = 0
2021-03-12 03:58:30,193 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Pair<ArrayList<Char>, Kla2?>> = TODO()
2021-03-12 03:58:30,197 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Pair<ArrayList<Char>, Kla2?>> = TODO()
2021-03-12 03:58:30,509 [main:302] - generating value of type = Int true depth = 3
2021-03-12 03:58:30,512 [main:95] - GENERATED = ArrayDeque<Pair<ArrayList<Char>, Kla2?>>(986338913)
2021-03-12 03:58:30,723 [main:106] - GETTING Kla1 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:30,766 [main:106] - GETTING Kla1 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:30,767 [main:106] - GETTING Kla1 from Companion
2021-03-12 03:58:30,773 [main:106] - GETTING Kla1 from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:30,816 [main:106] - GETTING Kla1 from String
2021-03-12 03:58:30,833 [main:106] - GETTING Kla1 from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:30,834 [main:106] - GETTING Kla1 from String
2021-03-12 03:58:30,835 [main:106] - GETTING Kla1 from String
2021-03-12 03:58:30,835 [main:106] - GETTING Kla1 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:30,836 [main:106] - GETTING Kla1 from ArrayList<Short>
2021-03-12 03:58:30,948 [main:106] - GETTING Kla1 from String
2021-03-12 03:58:30,948 [main:106] - GETTING Kla1 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:30,949 [main:106] - GETTING Kla1 from String
2021-03-12 03:58:30,950 [main:106] - GETTING Kla1 from String
2021-03-12 03:58:30,950 [main:106] - GETTING Kla1 from String?
2021-03-12 03:58:30,973 [main:106] - GETTING Kla1 from Short
2021-03-12 03:58:31,011 [main:106] - GETTING Kla1 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:31,012 [main:106] - GETTING Kla1 from ArrayList<Short>
2021-03-12 03:58:31,012 [main:114] - replacement of executionType of type Kla1 is Kla1.Kla6
2021-03-12 03:58:31,155 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:58:31,156 [main:66] - Compilation checking started
2021-03-12 03:58:31,855 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = 0;

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return when (executionType) {
            Kla1.Kla3 -> fu9()
            Kla1.Kla4 -> (89.toUByte())?.compareTo(27.toUByte()).toString(776369080)
            Kla1.Kla5 -> fu11()
            Kla1.Kla6 -> fu12()
            Kla1.Kla7 -> fu13()
            Kla1.Kla8 -> fu14()
            Kla1.Kla9 -> fu15()
            else -> "fail"
        }
    }

    private fun fu8() {
        prope6.add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return executionType.toString()
    }


    fun fu10(): String {
        synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return e.message!!
            }
        }
        return "fail"
    }

    fun fu12(): String {
        synchronized(prope5) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return Kla0("aoldb").message!!
            } finally {
                "123"
            }
        }
        return "fail"
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return "fail1"
            } finally {
                return Kla1.Kla6.name
            }
        }
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0(executionType.name)
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return executionType.name
                }
            } finally {
                val prope11 = 1 + 1
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in 1..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (prope6[i - 1] != i)
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != type.name) return "failed result ${f.get()} != ${type.name}"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    return fu6 (type) { Kla2(it.toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in Kla1.values()) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:58:31,858 [main:107] - replacing ({
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return Kla0("aoldb").message!!
            } finally {
                "123"
            }
        }, Function0<Nothing>)
2021-03-12 03:58:31,858 [main:50] - replacing {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return Kla0("aoldb").message!!
            } finally {
                "123"
            }
        } Function0<Nothing>
2021-03-12 03:58:31,858 [main:54] - Getting value of type Function0<Nothing>
2021-03-12 03:58:32,011 [main:302] - generating value of type = Function0<Nothing> false depth = 0
2021-03-12 03:58:32,014 [main:302] - generating value of type = Nothing false depth = 1
2021-03-12 03:58:32,166 [main:43] - GENERATING CALL OF fun TODO(reason: kotlin.String): Nothg = TODO()
2021-03-12 03:58:32,170 [main:61] - WITHOUT TYPE PARAMS = fun TODO(reason: kotlin.String): Nothg = TODO()
2021-03-12 03:58:32,490 [main:302] - generating value of type = String true depth = 4
2021-03-12 03:58:32,493 [main:95] - GENERATED = TODO("ctelz")
2021-03-12 03:58:32,493 [main:58] - GENERATED VALUE OF TYPE Function0<Nothing> = { TODO("ctelz")}
2021-03-12 03:58:32,493 [main:61] - GENERATED IS CALL =false
2021-03-12 03:58:32,999 [main:67] - randomType = Collection<Char?>?
2021-03-12 03:58:33,000 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 03:58:33,023 [main:106] - GETTING Function0<Nothing> from String?
2021-03-12 03:58:33,052 [main:106] - GETTING Function0<Nothing> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:33,105 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 03:58:33,106 [main:106] - GETTING Function0<Nothing> from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:33,155 [main:106] - GETTING Function0<Nothing> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:33,156 [main:106] - GETTING Function0<Nothing> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:33,157 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 03:58:33,158 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 03:58:33,159 [main:106] - GETTING Function0<Nothing> from ArrayList<Short>
2021-03-12 03:58:33,272 [main:106] - GETTING Function0<Nothing> from Short
2021-03-12 03:58:33,303 [main:106] - GETTING Function0<Nothing> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:33,304 [main:106] - GETTING Function0<Nothing> from Companion
2021-03-12 03:58:33,310 [main:106] - GETTING Function0<Nothing> from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:33,311 [main:106] - GETTING Function0<Nothing> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:33,312 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 03:58:33,314 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 03:58:33,315 [main:106] - GETTING Function0<Nothing> from ArrayList<Short>
2021-03-12 03:58:33,315 [main:114] - replacement of {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return Kla0("aoldb").message!!
            } finally {
                "123"
            }
        } of type Function0<Nothing> is { TODO("ctelz")}
2021-03-12 03:58:33,456 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 03:58:33,456 [main:66] - Compilation checking started
2021-03-12 03:58:34,128 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = 0;

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return when (executionType) {
            Kla1.Kla3 -> fu9()
            Kla1.Kla4 -> (89.toUByte())?.compareTo(27.toUByte()).toString(776369080)
            Kla1.Kla5 -> fu11()
            Kla1.Kla6 -> fu12()
            Kla1.Kla7 -> fu13()
            Kla1.Kla8 -> fu14()
            Kla1.Kla9 -> fu15()
            else -> "fail"
        }
    }

    private fun fu8() {
        prope6.add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return executionType.toString()
    }


    fun fu10(): String {
        synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return e.message!!
            }
        }
        return "fail"
    }

    fun fu12(): String {
        synchronized(prope5) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return "fail"
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return "fail1"
            } finally {
                return Kla1.Kla6.name
            }
        }
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0(executionType.name)
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return executionType.name
                }
            } finally {
                val prope11 = 1 + 1
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in 1..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (prope6[i - 1] != i)
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != type.name) return "failed result ${f.get()} != ${type.name}"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    return fu6 (type) { Kla2(it.toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in Kla1.values()) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:58:34,131 [main:107] - replacing (1, Int)
2021-03-12 03:58:34,131 [main:50] - replacing 1 Int
2021-03-12 03:58:34,131 [main:54] - Getting value of type Int
2021-03-12 03:58:34,275 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:58:34,277 [main:58] - GENERATED VALUE OF TYPE Int = -1346111238
2021-03-12 03:58:34,277 [main:61] - GENERATED IS CALL =false
2021-03-12 03:58:34,441 [main:67] - randomType = List<String>
2021-03-12 03:58:34,442 [main:106] - GETTING Int from ArrayList<Short>
2021-03-12 03:58:34,554 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.MutableList[DeserializedPropertyDescriptor@2e13c44], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2911f7a]]
2021-03-12 03:58:34,554 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2911f7a]
2021-03-12 03:58:34,697 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:58:34,700 [main:117] - GENERATED CALL = (arrayListOf<Short>()).size.shl(-1949698322)
2021-03-12 03:58:34,700 [main:113] - Case = [protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@4482249b], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2911f7a]]
2021-03-12 03:58:34,700 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2911f7a]
2021-03-12 03:58:34,840 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:58:34,843 [main:117] - GENERATED CALL = (arrayListOf<Short>()).modCount.shl(-1344187954)
2021-03-12 03:58:34,843 [main:113] - Case = [protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@4482249b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@461cb79e]]
2021-03-12 03:58:34,843 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@461cb79e]
2021-03-12 03:58:34,843 [main:117] - GENERATED CALL = (arrayListOf<Short>()).modCount.countTrailingZeroBits()
2021-03-12 03:58:34,843 [main:113] - Case = [protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@4482249b], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@c3ff606]]
2021-03-12 03:58:34,843 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@c3ff606]
2021-03-12 03:58:34,843 [main:117] - GENERATED CALL = (arrayListOf<Short>()).modCount.unaryMinus()
2021-03-12 03:58:34,843 [main:113] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@1eb5647], @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.sumOf(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@30398b4d]]
2021-03-12 03:58:34,843 [main:149] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@1eb5647]
2021-03-12 03:58:34,844 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.sumOf(selector: (T) -> kotlin.Int): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@30398b4d]
2021-03-12 03:58:34,986 [main:302] - generating value of type = Function1<T, Int> false depth = 0
2021-03-12 03:58:34,988 [main:302] - generating value of type = Int true depth = 1
2021-03-12 03:58:34,991 [main:117] - GENERATED CALL = (arrayListOf<Short>()).toArray().sumOf({a: T -> -1953870665})
2021-03-12 03:58:34,991 [main:113] - Case = [public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.Short> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@4e3d629e], public abstract fun lastIndexOf(element: kotlin.Short): kotlin.Int defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@3470944a]]
2021-03-12 03:58:34,991 [main:149] - GENERATING call of type public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.Short> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@4e3d629e]
2021-03-12 03:58:35,132 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:58:35,281 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:58:35,284 [main:149] - GENERATING call of type public abstract fun lastIndexOf(element: kotlin.Short): kotlin.Int defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@3470944a]
2021-03-12 03:58:35,427 [main:302] - generating value of type = Short true depth = 0
2021-03-12 03:58:35,430 [main:117] - GENERATED CALL = (arrayListOf<Short>()).subList(569713387, -1182445484).lastIndexOf(2207)
2021-03-12 03:58:35,430 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.MutableList[DeserializedPropertyDescriptor@2e13c44], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20e501fb]]
2021-03-12 03:58:35,430 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20e501fb]
2021-03-12 03:58:35,430 [main:117] - GENERATED CALL = (arrayListOf<Short>()).size.unaryPlus()
2021-03-12 03:58:35,430 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Short defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@5f0abf2e], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@63d02159]]
2021-03-12 03:58:35,430 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Short defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@5f0abf2e]
2021-03-12 03:58:35,592 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:58:35,595 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@63d02159]
2021-03-12 03:58:35,595 [main:117] - GENERATED CALL = (arrayListOf<Short>()).get(981090928).unaryMinus()
2021-03-12 03:58:35,595 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Short defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@5f0abf2e], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@261b119f]]
2021-03-12 03:58:35,595 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Short defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@5f0abf2e]
2021-03-12 03:58:35,736 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:58:35,739 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@261b119f]
2021-03-12 03:58:35,881 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:58:35,884 [main:117] - GENERATED CALL = (arrayListOf<Short>()).get(-18479694).times(68)
2021-03-12 03:58:35,884 [main:113] - Case = [protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@1eb5647], @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepHashCode(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@795c28e8]]
2021-03-12 03:58:35,884 [main:149] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@1eb5647]
2021-03-12 03:58:35,884 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepHashCode(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@795c28e8]
2021-03-12 03:58:35,884 [main:117] - GENERATED CALL = (arrayListOf<Short>()).toArray().contentDeepHashCode()
2021-03-12 03:58:35,884 [main:114] - replacement of 1 of type Int is (arrayListOf<Short>()).size.shl(-1949698322)
2021-03-12 03:58:36,022 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:58:36,022 [main:66] - Compilation checking started
2021-03-12 03:58:36,704 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = 0;

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return when (executionType) {
            Kla1.Kla3 -> fu9()
            Kla1.Kla4 -> (89.toUByte())?.compareTo(27.toUByte()).toString(776369080)
            Kla1.Kla5 -> fu11()
            Kla1.Kla6 -> fu12()
            Kla1.Kla7 -> fu13()
            Kla1.Kla8 -> fu14()
            Kla1.Kla9 -> fu15()
            else -> "fail"
        }
    }

    private fun fu8() {
        prope6.add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return executionType.toString()
    }


    fun fu10(): String {
        synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return e.message!!
            }
        }
        return "fail"
    }

    fun fu12(): String {
        synchronized(prope5) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return "fail"
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return "fail1"
            } finally {
                return Kla1.Kla6.name
            }
        }
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0(executionType.name)
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return executionType.name
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in 1..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (prope6[i - 1] != i)
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != type.name) return "failed result ${f.get()} != ${type.name}"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    return fu6 (type) { Kla2(it.toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in Kla1.values()) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:58:36,706 [main:107] - replacing (executionType.toString(), String)
2021-03-12 03:58:36,706 [main:50] - replacing executionType.toString() String
2021-03-12 03:58:36,706 [main:54] - Getting value of type String
2021-03-12 03:58:36,865 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:58:36,868 [main:58] - GENERATED VALUE OF TYPE String = "cuuvh"
2021-03-12 03:58:36,868 [main:61] - GENERATED IS CALL =false
2021-03-12 03:58:36,875 [main:67] - randomType = UByte
2021-03-12 03:58:37,017 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 03:58:37,054 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@b1b57a]
2021-03-12 03:58:37,054 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2dc8d80d]
2021-03-12 03:58:37,195 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:58:37,198 [main:78] - Generated call from random type = (40.toUByte()).toByte().toString(1527843215)
2021-03-12 03:58:37,198 [main:106] - GETTING String from String
2021-03-12 03:58:37,215 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@307cea0a]]
2021-03-12 03:58:37,215 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@307cea0a]
2021-03-12 03:58:37,357 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:58:37,357 [main:117] - GENERATED CALL = (PREFIX).plus("xhohj")
2021-03-12 03:58:37,357 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bdbc0f5]]
2021-03-12 03:58:37,357 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 03:58:37,500 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:58:37,504 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bdbc0f5]
2021-03-12 03:58:37,504 [main:117] - GENERATED CALL = (PREFIX).get(798613317).lowercase()
2021-03-12 03:58:37,504 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5da0e191]]
2021-03-12 03:58:37,504 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5da0e191]
2021-03-12 03:58:37,644 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:58:37,648 [main:117] - GENERATED CALL = (PREFIX).substringBeforeLast('â½', val PREFIX =
2021-03-12 03:58:37,648 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494d96f0]]
2021-03-12 03:58:37,648 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494d96f0]
2021-03-12 03:58:37,805 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:58:37,953 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:58:37,956 [main:117] - GENERATED CALL = (PREFIX).commonSuffixWith("bsrmc", true)
2021-03-12 03:58:37,956 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1262e19c]]
2021-03-12 03:58:37,956 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1262e19c]
2021-03-12 03:58:38,096 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:58:38,099 [main:117] - GENERATED CALL = (PREFIX).substringAfter('ë', val PREFIX =
2021-03-12 03:58:38,099 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63dad168]]
2021-03-12 03:58:38,099 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63dad168]
2021-03-12 03:58:38,239 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:58:38,383 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:58:38,526 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:58:38,672 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 03:58:38,677 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 03:58:38,989 [main:302] - generating value of type = Int true depth = 3
2021-03-12 03:58:38,993 [main:95] - GENERATED = StringBuilder(1776379560)
2021-03-12 03:58:38,993 [main:117] - GENERATED CALL = (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
2021-03-12 03:58:38,993 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6358fd25]]
2021-03-12 03:58:38,993 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6358fd25]
2021-03-12 03:58:39,135 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:58:39,281 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:58:39,427 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:58:39,430 [main:117] - GENERATED CALL = (PREFIX).replace('Ç', 'ë¨', false)
2021-03-12 03:58:39,430 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b2c8153]]
2021-03-12 03:58:39,430 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b2c8153]
2021-03-12 03:58:39,610 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:58:39,799 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:58:39,803 [main:117] - GENERATED CALL = (PREFIX).commonPrefixWith("sexhs", true)
2021-03-12 03:58:39,803 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24f3d945]]
2021-03-12 03:58:39,803 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 03:58:39,958 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:58:39,961 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24f3d945]
2021-03-12 03:58:39,962 [main:117] - GENERATED CALL = (PREFIX).get(938888156).titlecase()
2021-03-12 03:58:39,962 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@166b651c]]
2021-03-12 03:58:39,962 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@166b651c]
2021-03-12 03:58:39,962 [main:117] - GENERATED CALL = (PREFIX).reversed()
2021-03-12 03:58:39,962 [main:114] - replacement of executionType.toString() of type String is (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
2021-03-12 03:58:40,120 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:58:40,121 [main:66] - Compilation checking started
2021-03-12 03:58:40,774 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = 0;

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return when (executionType) {
            Kla1.Kla3 -> fu9()
            Kla1.Kla4 -> (89.toUByte())?.compareTo(27.toUByte()).toString(776369080)
            Kla1.Kla5 -> fu11()
            Kla1.Kla6 -> fu12()
            Kla1.Kla7 -> fu13()
            Kla1.Kla8 -> fu14()
            Kla1.Kla9 -> fu15()
            else -> "fail"
        }
    }

    private fun fu8() {
        prope6.add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return e.message!!
            }
        }
        return "fail"
    }

    fun fu12(): String {
        synchronized(prope5) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return "fail"
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return "fail1"
            } finally {
                return Kla1.Kla6.name
            }
        }
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0(executionType.name)
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return executionType.name
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in 1..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (prope6[i - 1] != i)
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != type.name) return "failed result ${f.get()} != ${type.name}"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    return fu6 (type) { Kla2(it.toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in Kla1.values()) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:58:40,777 [main:107] - replacing (Kla9, Kla1)
2021-03-12 03:58:40,778 [main:50] - replacing Kla9 Kla1
2021-03-12 03:58:40,778 [main:54] - Getting value of type Kla1
2021-03-12 03:58:40,930 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 03:58:40,933 [main:112] - generating klass Kla1 text = enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}
2021-03-12 03:58:40,933 [main:58] - GENERATED VALUE OF TYPE Kla1 = Kla1.Kla6
2021-03-12 03:58:40,933 [main:61] - GENERATED IS CALL =false
2021-03-12 03:58:40,940 [main:67] - randomType = Int
2021-03-12 03:58:41,079 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:58:41,115 [main:106] - GETTING Kla1 from String
2021-03-12 03:58:41,132 [main:106] - GETTING Kla1 from Short
2021-03-12 03:58:41,162 [main:106] - GETTING Kla1 from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:41,206 [main:106] - GETTING Kla1 from ArrayList<Short>
2021-03-12 03:58:41,318 [main:106] - GETTING Kla1 from String
2021-03-12 03:58:41,319 [main:106] - GETTING Kla1 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:41,360 [main:106] - GETTING Kla1 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:41,361 [main:106] - GETTING Kla1 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:41,362 [main:106] - GETTING Kla1 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:41,362 [main:106] - GETTING Kla1 from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:41,363 [main:106] - GETTING Kla1 from ArrayList<Short>
2021-03-12 03:58:41,363 [main:106] - GETTING Kla1 from String
2021-03-12 03:58:41,364 [main:106] - GETTING Kla1 from Companion
2021-03-12 03:58:41,371 [main:106] - GETTING Kla1 from String?
2021-03-12 03:58:41,390 [main:106] - GETTING Kla1 from String
2021-03-12 03:58:41,390 [main:106] - GETTING Kla1 from String
2021-03-12 03:58:41,391 [main:106] - GETTING Kla1 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:41,392 [main:106] - GETTING Kla1 from String
2021-03-12 03:58:41,392 [main:114] - replacement of Kla9 of type Kla1 is Kla1.Kla6
2021-03-12 03:58:41,531 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:58:41,531 [main:66] - Compilation checking started
2021-03-12 03:58:41,984 [main:49] - Result = false
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = 0;

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return when (executionType) {
            Kla1.Kla3 -> fu9()
            Kla1.Kla4 -> (89.toUByte())?.compareTo(27.toUByte()).toString(776369080)
            Kla1.Kla5 -> fu11()
            Kla1.Kla6 -> fu12()
            Kla1.Kla7 -> fu13()
            Kla1.Kla8 -> fu14()
            Kla1.Kla1.Kla6 -> fu15()
            else -> "fail"
        }
    }

    private fun fu8() {
        prope6.add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return e.message!!
            }
        }
        return "fail"
    }

    fun fu12(): String {
        synchronized(prope5) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return "fail"
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return "fail1"
            } finally {
                return Kla1.Kla6.name
            }
        }
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0(executionType.name)
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return executionType.name
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in 1..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (prope6[i - 1] != i)
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != type.name) return "failed result ${f.get()} != ${type.name}"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    return fu6 (type) { Kla2(it.toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in Kla1.values()) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:58:41,986 [main:107] - replacing (type.name, String)
2021-03-12 03:58:41,986 [main:50] - replacing type.name String
2021-03-12 03:58:41,986 [main:54] - Getting value of type String
2021-03-12 03:58:42,147 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:58:42,152 [main:58] - GENERATED VALUE OF TYPE String = "icikw"
2021-03-12 03:58:42,152 [main:61] - GENERATED IS CALL =false
2021-03-12 03:58:42,337 [main:67] - randomType = Kla1?
2021-03-12 03:58:42,477 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 03:58:42,480 [main:112] - generating klass Kla1 text = enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}
2021-03-12 03:58:42,502 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e8483d9]
2021-03-12 03:58:42,644 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:58:42,647 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:58:42,651 [main:78] - Generated call from random type = (Kla1.Kla3)?.name.dropLastWhile({a: Char -> false})
2021-03-12 03:58:42,651 [main:106] - GETTING String from String
2021-03-12 03:58:42,668 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e428ad4]]
2021-03-12 03:58:42,669 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 03:58:42,809 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:58:42,812 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e428ad4]
2021-03-12 03:58:42,812 [main:117] - GENERATED CALL = (PREFIX + MAX_LONG).get(1940571213).plus(val PREFIX =
2021-03-12 03:58:42,813 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2e465cf2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@196815c]]
2021-03-12 03:58:42,813 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@196815c]
2021-03-12 03:58:42,952 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:58:42,955 [main:117] - GENERATED CALL = (PREFIX + MAX_LONG).length.toString(-498492474)
2021-03-12 03:58:42,955 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57446851]]
2021-03-12 03:58:42,956 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57446851]
2021-03-12 03:58:43,098 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:58:43,242 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:58:43,245 [main:117] - GENERATED CALL = (PREFIX + MAX_LONG).padStart(2080531328, 'è¢½')
2021-03-12 03:58:43,245 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e41a4e7]]
2021-03-12 03:58:43,245 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e41a4e7]
2021-03-12 03:58:43,385 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 03:58:43,389 [main:302] - generating value of type = Char true depth = 1
2021-03-12 03:58:43,392 [main:117] - GENERATED CALL = (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})
2021-03-12 03:58:43,392 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2fe79f34]]
2021-03-12 03:58:43,392 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2fe79f34]
2021-03-12 03:58:43,540 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:58:43,543 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:58:43,547 [main:117] - GENERATED CALL = (PREFIX + MAX_LONG).takeLastWhile({a: Char -> true})
2021-03-12 03:58:43,547 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4533f399]]
2021-03-12 03:58:43,547 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4533f399]
2021-03-12 03:58:43,689 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:58:43,692 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:58:43,695 [main:117] - GENERATED CALL = (PREFIX + MAX_LONG).takeWhile({a: Char -> true})
2021-03-12 03:58:43,695 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4909267f]]
2021-03-12 03:58:43,695 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4909267f]
2021-03-12 03:58:43,858 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:58:43,862 [main:117] - GENERATED CALL = (PREFIX + MAX_LONG).drop(-1777010381)
2021-03-12 03:58:43,862 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d7a703b]]
2021-03-12 03:58:43,862 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:58:44,009 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:58:44,158 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:58:44,161 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d7a703b]
2021-03-12 03:58:44,303 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 03:58:44,448 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 03:58:44,452 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 03:58:44,932 [main:302] - generating value of type = String true depth = 3
2021-03-12 03:58:44,935 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 03:58:44,939 [main:95] - GENERATED = Regex("avrtd", kotlin.text.RegexOption.MULTILINE)
2021-03-12 03:58:45,102 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 03:58:45,107 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 03:58:45,268 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:58:45,273 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:58:45,603 [main:302] - generating value of type = CharSequence false depth = 4
2021-03-12 03:58:45,609 [main:95] - GENERATED = StringBuilder(StringBuilder())
2021-03-12 03:58:45,609 [main:117] - GENERATED CALL = (PREFIX + MAX_LONG).subSequence(478827394, 911107624).replace(Regex("avrtd", kotlin.text.RegexOption.MULTILINE), {a: MatchResult -> StringBuilder(StringBuilder())})
2021-03-12 03:58:45,610 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a284f16]]
2021-03-12 03:58:45,610 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:58:45,792 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:58:45,958 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:58:45,961 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a284f16]
2021-03-12 03:58:46,111 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:58:46,115 [main:117] - GENERATED CALL = (PREFIX + MAX_LONG).subSequence(-1442735219, 1429416012).repeat(-1918416656)
2021-03-12 03:58:46,115 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d989160]]
2021-03-12 03:58:46,115 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d989160]
2021-03-12 03:58:46,256 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:58:46,259 [main:117] - GENERATED CALL = (PREFIX + MAX_LONG).substring(376687479)
2021-03-12 03:58:46,259 [main:114] - replacement of type.name of type String is (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})
2021-03-12 03:58:46,398 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:58:46,398 [main:66] - Compilation checking started
2021-03-12 03:58:47,031 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = 0;

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return when (executionType) {
            Kla1.Kla3 -> fu9()
            Kla1.Kla4 -> (89.toUByte())?.compareTo(27.toUByte()).toString(776369080)
            Kla1.Kla5 -> fu11()
            Kla1.Kla6 -> fu12()
            Kla1.Kla7 -> fu13()
            Kla1.Kla8 -> fu14()
            Kla1.Kla9 -> fu15()
            else -> "fail"
        }
    }

    private fun fu8() {
        prope6.add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return e.message!!
            }
        }
        return "fail"
    }

    fun fu12(): String {
        synchronized(prope5) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return "fail"
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return "fail1"
            } finally {
                return Kla1.Kla6.name
            }
        }
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0(executionType.name)
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return executionType.name
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in 1..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (prope6[i - 1] != i)
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "failed result ${f.get()} != ${type.name}"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    return fu6 (type) { Kla2(it.toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in Kla1.values()) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:58:47,034 [main:107] - replacing (values(), Array<Kla1>)
2021-03-12 03:58:47,034 [main:50] - replacing values() Array<Kla1>
2021-03-12 03:58:47,034 [main:54] - Getting value of type Array<Kla1>
2021-03-12 03:58:47,177 [main:302] - generating value of type = Array<Kla1> false depth = 0
2021-03-12 03:58:47,325 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Kla1): Array<Kla1> = TODO()
2021-03-12 03:58:47,329 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Kla1): Array<Kla1> = TODO()
2021-03-12 03:58:47,812 [main:302] - generating value of type = Int true depth = 3
2021-03-12 03:58:47,815 [main:302] - generating value of type = Function1<Int, Kla1> false depth = 3
2021-03-12 03:58:47,818 [main:302] - generating value of type = Kla1 false depth = 4
2021-03-12 03:58:47,821 [main:112] - generating klass Kla1 text = enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}
2021-03-12 03:58:47,822 [main:95] - GENERATED = Array<Kla1>(-1601746477, {a: Int -> Kla1.Kla8})
2021-03-12 03:58:47,822 [main:58] - GENERATED VALUE OF TYPE Array<Kla1> = Array<Kla1>(-1601746477, {a: Int -> Kla1.Kla8})
2021-03-12 03:58:47,822 [main:61] - GENERATED IS CALL =true
2021-03-12 03:58:48,020 [main:67] - randomType = Kla1?
2021-03-12 03:58:48,165 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 03:58:48,168 [main:112] - generating klass Kla1 text = enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}
2021-03-12 03:58:48,189 [main:106] - GETTING Array<Kla1> from ArrayList<Short>
2021-03-12 03:58:48,304 [main:106] - GETTING Array<Kla1> from String
2021-03-12 03:58:48,324 [main:106] - GETTING Array<Kla1> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:48,372 [main:106] - GETTING Array<Kla1> from String
2021-03-12 03:58:48,373 [main:106] - GETTING Array<Kla1> from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:48,418 [main:106] - GETTING Array<Kla1> from Short
2021-03-12 03:58:48,448 [main:106] - GETTING Array<Kla1> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:48,449 [main:106] - GETTING Array<Kla1> from String
2021-03-12 03:58:48,450 [main:106] - GETTING Array<Kla1> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:48,451 [main:106] - GETTING Array<Kla1> from String
2021-03-12 03:58:48,452 [main:106] - GETTING Array<Kla1> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:48,453 [main:106] - GETTING Array<Kla1> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:48,454 [main:106] - GETTING Array<Kla1> from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:48,455 [main:106] - GETTING Array<Kla1> from Companion
2021-03-12 03:58:48,462 [main:106] - GETTING Array<Kla1> from String
2021-03-12 03:58:48,463 [main:106] - GETTING Array<Kla1> from String
2021-03-12 03:58:48,464 [main:106] - GETTING Array<Kla1> from ArrayList<Short>
2021-03-12 03:58:48,465 [main:106] - GETTING Array<Kla1> from String?
2021-03-12 03:58:48,484 [main:114] - replacement of values() of type Array<Kla1> is Array<Kla1>(-1601746477, {a: Int -> Kla1.Kla8})
2021-03-12 03:58:48,627 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 03:58:48,627 [main:66] - Compilation checking started
2021-03-12 03:58:49,023 [main:49] - Result = false
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = 0;

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return when (executionType) {
            Kla1.Kla3 -> fu9()
            Kla1.Kla4 -> (89.toUByte())?.compareTo(27.toUByte()).toString(776369080)
            Kla1.Kla5 -> fu11()
            Kla1.Kla6 -> fu12()
            Kla1.Kla7 -> fu13()
            Kla1.Kla8 -> fu14()
            Kla1.Kla9 -> fu15()
            else -> "fail"
        }
    }

    private fun fu8() {
        prope6.add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return e.message!!
            }
        }
        return "fail"
    }

    fun fu12(): String {
        synchronized(prope5) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return "fail"
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return "fail1"
            } finally {
                return Kla1.Kla6.name
            }
        }
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0(executionType.name)
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return executionType.name
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in 1..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (prope6[i - 1] != i)
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "failed result ${f.get()} != ${type.name}"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    return fu6 (type) { Kla2(it.toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in Kla1.Array<Kla1>(-1601746477, {a: Int -> Kla1.Kla8})) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:58:49,026 [main:107] - replacing (it, Int)
2021-03-12 03:58:49,027 [main:50] - replacing it Int
2021-03-12 03:58:49,027 [main:54] - Getting value of type Int
2021-03-12 03:58:49,174 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:58:49,178 [main:58] - GENERATED VALUE OF TYPE Int = -369624554
2021-03-12 03:58:49,178 [main:61] - GENERATED IS CALL =false
2021-03-12 03:58:49,192 [main:67] - randomType = String?
2021-03-12 03:58:49,334 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:58:49,357 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a8309ec]
2021-03-12 03:58:49,357 [main:78] - Generated call from random type = ("ffowi")?.length.dec()
2021-03-12 03:58:49,357 [main:114] - replacement of it of type Int is ("ffowi")?.length.dec()
2021-03-12 03:58:49,498 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:58:49,499 [main:66] - Compilation checking started
2021-03-12 03:58:50,143 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = 0;

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return when (executionType) {
            Kla1.Kla3 -> fu9()
            Kla1.Kla4 -> (89.toUByte())?.compareTo(27.toUByte()).toString(776369080)
            Kla1.Kla5 -> fu11()
            Kla1.Kla6 -> fu12()
            Kla1.Kla7 -> fu13()
            Kla1.Kla8 -> fu14()
            Kla1.Kla9 -> fu15()
            else -> "fail"
        }
    }

    private fun fu8() {
        prope6.add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return e.message!!
            }
        }
        return "fail"
    }

    fun fu12(): String {
        synchronized(prope5) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return "fail"
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return "fail1"
            } finally {
                return Kla1.Kla6.name
            }
        }
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0(executionType.name)
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return executionType.name
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in 1..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (prope6[i - 1] != i)
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "failed result ${f.get()} != ${type.name}"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (type) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in Kla1.values()) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:58:50,145 [main:107] - replacing (10, Int)
2021-03-12 03:58:50,145 [main:50] - replacing 10 Int
2021-03-12 03:58:50,145 [main:54] - Getting value of type Int
2021-03-12 03:58:50,326 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:58:50,329 [main:58] - GENERATED VALUE OF TYPE Int = -1261273671
2021-03-12 03:58:50,330 [main:61] - GENERATED IS CALL =false
2021-03-12 03:58:51,453 [main:67] - randomType = Function1<Kla0, Function2<Kla0, Collection<Float>, Function1<Kla1, Kla1?>>>
2021-03-12 03:58:51,454 [main:106] - GETTING Int from String
2021-03-12 03:58:51,471 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2e465cf2], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5cbea6cd]]
2021-03-12 03:58:51,471 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5cbea6cd]
2021-03-12 03:58:51,612 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:58:51,616 [main:117] - GENERATED CALL = (PREFIX).length.minus(115)
2021-03-12 03:58:51,616 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6a5fc8b]]
2021-03-12 03:58:51,616 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339]
2021-03-12 03:58:51,616 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6a5fc8b]
2021-03-12 03:58:51,757 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:58:51,761 [main:117] - GENERATED CALL = (PREFIX).compareTo((String::plus).name).coerceAtLeast(496307529)
2021-03-12 03:58:51,761 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2911f7a]]
2021-03-12 03:58:51,761 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339]
2021-03-12 03:58:51,761 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2911f7a]
2021-03-12 03:58:51,903 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:58:51,906 [main:117] - GENERATED CALL = (PREFIX).compareTo(val MAX_LONG =.shl(-813884443)
2021-03-12 03:58:51,907 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@c3ff606]]
2021-03-12 03:58:51,907 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339]
2021-03-12 03:58:52,049 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:58:52,053 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@c3ff606]
2021-03-12 03:58:52,053 [main:117] - GENERATED CALL = (PREFIX).compareTo("gwnce").unaryMinus()
2021-03-12 03:58:52,053 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@32a1279d]]
2021-03-12 03:58:52,053 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339]
2021-03-12 03:58:52,199 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:58:52,203 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@32a1279d]
2021-03-12 03:58:52,345 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:58:52,348 [main:117] - GENERATED CALL = (PREFIX).compareTo("fcacq").rem(54)
2021-03-12 03:58:52,349 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@73e97dc4]]
2021-03-12 03:58:52,349 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339]
2021-03-12 03:58:52,526 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:58:52,530 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@73e97dc4]
2021-03-12 03:58:52,693 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:58:52,696 [main:117] - GENERATED CALL = (PREFIX).compareTo("uevdq").div(66)
2021-03-12 03:58:52,697 [main:113] - Case = [public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d72814c]]
2021-03-12 03:58:52,697 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d72814c]
2021-03-12 03:58:52,846 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:58:52,991 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:58:53,137 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:58:53,141 [main:117] - GENERATED CALL = (PREFIX).indexOf('àµº', 1072255892, false)
2021-03-12 03:58:53,141 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37c654a9]]
2021-03-12 03:58:53,141 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339]
2021-03-12 03:58:53,284 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:58:53,287 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37c654a9]
2021-03-12 03:58:53,437 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:58:53,440 [main:117] - GENERATED CALL = (PREFIX).compareTo("rovnd").compareTo(51)
2021-03-12 03:58:53,441 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2e465cf2], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@49461807]]
2021-03-12 03:58:53,441 [main:117] - GENERATED CALL = (PREFIX).length.sign
2021-03-12 03:58:53,441 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f85b335]]
2021-03-12 03:58:53,441 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f85b335]
2021-03-12 03:58:53,581 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 03:58:53,584 [main:302] - generating value of type = Int true depth = 1
2021-03-12 03:58:53,588 [main:117] - GENERATED CALL = (PREFIX).sumOf({a: Char -> 55508286})
2021-03-12 03:58:53,588 [main:114] - replacement of 10 of type Int is (PREFIX).compareTo("fcacq").rem(54)
2021-03-12 03:58:53,728 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:58:53,729 [main:66] - Compilation checking started
2021-03-12 03:58:54,336 [main:49] - Result = false
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = 0;

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return when (executionType) {
            Kla1.Kla3 -> fu9()
            Kla1.Kla4 -> (89.toUByte())?.compareTo(27.toUByte()).toString(776369080)
            Kla1.Kla5 -> fu11()
            Kla1.Kla6 -> fu12()
            Kla1.Kla7 -> fu13()
            Kla1.Kla8 -> fu14()
            Kla1.Kla9 -> fu15()
            else -> "fail"
        }
    }

    private fun fu8() {
        prope6.add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return e.message!!
            }
        }
        return "fail"
    }

    fun fu12(): String {
        synchronized(prope5) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return "fail"
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return "fail1"
            } finally {
                return Kla1.Kla6.name
            }
        }
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0(executionType.name)
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return executionType.name
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in 1..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await((PREFIX).compareTo("fcacq").rem(54), TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (prope6[i - 1] != i)
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "failed result ${f.get()} != ${type.name}"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (type) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in Kla1.values()) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:58:54,341 [main:107] - replacing (name, String)
2021-03-12 03:58:54,343 [main:50] - replacing name String
2021-03-12 03:58:54,343 [main:54] - Getting value of type String
2021-03-12 03:58:54,495 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:58:54,499 [main:58] - GENERATED VALUE OF TYPE String = "dtqrt"
2021-03-12 03:58:54,499 [main:61] - GENERATED IS CALL =false
2021-03-12 03:58:54,845 [main:67] - randomType = UShort?
2021-03-12 03:58:55,021 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 03:58:55,056 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@215bb738]
2021-03-12 03:58:55,201 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 03:58:55,204 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79436a50]
2021-03-12 03:58:55,346 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:58:55,350 [main:78] - Generated call from random type = (28953.toUShort())?.div(46.toUByte()).toString(462156229)
2021-03-12 03:58:55,351 [main:106] - GETTING String from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:58:55,399 [main:113] - Case = [public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@50aa2ca6], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45311397]]
2021-03-12 03:58:55,399 [main:149] - GENERATING call of type public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@50aa2ca6]
2021-03-12 03:58:55,542 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:58:55,542 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45311397]
2021-03-12 03:58:55,683 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 03:58:55,687 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:58:55,691 [main:117] - GENERATED CALL = ((PREFIX::plus)).invoke("mmevw").filterIndexed({a: Int, b: Char -> true})
2021-03-12 03:58:55,691 [main:113] - Case = [public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@50aa2ca6], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55878bcb]]
2021-03-12 03:58:55,691 [main:149] - GENERATING call of type public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@50aa2ca6]
2021-03-12 03:58:55,838 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:58:55,838 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55878bcb]
2021-03-12 03:58:55,987 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:58:55,994 [main:117] - GENERATED CALL = ((PREFIX::plus)).invoke("nklax").removeSurrounding("yjote")
2021-03-12 03:58:55,994 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@79c6ce88], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fdc3b45]]
2021-03-12 03:58:55,994 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fdc3b45]
2021-03-12 03:58:56,135 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:58:56,139 [main:117] - GENERATED CALL = ((PREFIX::plus)).name.dropLast(333456661)
2021-03-12 03:58:56,139 [main:113] - Case = [public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@50aa2ca6], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@726a65dc]]
2021-03-12 03:58:56,139 [main:149] - GENERATING call of type public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@50aa2ca6]
2021-03-12 03:58:56,281 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:58:56,281 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@726a65dc]
2021-03-12 03:58:56,429 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:58:56,574 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:58:56,578 [main:117] - GENERATED CALL = ((PREFIX::plus)).invoke("xenec").padEnd(1854388706, 'ï¾')
2021-03-12 03:58:56,578 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@79c6ce88], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dcde0a]]
2021-03-12 03:58:56,578 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dcde0a]
2021-03-12 03:58:56,719 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:58:56,722 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:58:56,726 [main:117] - GENERATED CALL = ((PREFIX::plus)).name.filterNot({a: Char -> false})
2021-03-12 03:58:56,726 [main:113] - Case = [public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@50aa2ca6], @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d989160]]
2021-03-12 03:58:56,726 [main:149] - GENERATING call of type public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@50aa2ca6]
2021-03-12 03:58:56,867 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d989160]
2021-03-12 03:58:57,014 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:58:57,018 [main:117] - GENERATED CALL = ((PREFIX::plus)).invoke(null).substring(-627259491)
2021-03-12 03:58:57,018 [main:113] - Case = [public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@50aa2ca6], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e41a4e7]]
2021-03-12 03:58:57,018 [main:149] - GENERATING call of type public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@50aa2ca6]
2021-03-12 03:58:57,197 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:58:57,198 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e41a4e7]
2021-03-12 03:58:57,365 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 03:58:57,369 [main:302] - generating value of type = Char true depth = 1
2021-03-12 03:58:57,373 [main:117] - GENERATED CALL = ((PREFIX::plus)).invoke("zenfk").replaceFirstChar({a: Char -> 'ä¥'})
2021-03-12 03:58:57,373 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@79c6ce88], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e3da54]]
2021-03-12 03:58:57,373 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e3da54]
2021-03-12 03:58:57,521 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:58:57,525 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:58:57,528 [main:117] - GENERATED CALL = ((PREFIX::plus)).name.dropWhile({a: Char -> false})
2021-03-12 03:58:57,528 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@79c6ce88], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ab64eb1]]
2021-03-12 03:58:57,528 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ab64eb1]
2021-03-12 03:58:57,671 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:58:57,819 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:58:57,823 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 03:58:58,148 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 03:58:58,155 [main:95] - GENERATED = StringBuilder("cfkrm")
2021-03-12 03:58:58,155 [main:117] - GENERATED CALL = ((PREFIX::plus)).name.removePrefix(StringBuilder("cfkrm"))
2021-03-12 03:58:58,155 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@79c6ce88], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6358fd25]]
2021-03-12 03:58:58,155 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6358fd25]
2021-03-12 03:58:58,298 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:58:58,444 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:58:58,587 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:58:58,591 [main:117] - GENERATED CALL = ((PREFIX::plus)).name.replace('ï', 'à±³', true)
2021-03-12 03:58:58,591 [main:114] - replacement of name of type String is ((PREFIX::plus)).invoke(null).substring(-627259491)
2021-03-12 03:58:58,730 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:58:58,731 [main:66] - Compilation checking started
2021-03-12 03:58:59,165 [main:49] - Result = false
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = 0;

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return when (executionType) {
            Kla1.Kla3 -> fu9()
            Kla1.Kla4 -> (89.toUByte())?.compareTo(27.toUByte()).toString(776369080)
            Kla1.Kla5 -> fu11()
            Kla1.Kla6 -> fu12()
            Kla1.Kla7 -> fu13()
            Kla1.Kla8 -> fu14()
            Kla1.Kla9 -> fu15()
            else -> "fail"
        }
    }

    private fun fu8() {
        prope6.add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.((PREFIX::plus)).invoke(null).substring(-627259491)
        }
        return "fail"
    }

    fun fu11(): String {
        synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return e.message!!
            }
        }
        return "fail"
    }

    fun fu12(): String {
        synchronized(prope5) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return "fail"
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return "fail1"
            } finally {
                return Kla1.Kla6.name
            }
        }
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0(executionType.name)
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return executionType.name
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in 1..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (prope6[i - 1] != i)
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "failed result ${f.get()} != ${type.name}"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (type) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in Kla1.values()) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:58:59,168 [main:107] - replacing (Kla1.Kla6, Kla1)
2021-03-12 03:58:59,168 [main:50] - replacing Kla1.Kla6 Kla1
2021-03-12 03:58:59,168 [main:54] - Getting value of type Kla1
2021-03-12 03:58:59,335 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 03:58:59,338 [main:112] - generating klass Kla1 text = enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}
2021-03-12 03:58:59,339 [main:58] - GENERATED VALUE OF TYPE Kla1 = Kla1.Kla7
2021-03-12 03:58:59,339 [main:61] - GENERATED IS CALL =false
2021-03-12 03:58:59,557 [main:67] - randomType = HashMap<String, Kla0>
2021-03-12 03:58:59,698 [main:302] - generating value of type = HashMap<String, Kla0> false depth = 0
2021-03-12 03:58:59,846 [main:43] - GENERATING CALL OF fun <V> stringMapOf(pairs: Pair<String, Kla0>): HashMap<Strg, Kla0> = TODO()
2021-03-12 03:58:59,850 [main:61] - WITHOUT TYPE PARAMS = fun <V> stringMapOf(pairs: Pair<String, Kla0>): HashMap<Strg, Kla0> = TODO()
2021-03-12 03:58:59,998 [main:302] - generating value of type = Pair<String, Kla0> false depth = 3
2021-03-12 03:59:00,148 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: String, second: Kla0): Pair<String, Kla0> = TODO()
2021-03-12 03:59:00,153 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: String, second: Kla0): Pair<String, Kla0> = TODO()
2021-03-12 03:59:00,307 [main:302] - generating value of type = String true depth = 6
2021-03-12 03:59:00,310 [main:302] - generating value of type = Kla0 false depth = 6
2021-03-12 03:59:00,314 [main:112] - generating klass Kla0 text = class Kla0(message: String): Exception(message)
2021-03-12 03:59:00,461 [main:194] - Type params = []
2021-03-12 03:59:00,603 [main:302] - generating value of type = String true depth = 8
2021-03-12 03:59:00,607 [main:95] - GENERATED = Pair<String, Kla0>("pcafl", Kla0("aqqio"))
2021-03-12 03:59:00,607 [main:95] - GENERATED = stringMapOf<Kla0>(Pair<String, Kla0>("pcafl", Kla0("aqqio")))
2021-03-12 03:59:00,697 [main:106] - GETTING Kla1 from ArrayList<Short>
2021-03-12 03:59:00,807 [main:106] - GETTING Kla1 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:00,849 [main:106] - GETTING Kla1 from String
2021-03-12 03:59:00,866 [main:106] - GETTING Kla1 from Short
2021-03-12 03:59:00,896 [main:106] - GETTING Kla1 from Companion
2021-03-12 03:59:00,902 [main:106] - GETTING Kla1 from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:00,945 [main:106] - GETTING Kla1 from String?
2021-03-12 03:59:00,964 [main:106] - GETTING Kla1 from ArrayList<Short>
2021-03-12 03:59:00,964 [main:106] - GETTING Kla1 from String
2021-03-12 03:59:00,965 [main:106] - GETTING Kla1 from String
2021-03-12 03:59:00,966 [main:106] - GETTING Kla1 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:00,966 [main:106] - GETTING Kla1 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:00,967 [main:106] - GETTING Kla1 from String
2021-03-12 03:59:00,967 [main:106] - GETTING Kla1 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:00,968 [main:106] - GETTING Kla1 from String
2021-03-12 03:59:00,969 [main:106] - GETTING Kla1 from String
2021-03-12 03:59:00,969 [main:106] - GETTING Kla1 from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:00,970 [main:106] - GETTING Kla1 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:00,970 [main:114] - replacement of Kla1.Kla6 of type Kla1 is Kla1.Kla7
2021-03-12 03:59:01,110 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:59:01,111 [main:66] - Compilation checking started
2021-03-12 03:59:01,745 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = 0;

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return when (executionType) {
            Kla1.Kla3 -> fu9()
            Kla1.Kla4 -> (89.toUByte())?.compareTo(27.toUByte()).toString(776369080)
            Kla1.Kla5 -> fu11()
            Kla1.Kla7 -> fu12()
            Kla1.Kla7 -> fu13()
            Kla1.Kla8 -> fu14()
            Kla1.Kla9 -> fu15()
            else -> "fail"
        }
    }

    private fun fu8() {
        prope6.add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return e.message!!
            }
        }
        return "fail"
    }

    fun fu12(): String {
        synchronized(prope5) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return "fail"
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return "fail1"
            } finally {
                return Kla1.Kla6.name
            }
        }
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0(executionType.name)
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return executionType.name
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in 1..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (prope6[i - 1] != i)
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "failed result ${f.get()} != ${type.name}"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (type) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in Kla1.values()) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:59:01,748 [main:107] - replacing ({
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return e.message!!
            }
        }, Function0<Nothing>)
2021-03-12 03:59:01,751 [main:50] - replacing {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return e.message!!
            }
        } Function0<Nothing>
2021-03-12 03:59:01,751 [main:54] - Getting value of type Function0<Nothing>
2021-03-12 03:59:01,916 [main:302] - generating value of type = Function0<Nothing> false depth = 0
2021-03-12 03:59:01,945 [main:302] - generating value of type = Nothing false depth = 1
2021-03-12 03:59:02,098 [main:43] - GENERATING CALL OF fun TODO(reason: kotlin.String): Nothg = TODO()
2021-03-12 03:59:02,102 [main:61] - WITHOUT TYPE PARAMS = fun TODO(reason: kotlin.String): Nothg = TODO()
2021-03-12 03:59:02,417 [main:302] - generating value of type = String true depth = 4
2021-03-12 03:59:02,420 [main:95] - GENERATED = TODO("vapvn")
2021-03-12 03:59:02,421 [main:58] - GENERATED VALUE OF TYPE Function0<Nothing> = { TODO("vapvn")}
2021-03-12 03:59:02,421 [main:61] - GENERATED IS CALL =false
2021-03-12 03:59:02,611 [main:67] - randomType = Pair<String, UByte>
2021-03-12 03:59:02,754 [main:302] - generating value of type = Pair<String, UByte> false depth = 0
2021-03-12 03:59:02,917 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: String, second: UByte): Pair<String, UByte> = TODO()
2021-03-12 03:59:02,922 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: String, second: UByte): Pair<String, UByte> = TODO()
2021-03-12 03:59:03,072 [main:302] - generating value of type = String true depth = 3
2021-03-12 03:59:03,076 [main:302] - generating value of type = UByte true depth = 3
2021-03-12 03:59:03,079 [main:95] - GENERATED = Pair<String, UByte>("tevqc", 111.toUByte())
2021-03-12 03:59:03,092 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 03:59:03,111 [main:106] - GETTING Function0<Nothing> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:03,154 [main:106] - GETTING Function0<Nothing> from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:03,197 [main:106] - GETTING Function0<Nothing> from String?
2021-03-12 03:59:03,217 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 03:59:03,218 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 03:59:03,219 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 03:59:03,220 [main:106] - GETTING Function0<Nothing> from Companion
2021-03-12 03:59:03,227 [main:106] - GETTING Function0<Nothing> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:03,228 [main:106] - GETTING Function0<Nothing> from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:03,229 [main:106] - GETTING Function0<Nothing> from ArrayList<Short>
2021-03-12 03:59:03,340 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 03:59:03,342 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 03:59:03,343 [main:106] - GETTING Function0<Nothing> from ArrayList<Short>
2021-03-12 03:59:03,344 [main:106] - GETTING Function0<Nothing> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:03,345 [main:106] - GETTING Function0<Nothing> from Short
2021-03-12 03:59:03,376 [main:106] - GETTING Function0<Nothing> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:03,377 [main:106] - GETTING Function0<Nothing> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:03,377 [main:114] - replacement of {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return e.message!!
            }
        } of type Function0<Nothing> is { TODO("vapvn")}
2021-03-12 03:59:03,517 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 03:59:03,518 [main:66] - Compilation checking started
2021-03-12 03:59:04,154 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = 0;

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return when (executionType) {
            Kla1.Kla3 -> fu9()
            Kla1.Kla4 -> (89.toUByte())?.compareTo(27.toUByte()).toString(776369080)
            Kla1.Kla5 -> fu11()
            Kla1.Kla7 -> fu12()
            Kla1.Kla7 -> fu13()
            Kla1.Kla8 -> fu14()
            Kla1.Kla9 -> fu15()
            else -> "fail"
        }
    }

    private fun fu8() {
        prope6.add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        synchronized(prope5) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return "fail"
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return "fail1"
            } finally {
                return Kla1.Kla6.name
            }
        }
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0(executionType.name)
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return executionType.name
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in 1..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (prope6[i - 1] != i)
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "failed result ${f.get()} != ${type.name}"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (type) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in Kla1.values()) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:59:04,156 [main:107] - replacing (Kla4, Kla1)
2021-03-12 03:59:04,156 [main:50] - replacing Kla4 Kla1
2021-03-12 03:59:04,156 [main:54] - Getting value of type Kla1
2021-03-12 03:59:04,299 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 03:59:04,302 [main:112] - generating klass Kla1 text = enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}
2021-03-12 03:59:04,302 [main:58] - GENERATED VALUE OF TYPE Kla1 = Kla1.Kla3
2021-03-12 03:59:04,303 [main:61] - GENERATED IS CALL =false
2021-03-12 03:59:04,483 [main:67] - randomType = Float
2021-03-12 03:59:04,624 [main:302] - generating value of type = Float true depth = 0
2021-03-12 03:59:04,656 [main:106] - GETTING Kla1 from String?
2021-03-12 03:59:04,675 [main:106] - GETTING Kla1 from String
2021-03-12 03:59:04,692 [main:106] - GETTING Kla1 from String
2021-03-12 03:59:04,692 [main:106] - GETTING Kla1 from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:04,736 [main:106] - GETTING Kla1 from Short
2021-03-12 03:59:04,766 [main:106] - GETTING Kla1 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:04,809 [main:106] - GETTING Kla1 from String
2021-03-12 03:59:04,809 [main:106] - GETTING Kla1 from ArrayList<Short>
2021-03-12 03:59:04,921 [main:106] - GETTING Kla1 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:04,922 [main:106] - GETTING Kla1 from String
2021-03-12 03:59:04,923 [main:106] - GETTING Kla1 from String
2021-03-12 03:59:04,923 [main:106] - GETTING Kla1 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:04,924 [main:106] - GETTING Kla1 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:04,924 [main:106] - GETTING Kla1 from ArrayList<Short>
2021-03-12 03:59:04,925 [main:106] - GETTING Kla1 from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:04,926 [main:106] - GETTING Kla1 from String
2021-03-12 03:59:04,926 [main:106] - GETTING Kla1 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:04,927 [main:106] - GETTING Kla1 from Companion
2021-03-12 03:59:04,933 [main:114] - replacement of Kla4 of type Kla1 is Kla1.Kla3
2021-03-12 03:59:05,073 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:59:05,074 [main:66] - Compilation checking started
2021-03-12 03:59:05,471 [main:49] - Result = false
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = 0;

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return when (executionType) {
            Kla1.Kla3 -> fu9()
            Kla1.Kla1.Kla3 -> (89.toUByte())?.compareTo(27.toUByte()).toString(776369080)
            Kla1.Kla5 -> fu11()
            Kla1.Kla7 -> fu12()
            Kla1.Kla7 -> fu13()
            Kla1.Kla8 -> fu14()
            Kla1.Kla9 -> fu15()
            else -> "fail"
        }
    }

    private fun fu8() {
        prope6.add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        synchronized(prope5) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return "fail"
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return "fail1"
            } finally {
                return Kla1.Kla6.name
            }
        }
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0(executionType.name)
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return executionType.name
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in 1..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (prope6[i - 1] != i)
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "failed result ${f.get()} != ${type.name}"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (type) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in Kla1.values()) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:59:05,473 [main:107] - replacing (executionType.name, String)
2021-03-12 03:59:05,474 [main:50] - replacing executionType.name String
2021-03-12 03:59:05,474 [main:54] - Getting value of type String
2021-03-12 03:59:05,615 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:59:05,618 [main:58] - GENERATED VALUE OF TYPE String = "eiyen"
2021-03-12 03:59:05,618 [main:61] - GENERATED IS CALL =false
2021-03-12 03:59:05,632 [main:67] - randomType = Kla0
2021-03-12 03:59:05,771 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 03:59:05,775 [main:112] - generating klass Kla0 text = class Kla0(message: String): Exception(message)
2021-03-12 03:59:05,915 [main:194] - Type params = []
2021-03-12 03:59:06,054 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:59:06,073 [main:149] - GENERATING call of type public operator fun kotlin.String?.plus(other: kotlin.Any?): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@1f94500f]
2021-03-12 03:59:06,212 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:59:06,213 [main:78] - Generated call from random type = (Kla0("ojhfu")).message?.plus("sfcja")!!
2021-03-12 03:59:06,213 [main:106] - GETTING String from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:06,256 [main:113] - Case = [public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@64ccfcb8], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5da0e191]]
2021-03-12 03:59:06,256 [main:149] - GENERATING call of type public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@64ccfcb8]
2021-03-12 03:59:06,396 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:59:06,396 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5da0e191]
2021-03-12 03:59:06,537 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:59:06,540 [main:117] - GENERATED CALL = (PREFIX::plus).invoke("lijmg").substringBeforeLast('á ', val PREFIX =
2021-03-12 03:59:06,540 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@79c6ce88], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7115a40]]
2021-03-12 03:59:06,540 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7115a40]
2021-03-12 03:59:06,698 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:59:06,702 [main:117] - GENERATED CALL = (PREFIX::plus).name.trimMargin("mvrfc")
2021-03-12 03:59:06,702 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@79c6ce88], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@726a65dc]]
2021-03-12 03:59:06,702 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@726a65dc]
2021-03-12 03:59:06,854 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:06,998 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:59:07,002 [main:117] - GENERATED CALL = (PREFIX::plus).name.padEnd(-1451405411, 'î¬')
2021-03-12 03:59:07,002 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@79c6ce88], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@307cea0a]]
2021-03-12 03:59:07,002 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@307cea0a]
2021-03-12 03:59:07,151 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:59:07,151 [main:117] - GENERATED CALL = (PREFIX::plus).name.plus("llbic")
2021-03-12 03:59:07,151 [main:113] - Case = [public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@64ccfcb8], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eff31b5]]
2021-03-12 03:59:07,151 [main:149] - GENERATING call of type public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@64ccfcb8]
2021-03-12 03:59:07,299 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:59:07,299 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1eff31b5]
2021-03-12 03:59:07,450 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:59:07,599 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:59:07,602 [main:117] - GENERATED CALL = (PREFIX::plus).invoke("ohupg").substringBefore('ì¥', "wmgnf")
2021-03-12 03:59:07,603 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@79c6ce88], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f24aea4]]
2021-03-12 03:59:07,603 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f24aea4]
2021-03-12 03:59:07,603 [main:117] - GENERATED CALL = (PREFIX::plus).name.trimIndent()
2021-03-12 03:59:07,603 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@79c6ce88], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ab64eb1]]
2021-03-12 03:59:07,603 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ab64eb1]
2021-03-12 03:59:07,744 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:59:07,751 [main:117] - GENERATED CALL = (PREFIX::plus).name.removePrefix("tqldo")
2021-03-12 03:59:07,751 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@79c6ce88], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2fe79f34]]
2021-03-12 03:59:07,751 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2fe79f34]
2021-03-12 03:59:07,891 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:59:07,895 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:59:07,898 [main:117] - GENERATED CALL = (PREFIX::plus).name.takeLastWhile({a: Char -> false})
2021-03-12 03:59:07,898 [main:113] - Case = [public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@64ccfcb8], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cd86a35]]
2021-03-12 03:59:07,898 [main:149] - GENERATING call of type public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@64ccfcb8]
2021-03-12 03:59:08,047 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:59:08,047 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cd86a35]
2021-03-12 03:59:08,048 [main:117] - GENERATED CALL = (PREFIX::plus).invoke("svkhm").lowercase()
2021-03-12 03:59:08,048 [main:113] - Case = [public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@64ccfcb8], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c88e713]]
2021-03-12 03:59:08,048 [main:149] - GENERATING call of type public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@64ccfcb8]
2021-03-12 03:59:08,187 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:59:08,188 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c88e713]
2021-03-12 03:59:08,188 [main:117] - GENERATED CALL = (PREFIX::plus).invoke("kipzf").trimEnd()
2021-03-12 03:59:08,188 [main:114] - replacement of executionType.name of type String is (PREFIX::plus).name.padEnd(-1451405411, 'î¬')
2021-03-12 03:59:08,327 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:59:08,327 [main:66] - Compilation checking started
2021-03-12 03:59:08,969 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = 0;

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return when (executionType) {
            Kla1.Kla3 -> fu9()
            Kla1.Kla4 -> (89.toUByte())?.compareTo(27.toUByte()).toString(776369080)
            Kla1.Kla5 -> fu11()
            Kla1.Kla7 -> fu12()
            Kla1.Kla7 -> fu13()
            Kla1.Kla8 -> fu14()
            Kla1.Kla9 -> fu15()
            else -> "fail"
        }
    }

    private fun fu8() {
        prope6.add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        synchronized(prope5) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return "fail"
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            try {
                fu8()
                throw Kla0(executionType.name)
            } catch (e: Kla0) {
                return "fail1"
            } finally {
                return Kla1.Kla6.name
            }
        }
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0((PREFIX::plus).name.padEnd(-1451405411, 'î¬'))
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return executionType.name
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in 1..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (prope6[i - 1] != i)
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "failed result ${f.get()} != ${type.name}"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (type) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in Kla1.values()) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:59:08,972 [main:107] - replacing (Kla0(executionType.name), Kla0)
2021-03-12 03:59:08,972 [main:50] - replacing Kla0(executionType.name) Kla0
2021-03-12 03:59:08,972 [main:54] - Getting value of type Kla0
2021-03-12 03:59:09,119 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 03:59:09,122 [main:112] - generating klass Kla0 text = class Kla0(message: String): Exception(message)
2021-03-12 03:59:09,291 [main:194] - Type params = []
2021-03-12 03:59:09,432 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:59:09,435 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0("owlty")
2021-03-12 03:59:09,435 [main:61] - GENERATED IS CALL =true
2021-03-12 03:59:09,449 [main:67] - randomType = Kla1
2021-03-12 03:59:09,608 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 03:59:09,612 [main:112] - generating klass Kla1 text = enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}
2021-03-12 03:59:09,637 [main:106] - GETTING Kla0 from Companion
2021-03-12 03:59:09,643 [main:106] - GETTING Kla0 from String?
2021-03-12 03:59:09,662 [main:106] - GETTING Kla0 from String
2021-03-12 03:59:09,678 [main:106] - GETTING Kla0 from ArrayList<Short>
2021-03-12 03:59:09,789 [main:106] - GETTING Kla0 from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:09,833 [main:106] - GETTING Kla0 from String
2021-03-12 03:59:09,834 [main:106] - GETTING Kla0 from Short
2021-03-12 03:59:09,866 [main:106] - GETTING Kla0 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:09,909 [main:106] - GETTING Kla0 from String
2021-03-12 03:59:09,909 [main:106] - GETTING Kla0 from String
2021-03-12 03:59:09,910 [main:106] - GETTING Kla0 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:09,910 [main:106] - GETTING Kla0 from String
2021-03-12 03:59:09,911 [main:106] - GETTING Kla0 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:09,912 [main:106] - GETTING Kla0 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:09,912 [main:106] - GETTING Kla0 from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:09,913 [main:106] - GETTING Kla0 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:09,913 [main:106] - GETTING Kla0 from ArrayList<Short>
2021-03-12 03:59:09,914 [main:106] - GETTING Kla0 from String
2021-03-12 03:59:09,914 [main:114] - replacement of Kla0(executionType.name) of type Kla0 is Kla0("owlty")
2021-03-12 03:59:10,055 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 03:59:10,056 [main:66] - Compilation checking started
2021-03-12 03:59:10,654 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = 0;

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return when (executionType) {
            Kla1.Kla3 -> fu9()
            Kla1.Kla4 -> (89.toUByte())?.compareTo(27.toUByte()).toString(776369080)
            Kla1.Kla5 -> fu11()
            Kla1.Kla7 -> fu12()
            Kla1.Kla7 -> fu13()
            Kla1.Kla8 -> fu14()
            Kla1.Kla9 -> fu15()
            else -> "fail"
        }
    }

    private fun fu8() {
        prope6.add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        synchronized(prope5) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return "fail"
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            try {
                fu8()
                throw Kla0("owlty")
            } catch (e: Kla0) {
                return "fail1"
            } finally {
                return Kla1.Kla6.name
            }
        }
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0((PREFIX::plus).name.padEnd(-1451405411, 'î¬'))
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return executionType.name
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in 1..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (prope6[i - 1] != i)
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "failed result ${f.get()} != ${type.name}"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (type) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in Kla1.values()) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:59:10,656 [main:107] - replacing (name, String)
2021-03-12 03:59:10,656 [main:50] - replacing name String
2021-03-12 03:59:10,656 [main:54] - Getting value of type String
2021-03-12 03:59:10,800 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:59:10,803 [main:58] - GENERATED VALUE OF TYPE String = "iwhdn"
2021-03-12 03:59:10,803 [main:61] - GENERATED IS CALL =false
2021-03-12 03:59:10,817 [main:67] - randomType = Kla1
2021-03-12 03:59:10,956 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 03:59:10,960 [main:112] - generating klass Kla1 text = enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}
2021-03-12 03:59:10,979 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c88e713]
2021-03-12 03:59:10,980 [main:78] - Generated call from random type = (Kla1.Kla5).name.trimEnd()
2021-03-12 03:59:10,980 [main:106] - GETTING String from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:11,031 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@5db60f3f], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@548f039b]]
2021-03-12 03:59:11,031 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@548f039b]
2021-03-12 03:59:11,031 [main:117] - GENERATED CALL = (""::plus).name.decapitalize()
2021-03-12 03:59:11,031 [main:113] - Case = [public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@4738fead], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1262e19c]]
2021-03-12 03:59:11,031 [main:149] - GENERATING call of type public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@4738fead]
2021-03-12 03:59:11,172 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:59:11,172 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1262e19c]
2021-03-12 03:59:11,313 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:59:11,457 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:59:11,461 [main:117] - GENERATED CALL = (""::plus).invoke("qbxii").substringAfter('èº', "wzwon")
2021-03-12 03:59:11,461 [main:113] - Case = [public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@4738fead], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@548f039b]]
2021-03-12 03:59:11,461 [main:149] - GENERATING call of type public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@4738fead]
2021-03-12 03:59:11,626 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:59:11,627 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@548f039b]
2021-03-12 03:59:11,627 [main:117] - GENERATED CALL = (""::plus).invoke("rexmv").decapitalize()
2021-03-12 03:59:11,627 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@5db60f3f], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e8483d9]]
2021-03-12 03:59:11,627 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e8483d9]
2021-03-12 03:59:11,767 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:59:11,771 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:59:11,774 [main:117] - GENERATED CALL = (""::plus).name.dropLastWhile({a: Char -> true})
2021-03-12 03:59:11,774 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@5db60f3f], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1839c17c]]
2021-03-12 03:59:11,775 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1839c17c]
2021-03-12 03:59:11,775 [main:117] - GENERATED CALL = (""::plus).name.toLowerCase()
2021-03-12 03:59:11,775 [main:113] - Case = [public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@4738fead], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fdc3b45]]
2021-03-12 03:59:11,775 [main:149] - GENERATING call of type public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@4738fead]
2021-03-12 03:59:11,916 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:59:11,916 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fdc3b45]
2021-03-12 03:59:12,057 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:12,060 [main:117] - GENERATED CALL = (""::plus).invoke("hhbnz").dropLast(1027206195)
2021-03-12 03:59:12,060 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@5db60f3f], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4533f399]]
2021-03-12 03:59:12,061 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4533f399]
2021-03-12 03:59:12,201 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:59:12,204 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:59:12,208 [main:117] - GENERATED CALL = (""::plus).name.takeWhile({a: Char -> false})
2021-03-12 03:59:12,208 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@5db60f3f], public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f1f24e3]]
2021-03-12 03:59:12,208 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f1f24e3]
2021-03-12 03:59:12,208 [main:117] - GENERATED CALL = (""::plus).name.replaceIndent((""::plus).invoke("ssdtf"))
2021-03-12 03:59:12,208 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@5db60f3f], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@492795f3]]
2021-03-12 03:59:12,208 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@492795f3]
2021-03-12 03:59:12,347 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:12,351 [main:117] - GENERATED CALL = (""::plus).name.takeLast(-1155722947)
2021-03-12 03:59:12,351 [main:113] - Case = [public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@4738fead], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e3da54]]
2021-03-12 03:59:12,351 [main:149] - GENERATING call of type public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@4738fead]
2021-03-12 03:59:12,491 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e3da54]
2021-03-12 03:59:12,631 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:59:12,634 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:59:12,638 [main:117] - GENERATED CALL = (""::plus).invoke(null).dropWhile({a: Char -> false})
2021-03-12 03:59:12,638 [main:114] - replacement of name of type String is (""::plus).invoke("qbxii").substringAfter('èº', "wzwon")
2021-03-12 03:59:12,777 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:59:12,777 [main:66] - Compilation checking started
2021-03-12 03:59:13,172 [main:49] - Result = false
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = 0;

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return when (executionType) {
            Kla1.Kla3 -> fu9()
            Kla1.Kla4 -> (89.toUByte())?.compareTo(27.toUByte()).toString(776369080)
            Kla1.Kla5 -> fu11()
            Kla1.Kla7 -> fu12()
            Kla1.Kla7 -> fu13()
            Kla1.Kla8 -> fu14()
            Kla1.Kla9 -> fu15()
            else -> "fail"
        }
    }

    private fun fu8() {
        prope6.add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        synchronized(prope5) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return "fail"
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            try {
                fu8()
                throw Kla0("owlty")
            } catch (e: Kla0) {
                return "fail1"
            } finally {
                return Kla1.Kla6.name
            }
        }
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0((PREFIX::plus).name.padEnd(-1451405411, 'î¬'))
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return executionType.name
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in 1..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (prope6[i - 1] != i)
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "failed result ${f.get()} != ${type.(""::plus).invoke("qbxii").substringAfter('èº', "wzwon")}"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (type) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in Kla1.values()) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:59:13,174 [main:107] - replacing (Kla8, Kla1)
2021-03-12 03:59:13,174 [main:50] - replacing Kla8 Kla1
2021-03-12 03:59:13,174 [main:54] - Getting value of type Kla1
2021-03-12 03:59:13,323 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 03:59:13,326 [main:112] - generating klass Kla1 text = enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}
2021-03-12 03:59:13,326 [main:58] - GENERATED VALUE OF TYPE Kla1 = Kla1.Kla5
2021-03-12 03:59:13,326 [main:61] - GENERATED IS CALL =false
2021-03-12 03:59:13,505 [main:67] - randomType = Kla0?
2021-03-12 03:59:13,648 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 03:59:13,651 [main:112] - generating klass Kla0 text = class Kla0(message: String): Exception(message)
2021-03-12 03:59:13,791 [main:194] - Type params = []
2021-03-12 03:59:13,931 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:59:13,949 [main:106] - GETTING Kla1 from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:13,992 [main:106] - GETTING Kla1 from ArrayList<Short>
2021-03-12 03:59:14,133 [main:106] - GETTING Kla1 from String
2021-03-12 03:59:14,150 [main:106] - GETTING Kla1 from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:14,151 [main:106] - GETTING Kla1 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:14,192 [main:106] - GETTING Kla1 from String?
2021-03-12 03:59:14,211 [main:106] - GETTING Kla1 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:14,212 [main:106] - GETTING Kla1 from Companion
2021-03-12 03:59:14,218 [main:106] - GETTING Kla1 from ArrayList<Short>
2021-03-12 03:59:14,218 [main:106] - GETTING Kla1 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:14,219 [main:106] - GETTING Kla1 from String
2021-03-12 03:59:14,220 [main:106] - GETTING Kla1 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:14,220 [main:106] - GETTING Kla1 from String
2021-03-12 03:59:14,221 [main:106] - GETTING Kla1 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:14,221 [main:106] - GETTING Kla1 from String
2021-03-12 03:59:14,222 [main:106] - GETTING Kla1 from Short
2021-03-12 03:59:14,253 [main:106] - GETTING Kla1 from String
2021-03-12 03:59:14,253 [main:106] - GETTING Kla1 from String
2021-03-12 03:59:14,253 [main:114] - replacement of Kla8 of type Kla1 is Kla1.Kla5
2021-03-12 03:59:14,393 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:59:14,393 [main:66] - Compilation checking started
2021-03-12 03:59:14,787 [main:49] - Result = false
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = 0;

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return when (executionType) {
            Kla1.Kla3 -> fu9()
            Kla1.Kla4 -> (89.toUByte())?.compareTo(27.toUByte()).toString(776369080)
            Kla1.Kla5 -> fu11()
            Kla1.Kla7 -> fu12()
            Kla1.Kla7 -> fu13()
            Kla1.Kla1.Kla5 -> fu14()
            Kla1.Kla9 -> fu15()
            else -> "fail"
        }
    }

    private fun fu8() {
        prope6.add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        synchronized(prope5) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return "fail"
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            try {
                fu8()
                throw Kla0("owlty")
            } catch (e: Kla0) {
                return "fail1"
            } finally {
                return Kla1.Kla6.name
            }
        }
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0((PREFIX::plus).name.padEnd(-1451405411, 'î¬'))
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return executionType.name
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in 1..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (prope6[i - 1] != i)
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "failed result ${f.get()} != ${type.name}"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (type) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in Kla1.values()) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:59:14,789 [main:107] - replacing (Kla9, Kla1)
2021-03-12 03:59:14,789 [main:50] - replacing Kla9 Kla1
2021-03-12 03:59:14,789 [main:54] - Getting value of type Kla1
2021-03-12 03:59:14,930 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 03:59:14,933 [main:112] - generating klass Kla1 text = enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}
2021-03-12 03:59:14,933 [main:58] - GENERATED VALUE OF TYPE Kla1 = Kla1.Kla4
2021-03-12 03:59:14,933 [main:61] - GENERATED IS CALL =false
2021-03-12 03:59:15,103 [main:67] - randomType = Boolean?
2021-03-12 03:59:15,244 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:59:15,259 [main:106] - GETTING Kla1 from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:15,303 [main:106] - GETTING Kla1 from String
2021-03-12 03:59:15,319 [main:106] - GETTING Kla1 from String
2021-03-12 03:59:15,320 [main:106] - GETTING Kla1 from String
2021-03-12 03:59:15,320 [main:106] - GETTING Kla1 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:15,362 [main:106] - GETTING Kla1 from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:15,363 [main:106] - GETTING Kla1 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:15,364 [main:106] - GETTING Kla1 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:15,364 [main:106] - GETTING Kla1 from String?
2021-03-12 03:59:15,387 [main:106] - GETTING Kla1 from Companion
2021-03-12 03:59:15,395 [main:106] - GETTING Kla1 from Short
2021-03-12 03:59:15,430 [main:106] - GETTING Kla1 from String
2021-03-12 03:59:15,430 [main:106] - GETTING Kla1 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:15,431 [main:106] - GETTING Kla1 from ArrayList<Short>
2021-03-12 03:59:15,542 [main:106] - GETTING Kla1 from String
2021-03-12 03:59:15,542 [main:106] - GETTING Kla1 from ArrayList<Short>
2021-03-12 03:59:15,543 [main:106] - GETTING Kla1 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:15,544 [main:106] - GETTING Kla1 from String
2021-03-12 03:59:15,544 [main:114] - replacement of Kla9 of type Kla1 is Kla1.Kla4
2021-03-12 03:59:15,683 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:59:15,684 [main:66] - Compilation checking started
2021-03-12 03:59:16,075 [main:49] - Result = false
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = 0;

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return when (executionType) {
            Kla1.Kla3 -> fu9()
            Kla1.Kla4 -> (89.toUByte())?.compareTo(27.toUByte()).toString(776369080)
            Kla1.Kla5 -> fu11()
            Kla1.Kla7 -> fu12()
            Kla1.Kla7 -> fu13()
            Kla1.Kla8 -> fu14()
            Kla1.Kla1.Kla4 -> fu15()
            else -> "fail"
        }
    }

    private fun fu8() {
        prope6.add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        synchronized(prope5) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return "fail"
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            try {
                fu8()
                throw Kla0("owlty")
            } catch (e: Kla0) {
                return "fail1"
            } finally {
                return Kla1.Kla6.name
            }
        }
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0((PREFIX::plus).name.padEnd(-1451405411, 'î¬'))
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return executionType.name
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in 1..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (prope6[i - 1] != i)
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "failed result ${f.get()} != ${type.name}"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (type) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in Kla1.values()) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:59:16,077 [main:107] - replacing (10, Int)
2021-03-12 03:59:16,077 [main:50] - replacing 10 Int
2021-03-12 03:59:16,077 [main:54] - Getting value of type Int
2021-03-12 03:59:16,219 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:16,223 [main:58] - GENERATED VALUE OF TYPE Int = 559411727
2021-03-12 03:59:16,223 [main:61] - GENERATED IS CALL =false
2021-03-12 03:59:16,408 [main:67] - randomType = Float
2021-03-12 03:59:16,548 [main:302] - generating value of type = Float true depth = 0
2021-03-12 03:59:16,580 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@6184047b]
2021-03-12 03:59:16,721 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:59:16,725 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@39fe0512]
2021-03-12 03:59:16,725 [main:78] - Generated call from random type = (0.10152978f).compareTo(70).inv()
2021-03-12 03:59:16,726 [main:106] - GETTING Int from String
2021-03-12 03:59:16,746 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@162e433]]
2021-03-12 03:59:16,746 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339]
2021-03-12 03:59:16,886 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:59:16,889 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@162e433]
2021-03-12 03:59:17,029 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:17,033 [main:117] - GENERATED CALL = (MAX_LONG).compareTo("jwjgm").and(1627841554)
2021-03-12 03:59:17,033 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7310525a]]
2021-03-12 03:59:17,033 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:59:17,174 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:17,316 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:17,320 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7310525a]
2021-03-12 03:59:17,460 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:59:17,463 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:59:17,467 [main:117] - GENERATED CALL = (MAX_LONG).subSequence(-1162379586, -1053429990).indexOfLast({a: Char -> true})
2021-03-12 03:59:17,467 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@84b9aec]]
2021-03-12 03:59:17,467 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339]
2021-03-12 03:59:17,467 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@84b9aec]
2021-03-12 03:59:17,608 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:17,611 [main:117] - GENERATED CALL = (MAX_LONG).compareTo(var prope0 = (""::plus).invoke("ssdtf").trimStart().coerceAtMost(1374291643)
2021-03-12 03:59:17,611 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2e465cf2], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@b5e9abb]]
2021-03-12 03:59:17,611 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@b5e9abb]
2021-03-12 03:59:17,753 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:59:17,756 [main:117] - GENERATED CALL = (MAX_LONG).length.times(126)
2021-03-12 03:59:17,757 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@39fe0512]]
2021-03-12 03:59:17,757 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339]
2021-03-12 03:59:17,757 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@39fe0512]
2021-03-12 03:59:17,757 [main:117] - GENERATED CALL = (MAX_LONG).compareTo(val MAX_LONG =.inv()
2021-03-12 03:59:17,757 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@e31b846]]
2021-03-12 03:59:17,757 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 03:59:17,897 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:17,901 [main:149] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@e31b846]
2021-03-12 03:59:17,901 [main:117] - GENERATED CALL = (MAX_LONG).get(1765637630).toInt()
2021-03-12 03:59:17,901 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9f53c05]]
2021-03-12 03:59:17,901 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:59:18,041 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:18,186 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:18,189 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9f53c05]
2021-03-12 03:59:18,337 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 03:59:18,341 [main:302] - generating value of type = Int true depth = 1
2021-03-12 03:59:18,344 [main:117] - GENERATED CALL = (MAX_LONG).subSequence(-2016827917, -1325640879).sumBy({a: Char -> -410578429})
2021-03-12 03:59:18,344 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2e465cf2], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20e501fb]]
2021-03-12 03:59:18,344 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20e501fb]
2021-03-12 03:59:18,345 [main:117] - GENERATED CALL = (MAX_LONG).length.unaryPlus()
2021-03-12 03:59:18,345 [main:113] - Case = [public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e81fcbc]]
2021-03-12 03:59:18,345 [main:149] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e81fcbc]
2021-03-12 03:59:18,488 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:59:18,636 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:18,811 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:59:18,815 [main:117] - GENERATED CALL = (MAX_LONG).lastIndexOf('á ', 1035954591, false)
2021-03-12 03:59:18,815 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@c3ff606]]
2021-03-12 03:59:18,815 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339]
2021-03-12 03:59:18,815 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@c3ff606]
2021-03-12 03:59:18,815 [main:117] - GENERATED CALL = (MAX_LONG).compareTo(PREFIX).unaryMinus()
2021-03-12 03:59:18,815 [main:114] - replacement of 10 of type Int is (MAX_LONG).compareTo(val MAX_LONG =.inv()
2021-03-12 03:59:18,969 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(BINARY_EXPRESSION)
2021-03-12 03:59:18,969 [main:66] - Compilation checking started
2021-03-12 03:59:18,989 [main:71] - Wrong syntax or breaks conditions
2021-03-12 03:59:18,989 [main:49] - Result = false
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = (MAX_LONG).compareTo(val MAX_LONG =.inv();

var prope2: Int = 0;

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return when (executionType) {
            Kla1.Kla3 -> fu9()
            Kla1.Kla4 -> (89.toUByte())?.compareTo(27.toUByte()).toString(776369080)
            Kla1.Kla5 -> fu11()
            Kla1.Kla7 -> fu12()
            Kla1.Kla7 -> fu13()
            Kla1.Kla8 -> fu14()
            Kla1.Kla9 -> fu15()
            else -> "fail"
        }
    }

    private fun fu8() {
        prope6.add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        synchronized(prope5) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return "fail"
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            try {
                fu8()
                throw Kla0("owlty")
            } catch (e: Kla0) {
                return "fail1"
            } finally {
                return Kla1.Kla6.name
            }
        }
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0((PREFIX::plus).name.padEnd(-1451405411, 'î¬'))
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return executionType.name
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in 1..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (prope6[i - 1] != i)
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "failed result ${f.get()} != ${type.name}"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (type) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in Kla1.values()) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:59:18,991 [main:107] - replacing (when (executionType) {
            Kla1.Kla3 -> fu9()
            Kla1.Kla4 -> (89.toUByte())?.compareTo(27.toUByte()).toString(776369080)
            Kla1.Kla5 -> fu11()
            Kla1.Kla7 -> fu12()
            Kla1.Kla7 -> fu13()
            Kla1.Kla8 -> fu14()
            Kla1.Kla9 -> fu15()
            else -> "fail"
        }, String)
2021-03-12 03:59:18,991 [main:50] - replacing when (executionType) {
            Kla1.Kla3 -> fu9()
            Kla1.Kla4 -> (89.toUByte())?.compareTo(27.toUByte()).toString(776369080)
            Kla1.Kla5 -> fu11()
            Kla1.Kla7 -> fu12()
            Kla1.Kla7 -> fu13()
            Kla1.Kla8 -> fu14()
            Kla1.Kla9 -> fu15()
            else -> "fail"
        } String
2021-03-12 03:59:18,991 [main:54] - Getting value of type String
2021-03-12 03:59:19,139 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:59:19,143 [main:58] - GENERATED VALUE OF TYPE String = "akodk"
2021-03-12 03:59:19,143 [main:61] - GENERATED IS CALL =false
2021-03-12 03:59:19,150 [main:67] - randomType = UByte
2021-03-12 03:59:19,292 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 03:59:19,322 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.UByte): kotlin.UInt defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@286072b0]
2021-03-12 03:59:19,465 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 03:59:19,469 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79436a50]
2021-03-12 03:59:19,611 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:19,615 [main:78] - Generated call from random type = (125.toUByte()).div(45.toUByte()).toString(1701736170)
2021-03-12 03:59:19,615 [main:106] - GETTING String from String
2021-03-12 03:59:19,632 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1262e19c]]
2021-03-12 03:59:19,632 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1262e19c]
2021-03-12 03:59:19,773 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:59:19,918 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:59:19,922 [main:117] - GENERATED CALL = (PREFIX).substringAfter('ç££', "zltcy")
2021-03-12 03:59:19,922 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d7a703b]]
2021-03-12 03:59:19,922 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:59:20,061 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:20,212 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:20,216 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d7a703b]
2021-03-12 03:59:20,356 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 03:59:20,502 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 03:59:20,506 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 03:59:21,045 [main:302] - generating value of type = String true depth = 3
2021-03-12 03:59:21,048 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 03:59:21,052 [main:95] - GENERATED = Regex("boohs", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 03:59:21,214 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 03:59:21,217 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 03:59:21,224 [main:117] - GENERATED CALL = (PREFIX).subSequence(-812834150, 146741529).replace(Regex("boohs", kotlin.text.RegexOption.IGNORE_CASE), {a: MatchResult -> StringBuilder()})
2021-03-12 03:59:21,224 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@548f039b]]
2021-03-12 03:59:21,224 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@548f039b]
2021-03-12 03:59:21,225 [main:117] - GENERATED CALL = (PREFIX).decapitalize()
2021-03-12 03:59:21,225 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@726a65dc]]
2021-03-12 03:59:21,225 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@726a65dc]
2021-03-12 03:59:21,374 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:21,516 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:59:21,519 [main:117] - GENERATED CALL = (PREFIX).padEnd(1164735557, 'á')
2021-03-12 03:59:21,520 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4909267f]]
2021-03-12 03:59:21,520 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4909267f]
2021-03-12 03:59:21,659 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:21,662 [main:117] - GENERATED CALL = (PREFIX).drop(706700895)
2021-03-12 03:59:21,663 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68eb2bf5]]
2021-03-12 03:59:21,663 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68eb2bf5]
2021-03-12 03:59:21,663 [main:117] - GENERATED CALL = (PREFIX).trim()
2021-03-12 03:59:21,663 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1839c17c]]
2021-03-12 03:59:21,663 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1839c17c]
2021-03-12 03:59:21,663 [main:117] - GENERATED CALL = (PREFIX).toLowerCase()
2021-03-12 03:59:21,663 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@166b651c]]
2021-03-12 03:59:21,663 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@166b651c]
2021-03-12 03:59:21,663 [main:117] - GENERATED CALL = (PREFIX).reversed()
2021-03-12 03:59:21,663 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cd86a35]]
2021-03-12 03:59:21,663 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cd86a35]
2021-03-12 03:59:21,663 [main:117] - GENERATED CALL = (PREFIX).lowercase()
2021-03-12 03:59:21,663 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a284f16]]
2021-03-12 03:59:21,663 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a284f16]
2021-03-12 03:59:21,802 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:21,806 [main:117] - GENERATED CALL = (PREFIX).repeat(436301316)
2021-03-12 03:59:21,806 [main:114] - replacement of when (executionType) {
            Kla1.Kla3 -> fu9()
            Kla1.Kla4 -> (89.toUByte())?.compareTo(27.toUByte()).toString(776369080)
            Kla1.Kla5 -> fu11()
            Kla1.Kla7 -> fu12()
            Kla1.Kla7 -> fu13()
            Kla1.Kla8 -> fu14()
            Kla1.Kla9 -> fu15()
            else -> "fail"
        } of type String is (PREFIX).trim()
2021-03-12 03:59:21,948 [main:33] - Trying to replace Element(WHEN) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:59:21,948 [main:66] - Compilation checking started
2021-03-12 03:59:22,559 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = 0;

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return (PREFIX).trim()
    }

    private fun fu8() {
        prope6.add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        synchronized(prope5) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return "fail"
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            try {
                fu8()
                throw Kla0("owlty")
            } catch (e: Kla0) {
                return "fail1"
            } finally {
                return Kla1.Kla6.name
            }
        }
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0((PREFIX::plus).name.padEnd(-1451405411, 'î¬'))
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return executionType.name
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in 1..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (prope6[i - 1] != i)
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "failed result ${f.get()} != ${type.name}"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (type) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in Kla1.values()) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:59:22,561 [main:107] - replacing (name, String)
2021-03-12 03:59:22,561 [main:50] - replacing name String
2021-03-12 03:59:22,561 [main:54] - Getting value of type String
2021-03-12 03:59:22,696 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:59:22,699 [main:58] - GENERATED VALUE OF TYPE String = "cjxts"
2021-03-12 03:59:22,699 [main:61] - GENERATED IS CALL =false
2021-03-12 03:59:22,712 [main:67] - randomType = Kla2
2021-03-12 03:59:22,847 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 03:59:22,850 [main:112] - generating klass Kla2 text = class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return (PREFIX).trim()
    }

    private fun fu8() {
        prope6.add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        synchronized(prope5) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return "fail"
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            try {
                fu8()
                throw Kla0("owlty")
            } catch (e: Kla0) {
                return "fail1"
            } finally {
                return Kla1.Kla6.name
            }
        }
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0((PREFIX::plus).name.padEnd(-1451405411, 'î¬'))
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return executionType.name
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}
2021-03-12 03:59:22,988 [main:194] - Type params = []
2021-03-12 03:59:23,122 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:59:23,126 [main:302] - generating value of type = Kla1 false depth = 2
2021-03-12 03:59:23,129 [main:112] - generating klass Kla1 text = enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}
2021-03-12 03:59:23,136 [main:149] - GENERATING call of type public open fun call(): kotlin.String defined in Kla2[SimpleFunctionDescriptorImpl@56bc116a]
2021-03-12 03:59:23,136 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21f58cc8]
2021-03-12 03:59:23,273 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:59:23,411 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:59:23,414 [main:78] - Generated call from random type = (Kla2("pmcag", Kla1.Kla4)).call().replaceBefore('ä²', val PREFIX =
2021-03-12 03:59:23,415 [main:114] - replacement of name of type String is (Kla2("pmcag", Kla1.Kla4)).call().replaceBefore('ä²', val PREFIX =
2021-03-12 03:59:23,573 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 03:59:23,573 [main:66] - Compilation checking started
2021-03-12 03:59:23,580 [main:71] - Wrong syntax or breaks conditions
2021-03-12 03:59:23,580 [main:49] - Result = false
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = 0;

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return (PREFIX).trim()
    }

    private fun fu8() {
        prope6.add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        synchronized(prope5) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return "fail"
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            try {
                fu8()
                throw Kla0("owlty")
            } catch (e: Kla0) {
                return "fail1"
            } finally {
                return Kla1.Kla6.name
            }
        }
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0((PREFIX::plus).name.padEnd(-1451405411, 'î¬'))
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return executionType.(Kla2("pmcag", Kla1.Kla4)).call().replaceBefore('ä²', val PREFIX =
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in 1..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (prope6[i - 1] != i)
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "failed result ${f.get()} != ${type.name}"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (type) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in Kla1.values()) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:59:23,582 [main:107] - replacing (prope5, Any)
2021-03-12 03:59:23,583 [main:50] - replacing prope5 Any
2021-03-12 03:59:23,583 [main:54] - Getting value of type Any
2021-03-12 03:59:23,719 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:59:23,719 [main:58] - GENERATED VALUE OF TYPE Any = "lhcgw"
2021-03-12 03:59:23,719 [main:61] - GENERATED IS CALL =false
2021-03-12 03:59:23,726 [main:67] - randomType = Boolean
2021-03-12 03:59:23,863 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:59:23,875 [main:106] - GETTING Any from String
2021-03-12 03:59:23,891 [main:114] - replacement of prope5 of type Any is MAX_LONG
2021-03-12 03:59:24,026 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 03:59:24,026 [main:66] - Compilation checking started
2021-03-12 03:59:24,623 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = 0;

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return (PREFIX).trim()
    }

    private fun fu8() {
        prope6.add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(MAX_LONG) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return "fail"
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            try {
                fu8()
                throw Kla0("owlty")
            } catch (e: Kla0) {
                return "fail1"
            } finally {
                return Kla1.Kla6.name
            }
        }
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0((PREFIX::plus).name.padEnd(-1451405411, 'î¬'))
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return executionType.name
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in 1..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (prope6[i - 1] != i)
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "failed result ${f.get()} != ${type.name}"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (type) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in Kla1.values()) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:59:24,625 [main:107] - replacing ({
            try {
                fu8()
                throw Kla0("owlty")
            } catch (e: Kla0) {
                return "fail1"
            } finally {
                return Kla1.Kla6.name
            }
        }, Function0<Nothing>)
2021-03-12 03:59:24,625 [main:50] - replacing {
            try {
                fu8()
                throw Kla0("owlty")
            } catch (e: Kla0) {
                return "fail1"
            } finally {
                return Kla1.Kla6.name
            }
        } Function0<Nothing>
2021-03-12 03:59:24,625 [main:54] - Getting value of type Function0<Nothing>
2021-03-12 03:59:24,763 [main:302] - generating value of type = Function0<Nothing> false depth = 0
2021-03-12 03:59:24,766 [main:302] - generating value of type = Nothing false depth = 1
2021-03-12 03:59:24,907 [main:43] - GENERATING CALL OF fun TODO(reason: kotlin.String): Nothg = TODO()
2021-03-12 03:59:24,911 [main:61] - WITHOUT TYPE PARAMS = fun TODO(reason: kotlin.String): Nothg = TODO()
2021-03-12 03:59:25,211 [main:302] - generating value of type = String true depth = 4
2021-03-12 03:59:25,215 [main:95] - GENERATED = TODO("huxlm")
2021-03-12 03:59:25,215 [main:58] - GENERATED VALUE OF TYPE Function0<Nothing> = { TODO("huxlm")}
2021-03-12 03:59:25,215 [main:61] - GENERATED IS CALL =false
2021-03-12 03:59:25,399 [main:67] - randomType = LinkedHashMap<Kla0, Long>
2021-03-12 03:59:25,534 [main:302] - generating value of type = LinkedHashMap<Kla0, Long> false depth = 0
2021-03-12 03:59:25,676 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Kla0, Long> = TODO()
2021-03-12 03:59:25,681 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Kla0, Long> = TODO()
2021-03-12 03:59:25,828 [main:95] - GENERATED = linkedMapOf<Kla0, Long>()
2021-03-12 03:59:25,955 [main:106] - GETTING Function0<Nothing> from String?
2021-03-12 03:59:25,975 [main:106] - GETTING Function0<Nothing> from Companion
2021-03-12 03:59:25,981 [main:106] - GETTING Function0<Nothing> from ArrayList<Short>
2021-03-12 03:59:26,118 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 03:59:26,135 [main:106] - GETTING Function0<Nothing> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:26,177 [main:106] - GETTING Function0<Nothing> from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:26,223 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 03:59:26,224 [main:106] - GETTING Function0<Nothing> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:26,225 [main:106] - GETTING Function0<Nothing> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:26,226 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 03:59:26,227 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 03:59:26,228 [main:106] - GETTING Function0<Nothing> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:26,229 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 03:59:26,230 [main:106] - GETTING Function0<Nothing> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:26,231 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 03:59:26,232 [main:106] - GETTING Function0<Nothing> from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:26,233 [main:106] - GETTING Function0<Nothing> from ArrayList<Short>
2021-03-12 03:59:26,234 [main:106] - GETTING Function0<Nothing> from Short
2021-03-12 03:59:26,264 [main:114] - replacement of {
            try {
                fu8()
                throw Kla0("owlty")
            } catch (e: Kla0) {
                return "fail1"
            } finally {
                return Kla1.Kla6.name
            }
        } of type Function0<Nothing> is { TODO("huxlm")}
2021-03-12 03:59:26,399 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 03:59:26,400 [main:66] - Compilation checking started
2021-03-12 03:59:26,997 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = 0;

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return (PREFIX).trim()
    }

    private fun fu8() {
        prope6.add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(MAX_LONG) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return "fail"
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("huxlm")}
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0((PREFIX::plus).name.padEnd(-1451405411, 'î¬'))
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return executionType.name
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in 1..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (prope6[i - 1] != i)
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "failed result ${f.get()} != ${type.name}"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (type) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in Kla1.values()) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:59:26,999 [main:107] - replacing (0, Int)
2021-03-12 03:59:26,999 [main:50] - replacing 0 Int
2021-03-12 03:59:26,999 [main:54] - Getting value of type Int
2021-03-12 03:59:27,133 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:27,136 [main:58] - GENERATED VALUE OF TYPE Int = -1166117629
2021-03-12 03:59:27,137 [main:61] - GENERATED IS CALL =false
2021-03-12 03:59:27,638 [main:67] - randomType = Function2<Sequence<Kla1>, ULong, Kla0>
2021-03-12 03:59:27,639 [main:106] - GETTING Int from String
2021-03-12 03:59:27,656 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], public abstract val length: kotlin.Int defined in kotlin.CharSequence[DeserializedPropertyDescriptor@4fe258f2]]
2021-03-12 03:59:27,656 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:59:27,792 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:27,930 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:27,934 [main:117] - GENERATED CALL = ((""::plus).invoke("ssdtf")).subSequence(-258140408, -1346980662).length
2021-03-12 03:59:27,934 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2e465cf2], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@70eb3e24]]
2021-03-12 03:59:27,934 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@70eb3e24]
2021-03-12 03:59:27,934 [main:117] - GENERATED CALL = ((""::plus).invoke("ssdtf")).length.takeLowestOneBit()
2021-03-12 03:59:27,934 [main:113] - Case = [public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1679922a]]
2021-03-12 03:59:27,934 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1679922a]
2021-03-12 03:59:28,069 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:59:28,073 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:59:28,076 [main:117] - GENERATED CALL = ((""::plus).invoke("ssdtf")).indexOfFirst({a: Char -> false})
2021-03-12 03:59:28,076 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2e465cf2], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7dbee2b6]]
2021-03-12 03:59:28,076 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7dbee2b6]
2021-03-12 03:59:28,211 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:59:28,214 [main:117] - GENERATED CALL = ((""::plus).invoke("ssdtf")).length.plus(-6)
2021-03-12 03:59:28,214 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2e465cf2], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@182261fc]]
2021-03-12 03:59:28,214 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@182261fc]
2021-03-12 03:59:28,214 [main:117] - GENERATED CALL = ((""::plus).invoke("ssdtf")).length.takeHighestOneBit()
2021-03-12 03:59:28,214 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2e465cf2], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37c654a9]]
2021-03-12 03:59:28,214 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37c654a9]
2021-03-12 03:59:28,350 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:59:28,353 [main:117] - GENERATED CALL = ((""::plus).invoke("ssdtf")).length.compareTo(-59)
2021-03-12 03:59:28,353 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2e465cf2], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@39fe0512]]
2021-03-12 03:59:28,353 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@39fe0512]
2021-03-12 03:59:28,354 [main:117] - GENERATED CALL = ((""::plus).invoke("ssdtf")).length.inv()
2021-03-12 03:59:28,354 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2e465cf2], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@40beeda]]
2021-03-12 03:59:28,354 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@40beeda]
2021-03-12 03:59:28,354 [main:117] - GENERATED CALL = ((""::plus).invoke("ssdtf")).length.toInt()
2021-03-12 03:59:28,354 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2e465cf2], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e217bf7]]
2021-03-12 03:59:28,354 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e217bf7]
2021-03-12 03:59:28,489 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:28,493 [main:117] - GENERATED CALL = ((""::plus).invoke("ssdtf")).length.shr(-532686164)
2021-03-12 03:59:28,493 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32c7c266]]
2021-03-12 03:59:28,493 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:59:28,653 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:28,792 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:28,796 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32c7c266]
2021-03-12 03:59:28,931 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 03:59:29,071 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 03:59:29,075 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 03:59:29,217 [main:302] - generating value of type = Char true depth = 3
2021-03-12 03:59:29,220 [main:95] - GENERATED = charArrayOf('?')
2021-03-12 03:59:29,355 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:29,493 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:59:29,496 [main:117] - GENERATED CALL = ((""::plus).invoke("ssdtf")).subSequence(-438586894, -215011848).indexOfAny(charArrayOf('?'), -408766301, true)
2021-03-12 03:59:29,496 [main:114] - replacement of 0 of type Int is ((""::plus).invoke("ssdtf")).length.plus(-6)
2021-03-12 03:59:29,630 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:59:29,630 [main:66] - Compilation checking started
2021-03-12 03:59:30,213 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = ((""::plus).invoke("ssdtf")).length.plus(-6);

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return (PREFIX).trim()
    }

    private fun fu8() {
        prope6.add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(MAX_LONG) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return "fail"
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("huxlm")}
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0((PREFIX::plus).name.padEnd(-1451405411, 'î¬'))
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return executionType.name
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in 1..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (prope6[i - 1] != i)
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "failed result ${f.get()} != ${type.name}"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (type) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in Kla1.values()) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:59:30,215 [main:107] - replacing ("fail", String)
2021-03-12 03:59:30,215 [main:50] - replacing "fail" String
2021-03-12 03:59:30,215 [main:54] - Getting value of type String
2021-03-12 03:59:30,351 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:59:30,355 [main:58] - GENERATED VALUE OF TYPE String = "swaqc"
2021-03-12 03:59:30,355 [main:61] - GENERATED IS CALL =false
2021-03-12 03:59:30,362 [main:67] - randomType = Byte
2021-03-12 03:59:30,498 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:59:30,531 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@73e08a42]
2021-03-12 03:59:30,531 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e428ad4]
2021-03-12 03:59:30,666 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:59:30,670 [main:78] - Generated call from random type = (47).toChar().plus("osprf")
2021-03-12 03:59:30,670 [main:106] - GETTING String from String
2021-03-12 03:59:30,687 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5113d1f2]]
2021-03-12 03:59:30,687 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:59:30,823 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:30,961 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:30,964 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5113d1f2]
2021-03-12 03:59:31,101 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 03:59:31,269 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 03:59:31,274 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 03:59:31,732 [main:302] - generating value of type = String true depth = 3
2021-03-12 03:59:31,735 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 03:59:31,739 [main:95] - GENERATED = Regex("iihuw", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 03:59:31,739 [main:117] - GENERATED CALL = (MAX_LONG).subSequence(-730431719, -221393931).replaceFirst(Regex("iihuw", kotlin.text.RegexOption.IGNORE_CASE), ((""::plus)).name)
2021-03-12 03:59:31,739 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e3da54]]
2021-03-12 03:59:31,739 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e3da54]
2021-03-12 03:59:31,875 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:59:31,878 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:59:31,882 [main:117] - GENERATED CALL = (MAX_LONG).dropWhile({a: Char -> false})
2021-03-12 03:59:31,882 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63dad168]]
2021-03-12 03:59:31,882 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63dad168]
2021-03-12 03:59:32,018 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:32,159 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:32,300 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:59:32,306 [main:117] - GENERATED CALL = (MAX_LONG).replaceRange(-788212043, 2021330778, "aqlwn")
2021-03-12 03:59:32,306 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21f58cc8]]
2021-03-12 03:59:32,306 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21f58cc8]
2021-03-12 03:59:32,442 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:59:32,581 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:59:32,720 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:59:32,724 [main:117] - GENERATED CALL = (MAX_LONG).replaceBefore('é', "jqkvy", "qponf")
2021-03-12 03:59:32,724 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5da0e191]]
2021-03-12 03:59:32,724 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5da0e191]
2021-03-12 03:59:32,860 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:59:32,864 [main:117] - GENERATED CALL = (MAX_LONG).substringBeforeLast('á·', val MAX_LONG =
2021-03-12 03:59:32,864 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ab64eb1]]
2021-03-12 03:59:32,864 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ab64eb1]
2021-03-12 03:59:32,999 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 03:59:33,006 [main:117] - GENERATED CALL = (MAX_LONG).removePrefix(StringBuilder())
2021-03-12 03:59:33,006 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1262e19c]]
2021-03-12 03:59:33,006 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1262e19c]
2021-03-12 03:59:33,142 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:59:33,146 [main:117] - GENERATED CALL = (MAX_LONG).substringAfter('í', val PREFIX =
2021-03-12 03:59:33,146 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fd784aa]]
2021-03-12 03:59:33,146 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fd784aa]
2021-03-12 03:59:33,281 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:59:33,419 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:59:33,423 [main:117] - GENERATED CALL = (MAX_LONG).replaceBeforeLast('ì¥ª', val MAX_LONG =
2021-03-12 03:59:33,423 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1839c17c]]
2021-03-12 03:59:33,423 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1839c17c]
2021-03-12 03:59:33,423 [main:117] - GENERATED CALL = (MAX_LONG).toLowerCase()
2021-03-12 03:59:33,423 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77dbd350]]
2021-03-12 03:59:33,423 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77dbd350]
2021-03-12 03:59:33,423 [main:117] - GENERATED CALL = (MAX_LONG).prependIndent((String::plus).name)
2021-03-12 03:59:33,423 [main:114] - replacement of "fail" of type String is (MAX_LONG).replaceRange(-788212043, 2021330778, "aqlwn")
2021-03-12 03:59:33,558 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:59:33,559 [main:66] - Compilation checking started
2021-03-12 03:59:34,178 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = ((""::plus).invoke("ssdtf")).length.plus(-6);

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return (PREFIX).trim()
    }

    private fun fu8() {
        prope6.add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(MAX_LONG) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return (MAX_LONG).replaceRange(-788212043, 2021330778, "aqlwn")
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("huxlm")}
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0((PREFIX::plus).name.padEnd(-1451405411, 'î¬'))
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return executionType.name
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in 1..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (prope6[i - 1] != i)
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "failed result ${f.get()} != ${type.name}"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (type) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in Kla1.values()) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:59:34,180 [main:107] - replacing ("failed result ${f.get()} != ${type.name}", String)
2021-03-12 03:59:34,181 [main:50] - replacing "failed result ${f.get()} != ${type.name}" String
2021-03-12 03:59:34,181 [main:54] - Getting value of type String
2021-03-12 03:59:34,318 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:59:34,322 [main:58] - GENERATED VALUE OF TYPE String = "tjwvb"
2021-03-12 03:59:34,322 [main:61] - GENERATED IS CALL =false
2021-03-12 03:59:34,522 [main:67] - randomType = Triple<Char, Kla0, Kla1>
2021-03-12 03:59:34,657 [main:302] - generating value of type = Triple<Char, Kla0, Kla1> false depth = 0
2021-03-12 03:59:34,800 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Char, second: Kla0, third: Kla1): Triple<Char, Kla0, Kla1> = TODO()
2021-03-12 03:59:34,804 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Char, second: Kla0, third: Kla1): Triple<Char, Kla0, Kla1> = TODO()
2021-03-12 03:59:34,949 [main:302] - generating value of type = Char true depth = 3
2021-03-12 03:59:34,953 [main:302] - generating value of type = Kla0 false depth = 3
2021-03-12 03:59:34,956 [main:112] - generating klass Kla0 text = class Kla0(message: String): Exception(message)
2021-03-12 03:59:35,091 [main:194] - Type params = []
2021-03-12 03:59:35,227 [main:302] - generating value of type = String true depth = 5
2021-03-12 03:59:35,230 [main:302] - generating value of type = Kla1 false depth = 3
2021-03-12 03:59:35,233 [main:112] - generating klass Kla1 text = enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}
2021-03-12 03:59:35,234 [main:95] - GENERATED = Triple<Char, Kla0, Kla1>('í³', Kla0("wplbv"), Kla1.Kla9)
2021-03-12 03:59:35,245 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bdbc0f5]
2021-03-12 03:59:35,246 [main:78] - Generated call from random type = (Triple<Char, Kla0, Kla1>('í³', Kla0("wplbv"), Kla1.Kla9)).first.lowercase()
2021-03-12 03:59:35,247 [main:106] - GETTING String from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:35,288 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@5db60f3f], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6358fd25]]
2021-03-12 03:59:35,288 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6358fd25]
2021-03-12 03:59:35,424 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:59:35,563 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:59:35,702 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:59:35,705 [main:117] - GENERATED CALL = ((""::plus)).name.replace('ç«·', 'í', false)
2021-03-12 03:59:35,705 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@5db60f3f], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@548f039b]]
2021-03-12 03:59:35,705 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@548f039b]
2021-03-12 03:59:35,705 [main:117] - GENERATED CALL = ((""::plus)).name.decapitalize()
2021-03-12 03:59:35,706 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@5db60f3f], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21f58cc8]]
2021-03-12 03:59:35,706 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21f58cc8]
2021-03-12 03:59:35,841 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:59:35,845 [main:117] - GENERATED CALL = ((""::plus)).name.replaceBefore('å¶', val PREFIX =
2021-03-12 03:59:35,845 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@5db60f3f], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1262e19c]]
2021-03-12 03:59:35,845 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1262e19c]
2021-03-12 03:59:35,981 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:59:35,984 [main:117] - GENERATED CALL = ((""::plus)).name.substringAfter('ë ', val PREFIX =
2021-03-12 03:59:35,984 [main:113] - Case = [public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@3a338103], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@548f039b]]
2021-03-12 03:59:35,985 [main:149] - GENERATING call of type public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@3a338103]
2021-03-12 03:59:36,120 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@548f039b]
2021-03-12 03:59:36,121 [main:117] - GENERATED CALL = ((""::plus)).invoke(null).decapitalize()
2021-03-12 03:59:36,121 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@5db60f3f], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1526b9cd]]
2021-03-12 03:59:36,121 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1526b9cd]
2021-03-12 03:59:36,257 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:59:36,260 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:59:36,264 [main:117] - GENERATED CALL = ((""::plus)).name.filter({a: Char -> false})
2021-03-12 03:59:36,264 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@5db60f3f], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33fb03c1]]
2021-03-12 03:59:36,264 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33fb03c1]
2021-03-12 03:59:36,401 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:36,573 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:36,576 [main:117] - GENERATED CALL = ((""::plus)).name.removeRange(882249246, -870066602)
2021-03-12 03:59:36,577 [main:113] - Case = [public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@3a338103], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ecfbefc]]
2021-03-12 03:59:36,577 [main:149] - GENERATING call of type public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@3a338103]
2021-03-12 03:59:36,725 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:59:36,725 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ecfbefc]
2021-03-12 03:59:36,726 [main:117] - GENERATED CALL = ((""::plus)).invoke("xscfs").concat(val MAX_LONG =
2021-03-12 03:59:36,726 [main:113] - Case = [public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@3a338103], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45311397]]
2021-03-12 03:59:36,726 [main:149] - GENERATING call of type public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@3a338103]
2021-03-12 03:59:36,866 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:59:36,866 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45311397]
2021-03-12 03:59:37,003 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 03:59:37,006 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:59:37,010 [main:117] - GENERATED CALL = ((""::plus)).invoke("aigcw").filterIndexed({a: Int, b: Char -> false})
2021-03-12 03:59:37,010 [main:113] - Case = [public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@3a338103], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c521f60]]
2021-03-12 03:59:37,010 [main:149] - GENERATING call of type public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@3a338103]
2021-03-12 03:59:37,148 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:59:37,148 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c521f60]
2021-03-12 03:59:37,148 [main:117] - GENERATED CALL = ((""::plus)).invoke("axwqw").trimStart()
2021-03-12 03:59:37,148 [main:114] - replacement of "failed result ${f.get()} != ${type.name}" of type String is "tjwvb"
2021-03-12 03:59:37,284 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 03:59:37,285 [main:66] - Compilation checking started
2021-03-12 03:59:37,862 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = ((""::plus).invoke("ssdtf")).length.plus(-6);

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return (PREFIX).trim()
    }

    private fun fu8() {
        prope6.add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(MAX_LONG) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return (MAX_LONG).replaceRange(-788212043, 2021330778, "aqlwn")
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("huxlm")}
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0((PREFIX::plus).name.padEnd(-1451405411, 'î¬'))
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return executionType.name
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in 1..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (prope6[i - 1] != i)
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "tjwvb"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (type) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in Kla1.values()) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:59:37,864 [main:107] - replacing (1, Int)
2021-03-12 03:59:37,864 [main:50] - replacing 1 Int
2021-03-12 03:59:37,864 [main:54] - Getting value of type Int
2021-03-12 03:59:38,002 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:38,006 [main:58] - GENERATED VALUE OF TYPE Int = -1819369582
2021-03-12 03:59:38,006 [main:61] - GENERATED IS CALL =false
2021-03-12 03:59:38,165 [main:67] - randomType = UInt
2021-03-12 03:59:38,300 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 03:59:38,331 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@16fcee50]
2021-03-12 03:59:38,470 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 03:59:38,474 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57f715bc]
2021-03-12 03:59:38,474 [main:78] - Generated call from random type = (974981600.toUInt()).compareTo(78.toUByte()).inc()
2021-03-12 03:59:38,475 [main:106] - GETTING Int from ArrayList<Short>
2021-03-12 03:59:38,600 [main:113] - Case = [public open fun lastIndexOf(element: kotlin.Short): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@3e81e922]]
2021-03-12 03:59:38,600 [main:149] - GENERATING call of type public open fun lastIndexOf(element: kotlin.Short): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@3e81e922]
2021-03-12 03:59:38,737 [main:302] - generating value of type = Short true depth = 0
2021-03-12 03:59:38,741 [main:117] - GENERATED CALL = (arrayListOf<Short>()).lastIndexOf(31462)
2021-03-12 03:59:38,741 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@58929cb3]]
2021-03-12 03:59:38,741 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@58929cb3]
2021-03-12 03:59:38,741 [main:117] - GENERATED CALL = (arrayListOf<Short>()).count()
2021-03-12 03:59:38,741 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Short defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@5f0abf2e], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@77ef56fe]]
2021-03-12 03:59:38,741 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Short defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@5f0abf2e]
2021-03-12 03:59:38,879 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:38,883 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@77ef56fe]
2021-03-12 03:59:39,021 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:59:39,024 [main:117] - GENERATED CALL = (arrayListOf<Short>()).get(460385984).plus(99)
2021-03-12 03:59:39,024 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.MutableList[DeserializedPropertyDescriptor@69fa2164], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2911f7a]]
2021-03-12 03:59:39,024 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2911f7a]
2021-03-12 03:59:39,166 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:39,169 [main:117] - GENERATED CALL = (arrayListOf<Short>()).size.shl(-1212243549)
2021-03-12 03:59:39,169 [main:113] - Case = [public open fun indexOf(element: kotlin.Short): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@6820053d]]
2021-03-12 03:59:39,170 [main:149] - GENERATING call of type public open fun indexOf(element: kotlin.Short): kotlin.Int defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@6820053d]
2021-03-12 03:59:39,170 [main:117] - GENERATED CALL = (arrayListOf<Short>()).indexOf((arrayListOf<Short>()).get(1042941104))
2021-03-12 03:59:39,170 [main:113] - Case = [protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@4482249b], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@32a1279d]]
2021-03-12 03:59:39,170 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@32a1279d]
2021-03-12 03:59:39,312 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:59:39,316 [main:117] - GENERATED CALL = (arrayListOf<Short>()).modCount.rem(-105)
2021-03-12 03:59:39,316 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.MutableList[DeserializedPropertyDescriptor@69fa2164], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7417b08f]]
2021-03-12 03:59:39,316 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7417b08f]
2021-03-12 03:59:39,482 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:39,486 [main:117] - GENERATED CALL = (arrayListOf<Short>()).size.or(-1499495843)
2021-03-12 03:59:39,486 [main:113] - Case = [protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@4482249b], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@40beeda]]
2021-03-12 03:59:39,486 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@40beeda]
2021-03-12 03:59:39,486 [main:117] - GENERATED CALL = (arrayListOf<Short>()).modCount.toInt()
2021-03-12 03:59:39,486 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.MutableList[DeserializedPropertyDescriptor@69fa2164], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@70eb3e24]]
2021-03-12 03:59:39,486 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@70eb3e24]
2021-03-12 03:59:39,486 [main:117] - GENERATED CALL = (arrayListOf<Short>()).size.takeLowestOneBit()
2021-03-12 03:59:39,487 [main:113] - Case = [protected final var modCount: kotlin.Int defined in kotlin.collections.ArrayList[DeserializedPropertyDescriptor@4482249b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@676dfb9b]]
2021-03-12 03:59:39,487 [main:117] - GENERATED CALL = (arrayListOf<Short>()).modCount.absoluteValue
2021-03-12 03:59:39,487 [main:114] - replacement of 1 of type Int is (arrayListOf<Short>()).indexOf((arrayListOf<Short>()).get(1042941104))
2021-03-12 03:59:39,624 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:59:39,625 [main:66] - Compilation checking started
2021-03-12 03:59:40,411 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = ((""::plus).invoke("ssdtf")).length.plus(-6);

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return (PREFIX).trim()
    }

    private fun fu8() {
        prope6.add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(MAX_LONG) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return (MAX_LONG).replaceRange(-788212043, 2021330778, "aqlwn")
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("huxlm")}
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0((PREFIX::plus).name.padEnd(-1451405411, 'î¬'))
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return executionType.name
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in 1..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (prope6[i - (arrayListOf<Short>()).indexOf((arrayListOf<Short>()).get(1042941104))] != i)
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "tjwvb"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (type) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in Kla1.values()) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:59:40,413 [main:107] - replacing (executionType.name, String)
2021-03-12 03:59:40,414 [main:50] - replacing executionType.name String
2021-03-12 03:59:40,414 [main:54] - Getting value of type String
2021-03-12 03:59:40,558 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:59:40,562 [main:58] - GENERATED VALUE OF TYPE String = "enfsn"
2021-03-12 03:59:40,562 [main:61] - GENERATED IS CALL =false
2021-03-12 03:59:40,729 [main:67] - randomType = ULong
2021-03-12 03:59:40,866 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 03:59:40,897 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@5b6bb9e2]
2021-03-12 03:59:40,897 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@280f09c9]
2021-03-12 03:59:41,035 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:41,039 [main:78] - Generated call from random type = (7771553426799575181.toULong()).toUShort().toString(1478075321)
2021-03-12 03:59:41,040 [main:106] - GETTING String from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:41,088 [main:113] - Case = [public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@7ae3e1ad], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57446851]]
2021-03-12 03:59:41,088 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@7ae3e1ad]
2021-03-12 03:59:41,227 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:59:41,367 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:59:41,368 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57446851]
2021-03-12 03:59:41,505 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:41,646 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:59:41,649 [main:117] - GENERATED CALL = ((String::plus)).invoke("cmanr", "hbewl").padStart(-1891813490, 'å¾¯')
2021-03-12 03:59:41,650 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@fae7e73], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4533f399]]
2021-03-12 03:59:41,650 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4533f399]
2021-03-12 03:59:41,786 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:59:41,790 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:59:41,794 [main:117] - GENERATED CALL = ((String::plus)).name.takeWhile({a: Char -> true})
2021-03-12 03:59:41,794 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@fae7e73], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cd86a35]]
2021-03-12 03:59:41,794 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cd86a35]
2021-03-12 03:59:41,794 [main:117] - GENERATED CALL = ((String::plus)).name.lowercase()
2021-03-12 03:59:41,795 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@fae7e73], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2273a0a3]]
2021-03-12 03:59:41,795 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2273a0a3]
2021-03-12 03:59:41,932 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 03:59:42,077 [main:43] - GENERATING CALL OF fun <T> hashSetOf(): Iterable<Int> = TODO()
2021-03-12 03:59:42,082 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(): Iterable<Int> = TODO()
2021-03-12 03:59:42,227 [main:95] - GENERATED = hashSetOf<Int>()
2021-03-12 03:59:42,227 [main:117] - GENERATED CALL = ((String::plus)).name.slice(hashSetOf<Int>())
2021-03-12 03:59:42,228 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@fae7e73], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2fe79f34]]
2021-03-12 03:59:42,228 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2fe79f34]
2021-03-12 03:59:42,364 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:59:42,368 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:59:42,372 [main:117] - GENERATED CALL = ((String::plus)).name.takeLastWhile({a: Char -> true})
2021-03-12 03:59:42,372 [main:113] - Case = [public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@7ae3e1ad], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e8483d9]]
2021-03-12 03:59:42,372 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@7ae3e1ad]
2021-03-12 03:59:42,509 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:59:42,510 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e8483d9]
2021-03-12 03:59:42,676 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:59:42,680 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:59:42,684 [main:117] - GENERATED CALL = ((String::plus)).invoke((""::plus).invoke("ssdtf"), "jxcwk").dropLastWhile({a: Char -> false})
2021-03-12 03:59:42,684 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@fae7e73], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7115a40]]
2021-03-12 03:59:42,684 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7115a40]
2021-03-12 03:59:42,820 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:59:42,824 [main:117] - GENERATED CALL = ((String::plus)).name.trimMargin("lxzsz")
2021-03-12 03:59:42,824 [main:113] - Case = [public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@7ae3e1ad], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c88e713]]
2021-03-12 03:59:42,825 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@7ae3e1ad]
2021-03-12 03:59:42,962 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:59:42,962 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c88e713]
2021-03-12 03:59:42,962 [main:117] - GENERATED CALL = ((String::plus)).invoke(val MAX_LONG =.trimEnd()
2021-03-12 03:59:42,962 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@fae7e73], public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dcba3be]]
2021-03-12 03:59:42,962 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dcba3be]
2021-03-12 03:59:42,962 [main:117] - GENERATED CALL = ((String::plus)).name.replaceIndentByMargin(PREFIX, ((""::plus)).name)
2021-03-12 03:59:42,962 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@fae7e73], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e3da54]]
2021-03-12 03:59:42,962 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e3da54]
2021-03-12 03:59:43,099 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 03:59:43,103 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 03:59:43,106 [main:117] - GENERATED CALL = ((String::plus)).name.dropWhile({a: Char -> false})
2021-03-12 03:59:43,107 [main:114] - replacement of executionType.name of type String is ((String::plus)).invoke("cmanr", "hbewl").padStart(-1891813490, 'å¾¯')
2021-03-12 03:59:43,242 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:59:43,242 [main:66] - Compilation checking started
2021-03-12 03:59:43,837 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = ((""::plus).invoke("ssdtf")).length.plus(-6);

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return (PREFIX).trim()
    }

    private fun fu8() {
        prope6.add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(MAX_LONG) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return (MAX_LONG).replaceRange(-788212043, 2021330778, "aqlwn")
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("huxlm")}
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0((PREFIX::plus).name.padEnd(-1451405411, 'î¬'))
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return ((String::plus)).invoke("cmanr", "hbewl").padStart(-1891813490, 'å¾¯')
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in 1..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (prope6[i - (arrayListOf<Short>()).indexOf((arrayListOf<Short>()).get(1042941104))] != i)
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "tjwvb"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (type) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in Kla1.values()) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:59:43,839 [main:107] - replacing (prope6, ArrayList<Int>)
2021-03-12 03:59:43,840 [main:50] - replacing prope6 ArrayList<Int>
2021-03-12 03:59:43,840 [main:54] - Getting value of type ArrayList<Int>
2021-03-12 03:59:43,979 [main:302] - generating value of type = ArrayList<Int> false depth = 0
2021-03-12 03:59:44,126 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Int): ArrayList<Int> = TODO()
2021-03-12 03:59:44,131 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Int): ArrayList<Int> = TODO()
2021-03-12 03:59:44,277 [main:302] - generating value of type = Int true depth = 3
2021-03-12 03:59:44,281 [main:95] - GENERATED = arrayListOf<Int>(2008976730)
2021-03-12 03:59:44,281 [main:58] - GENERATED VALUE OF TYPE ArrayList<Int> = arrayListOf<Int>(2008976730)
2021-03-12 03:59:44,281 [main:61] - GENERATED IS CALL =true
2021-03-12 03:59:44,289 [main:67] - randomType = Byte
2021-03-12 03:59:44,429 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:59:44,524 [main:106] - GETTING ArrayList<Int> from ArrayList<Short>
2021-03-12 03:59:44,635 [main:114] - replacement of prope6 of type ArrayList<Int> is arrayListOf<Int>(2008976730)
2021-03-12 03:59:44,774 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 03:59:44,774 [main:66] - Compilation checking started
2021-03-12 03:59:45,416 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = ((""::plus).invoke("ssdtf")).length.plus(-6);

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return (PREFIX).trim()
    }

    private fun fu8() {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
arrayListOf<Int>(2008976730).add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(MAX_LONG) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return (MAX_LONG).replaceRange(-788212043, 2021330778, "aqlwn")
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("huxlm")}
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0((PREFIX::plus).name.padEnd(-1451405411, 'î¬'))
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return ((String::plus)).invoke("cmanr", "hbewl").padStart(-1891813490, 'å¾¯')
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in 1..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (prope6[i - (arrayListOf<Short>()).indexOf((arrayListOf<Short>()).get(1042941104))] != i)
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "tjwvb"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (type) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in Kla1.values()) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:59:45,420 [main:107] - replacing (Kla1.values(), Array<Kla1>)
2021-03-12 03:59:45,420 [main:50] - replacing Kla1.values() Array<Kla1>
2021-03-12 03:59:45,420 [main:54] - Getting value of type Array<Kla1>
2021-03-12 03:59:45,570 [main:302] - generating value of type = Array<Kla1> false depth = 0
2021-03-12 03:59:45,742 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Kla1> = TODO()
2021-03-12 03:59:45,747 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Kla1> = TODO()
2021-03-12 03:59:45,896 [main:95] - GENERATED = emptyArray<Kla1>()
2021-03-12 03:59:45,896 [main:58] - GENERATED VALUE OF TYPE Array<Kla1> = emptyArray<Kla1>()
2021-03-12 03:59:45,896 [main:61] - GENERATED IS CALL =true
2021-03-12 03:59:45,904 [main:67] - randomType = Double
2021-03-12 03:59:46,043 [main:302] - generating value of type = Double true depth = 0
2021-03-12 03:59:46,076 [main:106] - GETTING Array<Kla1> from ArrayList<Short>
2021-03-12 03:59:46,189 [main:106] - GETTING Array<Kla1> from Companion
2021-03-12 03:59:46,195 [main:106] - GETTING Array<Kla1> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:46,238 [main:106] - GETTING Array<Kla1> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:46,239 [main:106] - GETTING Array<Kla1> from String?
2021-03-12 03:59:46,259 [main:106] - GETTING Array<Kla1> from String
2021-03-12 03:59:46,275 [main:106] - GETTING Array<Kla1> from String
2021-03-12 03:59:46,277 [main:106] - GETTING Array<Kla1> from String
2021-03-12 03:59:46,278 [main:106] - GETTING Array<Kla1> from String
2021-03-12 03:59:46,279 [main:106] - GETTING Array<Kla1> from ArrayList<Short>
2021-03-12 03:59:46,280 [main:106] - GETTING Array<Kla1> from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:46,324 [main:106] - GETTING Array<Kla1> from String
2021-03-12 03:59:46,325 [main:106] - GETTING Array<Kla1> from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:46,326 [main:106] - GETTING Array<Kla1> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:46,327 [main:106] - GETTING Array<Kla1> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:46,327 [main:106] - GETTING Array<Kla1> from String
2021-03-12 03:59:46,328 [main:106] - GETTING Array<Kla1> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:46,329 [main:106] - GETTING Array<Kla1> from Short
2021-03-12 03:59:46,360 [main:114] - replacement of Kla1.values() of type Array<Kla1> is emptyArray<Kla1>()
2021-03-12 03:59:46,507 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 03:59:46,507 [main:66] - Compilation checking started
2021-03-12 03:59:47,140 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = ((""::plus).invoke("ssdtf")).length.plus(-6);

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return (PREFIX).trim()
    }

    private fun fu8() {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
arrayListOf<Int>(2008976730).add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(MAX_LONG) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return (MAX_LONG).replaceRange(-788212043, 2021330778, "aqlwn")
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("huxlm")}
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0((PREFIX::plus).name.padEnd(-1451405411, 'î¬'))
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return ((String::plus)).invoke("cmanr", "hbewl").padStart(-1891813490, 'å¾¯')
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in 1..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (prope6[i - (arrayListOf<Short>()).indexOf((arrayListOf<Short>()).get(1042941104))] != i)
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "tjwvb"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (type) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in emptyArray<Kla1>()) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:59:47,143 [main:107] - replacing (prope1, Int)
2021-03-12 03:59:47,144 [main:50] - replacing prope1 Int
2021-03-12 03:59:47,144 [main:54] - Getting value of type Int
2021-03-12 03:59:47,287 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:47,291 [main:58] - GENERATED VALUE OF TYPE Int = -378065877
2021-03-12 03:59:47,291 [main:61] - GENERATED IS CALL =false
2021-03-12 03:59:48,199 [main:67] - randomType = Function2<Float?, Kla1, MutableMap<UShort, Double>>
2021-03-12 03:59:48,200 [main:106] - GETTING Int from String
2021-03-12 03:59:48,217 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@b5e9abb]]
2021-03-12 03:59:48,217 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339]
2021-03-12 03:59:48,217 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@b5e9abb]
2021-03-12 03:59:48,357 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:59:48,361 [main:117] - GENERATED CALL = (PREFIX + MAX_LONG).compareTo(((""::plus)).name).times(-114)
2021-03-12 03:59:48,361 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2e465cf2], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a8309ec]]
2021-03-12 03:59:48,362 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a8309ec]
2021-03-12 03:59:48,362 [main:117] - GENERATED CALL = (PREFIX + MAX_LONG).length.dec()
2021-03-12 03:59:48,362 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2e465cf2], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7144a18d]]
2021-03-12 03:59:48,362 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7144a18d]
2021-03-12 03:59:48,501 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:48,505 [main:117] - GENERATED CALL = (PREFIX + MAX_LONG).length.ushr(1101828669)
2021-03-12 03:59:48,505 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2e465cf2], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37c654a9]]
2021-03-12 03:59:48,505 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37c654a9]
2021-03-12 03:59:48,675 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:59:48,679 [main:117] - GENERATED CALL = (PREFIX + MAX_LONG).length.compareTo(78)
2021-03-12 03:59:48,679 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@182261fc]]
2021-03-12 03:59:48,679 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339]
2021-03-12 03:59:48,680 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@182261fc]
2021-03-12 03:59:48,680 [main:117] - GENERATED CALL = (PREFIX + MAX_LONG).compareTo(val MAX_LONG =.takeHighestOneBit()
2021-03-12 03:59:48,680 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9f53c05]]
2021-03-12 03:59:48,680 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:59:48,820 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:48,965 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:48,969 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9f53c05]
2021-03-12 03:59:49,109 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 03:59:49,113 [main:302] - generating value of type = Int true depth = 1
2021-03-12 03:59:49,117 [main:117] - GENERATED CALL = (PREFIX + MAX_LONG).subSequence(1607687995, 177552409).sumBy({a: Char -> -921599044})
2021-03-12 03:59:49,117 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37c654a9]]
2021-03-12 03:59:49,117 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339]
2021-03-12 03:59:49,117 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37c654a9]
2021-03-12 03:59:49,257 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 03:59:49,261 [main:117] - GENERATED CALL = (PREFIX + MAX_LONG).compareTo(val PREFIX =.compareTo(74)
2021-03-12 03:59:49,261 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@40beeda]]
2021-03-12 03:59:49,261 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339]
2021-03-12 03:59:49,261 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@40beeda]
2021-03-12 03:59:49,261 [main:117] - GENERATED CALL = (PREFIX + MAX_LONG).compareTo(val MAX_LONG =.toInt()
2021-03-12 03:59:49,262 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@593c870]]
2021-03-12 03:59:49,262 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:59:49,401 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:49,549 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:49,553 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@593c870]
2021-03-12 03:59:49,554 [main:117] - GENERATED CALL = (PREFIX + MAX_LONG).subSequence(1117305758, 1443718479).count()
2021-03-12 03:59:49,554 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@162e433]]
2021-03-12 03:59:49,554 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339]
2021-03-12 03:59:49,554 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@162e433]
2021-03-12 03:59:49,698 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:49,702 [main:117] - GENERATED CALL = (PREFIX + MAX_LONG).compareTo(((""::plus)).name).and(-1447464801)
2021-03-12 03:59:49,702 [main:114] - replacement of prope1 of type Int is (PREFIX + MAX_LONG).compareTo(val MAX_LONG =.toInt()
2021-03-12 03:59:49,841 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 03:59:49,841 [main:66] - Compilation checking started
2021-03-12 03:59:49,848 [main:71] - Wrong syntax or breaks conditions
2021-03-12 03:59:49,848 [main:49] - Result = false
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = ((""::plus).invoke("ssdtf")).length.plus(-6);

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool((PREFIX + MAX_LONG).compareTo(val MAX_LONG =.toInt())

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return (PREFIX).trim()
    }

    private fun fu8() {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
arrayListOf<Int>(2008976730).add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(MAX_LONG) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return (MAX_LONG).replaceRange(-788212043, 2021330778, "aqlwn")
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("huxlm")}
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0((PREFIX::plus).name.padEnd(-1451405411, 'î¬'))
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return ((String::plus)).invoke("cmanr", "hbewl").padStart(-1891813490, 'å¾¯')
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in 1..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (prope6[i - (arrayListOf<Short>()).indexOf((arrayListOf<Short>()).get(1042941104))] != i)
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "tjwvb"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (type) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in emptyArray<Kla1>()) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:59:49,850 [main:107] - replacing (1, Int)
2021-03-12 03:59:49,851 [main:50] - replacing 1 Int
2021-03-12 03:59:49,851 [main:54] - Getting value of type Int
2021-03-12 03:59:49,989 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:49,993 [main:58] - GENERATED VALUE OF TYPE Int = -321833297
2021-03-12 03:59:49,993 [main:61] - GENERATED IS CALL =false
2021-03-12 03:59:50,163 [main:67] - randomType = Char?
2021-03-12 03:59:50,301 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:59:50,324 [main:149] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@e31b846]
2021-03-12 03:59:50,325 [main:78] - Generated call from random type = ('î')?.toInt()
2021-03-12 03:59:50,325 [main:114] - replacement of 1 of type Int is ('î')?.toInt()
2021-03-12 03:59:50,463 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 03:59:50,464 [main:66] - Compilation checking started
2021-03-12 03:59:51,066 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = ((""::plus).invoke("ssdtf")).length.plus(-6);

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return (PREFIX).trim()
    }

    private fun fu8() {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
arrayListOf<Int>(2008976730).add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(MAX_LONG) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return (MAX_LONG).replaceRange(-788212043, 2021330778, "aqlwn")
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("huxlm")}
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0((PREFIX::plus).name.padEnd(-1451405411, 'î¬'))
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return ((String::plus)).invoke("cmanr", "hbewl").padStart(-1891813490, 'å¾¯')
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in ('î')?.toInt()..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (prope6[i - (arrayListOf<Short>()).indexOf((arrayListOf<Short>()).get(1042941104))] != i)
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "tjwvb"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (type) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in emptyArray<Kla1>()) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:59:51,068 [main:107] - replacing (prope6[i - (arrayListOf<Short>()).indexOf((arrayListOf<Short>()).get(1042941104))] != i, Boolean)
2021-03-12 03:59:51,069 [main:50] - replacing prope6[i - (arrayListOf<Short>()).indexOf((arrayListOf<Short>()).get(1042941104))] != i Boolean
2021-03-12 03:59:51,069 [main:54] - Getting value of type Boolean
2021-03-12 03:59:51,212 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:59:51,216 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 03:59:51,216 [main:61] - GENERATED IS CALL =false
2021-03-12 03:59:51,231 [main:67] - randomType = Kla0
2021-03-12 03:59:51,370 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 03:59:51,374 [main:112] - generating klass Kla0 text = class Kla0(message: String): Exception(message)
2021-03-12 03:59:51,512 [main:194] - Type params = []
2021-03-12 03:59:51,653 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:59:51,672 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@fa0fa0f]
2021-03-12 03:59:51,846 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:59:51,847 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@62532a51]
2021-03-12 03:59:51,847 [main:78] - Generated call from random type = (Kla0("dmvxv")).equals("vjtdg").not()
2021-03-12 03:59:51,848 [main:106] - GETTING Boolean from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:51,890 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@2f2f82bf]]
2021-03-12 03:59:51,890 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@2f2f82bf]
2021-03-12 03:59:52,031 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:59:52,031 [main:117] - GENERATED CALL = ((String::plus)).equals("fwpom")
2021-03-12 03:59:52,031 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@2f2f82bf], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@503d03f]]
2021-03-12 03:59:52,031 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@2f2f82bf]
2021-03-12 03:59:52,172 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:59:52,172 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@503d03f]
2021-03-12 03:59:52,311 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:59:52,311 [main:117] - GENERATED CALL = ((String::plus)).equals("bpmse").equals("zwebu")
2021-03-12 03:59:52,311 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@fae7e73], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32500bfb]]
2021-03-12 03:59:52,311 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32500bfb]
2021-03-12 03:59:52,451 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:59:52,455 [main:117] - GENERATED CALL = ((String::plus)).name.endsWith(var prope0 = (""::plus).invoke("ssdtf").trimStart()
2021-03-12 03:59:52,455 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@2f2f82bf], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5a67e2b6]]
2021-03-12 03:59:52,455 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction2[DeserializedSimpleFunctionDescriptor@2f2f82bf]
2021-03-12 03:59:52,601 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:59:52,601 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5a67e2b6]
2021-03-12 03:59:52,741 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:59:52,745 [main:117] - GENERATED CALL = ((String::plus)).equals("znfwv").or(false)
2021-03-12 03:59:52,745 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@fae7e73], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@234131f3]]
2021-03-12 03:59:52,745 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@234131f3]
2021-03-12 03:59:52,745 [main:117] - GENERATED CALL = ((String::plus)).name.toBoolean()
2021-03-12 03:59:52,745 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@fae7e73], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65f90957]]
2021-03-12 03:59:52,745 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65f90957]
2021-03-12 03:59:52,746 [main:117] - GENERATED CALL = ((String::plus)).name.matches(var prope0 = (""::plus).invoke("ssdtf").trimStart()
2021-03-12 03:59:52,746 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@fae7e73], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67842afb]]
2021-03-12 03:59:52,746 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67842afb]
2021-03-12 03:59:52,885 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:59:52,889 [main:117] - GENERATED CALL = ((String::plus)).name.startsWith(var prope0 = (""::plus).invoke("ssdtf").trimStart()
2021-03-12 03:59:52,889 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction2[DeserializedPropertyDescriptor@fae7e73], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d9803b4]]
2021-03-12 03:59:52,889 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d9803b4]
2021-03-12 03:59:53,028 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:59:53,028 [main:117] - GENERATED CALL = ((String::plus)).name.equals("abpko")
2021-03-12 03:59:53,028 [main:113] - Case = [public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@718f165a], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d9803b4]]
2021-03-12 03:59:53,028 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@718f165a]
2021-03-12 03:59:53,168 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:59:53,168 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d9803b4]
2021-03-12 03:59:53,307 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:59:53,307 [main:117] - GENERATED CALL = ((String::plus)).invoke(var prope0 = (""::plus).invoke("ssdtf").trimStart().equals("qeoyl")
2021-03-12 03:59:53,307 [main:113] - Case = [public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@718f165a], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67842afb]]
2021-03-12 03:59:53,307 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: kotlin.String, other: kotlin.Any?): kotlin.String defined in kotlin.Function2[FunctionInvokeDescriptor@718f165a]
2021-03-12 03:59:53,446 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 03:59:53,446 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67842afb]
2021-03-12 03:59:53,586 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:59:53,590 [main:117] - GENERATED CALL = ((String::plus)).invoke(var prope0 = (""::plus).invoke("ssdtf").trimStart().startsWith(val MAX_LONG =
2021-03-12 03:59:53,590 [main:114] - replacement of prope6[i - (arrayListOf<Short>()).indexOf((arrayListOf<Short>()).get(1042941104))] != i of type Boolean is ((String::plus)).name.equals("abpko")
2021-03-12 03:59:53,729 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:59:53,729 [main:66] - Compilation checking started
2021-03-12 03:59:54,317 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = ((""::plus).invoke("ssdtf")).length.plus(-6);

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return (PREFIX).trim()
    }

    private fun fu8() {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
arrayListOf<Int>(2008976730).add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(MAX_LONG) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return (MAX_LONG).replaceRange(-788212043, 2021330778, "aqlwn")
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("huxlm")}
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0((PREFIX::plus).name.padEnd(-1451405411, 'î¬'))
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return ((String::plus)).invoke("cmanr", "hbewl").padStart(-1891813490, 'å¾¯')
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in ('î')?.toInt()..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (((String::plus)).name.equals("abpko"))
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "tjwvb"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (type) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in emptyArray<Kla1>()) {
            val prope10 = fu7(type)
            if (prope10 != "OK") return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:59:54,319 [main:107] - replacing (prope10 != "OK", Boolean)
2021-03-12 03:59:54,320 [main:50] - replacing prope10 != "OK" Boolean
2021-03-12 03:59:54,320 [main:54] - Getting value of type Boolean
2021-03-12 03:59:54,467 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:59:54,471 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 03:59:54,471 [main:61] - GENERATED IS CALL =false
2021-03-12 03:59:55,028 [main:67] - randomType = Function2<Float, Array<Kla2>, Kla2>
2021-03-12 03:59:55,029 [main:106] - GETTING Boolean from String
2021-03-12 03:59:55,053 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@691c0bdf]]
2021-03-12 03:59:55,053 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:59:55,193 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:55,336 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:55,339 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@691c0bdf]
2021-03-12 03:59:55,339 [main:117] - GENERATED CALL = (((""::plus)).name).subSequence(1951839741, -1567928360).isNotEmpty()
2021-03-12 03:59:55,339 [main:113] - Case = [public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32500bfb]]
2021-03-12 03:59:55,339 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32500bfb]
2021-03-12 03:59:55,478 [main:302] - generating value of type = String true depth = 0
2021-03-12 03:59:55,620 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:59:55,624 [main:117] - GENERATED CALL = (((""::plus)).name).endsWith("eejru", true)
2021-03-12 03:59:55,624 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b736530]]
2021-03-12 03:59:55,624 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:59:55,762 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:55,902 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:55,905 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b736530]
2021-03-12 03:59:55,906 [main:117] - GENERATED CALL = (((""::plus)).name).subSequence(226845794, 2126470390).isBlank()
2021-03-12 03:59:55,906 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35cc5325]]
2021-03-12 03:59:55,906 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:59:56,042 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:56,183 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:56,187 [main:149] - GENERATING call of type public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35cc5325]
2021-03-12 03:59:56,323 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:59:56,468 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:59:56,472 [main:117] - GENERATED CALL = (((""::plus)).name).subSequence(1758134261, 152230256).startsWith('î±', true)
2021-03-12 03:59:56,472 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14d3cac5]]
2021-03-12 03:59:56,472 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 03:59:56,612 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:56,615 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14d3cac5]
2021-03-12 03:59:56,616 [main:117] - GENERATED CALL = (((""::plus)).name).get(1288234435).isUpperCase()
2021-03-12 03:59:56,616 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a6a142c]]
2021-03-12 03:59:56,616 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 03:59:56,753 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:56,756 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a6a142c]
2021-03-12 03:59:56,756 [main:117] - GENERATED CALL = (((""::plus)).name).get(-1057391880).isLowerCase()
2021-03-12 03:59:56,756 [main:113] - Case = [public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cec3466]]
2021-03-12 03:59:56,757 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cec3466]
2021-03-12 03:59:56,894 [main:302] - generating value of type = Char true depth = 0
2021-03-12 03:59:57,038 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 03:59:57,042 [main:117] - GENERATED CALL = (((""::plus)).name).contains('ë³', false)
2021-03-12 03:59:57,042 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c41f367]]
2021-03-12 03:59:57,042 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 03:59:57,181 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:57,326 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:57,329 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2c41f367]
2021-03-12 03:59:57,329 [main:117] - GENERATED CALL = (((""::plus)).name).subSequence(-887086817, 1099507349).any()
2021-03-12 03:59:57,329 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d9803b4], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@503d03f]]
2021-03-12 03:59:57,329 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d9803b4]
2021-03-12 03:59:57,468 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:59:57,468 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@503d03f]
2021-03-12 03:59:57,606 [main:302] - generating value of type = Any false depth = 0
2021-03-12 03:59:57,607 [main:117] - GENERATED CALL = (((""::plus)).name).equals("drwxh").equals("zsknq")
2021-03-12 03:59:57,607 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20a2adef]]
2021-03-12 03:59:57,607 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 03:59:57,757 [main:302] - generating value of type = Int true depth = 0
2021-03-12 03:59:57,761 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20a2adef]
2021-03-12 03:59:57,761 [main:117] - GENERATED CALL = (((""::plus)).name).get(643345415).isWhitespace()
2021-03-12 03:59:57,761 [main:114] - replacement of prope10 != "OK" of type Boolean is (((""::plus)).name).get(1288234435).isUpperCase()
2021-03-12 03:59:57,899 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 03:59:57,900 [main:66] - Compilation checking started
2021-03-12 03:59:58,533 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = ((""::plus).invoke("ssdtf")).length.plus(-6);

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return (PREFIX).trim()
    }

    private fun fu8() {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
arrayListOf<Int>(2008976730).add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(MAX_LONG) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return (MAX_LONG).replaceRange(-788212043, 2021330778, "aqlwn")
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("huxlm")}
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0((PREFIX::plus).name.padEnd(-1451405411, 'î¬'))
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return ((String::plus)).invoke("cmanr", "hbewl").padStart(-1891813490, 'å¾¯')
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in ('î')?.toInt()..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (((String::plus)).name.equals("abpko"))
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "tjwvb"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (type) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in emptyArray<Kla1>()) {
            val prope10 = fu7(type)
            if ((((""::plus)).name).get(1288234435).isUpperCase()) return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 03:59:58,536 [main:107] - replacing (Kla0((PREFIX::plus).name.padEnd(-1451405411, 'î¬')), Kla0)
2021-03-12 03:59:58,536 [main:50] - replacing Kla0((PREFIX::plus).name.padEnd(-1451405411, 'î¬')) Kla0
2021-03-12 03:59:58,536 [main:54] - Getting value of type Kla0
2021-03-12 03:59:58,674 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 03:59:58,678 [main:112] - generating klass Kla0 text = class Kla0(message: String): Exception(message)
2021-03-12 03:59:58,815 [main:194] - Type params = []
2021-03-12 03:59:58,952 [main:302] - generating value of type = String true depth = 2
2021-03-12 03:59:58,955 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0("wzwvj")
2021-03-12 03:59:58,955 [main:61] - GENERATED IS CALL =true
2021-03-12 03:59:59,115 [main:67] - randomType = UInt
2021-03-12 03:59:59,254 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 03:59:59,284 [main:106] - GETTING Kla0 from String
2021-03-12 03:59:59,300 [main:106] - GETTING Kla0 from String
2021-03-12 03:59:59,301 [main:106] - GETTING Kla0 from Companion
2021-03-12 03:59:59,307 [main:106] - GETTING Kla0 from String
2021-03-12 03:59:59,307 [main:106] - GETTING Kla0 from String?
2021-03-12 03:59:59,327 [main:106] - GETTING Kla0 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:59,369 [main:106] - GETTING Kla0 from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:59,412 [main:106] - GETTING Kla0 from ArrayList<Short>
2021-03-12 03:59:59,523 [main:106] - GETTING Kla0 from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:59,523 [main:106] - GETTING Kla0 from String
2021-03-12 03:59:59,524 [main:106] - GETTING Kla0 from String
2021-03-12 03:59:59,525 [main:106] - GETTING Kla0 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:59,525 [main:106] - GETTING Kla0 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:59,526 [main:106] - GETTING Kla0 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:59,527 [main:106] - GETTING Kla0 from Short
2021-03-12 03:59:59,557 [main:106] - GETTING Kla0 from ArrayList<Short>
2021-03-12 03:59:59,558 [main:106] - GETTING Kla0 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 03:59:59,558 [main:106] - GETTING Kla0 from String
2021-03-12 03:59:59,558 [main:114] - replacement of Kla0((PREFIX::plus).name.padEnd(-1451405411, 'î¬')) of type Kla0 is Kla0("wzwvj")
2021-03-12 03:59:59,697 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 03:59:59,697 [main:66] - Compilation checking started
2021-03-12 04:00:00,296 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = ((""::plus).invoke("ssdtf")).length.plus(-6);

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return (PREFIX).trim()
    }

    private fun fu8() {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
arrayListOf<Int>(2008976730).add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
        }
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(MAX_LONG) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return (MAX_LONG).replaceRange(-788212043, 2021330778, "aqlwn")
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("huxlm")}
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0("wzwvj")
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return ((String::plus)).invoke("cmanr", "hbewl").padStart(-1891813490, 'å¾¯')
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in ('î')?.toInt()..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (((String::plus)).name.equals("abpko"))
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "tjwvb"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (type) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in emptyArray<Kla1>()) {
            val prope10 = fu7(type)
            if ((((""::plus)).name).get(1288234435).isUpperCase()) return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 04:00:00,298 [main:107] - replacing ({
            fu8()
        }, Function0<Unit>)
2021-03-12 04:00:00,298 [main:50] - replacing {
            fu8()
        } Function0<Unit>
2021-03-12 04:00:00,298 [main:54] - Getting value of type Function0<Unit>
2021-03-12 04:00:00,436 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 04:00:00,439 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 04:00:00,582 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 04:00:00,586 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 04:00:00,892 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 04:00:00,896 [main:95] - GENERATED = check(true)
2021-03-12 04:00:00,896 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true)}
2021-03-12 04:00:00,896 [main:61] - GENERATED IS CALL =false
2021-03-12 04:00:01,223 [main:67] - randomType = Array<Double?>
2021-03-12 04:00:01,390 [main:302] - generating value of type = Array<Double?> false depth = 0
2021-03-12 04:00:01,534 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: Double?): Array<Double?> = TODO()
2021-03-12 04:00:01,539 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: Double?): Array<Double?> = TODO()
2021-03-12 04:00:01,684 [main:302] - generating value of type = Double true depth = 3
2021-03-12 04:00:01,688 [main:95] - GENERATED = arrayOf<Double?>(0.11956715976649113)
2021-03-12 04:00:01,701 [main:106] - GETTING Function0<Unit> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 04:00:01,750 [main:106] - GETTING Function0<Unit> from String
2021-03-12 04:00:01,768 [main:106] - GETTING Function0<Unit> from String
2021-03-12 04:00:01,769 [main:106] - GETTING Function0<Unit> from String?
2021-03-12 04:00:01,788 [main:106] - GETTING Function0<Unit> from ArrayList<Short>
2021-03-12 04:00:01,907 [main:106] - GETTING Function0<Unit> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 04:00:01,908 [main:106] - GETTING Function0<Unit> from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 04:00:01,955 [main:106] - GETTING Function0<Unit> from String
2021-03-12 04:00:01,956 [main:106] - GETTING Function0<Unit> from String
2021-03-12 04:00:01,957 [main:106] - GETTING Function0<Unit> from ArrayList<Short>
2021-03-12 04:00:01,958 [main:106] - GETTING Function0<Unit> from String
2021-03-12 04:00:01,958 [main:106] - GETTING Function0<Unit> from String
2021-03-12 04:00:01,959 [main:106] - GETTING Function0<Unit> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 04:00:01,960 [main:106] - GETTING Function0<Unit> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 04:00:01,961 [main:106] - GETTING Function0<Unit> from Companion
2021-03-12 04:00:01,969 [main:106] - GETTING Function0<Unit> from Short
2021-03-12 04:00:01,999 [main:106] - GETTING Function0<Unit> from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 04:00:02,000 [main:106] - GETTING Function0<Unit> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 04:00:02,000 [main:114] - replacement of {
            fu8()
        } of type Function0<Unit> is { check(true)}
2021-03-12 04:00:02,142 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 04:00:02,143 [main:66] - Compilation checking started
2021-03-12 04:00:02,749 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = ((""::plus).invoke("ssdtf")).length.plus(-6);

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return (PREFIX).trim()
    }

    private fun fu8() {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
arrayListOf<Int>(2008976730).add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { check(true)}
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(MAX_LONG) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return (MAX_LONG).replaceRange(-788212043, 2021330778, "aqlwn")
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("huxlm")}
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0("wzwvj")
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return ((String::plus)).invoke("cmanr", "hbewl").padStart(-1891813490, 'å¾¯')
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in ('î')?.toInt()..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (((String::plus)).name.equals("abpko"))
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "tjwvb"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (type) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in emptyArray<Kla1>()) {
            val prope10 = fu7(type)
            if ((((""::plus)).name).get(1288234435).isUpperCase()) return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 04:00:02,752 [main:107] - replacing (name, String)
2021-03-12 04:00:02,752 [main:50] - replacing name String
2021-03-12 04:00:02,752 [main:54] - Getting value of type String
2021-03-12 04:00:02,890 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:00:02,893 [main:58] - GENERATED VALUE OF TYPE String = "gsgqz"
2021-03-12 04:00:02,893 [main:61] - GENERATED IS CALL =false
2021-03-12 04:00:02,901 [main:67] - randomType = Byte
2021-03-12 04:00:03,042 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 04:00:03,078 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@73e08a42]
2021-03-12 04:00:03,078 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bdbc0f5]
2021-03-12 04:00:03,078 [main:78] - Generated call from random type = (6).toChar().lowercase()
2021-03-12 04:00:03,078 [main:106] - GETTING String from String
2021-03-12 04:00:03,094 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d989160]]
2021-03-12 04:00:03,094 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d989160]
2021-03-12 04:00:03,234 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:03,238 [main:117] - GENERATED CALL = ((""::plus).invoke("ssdtf")).substring(672789099)
2021-03-12 04:00:03,238 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23c4b3bf]]
2021-03-12 04:00:03,238 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 04:00:03,377 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:03,381 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23c4b3bf]
2021-03-12 04:00:03,381 [main:117] - GENERATED CALL = ((""::plus).invoke("ssdtf")).get(-573773696).uppercase()
2021-03-12 04:00:03,381 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d7a703b]]
2021-03-12 04:00:03,381 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 04:00:03,520 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:03,662 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:03,665 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d7a703b]
2021-03-12 04:00:03,803 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 04:00:03,948 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 04:00:03,952 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 04:00:04,265 [main:302] - generating value of type = String true depth = 3
2021-03-12 04:00:04,269 [main:95] - GENERATED = Regex("xpnkk")
2021-03-12 04:00:04,406 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 04:00:04,409 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 04:00:04,416 [main:117] - GENERATED CALL = ((""::plus).invoke("ssdtf")).subSequence(84036220, -148034073).replace(Regex("xpnkk"), {a: MatchResult -> "fpoik"})
2021-03-12 04:00:04,416 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a284f16]]
2021-03-12 04:00:04,416 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 04:00:04,586 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:04,727 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:04,730 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a284f16]
2021-03-12 04:00:04,868 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:04,872 [main:117] - GENERATED CALL = ((""::plus).invoke("ssdtf")).subSequence(-2135674241, 339684366).repeat(829570418)
2021-03-12 04:00:04,872 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63dad168]]
2021-03-12 04:00:04,872 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63dad168]
2021-03-12 04:00:05,011 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:05,154 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:05,295 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 04:00:05,302 [main:117] - GENERATED CALL = ((""::plus).invoke("ssdtf")).replaceRange(474243698, -380415679, StringBuilder())
2021-03-12 04:00:05,302 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f1f24e3]]
2021-03-12 04:00:05,302 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f1f24e3]
2021-03-12 04:00:05,302 [main:117] - GENERATED CALL = ((""::plus).invoke("ssdtf")).replaceIndent((String::plus).name)
2021-03-12 04:00:05,302 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1839c17c]]
2021-03-12 04:00:05,302 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1839c17c]
2021-03-12 04:00:05,303 [main:117] - GENERATED CALL = ((""::plus).invoke("ssdtf")).toLowerCase()
2021-03-12 04:00:05,303 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24f3d945]]
2021-03-12 04:00:05,303 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 04:00:05,440 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:05,444 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24f3d945]
2021-03-12 04:00:05,444 [main:117] - GENERATED CALL = ((""::plus).invoke("ssdtf")).get(1041517507).titlecase()
2021-03-12 04:00:05,444 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1262e19c]]
2021-03-12 04:00:05,444 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1262e19c]
2021-03-12 04:00:05,581 [main:302] - generating value of type = Char true depth = 0
2021-03-12 04:00:05,585 [main:117] - GENERATED CALL = ((""::plus).invoke("ssdtf")).substringAfter('é¢', var prope0 = (""::plus).invoke("ssdtf").trimStart()
2021-03-12 04:00:05,585 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e3da54]]
2021-03-12 04:00:05,585 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e3da54]
2021-03-12 04:00:05,723 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 04:00:05,726 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 04:00:05,730 [main:117] - GENERATED CALL = ((""::plus).invoke("ssdtf")).dropWhile({a: Char -> true})
2021-03-12 04:00:05,730 [main:114] - replacement of name of type String is ((""::plus).invoke("ssdtf")).subSequence(84036220, -148034073).replace(Regex("xpnkk"), {a: MatchResult -> "fpoik"})
2021-03-12 04:00:05,866 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:00:05,867 [main:66] - Compilation checking started
2021-03-12 04:00:06,266 [main:49] - Result = false
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = ((""::plus).invoke("ssdtf")).length.plus(-6);

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return (PREFIX).trim()
    }

    private fun fu8() {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
arrayListOf<Int>(2008976730).add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { check(true)}
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(MAX_LONG) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.((""::plus).invoke("ssdtf")).subSequence(84036220, -148034073).replace(Regex("xpnkk"), {a: MatchResult -> "fpoik"})
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return (MAX_LONG).replaceRange(-788212043, 2021330778, "aqlwn")
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("huxlm")}
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0("wzwvj")
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return ((String::plus)).invoke("cmanr", "hbewl").padStart(-1891813490, 'å¾¯')
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in ('î')?.toInt()..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (((String::plus)).name.equals("abpko"))
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "tjwvb"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (type) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in emptyArray<Kla1>()) {
            val prope10 = fu7(type)
            if ((((""::plus)).name).get(1288234435).isUpperCase()) return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 04:00:06,269 [main:107] - replacing (type, Kla1)
2021-03-12 04:00:06,269 [main:50] - replacing type Kla1
2021-03-12 04:00:06,269 [main:54] - Getting value of type Kla1
2021-03-12 04:00:06,407 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 04:00:06,410 [main:112] - generating klass Kla1 text = enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}
2021-03-12 04:00:06,410 [main:58] - GENERATED VALUE OF TYPE Kla1 = Kla1.Kla6
2021-03-12 04:00:06,411 [main:61] - GENERATED IS CALL =false
2021-03-12 04:00:06,575 [main:67] - randomType = Char?
2021-03-12 04:00:06,713 [main:302] - generating value of type = Char true depth = 0
2021-03-12 04:00:06,736 [main:106] - GETTING Kla1 from Short
2021-03-12 04:00:06,766 [main:106] - GETTING Kla1 from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 04:00:06,809 [main:106] - GETTING Kla1 from ArrayList<Short>
2021-03-12 04:00:06,919 [main:106] - GETTING Kla1 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 04:00:06,961 [main:106] - GETTING Kla1 from String
2021-03-12 04:00:06,977 [main:106] - GETTING Kla1 from Companion
2021-03-12 04:00:06,983 [main:106] - GETTING Kla1 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 04:00:06,984 [main:106] - GETTING Kla1 from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 04:00:06,984 [main:106] - GETTING Kla1 from String
2021-03-12 04:00:06,985 [main:106] - GETTING Kla1 from String
2021-03-12 04:00:06,985 [main:106] - GETTING Kla1 from String
2021-03-12 04:00:06,986 [main:106] - GETTING Kla1 from String
2021-03-12 04:00:06,987 [main:106] - GETTING Kla1 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 04:00:06,987 [main:106] - GETTING Kla1 from ArrayList<Short>
2021-03-12 04:00:06,988 [main:106] - GETTING Kla1 from String
2021-03-12 04:00:06,988 [main:106] - GETTING Kla1 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 04:00:06,989 [main:106] - GETTING Kla1 from String?
2021-03-12 04:00:07,009 [main:106] - GETTING Kla1 from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 04:00:07,009 [main:114] - replacement of type of type Kla1 is Kla1.Kla6
2021-03-12 04:00:07,147 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:00:07,147 [main:66] - Compilation checking started
2021-03-12 04:00:07,774 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = ((""::plus).invoke("ssdtf")).length.plus(-6);

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return (PREFIX).trim()
    }

    private fun fu8() {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
arrayListOf<Int>(2008976730).add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { check(true)}
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(MAX_LONG) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return (MAX_LONG).replaceRange(-788212043, 2021330778, "aqlwn")
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("huxlm")}
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0("wzwvj")
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return ((String::plus)).invoke("cmanr", "hbewl").padStart(-1891813490, 'å¾¯')
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in ('î')?.toInt()..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (((String::plus)).name.equals("abpko"))
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "tjwvb"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (Kla1.Kla6) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in emptyArray<Kla1>()) {
            val prope10 = fu7(type)
            if ((((""::plus)).name).get(1288234435).isUpperCase()) return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 04:00:07,777 [main:107] - replacing ({
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }, Function0<Nothing>)
2021-03-12 04:00:07,777 [main:50] - replacing {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        } Function0<Nothing>
2021-03-12 04:00:07,777 [main:54] - Getting value of type Function0<Nothing>
2021-03-12 04:00:07,918 [main:302] - generating value of type = Function0<Nothing> false depth = 0
2021-03-12 04:00:07,921 [main:302] - generating value of type = Nothing false depth = 1
2021-03-12 04:00:08,065 [main:43] - GENERATING CALL OF fun TODO(reason: kotlin.String): Nothg = TODO()
2021-03-12 04:00:08,069 [main:61] - WITHOUT TYPE PARAMS = fun TODO(reason: kotlin.String): Nothg = TODO()
2021-03-12 04:00:08,374 [main:302] - generating value of type = String true depth = 4
2021-03-12 04:00:08,378 [main:95] - GENERATED = TODO("cxliy")
2021-03-12 04:00:08,378 [main:58] - GENERATED VALUE OF TYPE Function0<Nothing> = { TODO("cxliy")}
2021-03-12 04:00:08,378 [main:61] - GENERATED IS CALL =false
2021-03-12 04:00:08,392 [main:67] - randomType = Kla2
2021-03-12 04:00:08,532 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 04:00:08,535 [main:112] - generating klass Kla2 text = class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return (PREFIX).trim()
    }

    private fun fu8() {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
arrayListOf<Int>(2008976730).add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { check(true)}
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(MAX_LONG) {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        }
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return (MAX_LONG).replaceRange(-788212043, 2021330778, "aqlwn")
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("huxlm")}
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0("wzwvj")
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return ((String::plus)).invoke("cmanr", "hbewl").padStart(-1891813490, 'å¾¯')
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}
2021-03-12 04:00:08,672 [main:194] - Type params = []
2021-03-12 04:00:08,810 [main:302] - generating value of type = String true depth = 2
2021-03-12 04:00:08,813 [main:302] - generating value of type = Kla1 false depth = 2
2021-03-12 04:00:08,817 [main:112] - generating klass Kla1 text = enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}
2021-03-12 04:00:08,824 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 04:00:08,841 [main:106] - GETTING Function0<Nothing> from ArrayList<Short>
2021-03-12 04:00:08,952 [main:106] - GETTING Function0<Nothing> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 04:00:08,994 [main:106] - GETTING Function0<Nothing> from Short
2021-03-12 04:00:09,024 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 04:00:09,025 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 04:00:09,026 [main:106] - GETTING Function0<Nothing> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 04:00:09,027 [main:106] - GETTING Function0<Nothing> from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 04:00:09,071 [main:106] - GETTING Function0<Nothing> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 04:00:09,072 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 04:00:09,073 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 04:00:09,074 [main:106] - GETTING Function0<Nothing> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 04:00:09,075 [main:106] - GETTING Function0<Nothing> from Companion
2021-03-12 04:00:09,084 [main:106] - GETTING Function0<Nothing> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 04:00:09,085 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 04:00:09,086 [main:106] - GETTING Function0<Nothing> from String?
2021-03-12 04:00:09,110 [main:106] - GETTING Function0<Nothing> from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 04:00:09,111 [main:106] - GETTING Function0<Nothing> from ArrayList<Short>
2021-03-12 04:00:09,111 [main:114] - replacement of {
            try {
                fu8()
                return "fail"
            } finally {
                return executionType.name
            }
        } of type Function0<Nothing> is { TODO("cxliy")}
2021-03-12 04:00:09,249 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 04:00:09,249 [main:66] - Compilation checking started
2021-03-12 04:00:09,836 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = ((""::plus).invoke("ssdtf")).length.plus(-6);

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return (PREFIX).trim()
    }

    private fun fu8() {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
arrayListOf<Int>(2008976730).add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { check(true)}
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(MAX_LONG) { TODO("cxliy")}
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return (MAX_LONG).replaceRange(-788212043, 2021330778, "aqlwn")
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("huxlm")}
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0("wzwvj")
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return ((String::plus)).invoke("cmanr", "hbewl").padStart(-1891813490, 'å¾¯')
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in ('î')?.toInt()..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (((String::plus)).name.equals("abpko"))
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "tjwvb"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (Kla1.Kla6) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in emptyArray<Kla1>()) {
            val prope10 = fu7(type)
            if ((((""::plus)).name).get(1288234435).isUpperCase()) return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 04:00:09,838 [main:107] - replacing (joinToString(), String)
2021-03-12 04:00:09,838 [main:50] - replacing joinToString() String
2021-03-12 04:00:09,838 [main:54] - Getting value of type String
2021-03-12 04:00:09,985 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:00:09,988 [main:58] - GENERATED VALUE OF TYPE String = "zvash"
2021-03-12 04:00:09,988 [main:61] - GENERATED IS CALL =false
2021-03-12 04:00:10,148 [main:67] - randomType = UShort
2021-03-12 04:00:10,286 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 04:00:10,316 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@66ba78f3]
2021-03-12 04:00:10,316 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5281150f]
2021-03-12 04:00:10,453 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:10,456 [main:78] - Generated call from random type = (5864.toUShort()).toShort().toString(625378747)
2021-03-12 04:00:10,456 [main:114] - replacement of joinToString() of type String is (5864.toUShort()).toShort().toString(625378747)
2021-03-12 04:00:10,592 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:00:10,593 [main:66] - Compilation checking started
2021-03-12 04:00:11,004 [main:49] - Result = false
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = ((""::plus).invoke("ssdtf")).length.plus(-6);

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool(prope1)

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return (PREFIX).trim()
    }

    private fun fu8() {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
arrayListOf<Int>(2008976730).add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { check(true)}
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(MAX_LONG) { TODO("cxliy")}
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return (MAX_LONG).replaceRange(-788212043, 2021330778, "aqlwn")
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("huxlm")}
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0("wzwvj")
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return ((String::plus)).invoke("cmanr", "hbewl").padStart(-1891813490, 'å¾¯')
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in ('î')?.toInt()..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (((String::plus)).name.equals("abpko"))
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.(5864.toUShort()).toShort().toString(625378747)
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "tjwvb"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (Kla1.Kla6) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in emptyArray<Kla1>()) {
            val prope10 = fu7(type)
            if ((((""::plus)).name).get(1288234435).isUpperCase()) return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 04:00:11,008 [main:107] - replacing (prope1, Int)
2021-03-12 04:00:11,008 [main:50] - replacing prope1 Int
2021-03-12 04:00:11,008 [main:54] - Getting value of type Int
2021-03-12 04:00:11,145 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:11,148 [main:58] - GENERATED VALUE OF TYPE Int = 261647733
2021-03-12 04:00:11,149 [main:61] - GENERATED IS CALL =false
2021-03-12 04:00:11,306 [main:67] - randomType = UInt
2021-03-12 04:00:11,442 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 04:00:11,472 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@22372dd3]
2021-03-12 04:00:11,607 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 04:00:11,611 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57f715bc]
2021-03-12 04:00:11,611 [main:78] - Generated call from random type = (648690985.toUInt()).compareTo(104.toUByte()).inc()
2021-03-12 04:00:11,611 [main:114] - replacement of prope1 of type Int is (648690985.toUInt()).compareTo(104.toUByte()).inc()
2021-03-12 04:00:11,747 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:00:11,747 [main:66] - Compilation checking started
2021-03-12 04:00:12,361 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = ((""::plus).invoke("ssdtf")).length.plus(-6);

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool((648690985.toUInt()).compareTo(104.toUByte()).inc())

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return (PREFIX).trim()
    }

    private fun fu8() {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
arrayListOf<Int>(2008976730).add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { check(true)}
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(MAX_LONG) { TODO("cxliy")}
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return (MAX_LONG).replaceRange(-788212043, 2021330778, "aqlwn")
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("huxlm")}
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0("wzwvj")
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return ((String::plus)).invoke("cmanr", "hbewl").padStart(-1891813490, 'å¾¯')
                }
            } finally {
                val prope11 = 1 + (arrayListOf<Short>()).size.shl(-1949698322)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in ('î')?.toInt()..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (((String::plus)).name.equals("abpko"))
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "tjwvb"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (Kla1.Kla6) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in emptyArray<Kla1>()) {
            val prope10 = fu7(type)
            if ((((""::plus)).name).get(1288234435).isUpperCase()) return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 04:00:12,363 [main:107] - replacing (1 + (arrayListOf<Short>()).size.shl(-1949698322), Int)
2021-03-12 04:00:12,363 [main:50] - replacing 1 + (arrayListOf<Short>()).size.shl(-1949698322) Int
2021-03-12 04:00:12,363 [main:54] - Getting value of type Int
2021-03-12 04:00:12,506 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:12,510 [main:58] - GENERATED VALUE OF TYPE Int = -795357939
2021-03-12 04:00:12,510 [main:61] - GENERATED IS CALL =false
2021-03-12 04:00:12,692 [main:67] - randomType = HashSet<Kla0>
2021-03-12 04:00:12,829 [main:302] - generating value of type = HashSet<Kla0> false depth = 0
2021-03-12 04:00:12,974 [main:43] - GENERATING CALL OF fun <E> HashSet(initialCapacity: kotlin.Int): HashSet<Kla0> = TODO()
2021-03-12 04:00:12,978 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(initialCapacity: kotlin.Int): HashSet<Kla0> = TODO()
2021-03-12 04:00:13,285 [main:302] - generating value of type = Int true depth = 3
2021-03-12 04:00:13,288 [main:95] - GENERATED = HashSet<Kla0>(-1721672915)
2021-03-12 04:00:13,386 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@384d0737]
2021-03-12 04:00:13,524 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:13,528 [main:78] - Generated call from random type = (HashSet<Kla0>(-1721672915)).size.rotateLeft(544438701)
2021-03-12 04:00:13,528 [main:114] - replacement of 1 + (arrayListOf<Short>()).size.shl(-1949698322) of type Int is (HashSet<Kla0>(-1721672915)).size.rotateLeft(544438701)
2021-03-12 04:00:13,666 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:00:13,666 [main:66] - Compilation checking started
2021-03-12 04:00:14,278 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = ((""::plus).invoke("ssdtf")).length.plus(-6);

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool((648690985.toUInt()).compareTo(104.toUByte()).inc())

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return (PREFIX).trim()
    }

    private fun fu8() {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
arrayListOf<Int>(2008976730).add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { check(true)}
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(MAX_LONG) { TODO("cxliy")}
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return (MAX_LONG).replaceRange(-788212043, 2021330778, "aqlwn")
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("huxlm")}
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0("wzwvj")
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return ((String::plus)).invoke("cmanr", "hbewl").padStart(-1891813490, 'å¾¯')
                }
            } finally {
                val prope11 = (HashSet<Kla0>(-1721672915)).size.rotateLeft(544438701)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in ('î')?.toInt()..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (((String::plus)).name.equals("abpko"))
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "tjwvb"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (Kla1.Kla6) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in emptyArray<Kla1>()) {
            val prope10 = fu7(type)
            if ((((""::plus)).name).get(1288234435).isUpperCase()) return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 04:00:14,280 [main:107] - replacing ("fail", String)
2021-03-12 04:00:14,280 [main:50] - replacing "fail" String
2021-03-12 04:00:14,280 [main:54] - Getting value of type String
2021-03-12 04:00:14,457 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:00:14,460 [main:58] - GENERATED VALUE OF TYPE String = "vpual"
2021-03-12 04:00:14,460 [main:61] - GENERATED IS CALL =false
2021-03-12 04:00:14,971 [main:67] - randomType = HashSet<UShort>
2021-03-12 04:00:15,111 [main:302] - generating value of type = HashSet<UShort> false depth = 0
2021-03-12 04:00:15,256 [main:43] - GENERATING CALL OF fun <E> HashSet(initialCapacity: kotlin.Int): HashSet<UShort> = TODO()
2021-03-12 04:00:15,260 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(initialCapacity: kotlin.Int): HashSet<UShort> = TODO()
2021-03-12 04:00:15,566 [main:302] - generating value of type = Int true depth = 3
2021-03-12 04:00:15,570 [main:95] - GENERATED = HashSet<UShort>(-1707179654)
2021-03-12 04:00:15,666 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@1cd54b53]
2021-03-12 04:00:15,667 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4b22c9cb]
2021-03-12 04:00:15,667 [main:78] - Generated call from random type = (HashSet<UShort>(-1707179654)).toArray().contentDeepToString()
2021-03-12 04:00:15,667 [main:106] - GETTING String from String
2021-03-12 04:00:15,683 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24f3d945]]
2021-03-12 04:00:15,683 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 04:00:15,825 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:15,830 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24f3d945]
2021-03-12 04:00:15,831 [main:117] - GENERATED CALL = (((""::plus)).name).get(-1034219384).titlecase()
2021-03-12 04:00:15,831 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63dad168]]
2021-03-12 04:00:15,831 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63dad168]
2021-03-12 04:00:15,985 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:16,129 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:16,272 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 04:00:16,423 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 04:00:16,428 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 04:00:16,733 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 04:00:16,881 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 04:00:16,886 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 04:00:17,201 [main:302] - generating value of type = CharSequence false depth = 6
2021-03-12 04:00:17,207 [main:95] - GENERATED = StringBuilder("rwgtt")
2021-03-12 04:00:17,207 [main:95] - GENERATED = StringBuilder(StringBuilder("rwgtt"))
2021-03-12 04:00:17,208 [main:117] - GENERATED CALL = (((""::plus)).name).replaceRange(-1408623633, -1088592276, StringBuilder(StringBuilder("rwgtt")))
2021-03-12 04:00:17,208 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21f58cc8]]
2021-03-12 04:00:17,208 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21f58cc8]
2021-03-12 04:00:17,347 [main:302] - generating value of type = Char true depth = 0
2021-03-12 04:00:17,528 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:00:17,532 [main:117] - GENERATED CALL = (((""::plus)).name).replaceBefore('â»®', val MAX_LONG =
2021-03-12 04:00:17,532 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33fb03c1]]
2021-03-12 04:00:17,532 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33fb03c1]
2021-03-12 04:00:17,671 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:17,820 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:17,823 [main:117] - GENERATED CALL = (((""::plus)).name).removeRange(-303387904, 730426666)
2021-03-12 04:00:17,823 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45311397]]
2021-03-12 04:00:17,824 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45311397]
2021-03-12 04:00:17,962 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 04:00:17,965 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 04:00:17,969 [main:117] - GENERATED CALL = (((""::plus)).name).filterIndexed({a: Int, b: Char -> false})
2021-03-12 04:00:17,969 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c88e713]]
2021-03-12 04:00:17,969 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c88e713]
2021-03-12 04:00:17,969 [main:117] - GENERATED CALL = (((""::plus)).name).trimEnd()
2021-03-12 04:00:17,969 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@678d6ca3]]
2021-03-12 04:00:17,969 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@678d6ca3]
2021-03-12 04:00:18,109 [main:302] - generating value of type = Char true depth = 0
2021-03-12 04:00:18,113 [main:117] - GENERATED CALL = (((""::plus)).name).replaceAfter('ì§', PREFIX + MAX_LONG, var prope0 = (""::plus).invoke("ssdtf").trimStart()
2021-03-12 04:00:18,113 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fdc3b45]]
2021-03-12 04:00:18,113 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fdc3b45]
2021-03-12 04:00:18,255 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:18,259 [main:117] - GENERATED CALL = (((""::plus)).name).dropLast(-1940838390)
2021-03-12 04:00:18,259 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e3da54]]
2021-03-12 04:00:18,259 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e3da54]
2021-03-12 04:00:18,400 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 04:00:18,403 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 04:00:18,406 [main:117] - GENERATED CALL = (((""::plus)).name).dropWhile({a: Char -> false})
2021-03-12 04:00:18,406 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e428ad4]]
2021-03-12 04:00:18,406 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 04:00:18,545 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:18,548 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e428ad4]
2021-03-12 04:00:18,687 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:00:18,690 [main:117] - GENERATED CALL = (((""::plus)).name).get(807637156).plus("vzjqh")
2021-03-12 04:00:18,690 [main:114] - replacement of "fail" of type String is (((""::plus)).name).replaceBefore('â»®', val MAX_LONG =
2021-03-12 04:00:18,828 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(BINARY_EXPRESSION)
2021-03-12 04:00:18,828 [main:66] - Compilation checking started
2021-03-12 04:00:18,835 [main:71] - Wrong syntax or breaks conditions
2021-03-12 04:00:18,835 [main:49] - Result = false
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = ((""::plus).invoke("ssdtf")).length.plus(-6);

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool((648690985.toUInt()).compareTo(104.toUByte()).inc())

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return (PREFIX).trim()
    }

    private fun fu8() {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
arrayListOf<Int>(2008976730).add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { check(true)}
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return (((""::plus)).name).replaceBefore('â»®', val MAX_LONG =
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(MAX_LONG) { TODO("cxliy")}
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return (MAX_LONG).replaceRange(-788212043, 2021330778, "aqlwn")
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("huxlm")}
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0("wzwvj")
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return ((String::plus)).invoke("cmanr", "hbewl").padStart(-1891813490, 'å¾¯')
                }
            } finally {
                val prope11 = (HashSet<Kla0>(-1721672915)).size.rotateLeft(544438701)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in ('î')?.toInt()..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (((String::plus)).name.equals("abpko"))
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + prope6.joinToString()
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "tjwvb"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (Kla1.Kla6) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in emptyArray<Kla1>()) {
            val prope10 = fu7(type)
            if ((((""::plus)).name).get(1288234435).isUpperCase()) return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 04:00:18,837 [main:107] - replacing (prope6, ArrayList<Int>)
2021-03-12 04:00:18,838 [main:50] - replacing prope6 ArrayList<Int>
2021-03-12 04:00:18,838 [main:54] - Getting value of type ArrayList<Int>
2021-03-12 04:00:18,976 [main:302] - generating value of type = ArrayList<Int> false depth = 0
2021-03-12 04:00:19,121 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Int> = TODO()
2021-03-12 04:00:19,125 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Int> = TODO()
2021-03-12 04:00:19,274 [main:95] - GENERATED = arrayListOf<Int>()
2021-03-12 04:00:19,274 [main:58] - GENERATED VALUE OF TYPE ArrayList<Int> = arrayListOf<Int>()
2021-03-12 04:00:19,275 [main:61] - GENERATED IS CALL =true
2021-03-12 04:00:20,507 [main:67] - randomType = HashSet<Function2<Function2<Kla1, Kla1, UShort?>, Boolean, Long?>>?
2021-03-12 04:00:20,647 [main:302] - generating value of type = HashSet<Function2<Function2<Kla1, Kla1, UShort?>, Boolean, Long?>> false depth = 0
2021-03-12 04:00:20,835 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: Function2<Function2<Kla1, Kla1, UShort?>, Boolean, Long?>): HashSet<Function2<Function2<Kla1, Kla1, UShort?>, Boolean, Long?>> = TODO()
2021-03-12 04:00:20,840 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: Function2<Function2<Kla1, Kla1, UShort?>, Boolean, Long?>): HashSet<Function2<Function2<Kla1, Kla1, UShort?>, Boolean, Long?>> = TODO()
2021-03-12 04:00:20,989 [main:302] - generating value of type = Function2<Function2<Kla1, Kla1, UShort?>, Boolean, Long?> false depth = 3
2021-03-12 04:00:20,992 [main:302] - generating value of type = Long true depth = 4
2021-03-12 04:00:20,995 [main:95] - GENERATED = hashSetOf<Function2<Function2<Kla1, Kla1, UShort?>, Boolean, Long?>>({a: Function2<Kla1, Kla1, UShort?>, b: Boolean -> 7192501675603888727})
2021-03-12 04:00:21,195 [main:106] - GETTING ArrayList<Int> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 04:00:21,240 [main:106] - GETTING ArrayList<Int> from String
2021-03-12 04:00:21,263 [main:106] - GETTING ArrayList<Int> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 04:00:21,267 [main:106] - GETTING ArrayList<Int> from String
2021-03-12 04:00:21,270 [main:106] - GETTING ArrayList<Int> from ArrayList<Short>
2021-03-12 04:00:21,404 [main:114] - replacement of prope6 of type ArrayList<Int> is arrayListOf<Short>()
2021-03-12 04:00:21,543 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 04:00:21,544 [main:66] - Compilation checking started
2021-03-12 04:00:22,137 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = ((""::plus).invoke("ssdtf")).length.plus(-6);

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool((648690985.toUInt()).compareTo(104.toUByte()).inc())

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return (PREFIX).trim()
    }

    private fun fu8() {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
arrayListOf<Int>(2008976730).add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { check(true)}
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(MAX_LONG) { TODO("cxliy")}
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return (MAX_LONG).replaceRange(-788212043, 2021330778, "aqlwn")
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("huxlm")}
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0("wzwvj")
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return ((String::plus)).invoke("cmanr", "hbewl").padStart(-1891813490, 'å¾¯')
                }
            } finally {
                val prope11 = (HashSet<Kla0>(-1721672915)).size.rotateLeft(544438701)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in ('î')?.toInt()..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (((String::plus)).name.equals("abpko"))
                return "fail $i != ${prope6[-1271101393]}: synchronization not works : " + arrayListOf<Short>().joinToString()
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "tjwvb"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (Kla1.Kla6) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in emptyArray<Kla1>()) {
            val prope10 = fu7(type)
            if ((((""::plus)).name).get(1288234435).isUpperCase()) return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 04:00:22,139 [main:107] - replacing ("fail $i != ${prope6[-1271101393]}: synchronization not works : " + arrayListOf<Short>().joinToString(), String)
2021-03-12 04:00:22,140 [main:50] - replacing "fail $i != ${prope6[-1271101393]}: synchronization not works : " + arrayListOf<Short>().joinToString() String
2021-03-12 04:00:22,140 [main:54] - Getting value of type String
2021-03-12 04:00:22,282 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:00:22,285 [main:58] - GENERATED VALUE OF TYPE String = "gqcwp"
2021-03-12 04:00:22,285 [main:61] - GENERATED IS CALL =false
2021-03-12 04:00:22,607 [main:67] - randomType = UShort?
2021-03-12 04:00:22,746 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 04:00:22,777 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@2b800b36]
2021-03-12 04:00:22,920 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 04:00:22,923 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@196815c]
2021-03-12 04:00:23,063 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:23,066 [main:78] - Generated call from random type = (17888.toUShort())?.compareTo(53.toUByte()).toString(926465792)
2021-03-12 04:00:23,066 [main:106] - GETTING String from String?
2021-03-12 04:00:23,086 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@307cea0a], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@726a65dc]]
2021-03-12 04:00:23,086 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@307cea0a]
2021-03-12 04:00:23,225 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:00:23,226 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@726a65dc]
2021-03-12 04:00:23,365 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:23,507 [main:302] - generating value of type = Char true depth = 0
2021-03-12 04:00:23,511 [main:117] - GENERATED CALL = (fu1()).plus("aczne").padEnd(-651464609, 'á´')
2021-03-12 04:00:23,511 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2e465cf2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@196815c]]
2021-03-12 04:00:23,511 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@196815c]
2021-03-12 04:00:23,652 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:23,656 [main:117] - GENERATED CALL = (fu1()).length.toString(720774484)
2021-03-12 04:00:23,656 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23c4b3bf]]
2021-03-12 04:00:23,656 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 04:00:23,795 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:23,799 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23c4b3bf]
2021-03-12 04:00:23,799 [main:117] - GENERATED CALL = (fu1()).get(-1758662104).uppercase()
2021-03-12 04:00:23,799 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5113d1f2]]
2021-03-12 04:00:23,799 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 04:00:23,939 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:24,081 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:24,084 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5113d1f2]
2021-03-12 04:00:24,256 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 04:00:24,401 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 04:00:24,405 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 04:00:24,714 [main:302] - generating value of type = String true depth = 3
2021-03-12 04:00:24,717 [main:95] - GENERATED = Regex("szcbg")
2021-03-12 04:00:24,857 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:00:24,861 [main:117] - GENERATED CALL = (fu1()).subSequence(-1009152192, 1350857259).replaceFirst(Regex("szcbg"), "bfowq")
2021-03-12 04:00:24,861 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@307cea0a], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63dad168]]
2021-03-12 04:00:24,861 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@307cea0a]
2021-03-12 04:00:25,001 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:00:25,001 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63dad168]
2021-03-12 04:00:25,143 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:25,289 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:25,435 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 04:00:25,441 [main:117] - GENERATED CALL = (fu1()).plus("lzegp").replaceRange(920531400, 1217589133, "bjzom")
2021-03-12 04:00:25,442 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a284f16]]
2021-03-12 04:00:25,442 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 04:00:25,581 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:25,722 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:25,726 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a284f16]
2021-03-12 04:00:25,865 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:25,868 [main:117] - GENERATED CALL = (fu1()).subSequence(257557802, 1293878136).repeat(-1152534757)
2021-03-12 04:00:25,868 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@307cea0a], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68eb2bf5]]
2021-03-12 04:00:25,869 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@307cea0a]
2021-03-12 04:00:26,008 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:00:26,008 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68eb2bf5]
2021-03-12 04:00:26,008 [main:117] - GENERATED CALL = (fu1()).plus("afmkp").trim()
2021-03-12 04:00:26,008 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@307cea0a], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e8483d9]]
2021-03-12 04:00:26,008 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@307cea0a]
2021-03-12 04:00:26,148 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:00:26,148 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e8483d9]
2021-03-12 04:00:26,289 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 04:00:26,292 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 04:00:26,295 [main:117] - GENERATED CALL = (fu1()).plus("gqsml").dropLastWhile({a: Char -> true})
2021-03-12 04:00:26,296 [main:113] - Case = [public operator fun kotlin.String?.plus(other: kotlin.Any?): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@1f94500f]]
2021-03-12 04:00:26,296 [main:149] - GENERATING call of type public operator fun kotlin.String?.plus(other: kotlin.Any?): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@1f94500f]
2021-03-12 04:00:26,435 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:00:26,436 [main:117] - GENERATED CALL = (fu1()).plus("ohmbl")
2021-03-12 04:00:26,436 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bdbc0f5]]
2021-03-12 04:00:26,436 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 04:00:26,575 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:26,579 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bdbc0f5]
2021-03-12 04:00:26,579 [main:117] - GENERATED CALL = (fu1()).get(1024274215).lowercase()
2021-03-12 04:00:26,579 [main:114] - replacement of "fail $i != ${prope6[-1271101393]}: synchronization not works : " + arrayListOf<Short>().joinToString() of type String is (fu1()).plus("lzegp").replaceRange(920531400, 1217589133, "bjzom")
2021-03-12 04:00:26,718 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:00:26,719 [main:66] - Compilation checking started
2021-03-12 04:00:27,345 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = ((""::plus).invoke("ssdtf")).length.plus(-6);

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool((648690985.toUInt()).compareTo(104.toUByte()).inc())

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return (PREFIX).trim()
    }

    private fun fu8() {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
arrayListOf<Int>(2008976730).add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { check(true)}
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(MAX_LONG) { TODO("cxliy")}
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return (MAX_LONG).replaceRange(-788212043, 2021330778, "aqlwn")
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("huxlm")}
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0("wzwvj")
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return ((String::plus)).invoke("cmanr", "hbewl").padStart(-1891813490, 'å¾¯')
                }
            } finally {
                val prope11 = (HashSet<Kla0>(-1721672915)).size.rotateLeft(544438701)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in ('î')?.toInt()..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in 1..prope1) {
            if (((String::plus)).name.equals("abpko"))
                return (fu1()).plus("lzegp").replaceRange(920531400, 1217589133, "bjzom")
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "tjwvb"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (Kla1.Kla6) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in emptyArray<Kla1>()) {
            val prope10 = fu7(type)
            if ((((""::plus)).name).get(1288234435).isUpperCase()) return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 04:00:27,347 [main:107] - replacing (1, Int)
2021-03-12 04:00:27,348 [main:50] - replacing 1 Int
2021-03-12 04:00:27,348 [main:54] - Getting value of type Int
2021-03-12 04:00:27,490 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:27,493 [main:58] - GENERATED VALUE OF TYPE Int = 1902373660
2021-03-12 04:00:27,493 [main:61] - GENERATED IS CALL =false
2021-03-12 04:00:27,506 [main:67] - randomType = Kla0
2021-03-12 04:00:27,648 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 04:00:27,651 [main:112] - generating klass Kla0 text = class Kla0(message: String): Exception(message)
2021-03-12 04:00:27,838 [main:194] - Type params = []
2021-03-12 04:00:27,979 [main:302] - generating value of type = String true depth = 2
2021-03-12 04:00:27,997 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@1947dfe]
2021-03-12 04:00:28,139 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@638b60e5]
2021-03-12 04:00:28,280 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:00:28,283 [main:78] - Generated call from random type = (Kla0("rseci")).equals(null).compareTo(false)
2021-03-12 04:00:28,284 [main:106] - GETTING Int from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 04:00:28,326 [main:113] - Case = [public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@5c962045], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17b2dc31]]
2021-03-12 04:00:28,326 [main:149] - GENERATING call of type public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@5c962045]
2021-03-12 04:00:28,475 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 04:00:28,475 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17b2dc31]
2021-03-12 04:00:28,616 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:00:28,620 [main:117] - GENERATED CALL = (PREFIX::plus).invoke("pworq").compareTo((String::plus).name, true)
2021-03-12 04:00:28,620 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@29f63d37], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@638b60e5]]
2021-03-12 04:00:28,620 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@29f63d37]
2021-03-12 04:00:28,760 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:00:28,761 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@638b60e5]
2021-03-12 04:00:28,901 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:00:28,904 [main:117] - GENERATED CALL = (PREFIX::plus).equals("czqsa").compareTo(true)
2021-03-12 04:00:28,904 [main:113] - Case = [public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@5c962045], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2e465cf2]]
2021-03-12 04:00:28,904 [main:149] - GENERATING call of type public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@5c962045]
2021-03-12 04:00:29,045 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 04:00:29,045 [main:117] - GENERATED CALL = (PREFIX::plus).invoke("btgpi").length
2021-03-12 04:00:29,045 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@79c6ce88], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17b2dc31]]
2021-03-12 04:00:29,045 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17b2dc31]
2021-03-12 04:00:29,186 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:00:29,329 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:00:29,333 [main:117] - GENERATED CALL = (PREFIX::plus).name.compareTo("iffey", false)
2021-03-12 04:00:29,333 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@79c6ce88], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15eab608]]
2021-03-12 04:00:29,333 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15eab608]
2021-03-12 04:00:29,333 [main:117] - GENERATED CALL = (PREFIX::plus).name.toInt()
2021-03-12 04:00:29,333 [main:113] - Case = [public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@5c962045], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15eab608]]
2021-03-12 04:00:29,333 [main:149] - GENERATING call of type public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@5c962045]
2021-03-12 04:00:29,473 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 04:00:29,474 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15eab608]
2021-03-12 04:00:29,474 [main:117] - GENERATED CALL = (PREFIX::plus).invoke("xeszo").toInt()
2021-03-12 04:00:29,474 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@79c6ce88], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2e465cf2]]
2021-03-12 04:00:29,474 [main:117] - GENERATED CALL = (PREFIX::plus).name.length
2021-03-12 04:00:29,474 [main:114] - replacement of 1 of type Int is (PREFIX::plus).equals("czqsa").compareTo(true)
2021-03-12 04:00:29,614 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:00:29,614 [main:66] - Compilation checking started
2021-03-12 04:00:30,264 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = ((""::plus).invoke("ssdtf")).length.plus(-6);

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool((648690985.toUInt()).compareTo(104.toUByte()).inc())

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return (PREFIX).trim()
    }

    private fun fu8() {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
arrayListOf<Int>(2008976730).add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { check(true)}
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(MAX_LONG) { TODO("cxliy")}
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return (MAX_LONG).replaceRange(-788212043, 2021330778, "aqlwn")
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("huxlm")}
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0("wzwvj")
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return ((String::plus)).invoke("cmanr", "hbewl").padStart(-1891813490, 'å¾¯')
                }
            } finally {
                val prope11 = (HashSet<Kla0>(-1721672915)).size.rotateLeft(544438701)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in ('î')?.toInt()..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in (PREFIX::plus).equals("czqsa").compareTo(true)..prope1) {
            if (((String::plus)).name.equals("abpko"))
                return (fu1()).plus("lzegp").replaceRange(920531400, 1217589133, "bjzom")
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "tjwvb"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (Kla1.Kla6) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in emptyArray<Kla1>()) {
            val prope10 = fu7(type)
            if ((((""::plus)).name).get(1288234435).isUpperCase()) return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 04:00:30,266 [main:107] - replacing (prope5, Any)
2021-03-12 04:00:30,266 [main:50] - replacing prope5 Any
2021-03-12 04:00:30,266 [main:54] - Getting value of type Any
2021-03-12 04:00:30,409 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:00:30,409 [main:58] - GENERATED VALUE OF TYPE Any = "kcxaj"
2021-03-12 04:00:30,409 [main:61] - GENERATED IS CALL =false
2021-03-12 04:00:30,416 [main:67] - randomType = Boolean
2021-03-12 04:00:30,558 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:00:30,571 [main:106] - GETTING Any from Short
2021-03-12 04:00:30,600 [main:114] - replacement of prope5 of type Any is "kcxaj"
2021-03-12 04:00:30,741 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 04:00:30,742 [main:66] - Compilation checking started
2021-03-12 04:00:31,349 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = ((""::plus).invoke("ssdtf")).length.plus(-6);

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool((648690985.toUInt()).compareTo(104.toUByte()).inc())

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return (PREFIX).trim()
    }

    private fun fu8() {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
arrayListOf<Int>(2008976730).add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { check(true)}
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized("kcxaj") {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(MAX_LONG) { TODO("cxliy")}
        return "fail"
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return (MAX_LONG).replaceRange(-788212043, 2021330778, "aqlwn")
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("huxlm")}
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0("wzwvj")
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return ((String::plus)).invoke("cmanr", "hbewl").padStart(-1891813490, 'å¾¯')
                }
            } finally {
                val prope11 = (HashSet<Kla0>(-1721672915)).size.rotateLeft(544438701)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in ('î')?.toInt()..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in (PREFIX::plus).equals("czqsa").compareTo(true)..prope1) {
            if (((String::plus)).name.equals("abpko"))
                return (fu1()).plus("lzegp").replaceRange(920531400, 1217589133, "bjzom")
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "tjwvb"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (Kla1.Kla6) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in emptyArray<Kla1>()) {
            val prope10 = fu7(type)
            if ((((""::plus)).name).get(1288234435).isUpperCase()) return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 04:00:31,351 [main:107] - replacing ("fail", String)
2021-03-12 04:00:31,351 [main:50] - replacing "fail" String
2021-03-12 04:00:31,351 [main:54] - Getting value of type String
2021-03-12 04:00:31,529 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:00:31,533 [main:58] - GENERATED VALUE OF TYPE String = "eocuh"
2021-03-12 04:00:31,533 [main:61] - GENERATED IS CALL =false
2021-03-12 04:00:31,540 [main:67] - randomType = UInt
2021-03-12 04:00:31,681 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 04:00:31,710 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@3f950ec9]
2021-03-12 04:00:31,711 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5281150f]
2021-03-12 04:00:31,852 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:31,855 [main:78] - Generated call from random type = (1920767697.toUInt()).toShort().toString(640269465)
2021-03-12 04:00:31,855 [main:106] - GETTING String from String
2021-03-12 04:00:31,872 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ecfbefc]]
2021-03-12 04:00:31,872 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ecfbefc]
2021-03-12 04:00:31,873 [main:117] - GENERATED CALL = (PREFIX + MAX_LONG).concat(val PREFIX =
2021-03-12 04:00:31,873 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c521f60]]
2021-03-12 04:00:31,873 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c521f60]
2021-03-12 04:00:31,873 [main:117] - GENERATED CALL = (PREFIX + MAX_LONG).trimStart()
2021-03-12 04:00:31,873 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494d96f0]]
2021-03-12 04:00:31,873 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 04:00:32,014 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:32,158 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:32,162 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@494d96f0]
2021-03-12 04:00:32,305 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 04:00:32,453 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 04:00:32,457 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 04:00:32,767 [main:302] - generating value of type = Int true depth = 3
2021-03-12 04:00:32,771 [main:95] - GENERATED = StringBuilder(984529399)
2021-03-12 04:00:32,911 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:00:32,914 [main:117] - GENERATED CALL = (PREFIX + MAX_LONG).subSequence(1874320284, 33456856).commonSuffixWith(StringBuilder(984529399), false)
2021-03-12 04:00:32,915 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55878bcb]]
2021-03-12 04:00:32,915 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55878bcb]
2021-03-12 04:00:33,055 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 04:00:33,062 [main:117] - GENERATED CALL = (PREFIX + MAX_LONG).removeSurrounding("wxevv")
2021-03-12 04:00:33,062 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1526b9cd]]
2021-03-12 04:00:33,062 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1526b9cd]
2021-03-12 04:00:33,203 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 04:00:33,206 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 04:00:33,210 [main:117] - GENERATED CALL = (PREFIX + MAX_LONG).filter({a: Char -> true})
2021-03-12 04:00:33,210 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f24aea4]]
2021-03-12 04:00:33,210 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f24aea4]
2021-03-12 04:00:33,210 [main:117] - GENERATED CALL = (PREFIX + MAX_LONG).trimIndent()
2021-03-12 04:00:33,210 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23c4b3bf]]
2021-03-12 04:00:33,210 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 04:00:33,351 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:33,355 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23c4b3bf]
2021-03-12 04:00:33,355 [main:117] - GENERATED CALL = (PREFIX + MAX_LONG).get(1249534939).uppercase()
2021-03-12 04:00:33,355 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@678d6ca3]]
2021-03-12 04:00:33,355 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@678d6ca3]
2021-03-12 04:00:33,496 [main:302] - generating value of type = Char true depth = 0
2021-03-12 04:00:33,641 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:00:33,786 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:00:33,790 [main:117] - GENERATED CALL = (PREFIX + MAX_LONG).replaceAfter('å', "yzhit", "usdco")
2021-03-12 04:00:33,790 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dcde0a]]
2021-03-12 04:00:33,790 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26dcde0a]
2021-03-12 04:00:33,932 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 04:00:33,936 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 04:00:33,939 [main:117] - GENERATED CALL = (PREFIX + MAX_LONG).filterNot({a: Char -> false})
2021-03-12 04:00:33,939 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5113d1f2]]
2021-03-12 04:00:33,939 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 04:00:34,081 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:34,225 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:34,229 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5113d1f2]
2021-03-12 04:00:34,370 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 04:00:34,522 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 04:00:34,527 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 04:00:35,066 [main:302] - generating value of type = String true depth = 3
2021-03-12 04:00:35,069 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 04:00:35,218 [main:43] - GENERATING CALL OF fun <T> hashSetOf(): Set<RegexOption> = TODO()
2021-03-12 04:00:35,223 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(): Set<RegexOption> = TODO()
2021-03-12 04:00:35,376 [main:95] - GENERATED = hashSetOf<RegexOption>()
2021-03-12 04:00:35,376 [main:95] - GENERATED = Regex("gdgdu", hashSetOf<RegexOption>())
2021-03-12 04:00:35,376 [main:117] - GENERATED CALL = (PREFIX + MAX_LONG).subSequence(1665659610, 631853943).replaceFirst(Regex("gdgdu", hashSetOf<RegexOption>()), (String::plus).name)
2021-03-12 04:00:35,376 [main:114] - replacement of "fail" of type String is (PREFIX + MAX_LONG).concat(val PREFIX =
2021-03-12 04:00:35,518 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(BINARY_EXPRESSION)
2021-03-12 04:00:35,518 [main:66] - Compilation checking started
2021-03-12 04:00:35,525 [main:71] - Wrong syntax or breaks conditions
2021-03-12 04:00:35,525 [main:49] - Result = false
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = ((""::plus).invoke("ssdtf")).length.plus(-6);

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool((648690985.toUInt()).compareTo(104.toUByte()).inc())

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return (PREFIX).trim()
    }

    private fun fu8() {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
arrayListOf<Int>(2008976730).add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { check(true)}
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized("kcxaj") {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(MAX_LONG) { TODO("cxliy")}
        return (PREFIX + MAX_LONG).concat(val PREFIX =
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return (MAX_LONG).replaceRange(-788212043, 2021330778, "aqlwn")
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("huxlm")}
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0("wzwvj")
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return ((String::plus)).invoke("cmanr", "hbewl").padStart(-1891813490, 'å¾¯')
                }
            } finally {
                val prope11 = (HashSet<Kla0>(-1721672915)).size.rotateLeft(544438701)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in ('î')?.toInt()..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in (PREFIX::plus).equals("czqsa").compareTo(true)..prope1) {
            if (((String::plus)).name.equals("abpko"))
                return (fu1()).plus("lzegp").replaceRange(920531400, 1217589133, "bjzom")
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "tjwvb"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (Kla1.Kla6) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in emptyArray<Kla1>()) {
            val prope10 = fu7(type)
            if ((((""::plus)).name).get(1288234435).isUpperCase()) return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 04:00:35,527 [main:107] - replacing ("fail", String)
2021-03-12 04:00:35,528 [main:50] - replacing "fail" String
2021-03-12 04:00:35,528 [main:54] - Getting value of type String
2021-03-12 04:00:35,669 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:00:35,672 [main:58] - GENERATED VALUE OF TYPE String = "eloah"
2021-03-12 04:00:35,672 [main:61] - GENERATED IS CALL =false
2021-03-12 04:00:35,833 [main:67] - randomType = ULong
2021-03-12 04:00:35,973 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 04:00:36,003 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@239ade90]
2021-03-12 04:00:36,004 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40a7f0de]
2021-03-12 04:00:36,146 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:36,149 [main:78] - Generated call from random type = (5680141124924385941.toULong()).toLong().toString(-1301137986)
2021-03-12 04:00:36,149 [main:106] - GETTING String from String
2021-03-12 04:00:36,166 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@679d2905]]
2021-03-12 04:00:36,166 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@679d2905]
2021-03-12 04:00:36,307 [main:302] - generating value of type = Char true depth = 0
2021-03-12 04:00:36,451 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:00:36,454 [main:117] - GENERATED CALL = (MAX_LONG).replaceAfterLast('æ¯', "zokvc", val MAX_LONG =
2021-03-12 04:00:36,454 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5113d1f2]]
2021-03-12 04:00:36,454 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 04:00:36,595 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:36,739 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:36,743 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5113d1f2]
2021-03-12 04:00:36,884 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 04:00:37,031 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 04:00:37,035 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 04:00:37,524 [main:302] - generating value of type = String true depth = 3
2021-03-12 04:00:37,527 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 04:00:37,675 [main:43] - GENERATING CALL OF fun <T> mutableSetOf(elements: RegexOption): Set<RegexOption> = TODO()
2021-03-12 04:00:37,679 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableSetOf(elements: RegexOption): Set<RegexOption> = TODO()
2021-03-12 04:00:37,829 [main:302] - generating value of type = RegexOption false depth = 6
2021-03-12 04:00:37,833 [main:95] - GENERATED = mutableSetOf<RegexOption>(kotlin.text.RegexOption.MULTILINE)
2021-03-12 04:00:37,833 [main:95] - GENERATED = Regex("btzvg", mutableSetOf<RegexOption>(kotlin.text.RegexOption.MULTILINE))
2021-03-12 04:00:37,833 [main:117] - GENERATED CALL = (MAX_LONG).subSequence(-166873102, 1772021868).replaceFirst(Regex("btzvg", mutableSetOf<RegexOption>(kotlin.text.RegexOption.MULTILINE)), val MAX_LONG =
2021-03-12 04:00:37,833 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bdbc0f5]]
2021-03-12 04:00:37,833 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 04:00:37,975 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:37,978 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@bdbc0f5]
2021-03-12 04:00:37,978 [main:117] - GENERATED CALL = (MAX_LONG).get(2143552918).lowercase()
2021-03-12 04:00:37,978 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2fe79f34]]
2021-03-12 04:00:37,978 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2fe79f34]
2021-03-12 04:00:38,120 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 04:00:38,123 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 04:00:38,127 [main:117] - GENERATED CALL = (MAX_LONG).takeLastWhile({a: Char -> false})
2021-03-12 04:00:38,127 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a222c29]]
2021-03-12 04:00:38,127 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a222c29]
2021-03-12 04:00:38,268 [main:302] - generating value of type = Char true depth = 0
2021-03-12 04:00:38,414 [main:302] - generating value of type = Char true depth = 0
2021-03-12 04:00:38,593 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:00:38,598 [main:117] - GENERATED CALL = (MAX_LONG).replaceFirst('í£', 'ë', true)
2021-03-12 04:00:38,598 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2e465cf2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@196815c]]
2021-03-12 04:00:38,598 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@196815c]
2021-03-12 04:00:38,741 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:38,744 [main:117] - GENERATED CALL = (MAX_LONG).length.toString(1561413620)
2021-03-12 04:00:38,744 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@548f039b]]
2021-03-12 04:00:38,744 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@548f039b]
2021-03-12 04:00:38,744 [main:117] - GENERATED CALL = (MAX_LONG).decapitalize()
2021-03-12 04:00:38,745 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e428ad4]]
2021-03-12 04:00:38,745 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 04:00:38,885 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:38,889 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e428ad4]
2021-03-12 04:00:39,029 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:00:39,033 [main:117] - GENERATED CALL = (MAX_LONG).get(1846852793).plus("tpvwu")
2021-03-12 04:00:39,033 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63dad168]]
2021-03-12 04:00:39,033 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@63dad168]
2021-03-12 04:00:39,174 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:39,318 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:39,461 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 04:00:39,608 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 04:00:39,612 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 04:00:39,925 [main:302] - generating value of type = Int true depth = 3
2021-03-12 04:00:39,929 [main:95] - GENERATED = StringBuilder(-1991422995)
2021-03-12 04:00:39,929 [main:117] - GENERATED CALL = (MAX_LONG).replaceRange(-1910070495, 881196635, StringBuilder(-1991422995))
2021-03-12 04:00:39,929 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d7a703b]]
2021-03-12 04:00:39,929 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 04:00:40,070 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:40,214 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:40,217 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d7a703b]
2021-03-12 04:00:40,358 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 04:00:40,506 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 04:00:40,510 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 04:00:40,983 [main:302] - generating value of type = String true depth = 3
2021-03-12 04:00:40,986 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 04:00:40,990 [main:95] - GENERATED = Regex("vcpga", kotlin.text.RegexOption.MULTILINE)
2021-03-12 04:00:41,132 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 04:00:41,136 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 04:00:41,286 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 04:00:41,291 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 04:00:41,600 [main:302] - generating value of type = CharSequence false depth = 4
2021-03-12 04:00:41,607 [main:95] - GENERATED = StringBuilder("xpeye")
2021-03-12 04:00:41,607 [main:117] - GENERATED CALL = (MAX_LONG).subSequence(-839737818, 29736595).replace(Regex("vcpga", kotlin.text.RegexOption.MULTILINE), {a: MatchResult -> StringBuilder("xpeye")})
2021-03-12 04:00:41,607 [main:114] - replacement of "fail" of type String is (MAX_LONG).replaceFirst('í£', 'ë', true)
2021-03-12 04:00:41,747 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:00:41,748 [main:66] - Compilation checking started
2021-03-12 04:00:42,379 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = ((""::plus).invoke("ssdtf")).length.plus(-6);

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool((648690985.toUInt()).compareTo(104.toUByte()).inc())

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return (PREFIX).trim()
    }

    private fun fu8() {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
arrayListOf<Int>(2008976730).add(++prope2);
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { check(true)}
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized("kcxaj") {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(MAX_LONG) { TODO("cxliy")}
        return (MAX_LONG).replaceFirst('í£', 'ë', true)
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return (MAX_LONG).replaceRange(-788212043, 2021330778, "aqlwn")
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("huxlm")}
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0("wzwvj")
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return ((String::plus)).invoke("cmanr", "hbewl").padStart(-1891813490, 'å¾¯')
                }
            } finally {
                val prope11 = (HashSet<Kla0>(-1721672915)).size.rotateLeft(544438701)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in ('î')?.toInt()..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in (PREFIX::plus).equals("czqsa").compareTo(true)..prope1) {
            if (((String::plus)).name.equals("abpko"))
                return (fu1()).plus("lzegp").replaceRange(920531400, 1217589133, "bjzom")
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "tjwvb"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (Kla1.Kla6) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in emptyArray<Kla1>()) {
            val prope10 = fu7(type)
            if ((((""::plus)).name).get(1288234435).isUpperCase()) return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 04:00:42,381 [main:107] - replacing (arrayListOf<Int>(2008976730).add(++prope2), Boolean)
2021-03-12 04:00:42,381 [main:50] - replacing arrayListOf<Int>(2008976730).add(++prope2) Boolean
2021-03-12 04:00:42,381 [main:54] - Getting value of type Boolean
2021-03-12 04:00:42,523 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:00:42,560 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 04:00:42,561 [main:61] - GENERATED IS CALL =false
2021-03-12 04:00:42,900 [main:67] - randomType = ArrayDeque<Int?>
2021-03-12 04:00:43,041 [main:302] - generating value of type = ArrayDeque<Int?> false depth = 0
2021-03-12 04:00:43,190 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Int?> = TODO()
2021-03-12 04:00:43,195 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Int?> = TODO()
2021-03-12 04:00:43,510 [main:302] - generating value of type = Int true depth = 3
2021-03-12 04:00:43,514 [main:95] - GENERATED = ArrayDeque<Int?>(944103800)
2021-03-12 04:00:43,633 [main:149] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@5a1faec6]
2021-03-12 04:00:43,633 [main:78] - Generated call from random type = (ArrayDeque<Int?>(944103800)).isEmpty()
2021-03-12 04:00:43,634 [main:106] - GETTING Boolean from String
2021-03-12 04:00:43,650 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2e465cf2], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@15ee1971]]
2021-03-12 04:00:43,650 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@15ee1971]
2021-03-12 04:00:43,793 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:00:43,793 [main:117] - GENERATED CALL = (MAX_LONG).length.equals("ahuzg")
2021-03-12 04:00:43,793 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14d3cac5]]
2021-03-12 04:00:43,793 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 04:00:43,935 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:43,939 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@14d3cac5]
2021-03-12 04:00:43,939 [main:117] - GENERATED CALL = (MAX_LONG).get(-1732528520).isUpperCase()
2021-03-12 04:00:43,939 [main:113] - Case = [public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65f90957]]
2021-03-12 04:00:43,939 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65f90957]
2021-03-12 04:00:44,079 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:00:44,083 [main:117] - GENERATED CALL = (MAX_LONG).matches("deltf")
2021-03-12 04:00:44,083 [main:113] - Case = [public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b759fad]]
2021-03-12 04:00:44,083 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b759fad]
2021-03-12 04:00:44,227 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:44,370 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 04:00:44,517 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:44,661 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:44,806 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:00:44,809 [main:117] - GENERATED CALL = (MAX_LONG).regionMatches(1514708024, "upcvp", -2068996818, 2141255995, true)
2021-03-12 04:00:44,809 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20a2adef]]
2021-03-12 04:00:44,809 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 04:00:44,953 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:44,956 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20a2adef]
2021-03-12 04:00:44,956 [main:117] - GENERATED CALL = (MAX_LONG).get(1626037394).isWhitespace()
2021-03-12 04:00:44,956 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a0b1cff]]
2021-03-12 04:00:44,956 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 04:00:45,098 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:45,243 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:45,246 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a0b1cff]
2021-03-12 04:00:45,246 [main:117] - GENERATED CALL = (MAX_LONG).subSequence(1312030913, 1855905544).isNotBlank()
2021-03-12 04:00:45,246 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7160d7b2]]
2021-03-12 04:00:45,246 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 04:00:45,389 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:45,393 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7160d7b2]
2021-03-12 04:00:45,393 [main:117] - GENERATED CALL = (MAX_LONG).get(-1901069433).isSurrogate()
2021-03-12 04:00:45,393 [main:113] - Case = [public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c374a3]]
2021-03-12 04:00:45,393 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69c374a3]
2021-03-12 04:00:45,534 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 04:00:45,538 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 04:00:45,541 [main:117] - GENERATED CALL = (MAX_LONG).all({a: Char -> false})
2021-03-12 04:00:45,541 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d9803b4], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@503d03f]]
2021-03-12 04:00:45,541 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2d9803b4]
2021-03-12 04:00:45,683 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:00:45,683 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@503d03f]
2021-03-12 04:00:45,824 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:00:45,824 [main:117] - GENERATED CALL = (MAX_LONG).equals("wqhpr").equals("mkiei")
2021-03-12 04:00:45,825 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59165b1f]]
2021-03-12 04:00:45,825 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@34984413]
2021-03-12 04:00:45,965 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:45,969 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59165b1f]
2021-03-12 04:00:45,969 [main:117] - GENERATED CALL = (MAX_LONG).get(1491531556).isLowSurrogate()
2021-03-12 04:00:45,969 [main:114] - replacement of arrayListOf<Int>(2008976730).add(++prope2) of type Boolean is (MAX_LONG).get(1626037394).isWhitespace()
2021-03-12 04:00:46,110 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:00:46,110 [main:66] - Compilation checking started
2021-03-12 04:00:46,757 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = ((""::plus).invoke("ssdtf")).length.plus(-6);

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool((648690985.toUInt()).compareTo(104.toUByte()).inc())

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return (PREFIX).trim()
    }

    private fun fu8() {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
(MAX_LONG).get(1626037394).isWhitespace();
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { check(true)}
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized("kcxaj") {
            fu8()
            return executionType.name
        }
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(MAX_LONG) { TODO("cxliy")}
        return (MAX_LONG).replaceFirst('í£', 'ë', true)
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return (MAX_LONG).replaceRange(-788212043, 2021330778, "aqlwn")
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("huxlm")}
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0("wzwvj")
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return ((String::plus)).invoke("cmanr", "hbewl").padStart(-1891813490, 'å¾¯')
                }
            } finally {
                val prope11 = (HashSet<Kla0>(-1721672915)).size.rotateLeft(544438701)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in ('î')?.toInt()..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in (PREFIX::plus).equals("czqsa").compareTo(true)..prope1) {
            if (((String::plus)).name.equals("abpko"))
                return (fu1()).plus("lzegp").replaceRange(920531400, 1217589133, "bjzom")
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "tjwvb"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (Kla1.Kla6) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in emptyArray<Kla1>()) {
            val prope10 = fu7(type)
            if ((((""::plus)).name).get(1288234435).isUpperCase()) return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 04:00:46,759 [main:107] - replacing ({
            fu8()
            return executionType.name
        }, Function0<Nothing>)
2021-03-12 04:00:46,759 [main:50] - replacing {
            fu8()
            return executionType.name
        } Function0<Nothing>
2021-03-12 04:00:46,759 [main:54] - Getting value of type Function0<Nothing>
2021-03-12 04:00:46,900 [main:302] - generating value of type = Function0<Nothing> false depth = 0
2021-03-12 04:00:46,904 [main:302] - generating value of type = Nothing false depth = 1
2021-03-12 04:00:46,910 [main:58] - GENERATED VALUE OF TYPE Function0<Nothing> = { TODO()}
2021-03-12 04:00:46,910 [main:61] - GENERATED IS CALL =false
2021-03-12 04:00:47,069 [main:67] - randomType = Float
2021-03-12 04:00:47,211 [main:302] - generating value of type = Float true depth = 0
2021-03-12 04:00:47,243 [main:106] - GETTING Function0<Nothing> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 04:00:47,286 [main:106] - GETTING Function0<Nothing> from Short
2021-03-12 04:00:47,316 [main:106] - GETTING Function0<Nothing> from ArrayList<Short>
2021-03-12 04:00:47,430 [main:106] - GETTING Function0<Nothing> from Companion
2021-03-12 04:00:47,436 [main:106] - GETTING Function0<Nothing> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 04:00:47,437 [main:106] - GETTING Function0<Nothing> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 04:00:47,438 [main:106] - GETTING Function0<Nothing> from String?
2021-03-12 04:00:47,458 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 04:00:47,475 [main:106] - GETTING Function0<Nothing> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 04:00:47,476 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 04:00:47,477 [main:106] - GETTING Function0<Nothing> from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 04:00:47,521 [main:106] - GETTING Function0<Nothing> from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 04:00:47,522 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 04:00:47,523 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 04:00:47,524 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 04:00:47,525 [main:106] - GETTING Function0<Nothing> from ArrayList<Short>
2021-03-12 04:00:47,526 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 04:00:47,527 [main:106] - GETTING Function0<Nothing> from KFunction2<String, [@kotlin.ParameterName] Any?, String>
2021-03-12 04:00:47,527 [main:114] - replacement of {
            fu8()
            return executionType.name
        } of type Function0<Nothing> is { TODO()}
2021-03-12 04:00:47,667 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 04:00:47,667 [main:66] - Compilation checking started
2021-03-12 04:00:48,281 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = ((""::plus).invoke("ssdtf")).length.plus(-6);

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool((648690985.toUInt()).compareTo(104.toUByte()).inc())

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return (PREFIX).trim()
    }

    private fun fu8() {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
(MAX_LONG).get(1626037394).isWhitespace();
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { check(true)}
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized("kcxaj") { TODO()}
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(MAX_LONG) { TODO("cxliy")}
        return (MAX_LONG).replaceFirst('í£', 'ë', true)
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return (MAX_LONG).replaceRange(-788212043, 2021330778, "aqlwn")
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("huxlm")}
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0("wzwvj")
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return ((String::plus)).invoke("cmanr", "hbewl").padStart(-1891813490, 'å¾¯')
                }
            } finally {
                val prope11 = (HashSet<Kla0>(-1721672915)).size.rotateLeft(544438701)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in ('î')?.toInt()..prope1) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in (PREFIX::plus).equals("czqsa").compareTo(true)..prope1) {
            if (((String::plus)).name.equals("abpko"))
                return (fu1()).plus("lzegp").replaceRange(920531400, 1217589133, "bjzom")
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "tjwvb"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (Kla1.Kla6) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in emptyArray<Kla1>()) {
            val prope10 = fu7(type)
            if ((((""::plus)).name).get(1288234435).isUpperCase()) return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 04:00:48,283 [main:107] - replacing (prope1, Int)
2021-03-12 04:00:48,283 [main:50] - replacing prope1 Int
2021-03-12 04:00:48,283 [main:54] - Getting value of type Int
2021-03-12 04:00:48,432 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:48,435 [main:58] - GENERATED VALUE OF TYPE Int = 1865682001
2021-03-12 04:00:48,436 [main:61] - GENERATED IS CALL =false
2021-03-12 04:00:48,449 [main:67] - randomType = Kla0
2021-03-12 04:00:48,592 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 04:00:48,595 [main:112] - generating klass Kla0 text = class Kla0(message: String): Exception(message)
2021-03-12 04:00:48,736 [main:194] - Type params = []
2021-03-12 04:00:48,877 [main:302] - generating value of type = String true depth = 2
2021-03-12 04:00:48,896 [main:78] - Generated call from random type = (Kla0("ftlvj")).message?.length!!
2021-03-12 04:00:48,897 [main:106] - GETTING Int from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 04:00:48,938 [main:113] - Case = [public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@4936259a], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17b2dc31]]
2021-03-12 04:00:48,938 [main:149] - GENERATING call of type public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@4936259a]
2021-03-12 04:00:49,085 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 04:00:49,085 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17b2dc31]
2021-03-12 04:00:49,225 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:00:49,229 [main:117] - GENERATED CALL = ((""::plus)).invoke("jamnd").compareTo(PREFIX, false)
2021-03-12 04:00:49,229 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@5db60f3f], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17b2dc31]]
2021-03-12 04:00:49,229 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17b2dc31]
2021-03-12 04:00:49,369 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:00:49,512 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:00:49,515 [main:117] - GENERATED CALL = ((""::plus)).name.compareTo("bsetc", true)
2021-03-12 04:00:49,515 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@5db60f3f], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2e465cf2]]
2021-03-12 04:00:49,515 [main:117] - GENERATED CALL = ((""::plus)).name.length
2021-03-12 04:00:49,515 [main:113] - Case = [public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@4936259a], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15eab608]]
2021-03-12 04:00:49,515 [main:149] - GENERATING call of type public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@4936259a]
2021-03-12 04:00:49,655 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 04:00:49,655 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15eab608]
2021-03-12 04:00:49,655 [main:117] - GENERATED CALL = ((""::plus)).invoke("vibvx").toInt()
2021-03-12 04:00:49,655 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@29f63d37], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@638b60e5]]
2021-03-12 04:00:49,655 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.reflect.KFunction1[DeserializedSimpleFunctionDescriptor@29f63d37]
2021-03-12 04:00:49,796 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:00:49,796 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@638b60e5]
2021-03-12 04:00:49,940 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:00:49,943 [main:117] - GENERATED CALL = ((""::plus)).equals("yfuqw").compareTo(true)
2021-03-12 04:00:49,943 [main:113] - Case = [public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@4936259a], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2e465cf2]]
2021-03-12 04:00:49,943 [main:149] - GENERATING call of type public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@4936259a]
2021-03-12 04:00:50,084 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 04:00:50,084 [main:117] - GENERATED CALL = ((""::plus)).invoke("yysts").length
2021-03-12 04:00:50,084 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@5db60f3f], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15eab608]]
2021-03-12 04:00:50,084 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15eab608]
2021-03-12 04:00:50,084 [main:117] - GENERATED CALL = ((""::plus)).name.toInt()
2021-03-12 04:00:50,085 [main:114] - replacement of prope1 of type Int is ((""::plus)).name.toInt()
2021-03-12 04:00:50,225 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:00:50,225 [main:66] - Compilation checking started
2021-03-12 04:00:50,858 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = ((""::plus).invoke("ssdtf")).length.plus(-6);

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool((648690985.toUInt()).compareTo(104.toUByte()).inc())

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return (PREFIX).trim()
    }

    private fun fu8() {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
(MAX_LONG).get(1626037394).isWhitespace();
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { check(true)}
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized("kcxaj") { TODO()}
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(MAX_LONG) { TODO("cxliy")}
        return (MAX_LONG).replaceFirst('í£', 'ë', true)
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return (MAX_LONG).replaceRange(-788212043, 2021330778, "aqlwn")
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("huxlm")}
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0("wzwvj")
                } catch (e: Kla0) {
                    return "fail1"
                } finally {
                    return ((String::plus)).invoke("cmanr", "hbewl").padStart(-1891813490, 'å¾¯')
                }
            } finally {
                val prope11 = (HashSet<Kla0>(-1721672915)).size.rotateLeft(544438701)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in ('î')?.toInt()..((""::plus)).name.toInt()) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in (PREFIX::plus).equals("czqsa").compareTo(true)..prope1) {
            if (((String::plus)).name.equals("abpko"))
                return (fu1()).plus("lzegp").replaceRange(920531400, 1217589133, "bjzom")
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "tjwvb"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (Kla1.Kla6) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in emptyArray<Kla1>()) {
            val prope10 = fu7(type)
            if ((((""::plus)).name).get(1288234435).isUpperCase()) return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 04:00:50,860 [main:107] - replacing ("fail1", String)
2021-03-12 04:00:50,861 [main:50] - replacing "fail1" String
2021-03-12 04:00:50,861 [main:54] - Getting value of type String
2021-03-12 04:00:51,003 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:00:51,006 [main:58] - GENERATED VALUE OF TYPE String = "jvpep"
2021-03-12 04:00:51,007 [main:61] - GENERATED IS CALL =false
2021-03-12 04:00:51,013 [main:67] - randomType = UInt
2021-03-12 04:00:51,156 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 04:00:51,185 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@6a5f34fb]
2021-03-12 04:00:51,186 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40a7f0de]
2021-03-12 04:00:51,327 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:51,330 [main:78] - Generated call from random type = (2068309327.toUInt()).toLong().toString(132537487)
2021-03-12 04:00:51,331 [main:106] - GETTING String from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 04:00:51,373 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@5db60f3f], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ab64eb1]]
2021-03-12 04:00:51,373 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ab64eb1]
2021-03-12 04:00:51,514 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 04:00:51,660 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 04:00:51,664 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 04:00:51,975 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 04:00:52,124 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 04:00:52,128 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 04:00:52,446 [main:302] - generating value of type = CharSequence false depth = 6
2021-03-12 04:00:52,453 [main:95] - GENERATED = StringBuilder("rkyxj")
2021-03-12 04:00:52,453 [main:95] - GENERATED = StringBuilder(StringBuilder("rkyxj"))
2021-03-12 04:00:52,453 [main:117] - GENERATED CALL = (""::plus).name.removePrefix(StringBuilder(StringBuilder("rkyxj")))
2021-03-12 04:00:52,454 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@5db60f3f], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e41a4e7]]
2021-03-12 04:00:52,454 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e41a4e7]
2021-03-12 04:00:52,598 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 04:00:52,601 [main:302] - generating value of type = Char true depth = 1
2021-03-12 04:00:52,605 [main:117] - GENERATED CALL = (""::plus).name.replaceFirstChar({a: Char -> 'à«¾'})
2021-03-12 04:00:52,605 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@5db60f3f], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1262e19c]]
2021-03-12 04:00:52,605 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1262e19c]
2021-03-12 04:00:52,749 [main:302] - generating value of type = Char true depth = 0
2021-03-12 04:00:52,752 [main:117] - GENERATED CALL = (""::plus).name.substringAfter('?', ((""::plus)).name)
2021-03-12 04:00:52,752 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@5db60f3f], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6358fd25]]
2021-03-12 04:00:52,752 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6358fd25]
2021-03-12 04:00:52,899 [main:302] - generating value of type = Char true depth = 0
2021-03-12 04:00:53,046 [main:302] - generating value of type = Char true depth = 0
2021-03-12 04:00:53,189 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:00:53,193 [main:117] - GENERATED CALL = (""::plus).name.replace('é', 'é¬¤', true)
2021-03-12 04:00:53,193 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@5db60f3f], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@726a65dc]]
2021-03-12 04:00:53,193 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@726a65dc]
2021-03-12 04:00:53,335 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:53,485 [main:302] - generating value of type = Char true depth = 0
2021-03-12 04:00:53,488 [main:117] - GENERATED CALL = (""::plus).name.padEnd(-1003834386, 'ç')
2021-03-12 04:00:53,488 [main:113] - Case = [public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@21f30b80], public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dcba3be]]
2021-03-12 04:00:53,488 [main:149] - GENERATING call of type public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@21f30b80]
2021-03-12 04:00:53,629 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 04:00:53,630 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1dcba3be]
2021-03-12 04:00:53,770 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:00:53,914 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:00:53,918 [main:117] - GENERATED CALL = (""::plus).invoke("rehed").replaceIndentByMargin("tnckk", "mozio")
2021-03-12 04:00:53,918 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@5db60f3f], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21f58cc8]]
2021-03-12 04:00:53,918 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21f58cc8]
2021-03-12 04:00:54,059 [main:302] - generating value of type = Char true depth = 0
2021-03-12 04:00:54,063 [main:117] - GENERATED CALL = (""::plus).name.replaceBefore('ä£¤', (String::plus).name, val PREFIX =
2021-03-12 04:00:54,063 [main:113] - Case = [public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@21f30b80], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c521f60]]
2021-03-12 04:00:54,063 [main:149] - GENERATING call of type public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@21f30b80]
2021-03-12 04:00:54,203 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 04:00:54,203 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c521f60]
2021-03-12 04:00:54,203 [main:117] - GENERATED CALL = (""::plus).invoke("fkkto").trimStart()
2021-03-12 04:00:54,204 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@5db60f3f], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fdc3b45]]
2021-03-12 04:00:54,204 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@fdc3b45]
2021-03-12 04:00:54,344 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:54,348 [main:117] - GENERATED CALL = (""::plus).name.dropLast(-766072985)
2021-03-12 04:00:54,348 [main:113] - Case = [public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@21f30b80], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@678d6ca3]]
2021-03-12 04:00:54,348 [main:149] - GENERATING call of type public abstract operator fun invoke(other: kotlin.Any?): kotlin.String defined in kotlin.Function1[FunctionInvokeDescriptor@21f30b80]
2021-03-12 04:00:54,526 [main:302] - generating value of type = [@kotlin.ParameterName] Any false depth = 0
2021-03-12 04:00:54,526 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@678d6ca3]
2021-03-12 04:00:54,667 [main:302] - generating value of type = Char true depth = 0
2021-03-12 04:00:54,813 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:00:54,816 [main:117] - GENERATED CALL = (""::plus).invoke("zpyry").replaceAfter('à®¹', "xulhl", (""::plus).invoke("ssdtf"))
2021-03-12 04:00:54,816 [main:114] - replacement of "fail1" of type String is (""::plus).name.replace('é', 'é¬¤', true)
2021-03-12 04:00:54,957 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:00:54,957 [main:66] - Compilation checking started
2021-03-12 04:00:55,579 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = ((""::plus).invoke("ssdtf")).length.plus(-6);

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool((648690985.toUInt()).compareTo(104.toUByte()).inc())

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return (PREFIX).trim()
    }

    private fun fu8() {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
(MAX_LONG).get(1626037394).isWhitespace();
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { check(true)}
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized("kcxaj") { TODO()}
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(MAX_LONG) { TODO("cxliy")}
        return (MAX_LONG).replaceFirst('í£', 'ë', true)
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return (MAX_LONG).replaceRange(-788212043, 2021330778, "aqlwn")
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("huxlm")}
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0("wzwvj")
                } catch (e: Kla0) {
                    return (""::plus).name.replace('é', 'é¬¤', true)
                } finally {
                    return ((String::plus)).invoke("cmanr", "hbewl").padStart(-1891813490, 'å¾¯')
                }
            } finally {
                val prope11 = (HashSet<Kla0>(-1721672915)).size.rotateLeft(544438701)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in ('î')?.toInt()..((""::plus)).name.toInt()) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in (PREFIX::plus).equals("czqsa").compareTo(true)..prope1) {
            if (((String::plus)).name.equals("abpko"))
                return (fu1()).plus("lzegp").replaceRange(920531400, 1217589133, "bjzom")
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "tjwvb"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (Kla1.Kla6) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in emptyArray<Kla1>()) {
            val prope10 = fu7(type)
            if ((((""::plus)).name).get(1288234435).isUpperCase()) return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 04:00:55,581 [main:107] - replacing ((PREFIX::plus).equals("czqsa").compareTo(true)..prope1, IntRange)
2021-03-12 04:00:55,582 [main:50] - replacing (PREFIX::plus).equals("czqsa").compareTo(true)..prope1 IntRange
2021-03-12 04:00:55,582 [main:54] - Getting value of type IntRange
2021-03-12 04:00:55,724 [main:302] - generating value of type = IntRange false depth = 0
2021-03-12 04:00:55,872 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 04:00:55,876 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 04:00:56,353 [main:302] - generating value of type = Int true depth = 3
2021-03-12 04:00:56,357 [main:302] - generating value of type = Int true depth = 3
2021-03-12 04:00:56,360 [main:95] - GENERATED = IntRange(-1051666489, 1988152300)
2021-03-12 04:00:56,360 [main:58] - GENERATED VALUE OF TYPE IntRange = IntRange(-1051666489, 1988152300)
2021-03-12 04:00:56,360 [main:61] - GENERATED IS CALL =true
2021-03-12 04:00:56,521 [main:67] - randomType = ULong
2021-03-12 04:00:56,662 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 04:00:56,692 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@7de9ff91]
2021-03-12 04:00:56,692 [main:149] - GENERATING call of type public infix fun kotlin.Short.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3893b3d5]
2021-03-12 04:00:56,833 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 04:00:56,836 [main:78] - Generated call from random type = (1519124287986679323.toULong()).toShort().until(-16)
2021-03-12 04:00:56,837 [main:106] - GETTING IntRange from String
2021-03-12 04:00:56,854 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2e465cf2], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@423098bc]]
2021-03-12 04:00:56,854 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@423098bc]
2021-03-12 04:00:56,996 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 04:00:56,999 [main:117] - GENERATED CALL = (MAX_LONG).length.rangeTo(56)
2021-03-12 04:00:56,999 [main:113] - Case = [public val kotlin.CharSequence.indices: kotlin.ranges.IntRange defined in kotlin.text[DeserializedPropertyDescriptor@35a19fe6]]
2021-03-12 04:00:56,999 [main:117] - GENERATED CALL = (MAX_LONG).indices
2021-03-12 04:00:56,999 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@2e465cf2], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@d384b46]]
2021-03-12 04:00:56,999 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@d384b46]
2021-03-12 04:00:57,141 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 04:00:57,145 [main:117] - GENERATED CALL = (MAX_LONG).length.until(2)
2021-03-12 04:00:57,145 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@423098bc]]
2021-03-12 04:00:57,145 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339]
2021-03-12 04:00:57,145 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@423098bc]
2021-03-12 04:00:57,288 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 04:00:57,292 [main:117] - GENERATED CALL = (MAX_LONG).compareTo(PREFIX).rangeTo(54)
2021-03-12 04:00:57,292 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@d384b46]]
2021-03-12 04:00:57,292 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6bb22339]
2021-03-12 04:00:57,434 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:00:57,437 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@d384b46]
2021-03-12 04:00:57,580 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 04:00:57,584 [main:117] - GENERATED CALL = (MAX_LONG).compareTo("kdebs").until(-107)
2021-03-12 04:00:57,584 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0], public val kotlin.CharSequence.indices: kotlin.ranges.IntRange defined in kotlin.text[DeserializedPropertyDescriptor@35a19fe6]]
2021-03-12 04:00:57,584 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1f57dbd0]
2021-03-12 04:00:57,725 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:57,870 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:00:57,873 [main:117] - GENERATED CALL = (MAX_LONG).subSequence(-1641245147, 1380708817).indices
2021-03-12 04:00:57,873 [main:114] - replacement of (PREFIX::plus).equals("czqsa").compareTo(true)..prope1 of type IntRange is (MAX_LONG).subSequence(-1641245147, 1380708817).indices
2021-03-12 04:00:58,014 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:00:58,015 [main:66] - Compilation checking started
2021-03-12 04:00:58,655 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = ((""::plus).invoke("ssdtf")).length.plus(-6);

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool((648690985.toUInt()).compareTo(104.toUByte()).inc())

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return (PREFIX).trim()
    }

    private fun fu8() {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
(MAX_LONG).get(1626037394).isWhitespace();
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { check(true)}
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized("kcxaj") { TODO()}
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(MAX_LONG) { TODO("cxliy")}
        return (MAX_LONG).replaceFirst('í£', 'ë', true)
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return (MAX_LONG).replaceRange(-788212043, 2021330778, "aqlwn")
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("huxlm")}
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0("wzwvj")
                } catch (e: Kla0) {
                    return (""::plus).name.replace('é', 'é¬¤', true)
                } finally {
                    return ((String::plus)).invoke("cmanr", "hbewl").padStart(-1891813490, 'å¾¯')
                }
            } finally {
                val prope11 = (HashSet<Kla0>(-1721672915)).size.rotateLeft(544438701)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in ('î')?.toInt()..((""::plus)).name.toInt()) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in (MAX_LONG).subSequence(-1641245147, 1380708817).indices) {
            if (((String::plus)).name.equals("abpko"))
                return (fu1()).plus("lzegp").replaceRange(920531400, 1217589133, "bjzom")
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "tjwvb"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (Kla1.Kla6) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in emptyArray<Kla1>()) {
            val prope10 = fu7(type)
            if ((((""::plus)).name).get(1288234435).isUpperCase()) return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 04:00:58,659 [main:107] - replacing (prope5, Any)
2021-03-12 04:00:58,659 [main:50] - replacing prope5 Any
2021-03-12 04:00:58,659 [main:54] - Getting value of type Any
2021-03-12 04:00:58,846 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:00:58,846 [main:58] - GENERATED VALUE OF TYPE Any = "unoam"
2021-03-12 04:00:58,846 [main:61] - GENERATED IS CALL =false
2021-03-12 04:00:59,044 [main:67] - randomType = Map<Kla1, Kla0>
2021-03-12 04:00:59,045 [main:106] - GETTING Any from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 04:00:59,089 [main:106] - GETTING Any from String
2021-03-12 04:00:59,112 [main:114] - replacement of prope5 of type Any is "unoam"
2021-03-12 04:00:59,262 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 04:00:59,262 [main:66] - Compilation checking started
2021-03-12 04:00:59,889 [main:53] - Result = true
Text:

import java.util.concurrent.CountDownLatch
import java.util.concurrent.TimeUnit
import java.util.concurrent.Executors
import java.util.concurrent.Callable
import java.util.concurrent.Future
val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "

fun box(): String {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}

var prope0 = (""::plus).invoke("ssdtf").trimStart()

inline fun fu0(vararg s : () -> String = arrayOf({ "cwadt"})) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
for (p in arrayOf<Function0<String>>({ "duzsb"})) {
        prope0 += { "sodos"}()
    }
}

fun box204(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
fu0()
    return ((""::plus)).name.removeRange(-1153986731, 1153986731)
}

fun fu1(): String? = null

inline fun Array<String>.fu2(fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
for (string in Array<String>(295951683, {a: Int -> "xswhp"})) {
        fn((0.6944959309243238).toByte().toString(598099311) ?: continue)
    }
}

fun Array<String>.fu3(fn: (String) -> Unit) {
    fu2(fn)
}

inline fun Array<String>.fu4(crossinline fn: (String) -> Unit) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu3 { fn(it) }
}

fun fu5(a: Array<String>) {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
a.fu2 {a: String -> check(MAX_LONG != "".plus(Long.MAX_VALUE), { "hhckk"})}
    arrayOf<String>("cwqzi").fu3 {}
    a.fu4 {}
}

fun box580(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
fu5(arrayOf((arrayListOf<Short>()).get(1042941104).toString(295951683)))
    return (String::plus).name.replace('á³', 'æ©¾', PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}")
}

val prope1: Int = 10;

var prope2: Int = ((""::plus).invoke("ssdtf")).length.plus(-6);

val prope3 = CountDownLatch(prope1)

val prope4 = CountDownLatch(1);

val prope5: Any = Object()

val prope6 = arrayListOf<Int>()

val prope7 = Executors.newFixedThreadPool((648690985.toUInt()).compareTo(104.toUByte()).inc())

class Kla0(message: String): Exception(message)

enum class Kla1 {
    Kla3,
    Kla4,
    Kla5,
    Kla6,
    Kla7,
    Kla8,
    Kla9
}

class Kla2(val name: String, val executionType: Kla1) : Callable<String> {

    override fun call(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
prope4.await()
        return (PREFIX).trim()
    }

    private fun fu8() {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
(MAX_LONG).get(1626037394).isWhitespace();
        prope3.countDown()
    }

    fun fu9(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized("unoam") { check(true)}
        return (PREFIX).replaceRange(1267465360, 47940171, StringBuilder(1776379560))
    }


    fun fu10(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized("kcxaj") { TODO()}
        return "fail"
    }

    fun fu11(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("vapvn")}
        return "fail"
    }

    fun fu12(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(MAX_LONG) { TODO("cxliy")}
        return (MAX_LONG).replaceFirst('í£', 'ë', true)
    }

    fun fu13(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("ctelz")}
        return (MAX_LONG).replaceRange(-788212043, 2021330778, "aqlwn")
    }

    fun fu14(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized(prope5) { TODO("huxlm")}
        return "fail"
    }

    fun fu15(): String {
        val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
synchronized((String::plus).name) {
            try {
                try {
                    fu8()
                    throw Kla0("wzwvj")
                } catch (e: Kla0) {
                    return (""::plus).name.replace('é', 'é¬¤', true)
                } finally {
                    return ((String::plus)).invoke("cmanr", "hbewl").padStart(-1891813490, 'å¾¯')
                }
            } finally {
                val prope11 = (HashSet<Kla0>(-1721672915)).size.rotateLeft(544438701)
            }
        }
        return "fail"
    }
}

fun fu6(type: Kla1, producer: (Int) -> Callable<String>): String {

    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        val prope8 = arrayListOf<Future<String>>()
        for (i in ('î')?.toInt()..((""::plus)).name.toInt()) {
            prope8.add(prope7.submit (producer(i)))
        }

        prope4.countDown()
        val prope9 = prope3.await(10, TimeUnit.SECONDS)
        if (!prope9) return "fail: processes not finished"

        for (i in (MAX_LONG).subSequence(-1641245147, 1380708817).indices) {
            if (((String::plus)).name.equals("abpko"))
                return (fu1()).plus("lzegp").replaceRange(920531400, 1217589133, "bjzom")
        }

        for (f in prope8) {
            if (f.get() != (PREFIX + MAX_LONG).replaceFirstChar({a: Char -> 'á¡'})) return "tjwvb"
        }
    } finally {

    }

    return "OK"
}

fun fu7(type: Kla1): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
return fu6 (Kla1.Kla6) { Kla2(("ffowi")?.length.dec().toString(), type) }
}

fun box962(): String {
    val MAX_LONG = "9223372036854775807"
val PREFIX = "max = "
var prope0 = (""::plus).invoke("ssdtf").trimStart()
try {
        for (type in emptyArray<Kla1>()) {
            val prope10 = fu7(type)
            if ((((""::plus)).name).get(1288234435).isUpperCase()) return "fail on $type execution: $prope10"
        }
    } finally {
        prope7.shutdown()
    }
    return "OK"
}


2021-03-12 04:00:59,891 [main:107] - replacing ("fail", String)
2021-03-12 04:00:59,891 [main:50] - replacing "fail" String
2021-03-12 04:00:59,891 [main:54] - Getting value of type String
2021-03-12 04:01:00,034 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:01:00,038 [main:58] - GENERATED VALUE OF TYPE String = "foncc"
2021-03-12 04:01:00,038 [main:61] - GENERATED IS CALL =false
2021-03-12 04:01:00,051 [main:67] - randomType = Kla0
2021-03-12 04:01:00,194 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 04:01:00,197 [main:112] - generating klass Kla0 text = class Kla0(message: String): Exception(message)
2021-03-12 04:01:00,343 [main:194] - Type params = []
2021-03-12 04:01:00,488 [main:302] - generating value of type = String true depth = 2
2021-03-12 04:01:00,507 [main:78] - Generated call from random type = (Kla0("ffazl")).cause?.message!!
2021-03-12 04:01:00,508 [main:106] - GETTING String from KFunction1<[@kotlin.ParameterName] Any?, String>
2021-03-12 04:01:00,550 [main:113] - Case = [public expect abstract val name: kotlin.String defined in kotlin.reflect.KFunction1[DeserializedPropertyDescriptor@27e72e30], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21f58cc8]]
2021-03-12 04:01:00,550 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21f58cc8]
2021-03-12 04:01:00,694 [main:302] - generating value of type = Char true depth = 0
