2021-03-12 02:09:38,952 [main:66] - Compilation checking started
2021-03-12 02:09:40,227 [main:50] - replacing unused: Long Long
2021-03-12 02:09:40,227 [main:54] - Getting value of type Long
2021-03-12 02:09:40,392 [main:302] - generating value of type = Long true depth = 0
2021-03-12 02:09:40,394 [main:58] - GENERATED VALUE OF TYPE Long = 4932969631790803736
2021-03-12 02:09:40,395 [main:61] - GENERATED IS CALL =false
2021-03-12 02:09:41,184 [main:67] - randomType = Array<Outer>
2021-03-12 02:09:41,305 [main:302] - generating value of type = Array<Outer> false depth = 0
2021-03-12 02:09:41,492 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: Outer): Array<Outer> = TODO()
2021-03-12 02:09:41,497 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: Outer): Array<Outer> = TODO()
2021-03-12 02:09:41,659 [main:302] - generating value of type = Outer false depth = 3
2021-03-12 02:09:41,661 [main:112] - generating klass Outer text = class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}
2021-03-12 02:09:41,662 [main:95] - GENERATED = arrayOf<Outer>(Outer())
2021-03-12 02:09:41,733 [main:149] - GENERATING call of type @kotlin.jvm.JvmName public fun kotlin.Array<out kotlin.Long>.sum(): kotlin.Long defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@fab9c32]
2021-03-12 02:09:41,734 [main:78] - Generated call from random type = (arrayOf<Outer>(Outer())).sum()
2021-03-12 02:09:41,735 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 02:09:41,736 [main:66] - Compilation checking started
2021-03-12 02:09:42,283 [main:49] - Result = false
Text:
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long = (arrayOf<Outer>(Outer())).sum()) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if (r != "OKFoo") return "Fail: $r"

    return "OK"
}


2021-03-12 02:09:42,515 [main:112] - generating klass Outer text = class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}
2021-03-12 02:09:42,517 [main:112] - generating klass Local text = class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }
2021-03-12 02:09:42,767 [main:45] - Trying to change 18 nodes
2021-03-12 02:09:42,770 [main:53] - replacing (this, String)
2021-03-12 02:09:42,771 [main:50] - replacing this String
2021-03-12 02:09:42,771 [main:54] - Getting value of type String
2021-03-12 02:09:42,865 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:09:42,867 [main:58] - GENERATED VALUE OF TYPE String = "yccqr"
2021-03-12 02:09:42,867 [main:61] - GENERATED IS CALL =false
2021-03-12 02:09:42,868 [main:67] - randomType = Boolean
2021-03-12 02:09:42,996 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:09:43,022 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@470dd6a4]
2021-03-12 02:09:43,112 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:09:43,113 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49f0c862]
2021-03-12 02:09:43,215 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:43,217 [main:78] - Generated call from random type = (false).compareTo(false).toString(-399471492)
2021-03-12 02:09:43,217 [main:106] - GETTING String from String
2021-03-12 02:09:43,274 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7735a93e]]
2021-03-12 02:09:43,274 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d]
2021-03-12 02:09:43,370 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:43,465 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:43,466 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7735a93e]
2021-03-12 02:09:43,584 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:43,689 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:43,691 [main:117] - GENERATED CALL = (Outer().foo).subSequence(1727473195, 1893527739).substring(-1671658071, -2147038189)
2021-03-12 02:09:43,691 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fb39d03]]
2021-03-12 02:09:43,692 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fb39d03]
2021-03-12 02:09:43,776 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:43,778 [main:117] - GENERATED CALL = (Outer().foo).substring(-1684913539)
2021-03-12 02:09:43,778 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6db9772a]]
2021-03-12 02:09:43,778 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6db9772a]
2021-03-12 02:09:43,779 [main:117] - GENERATED CALL = (Outer().foo).decapitalize()
2021-03-12 02:09:43,779 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a8ca87c]]
2021-03-12 02:09:43,780 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a8ca87c]
2021-03-12 02:09:43,781 [main:117] - GENERATED CALL = (Outer().foo).toLowerCase()
2021-03-12 02:09:43,781 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@265d560b]]
2021-03-12 02:09:43,781 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d]
2021-03-12 02:09:43,903 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:44,003 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:44,004 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@265d560b]
2021-03-12 02:09:44,087 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 02:09:44,172 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:09:44,173 [main:117] - GENERATED CALL = (Outer().foo).subSequence(1184546493, -1735413295).commonSuffixWith("mdnjd", false)
2021-03-12 02:09:44,174 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@198e0d63]]
2021-03-12 02:09:44,174 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@198e0d63]
2021-03-12 02:09:44,175 [main:117] - GENERATED CALL = (Outer().foo).lowercase()
2021-03-12 02:09:44,175 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c10a995]]
2021-03-12 02:09:44,175 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff]
2021-03-12 02:09:44,293 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:44,294 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c10a995]
2021-03-12 02:09:44,296 [main:117] - GENERATED CALL = (Outer().foo).get(-1470179438).plus(Outer().foo)
2021-03-12 02:09:44,296 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53837034]]
2021-03-12 02:09:44,296 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53837034]
2021-03-12 02:09:44,389 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 02:09:44,490 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): Iterable<Int> = TODO()
2021-03-12 02:09:44,493 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): Iterable<Int> = TODO()
2021-03-12 02:09:44,598 [main:95] - GENERATED = arrayListOf<Int>()
2021-03-12 02:09:44,599 [main:117] - GENERATED CALL = (Outer().foo).slice(arrayListOf<Int>())
2021-03-12 02:09:44,599 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c2b4366]]
2021-03-12 02:09:44,600 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c2b4366]
2021-03-12 02:09:44,600 [main:117] - GENERATED CALL = (Outer().foo).reversed()
2021-03-12 02:09:44,601 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16e0d7b]]
2021-03-12 02:09:44,601 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16e0d7b]
2021-03-12 02:09:44,691 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:09:44,775 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:09:44,856 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:09:44,858 [main:117] - GENERATED CALL = (Outer().foo).replaceFirst('薈', '춲', false)
2021-03-12 02:09:44,858 [main:61] - replacement of this of type String is (Outer().foo).get(-1470179438).plus(Outer().foo)
2021-03-12 02:09:44,953 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:09:44,954 [main:66] - Compilation checking started
2021-03-12 02:09:45,349 [main:49] - Result = false
Text:
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = (Outer().foo).get(-1470179438).plus(Outer().foo)@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if (r != "OKFoo") return "Fail: $r"

    return "OK"
}


2021-03-12 02:09:45,351 [main:53] - replacing (r, String)
2021-03-12 02:09:45,351 [main:50] - replacing r String
2021-03-12 02:09:45,351 [main:54] - Getting value of type String
2021-03-12 02:09:45,443 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:09:45,443 [main:58] - GENERATED VALUE OF TYPE String = "rpqar"
2021-03-12 02:09:45,443 [main:61] - GENERATED IS CALL =false
2021-03-12 02:09:45,538 [main:67] - randomType = Int
2021-03-12 02:09:45,643 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:45,761 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5bfe259b]
2021-03-12 02:09:45,762 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36e2524a]
2021-03-12 02:09:45,763 [main:78] - Generated call from random type = (1174676241).toChar().uppercase()
2021-03-12 02:09:45,763 [main:106] - GETTING String from String
2021-03-12 02:09:45,797 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7735a93e]]
2021-03-12 02:09:45,797 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d]
2021-03-12 02:09:45,883 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:45,966 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:45,968 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7735a93e]
2021-03-12 02:09:46,095 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:46,200 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:46,201 [main:117] - GENERATED CALL = (Outer().result()).subSequence(-1244379060, 866468475).substring(-128470403, 813360234)
2021-03-12 02:09:46,204 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28a1ce05]]
2021-03-12 02:09:46,205 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28a1ce05]
2021-03-12 02:09:46,292 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:09:46,371 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:09:46,449 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:09:46,451 [main:117] - GENERATED CALL = (Outer().result()).replace('', 'ᠵ', true)
2021-03-12 02:09:46,451 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a14ba2d]]
2021-03-12 02:09:46,451 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a14ba2d]
2021-03-12 02:09:46,544 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 02:09:46,554 [main:117] - GENERATED CALL = (Outer().result()).removeSuffix("omypx")
2021-03-12 02:09:46,555 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f87ec56]]
2021-03-12 02:09:46,555 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff]
2021-03-12 02:09:46,651 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:46,653 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f87ec56]
2021-03-12 02:09:46,654 [main:117] - GENERATED CALL = (Outer().result()).get(-1002408293).titlecase()
2021-03-12 02:09:46,654 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3836e47]]
2021-03-12 02:09:46,654 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3836e47]
2021-03-12 02:09:46,755 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 02:09:46,760 [main:117] - GENERATED CALL = (Outer().result()).removeSurrounding("orthy")
2021-03-12 02:09:46,761 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27df6c88]]
2021-03-12 02:09:46,761 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27df6c88]
2021-03-12 02:09:46,762 [main:117] - GENERATED CALL = (Outer().result()).trim()
2021-03-12 02:09:46,762 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52d3542b]]
2021-03-12 02:09:46,762 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52d3542b]
2021-03-12 02:09:46,847 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:09:46,848 [main:117] - GENERATED CALL = (Outer().result()).replaceIndent("kmbmn")
2021-03-12 02:09:46,848 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47d736]]
2021-03-12 02:09:46,848 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47d736]
2021-03-12 02:09:46,849 [main:117] - GENERATED CALL = (Outer().result()).trimEnd()
2021-03-12 02:09:46,849 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9c4835b]]
2021-03-12 02:09:46,849 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9c4835b]
2021-03-12 02:09:46,850 [main:117] - GENERATED CALL = (Outer().result()).trimStart()
2021-03-12 02:09:46,851 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73cb6541]]
2021-03-12 02:09:46,851 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73cb6541]
2021-03-12 02:09:46,954 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 02:09:46,954 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 02:09:46,956 [main:117] - GENERATED CALL = (Outer().result()).takeLastWhile({a: Char -> false})
2021-03-12 02:09:46,957 [main:61] - replacement of r of type String is (Outer().result()).trim()
2021-03-12 02:09:47,040 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:09:47,041 [main:66] - Compilation checking started
2021-03-12 02:09:47,458 [main:53] - Result = true
Text:
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if ((Outer().result()).trim() != "OKFoo") return "Fail: $r"

    return "OK"
}


2021-03-12 02:09:47,459 [main:53] - replacing (r, String)
2021-03-12 02:09:47,459 [main:50] - replacing r String
2021-03-12 02:09:47,459 [main:54] - Getting value of type String
2021-03-12 02:09:47,565 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:09:47,566 [main:58] - GENERATED VALUE OF TYPE String = "fcagj"
2021-03-12 02:09:47,566 [main:61] - GENERATED IS CALL =false
2021-03-12 02:09:47,567 [main:67] - randomType = Outer
2021-03-12 02:09:47,660 [main:302] - generating value of type = Outer false depth = 0
2021-03-12 02:09:47,661 [main:112] - generating klass Outer text = class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}
2021-03-12 02:09:47,674 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3836e47]
2021-03-12 02:09:47,782 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 02:09:47,788 [main:78] - Generated call from random type = (Outer()).foo.removeSurrounding("rlmlk")
2021-03-12 02:09:47,788 [main:106] - GETTING String from String
2021-03-12 02:09:47,819 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aeda4a2]]
2021-03-12 02:09:47,820 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aeda4a2]
2021-03-12 02:09:47,901 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:09:47,902 [main:117] - GENERATED CALL = (Outer().foo).concat("xybak")
2021-03-12 02:09:47,902 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32296d67]]
2021-03-12 02:09:47,902 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32296d67]
2021-03-12 02:09:47,984 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:47,985 [main:117] - GENERATED CALL = (Outer().foo).dropLast(1758665557)
2021-03-12 02:09:47,985 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d2a278f]]
2021-03-12 02:09:47,986 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d2a278f]
2021-03-12 02:09:48,077 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 02:09:48,077 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 02:09:48,079 [main:117] - GENERATED CALL = (Outer().foo).filter({a: Char -> true})
2021-03-12 02:09:48,079 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@431d9bd0]]
2021-03-12 02:09:48,080 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@431d9bd0]
2021-03-12 02:09:48,172 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:09:48,275 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:09:48,363 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:09:48,365 [main:117] - GENERATED CALL = (Outer().foo).replaceBefore('ᨰ', "bmhhg", "fxzsw")
2021-03-12 02:09:48,365 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c5f167f]]
2021-03-12 02:09:48,365 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d]
2021-03-12 02:09:48,444 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:48,524 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:48,525 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c5f167f]
2021-03-12 02:09:48,604 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 02:09:48,707 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 02:09:48,710 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 02:09:48,905 [main:302] - generating value of type = String true depth = 3
2021-03-12 02:09:48,906 [main:95] - GENERATED = Regex("sydfc")
2021-03-12 02:09:48,906 [main:117] - GENERATED CALL = (Outer().foo).subSequence(896158454, 640969866).replaceFirst(Regex("sydfc"), Outer().result())
2021-03-12 02:09:48,907 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7735a93e]]
2021-03-12 02:09:48,907 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d]
2021-03-12 02:09:49,001 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:49,079 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:49,080 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7735a93e]
2021-03-12 02:09:49,181 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:49,287 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:49,288 [main:117] - GENERATED CALL = (Outer().foo).subSequence(751440279, -1411414613).substring(1729882675, -453080668)
2021-03-12 02:09:49,288 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7726966b]]
2021-03-12 02:09:49,289 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7726966b]
2021-03-12 02:09:49,368 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:09:49,369 [main:117] - GENERATED CALL = (Outer().foo).replaceBeforeLast('÷', Outer().foo, Outer().foo)
2021-03-12 02:09:49,370 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f4617e5]]
2021-03-12 02:09:49,370 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f4617e5]
2021-03-12 02:09:49,454 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:49,562 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:49,563 [main:117] - GENERATED CALL = (Outer().foo).removeRange(-1562198199, 1080817905)
2021-03-12 02:09:49,563 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36e2524a]]
2021-03-12 02:09:49,563 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff]
2021-03-12 02:09:49,666 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:49,666 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36e2524a]
2021-03-12 02:09:49,667 [main:117] - GENERATED CALL = (Outer().foo).get(1030609720).uppercase()
2021-03-12 02:09:49,667 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b89d2ea]]
2021-03-12 02:09:49,667 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b89d2ea]
2021-03-12 02:09:49,668 [main:117] - GENERATED CALL = (Outer().foo).toUpperCase()
2021-03-12 02:09:49,668 [main:61] - replacement of r of type String is (Outer().foo).dropLast(1758665557)
2021-03-12 02:09:49,763 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:09:49,764 [main:53] - replacing (this, Outer)
2021-03-12 02:09:49,764 [main:50] - replacing this Outer
2021-03-12 02:09:49,765 [main:54] - Getting value of type Outer
2021-03-12 02:09:49,844 [main:302] - generating value of type = Outer false depth = 0
2021-03-12 02:09:49,844 [main:112] - generating klass Outer text = class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}
2021-03-12 02:09:49,845 [main:58] - GENERATED VALUE OF TYPE Outer = Outer()
2021-03-12 02:09:49,845 [main:61] - GENERATED IS CALL =true
2021-03-12 02:09:50,103 [main:67] - randomType = Map<UByte, Outer>
2021-03-12 02:09:50,104 [main:106] - GETTING Outer from String
2021-03-12 02:09:50,130 [main:106] - GETTING Outer from String
2021-03-12 02:09:50,130 [main:106] - GETTING Outer from String
2021-03-12 02:09:50,131 [main:61] - replacement of this of type Outer is Outer()
2021-03-12 02:09:50,259 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 02:09:50,259 [main:66] - Compilation checking started
2021-03-12 02:09:50,261 [main:71] - Wrong syntax or breaks conditions
2021-03-12 02:09:50,262 [main:49] - Result = false
Text:
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = Outer()@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if ((Outer().result()).trim() != "OKFoo") return "Fail: $r"

    return "OK"
}


2021-03-12 02:09:50,263 [main:53] - replacing (l.result() + l.outer().foo, String)
2021-03-12 02:09:50,264 [main:50] - replacing l.result() + l.outer().foo String
2021-03-12 02:09:50,264 [main:54] - Getting value of type String
2021-03-12 02:09:50,354 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:09:50,354 [main:58] - GENERATED VALUE OF TYPE String = "xuvem"
2021-03-12 02:09:50,355 [main:61] - GENERATED IS CALL =false
2021-03-12 02:09:50,522 [main:67] - randomType = Sequence<Outer?>
2021-03-12 02:09:50,522 [main:106] - GETTING String from String
2021-03-12 02:09:50,553 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2987f96c]]
2021-03-12 02:09:50,553 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2987f96c]
2021-03-12 02:09:50,632 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:50,724 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:09:50,726 [main:117] - GENERATED CALL = (Outer().foo).padStart(-2030462724, '曓')
2021-03-12 02:09:50,726 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4af4e98c]]
2021-03-12 02:09:50,726 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4af4e98c]
2021-03-12 02:09:50,811 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:50,812 [main:117] - GENERATED CALL = (Outer().foo).takeLast(-667826654)
2021-03-12 02:09:50,812 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ebcf794]]
2021-03-12 02:09:50,812 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ebcf794]
2021-03-12 02:09:50,890 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:50,891 [main:117] - GENERATED CALL = (Outer().foo).take(-1264302388)
2021-03-12 02:09:50,891 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59340e5c]]
2021-03-12 02:09:50,891 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59340e5c]
2021-03-12 02:09:50,892 [main:117] - GENERATED CALL = (Outer().foo).uppercase()
2021-03-12 02:09:50,892 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f310f6a]]
2021-03-12 02:09:50,892 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f310f6a]
2021-03-12 02:09:50,972 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:09:50,973 [main:117] - GENERATED CALL = (Outer().foo).plus("omyke")
2021-03-12 02:09:50,974 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51567418]]
2021-03-12 02:09:50,974 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51567418]
2021-03-12 02:09:51,052 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 02:09:51,053 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 02:09:51,054 [main:117] - GENERATED CALL = (Outer().foo).filterIndexed({a: Int, b: Char -> false})
2021-03-12 02:09:51,054 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73cb6541]]
2021-03-12 02:09:51,055 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73cb6541]
2021-03-12 02:09:51,135 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 02:09:51,136 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 02:09:51,137 [main:117] - GENERATED CALL = (Outer().foo).takeLastWhile({a: Char -> false})
2021-03-12 02:09:51,137 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33716868]]
2021-03-12 02:09:51,137 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33716868]
2021-03-12 02:09:51,242 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 02:09:51,242 [main:302] - generating value of type = Char true depth = 1
2021-03-12 02:09:51,248 [main:117] - GENERATED CALL = (Outer().foo).replaceFirstChar({a: Char -> 'ᦞ'})
2021-03-12 02:09:51,248 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bfe811c]]
2021-03-12 02:09:51,249 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bfe811c]
2021-03-12 02:09:51,340 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:09:51,341 [main:117] - GENERATED CALL = (Outer().foo).substringBeforeLast('陲', Outer().result())
2021-03-12 02:09:51,341 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16e0d7b]]
2021-03-12 02:09:51,341 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16e0d7b]
2021-03-12 02:09:51,421 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:09:51,498 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:09:51,576 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:09:51,577 [main:117] - GENERATED CALL = (Outer().foo).replaceFirst('鷄', '컿', true)
2021-03-12 02:09:51,577 [main:61] - replacement of l.result() + l.outer().foo of type String is (Outer().foo).filterIndexed({a: Int, b: Char -> false})
2021-03-12 02:09:51,680 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:09:51,680 [main:66] - Compilation checking started
2021-03-12 02:09:52,139 [main:53] - Result = true
Text:
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return (Outer().foo).filterIndexed({a: Int, b: Char -> false})
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if ((Outer().result()).trim() != "OKFoo") return "Fail: $r"

    return "OK"
}


2021-03-12 02:09:52,141 [main:53] - replacing (this@id, String)
2021-03-12 02:09:52,141 [main:50] - replacing this@id String
2021-03-12 02:09:52,141 [main:54] - Getting value of type String
2021-03-12 02:09:52,228 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:09:52,229 [main:58] - GENERATED VALUE OF TYPE String = "ahyai"
2021-03-12 02:09:52,229 [main:61] - GENERATED IS CALL =false
2021-03-12 02:09:52,335 [main:67] - randomType = Outer?
2021-03-12 02:09:52,424 [main:302] - generating value of type = Outer false depth = 0
2021-03-12 02:09:52,424 [main:112] - generating klass Outer text = class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return (Outer().foo).filterIndexed({a: Int, b: Char -> false})
    }

    fun result(): String = "OK".id()
}
2021-03-12 02:09:52,444 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72c65b88]
2021-03-12 02:09:52,530 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 02:09:52,535 [main:78] - Generated call from random type = (Outer())?.foo.removePrefix("otdma")
2021-03-12 02:09:52,536 [main:106] - GETTING String from String
2021-03-12 02:09:52,572 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32296d67]]
2021-03-12 02:09:52,572 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32296d67]
2021-03-12 02:09:52,691 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:52,692 [main:117] - GENERATED CALL = (Outer().result()).dropLast(1503424703)
2021-03-12 02:09:52,692 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4af4e98c]]
2021-03-12 02:09:52,692 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4af4e98c]
2021-03-12 02:09:52,775 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:52,776 [main:117] - GENERATED CALL = (Outer().result()).takeLast(510000035)
2021-03-12 02:09:52,776 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@265d560b]]
2021-03-12 02:09:52,776 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d]
2021-03-12 02:09:52,861 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:52,943 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:52,944 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@265d560b]
2021-03-12 02:09:53,029 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 02:09:53,114 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:09:53,115 [main:117] - GENERATED CALL = (Outer().result()).subSequence(758577006, 1938701722).commonSuffixWith("jntbm", true)
2021-03-12 02:09:53,116 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52d3542b]]
2021-03-12 02:09:53,116 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52d3542b]
2021-03-12 02:09:53,116 [main:117] - GENERATED CALL = (Outer().result()).replaceIndent(Outer().foo)
2021-03-12 02:09:53,116 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10892581]]
2021-03-12 02:09:53,117 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff]
2021-03-12 02:09:53,239 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:53,240 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10892581]
2021-03-12 02:09:53,241 [main:117] - GENERATED CALL = (Outer().result()).get(-1379147605).lowercase()
2021-03-12 02:09:53,241 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a05ebe3]]
2021-03-12 02:09:53,241 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a05ebe3]
2021-03-12 02:09:53,242 [main:117] - GENERATED CALL = (Outer().result()).replaceIndentByMargin(Outer().foo, foo)
2021-03-12 02:09:53,242 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68bd8fe9]]
2021-03-12 02:09:53,242 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68bd8fe9]
2021-03-12 02:09:53,326 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 02:09:53,327 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 02:09:53,328 [main:117] - GENERATED CALL = (Outer().result()).filterNot({a: Char -> true})
2021-03-12 02:09:53,329 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51567418]]
2021-03-12 02:09:53,329 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51567418]
2021-03-12 02:09:53,421 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 02:09:53,421 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 02:09:53,423 [main:117] - GENERATED CALL = (Outer().result()).filterIndexed({a: Int, b: Char -> true})
2021-03-12 02:09:53,424 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1df89f02]]
2021-03-12 02:09:53,424 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1df89f02]
2021-03-12 02:09:53,505 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:09:53,506 [main:117] - GENERATED CALL = (Outer().result()).substringAfterLast('澎', Outer().foo)
2021-03-12 02:09:53,506 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bfe811c]]
2021-03-12 02:09:53,506 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bfe811c]
2021-03-12 02:09:53,591 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:09:53,593 [main:117] - GENERATED CALL = (Outer().result()).substringBeforeLast('쨏', foo)
2021-03-12 02:09:53,593 [main:61] - replacement of this@id of type String is (Outer().result()).substringAfterLast('澎', Outer().foo)
2021-03-12 02:09:53,678 [main:33] - Trying to replace Element(THIS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:09:53,679 [main:66] - Compilation checking started
2021-03-12 02:09:54,087 [main:53] - Result = true
Text:
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = (Outer().result()).substringAfterLast('澎', Outer().foo)
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return (Outer().foo).filterIndexed({a: Int, b: Char -> false})
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if ((Outer().result()).trim() != "OKFoo") return "Fail: $r"

    return "OK"
}


2021-03-12 02:09:54,089 [main:53] - replacing (this@Outer, Outer)
2021-03-12 02:09:54,089 [main:50] - replacing this@Outer Outer
2021-03-12 02:09:54,089 [main:54] - Getting value of type Outer
2021-03-12 02:09:54,173 [main:302] - generating value of type = Outer false depth = 0
2021-03-12 02:09:54,173 [main:112] - generating klass Outer text = class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = (Outer().result()).substringAfterLast('澎', Outer().foo)
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return (Outer().foo).filterIndexed({a: Int, b: Char -> false})
    }

    fun result(): String = "OK".id()
}
2021-03-12 02:09:54,174 [main:58] - GENERATED VALUE OF TYPE Outer = Outer()
2021-03-12 02:09:54,174 [main:61] - GENERATED IS CALL =true
2021-03-12 02:09:54,268 [main:67] - randomType = Outer?
2021-03-12 02:09:54,356 [main:302] - generating value of type = Outer false depth = 0
2021-03-12 02:09:54,357 [main:112] - generating klass Outer text = class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = (Outer().result()).substringAfterLast('澎', Outer().foo)
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return (Outer().foo).filterIndexed({a: Int, b: Char -> false})
    }

    fun result(): String = "OK".id()
}
2021-03-12 02:09:54,366 [main:106] - GETTING Outer from String
2021-03-12 02:09:54,400 [main:106] - GETTING Outer from String
2021-03-12 02:09:54,401 [main:106] - GETTING Outer from String
2021-03-12 02:09:54,401 [main:61] - replacement of this@Outer of type Outer is Outer()
2021-03-12 02:09:54,490 [main:33] - Trying to replace Element(THIS_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 02:09:54,490 [main:66] - Compilation checking started
2021-03-12 02:09:54,860 [main:53] - Result = true
Text:
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = (Outer().result()).substringAfterLast('澎', Outer().foo)
            fun outer() = Outer()
        }

        val l = Local(42L)
        return (Outer().foo).filterIndexed({a: Int, b: Char -> false})
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if ((Outer().result()).trim() != "OKFoo") return "Fail: $r"

    return "OK"
}


2021-03-12 02:09:54,860 [main:53] - replacing (l.result() + l.outer().foo, String)
2021-03-12 02:09:54,860 [main:50] - replacing l.result() + l.outer().foo String
2021-03-12 02:09:54,860 [main:54] - Getting value of type String
2021-03-12 02:09:54,968 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:09:54,969 [main:58] - GENERATED VALUE OF TYPE String = "lqtjd"
2021-03-12 02:09:54,969 [main:61] - GENERATED IS CALL =false
2021-03-12 02:09:54,971 [main:67] - randomType = Outer
2021-03-12 02:09:55,059 [main:302] - generating value of type = Outer false depth = 0
2021-03-12 02:09:55,059 [main:112] - generating klass Outer text = class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = (Outer().result()).substringAfterLast('澎', Outer().foo)
            fun outer() = Outer()
        }

        val l = Local(42L)
        return (Outer().foo).filterIndexed({a: Int, b: Char -> false})
    }

    fun result(): String = "OK".id()
}
2021-03-12 02:09:55,065 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9c4835b]
2021-03-12 02:09:55,066 [main:78] - Generated call from random type = (Outer()).foo.trimStart()
2021-03-12 02:09:55,066 [main:106] - GETTING String from String
2021-03-12 02:09:55,093 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b89d2ea]]
2021-03-12 02:09:55,093 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b89d2ea]
2021-03-12 02:09:55,094 [main:117] - GENERATED CALL = (Outer().result()).toUpperCase()
2021-03-12 02:09:55,094 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7726966b]]
2021-03-12 02:09:55,094 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7726966b]
2021-03-12 02:09:55,190 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:09:55,282 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:09:55,283 [main:117] - GENERATED CALL = (Outer().result()).replaceBeforeLast('쵤', Outer().foo, "tbrsa")
2021-03-12 02:09:55,283 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27df6c88]]
2021-03-12 02:09:55,283 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27df6c88]
2021-03-12 02:09:55,283 [main:117] - GENERATED CALL = (Outer().result()).trim()
2021-03-12 02:09:55,284 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bc5531b]]
2021-03-12 02:09:55,284 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bc5531b]
2021-03-12 02:09:55,374 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:55,464 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:09:55,465 [main:117] - GENERATED CALL = (Outer().result()).padEnd(1206184824, 'ﵼ')
2021-03-12 02:09:55,465 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52d3542b]]
2021-03-12 02:09:55,466 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52d3542b]
2021-03-12 02:09:55,466 [main:117] - GENERATED CALL = (Outer().result()).replaceIndent(Outer().result())
2021-03-12 02:09:55,466 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@265d560b]]
2021-03-12 02:09:55,467 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d]
2021-03-12 02:09:55,550 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:55,655 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:55,656 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@265d560b]
2021-03-12 02:09:55,751 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 02:09:55,839 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:09:55,841 [main:117] - GENERATED CALL = (Outer().result()).subSequence(-1134789318, -1803604339).commonSuffixWith("iwafu", true)
2021-03-12 02:09:55,841 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f310f6a]]
2021-03-12 02:09:55,841 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f310f6a]
2021-03-12 02:09:55,938 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:09:55,939 [main:117] - GENERATED CALL = (Outer().result()).plus("kxiry")
2021-03-12 02:09:55,939 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4af4e98c]]
2021-03-12 02:09:55,939 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4af4e98c]
2021-03-12 02:09:56,018 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:56,019 [main:117] - GENERATED CALL = (Outer().result()).takeLast(-833426758)
2021-03-12 02:09:56,020 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fce0b20]]
2021-03-12 02:09:56,020 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fce0b20]
2021-03-12 02:09:56,101 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 02:09:56,101 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 02:09:56,102 [main:117] - GENERATED CALL = (Outer().result()).dropWhile({a: Char -> false})
2021-03-12 02:09:56,102 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6db9772a]]
2021-03-12 02:09:56,102 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6db9772a]
2021-03-12 02:09:56,103 [main:117] - GENERATED CALL = (Outer().result()).decapitalize()
2021-03-12 02:09:56,103 [main:61] - replacement of l.result() + l.outer().foo of type String is (Outer().result()).replaceBeforeLast('쵤', Outer().foo, "tbrsa")
2021-03-12 02:09:56,205 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:09:56,205 [main:53] - replacing (this, Outer)
2021-03-12 02:09:56,205 [main:50] - replacing this Outer
2021-03-12 02:09:56,206 [main:54] - Getting value of type Outer
2021-03-12 02:09:56,300 [main:302] - generating value of type = Outer false depth = 0
2021-03-12 02:09:56,300 [main:112] - generating klass Outer text = class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = (Outer().result()).substringAfterLast('澎', Outer().foo)
            fun outer() = Outer()
        }

        val l = Local(42L)
        return (Outer().foo).filterIndexed({a: Int, b: Char -> false})
    }

    fun result(): String = "OK".id()
}
2021-03-12 02:09:56,304 [main:58] - GENERATED VALUE OF TYPE Outer = Outer()
2021-03-12 02:09:56,305 [main:61] - GENERATED IS CALL =true
2021-03-12 02:09:56,306 [main:67] - randomType = Outer
2021-03-12 02:09:56,388 [main:302] - generating value of type = Outer false depth = 0
2021-03-12 02:09:56,388 [main:112] - generating klass Outer text = class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = (Outer().result()).substringAfterLast('澎', Outer().foo)
            fun outer() = Outer()
        }

        val l = Local(42L)
        return (Outer().foo).filterIndexed({a: Int, b: Char -> false})
    }

    fun result(): String = "OK".id()
}
2021-03-12 02:09:56,396 [main:106] - GETTING Outer from String
2021-03-12 02:09:56,421 [main:106] - GETTING Outer from String
2021-03-12 02:09:56,421 [main:61] - replacement of this of type Outer is Outer()
2021-03-12 02:09:56,500 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 02:09:56,502 [main:53] - replacing (42L, Long)
2021-03-12 02:09:56,502 [main:50] - replacing 42L Long
2021-03-12 02:09:56,502 [main:54] - Getting value of type Long
2021-03-12 02:09:56,588 [main:302] - generating value of type = Long true depth = 0
2021-03-12 02:09:56,588 [main:58] - GENERATED VALUE OF TYPE Long = 7707250564603797479
2021-03-12 02:09:56,588 [main:61] - GENERATED IS CALL =false
2021-03-12 02:09:56,705 [main:67] - randomType = ULong
2021-03-12 02:09:56,799 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 02:09:56,855 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@2bc4249]
2021-03-12 02:09:56,856 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@7bd004a3]
2021-03-12 02:09:56,857 [main:78] - Generated call from random type = (4661573739992351275.toULong()).toFloat().toLong()
2021-03-12 02:09:56,858 [main:106] - GETTING Long from Local
2021-03-12 02:09:56,871 [main:113] - Case = [public final fun result(): kotlin.String defined in Outer.id.Local[SimpleFunctionDescriptorImpl@6553929d], public fun kotlin.String.toLong(): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66d34df2]]
2021-03-12 02:09:56,872 [main:149] - GENERATING call of type public final fun result(): kotlin.String defined in Outer.id.Local[SimpleFunctionDescriptorImpl@6553929d]
2021-03-12 02:09:56,872 [main:149] - GENERATING call of type public fun kotlin.String.toLong(): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66d34df2]
2021-03-12 02:09:56,873 [main:117] - GENERATED CALL = (l).result().toLong()
2021-03-12 02:09:56,873 [main:61] - replacement of 42L of type Long is 7707250564603797479
2021-03-12 02:09:56,964 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 02:09:56,964 [main:66] - Compilation checking started
2021-03-12 02:09:57,289 [main:53] - Result = true
Text:
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = (Outer().result()).substringAfterLast('澎', Outer().foo)
            fun outer() = Outer()
        }

        val l = Local(7707250564603797479)
        return (Outer().foo).filterIndexed({a: Int, b: Char -> false})
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if ((Outer().result()).trim() != "OKFoo") return "Fail: $r"

    return "OK"
}


2021-03-12 02:09:57,290 [main:53] - replacing (l.result(), String)
2021-03-12 02:09:57,290 [main:50] - replacing l.result() String
2021-03-12 02:09:57,290 [main:54] - Getting value of type String
2021-03-12 02:09:57,408 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:09:57,409 [main:58] - GENERATED VALUE OF TYPE String = "xnuzo"
2021-03-12 02:09:57,409 [main:61] - GENERATED IS CALL =false
2021-03-12 02:09:57,410 [main:67] - randomType = Outer
2021-03-12 02:09:57,497 [main:302] - generating value of type = Outer false depth = 0
2021-03-12 02:09:57,498 [main:112] - generating klass Outer text = class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = (Outer().result()).substringAfterLast('澎', Outer().foo)
            fun outer() = Outer()
        }

        val l = Local(7707250564603797479)
        return (Outer().foo).filterIndexed({a: Int, b: Char -> false})
    }

    fun result(): String = "OK".id()
}
2021-03-12 02:09:57,506 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bfe811c]
2021-03-12 02:09:57,597 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:09:57,598 [main:78] - Generated call from random type = (Outer()).foo.substringBeforeLast('᭴', Outer().result())
2021-03-12 02:09:57,598 [main:106] - GETTING String from String
2021-03-12 02:09:57,619 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@431d9bd0]]
2021-03-12 02:09:57,619 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@431d9bd0]
2021-03-12 02:09:57,703 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:09:57,704 [main:117] - GENERATED CALL = (Outer().result()).replaceBefore('쮬', Outer().result(), Outer().foo)
2021-03-12 02:09:57,704 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f310f6a]]
2021-03-12 02:09:57,705 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6f310f6a]
2021-03-12 02:09:57,789 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:09:57,789 [main:117] - GENERATED CALL = (Outer().result()).plus("hlwvx")
2021-03-12 02:09:57,790 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9c4835b]]
2021-03-12 02:09:57,790 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9c4835b]
2021-03-12 02:09:57,790 [main:117] - GENERATED CALL = (Outer().result()).trimStart()
2021-03-12 02:09:57,790 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59340e5c]]
2021-03-12 02:09:57,790 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59340e5c]
2021-03-12 02:09:57,791 [main:117] - GENERATED CALL = (Outer().result()).uppercase()
2021-03-12 02:09:57,791 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1df89f02]]
2021-03-12 02:09:57,791 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1df89f02]
2021-03-12 02:09:57,875 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:09:57,876 [main:117] - GENERATED CALL = (Outer().result()).substringAfterLast('⎍', Outer().foo)
2021-03-12 02:09:57,876 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52d3542b]]
2021-03-12 02:09:57,876 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52d3542b]
2021-03-12 02:09:57,877 [main:117] - GENERATED CALL = (Outer().result()).replaceIndent(Outer().foo)
2021-03-12 02:09:57,877 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40449c0b]]
2021-03-12 02:09:57,877 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d]
2021-03-12 02:09:57,962 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:58,046 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:58,047 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40449c0b]
2021-03-12 02:09:58,152 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:58,153 [main:117] - GENERATED CALL = (Outer().result()).subSequence(1588381598, -1339513262).repeat(-869782743)
2021-03-12 02:09:58,153 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bfe811c]]
2021-03-12 02:09:58,154 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bfe811c]
2021-03-12 02:09:58,281 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:09:58,283 [main:117] - GENERATED CALL = (Outer().result()).substringBeforeLast('琰', Outer().result())
2021-03-12 02:09:58,283 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47d736]]
2021-03-12 02:09:58,283 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47d736]
2021-03-12 02:09:58,284 [main:117] - GENERATED CALL = (Outer().result()).trimEnd()
2021-03-12 02:09:58,284 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28a1ce05]]
2021-03-12 02:09:58,284 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28a1ce05]
2021-03-12 02:09:58,373 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:09:58,454 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:09:58,550 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:09:58,552 [main:117] - GENERATED CALL = (Outer().result()).replace('ਯ', '돺', false)
2021-03-12 02:09:58,552 [main:61] - replacement of l.result() of type String is "xnuzo"
2021-03-12 02:09:58,645 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 02:09:58,647 [main:53] - replacing ("OK".id(), String)
2021-03-12 02:09:58,647 [main:50] - replacing "OK".id() String
2021-03-12 02:09:58,647 [main:54] - Getting value of type String
2021-03-12 02:09:58,734 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:09:58,734 [main:58] - GENERATED VALUE OF TYPE String = "yyvvw"
2021-03-12 02:09:58,735 [main:61] - GENERATED IS CALL =false
2021-03-12 02:09:59,452 [main:67] - randomType = List<HashMap<Char, MutableMap<Outer, ULong>>>?
2021-03-12 02:09:59,452 [main:106] - GETTING String from String
2021-03-12 02:09:59,481 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b89d2ea]]
2021-03-12 02:09:59,481 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b89d2ea]
2021-03-12 02:09:59,481 [main:117] - GENERATED CALL = (Outer().result()).toUpperCase()
2021-03-12 02:09:59,482 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4af4e98c]]
2021-03-12 02:09:59,482 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4af4e98c]
2021-03-12 02:09:59,562 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:59,563 [main:117] - GENERATED CALL = (Outer().result()).takeLast(1644115850)
2021-03-12 02:09:59,563 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33716868]]
2021-03-12 02:09:59,563 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33716868]
2021-03-12 02:09:59,644 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 02:09:59,644 [main:302] - generating value of type = Char true depth = 1
2021-03-12 02:09:59,645 [main:117] - GENERATED CALL = (Outer().result()).replaceFirstChar({a: Char -> '羹'})
2021-03-12 02:09:59,645 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d94be18]]
2021-03-12 02:09:59,645 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d94be18]
2021-03-12 02:09:59,741 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:09:59,830 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:09:59,830 [main:117] - GENERATED CALL = (Outer().result()).substringAfter('튙', "hxodh")
2021-03-12 02:09:59,831 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10892581]]
2021-03-12 02:09:59,831 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff]
2021-03-12 02:09:59,910 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:09:59,911 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10892581]
2021-03-12 02:09:59,911 [main:117] - GENERATED CALL = (Outer().result()).get(1355989943).lowercase()
2021-03-12 02:09:59,911 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7735a93e]]
2021-03-12 02:09:59,911 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d]
2021-03-12 02:09:59,990 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:00,071 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:00,072 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7735a93e]
2021-03-12 02:10:00,152 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:00,247 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:00,248 [main:117] - GENERATED CALL = (Outer().result()).subSequence(-2080866024, -882389758).substring(-1009537593, -163234370)
2021-03-12 02:10:00,248 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f87ec56]]
2021-03-12 02:10:00,248 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff]
2021-03-12 02:10:00,336 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:00,337 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f87ec56]
2021-03-12 02:10:00,337 [main:117] - GENERATED CALL = (Outer().result()).get(896039754).titlecase()
2021-03-12 02:10:00,337 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59340e5c]]
2021-03-12 02:10:00,337 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59340e5c]
2021-03-12 02:10:00,338 [main:117] - GENERATED CALL = (Outer().result()).uppercase()
2021-03-12 02:10:00,338 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30602efe]]
2021-03-12 02:10:00,338 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30602efe]
2021-03-12 02:10:00,426 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:00,427 [main:117] - GENERATED CALL = (Outer().result()).drop(116155980)
2021-03-12 02:10:00,427 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a8ca87c]]
2021-03-12 02:10:00,427 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a8ca87c]
2021-03-12 02:10:00,427 [main:117] - GENERATED CALL = (Outer().result()).toLowerCase()
2021-03-12 02:10:00,427 [main:61] - replacement of "OK".id() of type String is (Outer().result()).toUpperCase()
2021-03-12 02:10:00,505 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:10:00,505 [main:66] - Compilation checking started
2021-03-12 02:10:00,834 [main:53] - Result = true
Text:
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = (Outer().result()).substringAfterLast('澎', Outer().foo)
            fun outer() = Outer()
        }

        val l = Local(7707250564603797479)
        return (Outer().foo).filterIndexed({a: Int, b: Char -> false})
    }

    fun result(): String = (Outer().result()).toUpperCase()
}

fun box(): String {
    val r = Outer().result()

    if ((Outer().result()).trim() != "OKFoo") return "Fail: $r"

    return "OK"
}


2021-03-12 02:10:00,835 [main:53] - replacing ("Foo", String)
2021-03-12 02:10:00,835 [main:50] - replacing "Foo" String
2021-03-12 02:10:00,835 [main:54] - Getting value of type String
2021-03-12 02:10:00,916 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:10:00,916 [main:58] - GENERATED VALUE OF TYPE String = "gqsao"
2021-03-12 02:10:00,916 [main:61] - GENERATED IS CALL =false
2021-03-12 02:10:01,108 [main:67] - randomType = UInt?
2021-03-12 02:10:01,191 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 02:10:01,249 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@9e06ab2]
2021-03-12 02:10:01,249 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32b42115]
2021-03-12 02:10:01,333 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:01,334 [main:78] - Generated call from random type = (1203975625.toUInt())?.toByte().toString(1012050132)
2021-03-12 02:10:01,335 [main:106] - GETTING String from String
2021-03-12 02:10:01,368 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fbba39]]
2021-03-12 02:10:01,368 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fbba39]
2021-03-12 02:10:01,368 [main:117] - GENERATED CALL = (Outer().foo).capitalize()
2021-03-12 02:10:01,369 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30602efe]]
2021-03-12 02:10:01,369 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30602efe]
2021-03-12 02:10:01,449 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:01,449 [main:117] - GENERATED CALL = (Outer().foo).drop(1922119055)
2021-03-12 02:10:01,450 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f4617e5]]
2021-03-12 02:10:01,450 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f4617e5]
2021-03-12 02:10:01,534 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:01,629 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:01,630 [main:117] - GENERATED CALL = (Outer().foo).removeRange(1117817936, -1163957590)
2021-03-12 02:10:01,630 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40449c0b]]
2021-03-12 02:10:01,630 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d]
2021-03-12 02:10:01,722 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:01,799 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:01,799 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40449c0b]
2021-03-12 02:10:01,878 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:01,879 [main:117] - GENERATED CALL = (Outer().foo).subSequence(1644062257, -1282761995).repeat(-523137843)
2021-03-12 02:10:01,879 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1df89f02]]
2021-03-12 02:10:01,879 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1df89f02]
2021-03-12 02:10:01,959 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:10:01,960 [main:117] - GENERATED CALL = (Outer().foo).substringAfterLast('躁', Outer().result())
2021-03-12 02:10:01,960 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64f11559]]
2021-03-12 02:10:01,960 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64f11559]
2021-03-12 02:10:02,054 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 02:10:02,054 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 02:10:02,055 [main:117] - GENERATED CALL = (Outer().foo).takeWhile({a: Char -> false})
2021-03-12 02:10:02,055 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fb39d03]]
2021-03-12 02:10:02,055 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fb39d03]
2021-03-12 02:10:02,142 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:02,143 [main:117] - GENERATED CALL = (Outer().foo).substring(-285115769)
2021-03-12 02:10:02,143 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72c65b88]]
2021-03-12 02:10:02,143 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72c65b88]
2021-03-12 02:10:02,222 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 02:10:02,304 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 02:10:02,306 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 02:10:02,468 [main:302] - generating value of type = String true depth = 3
2021-03-12 02:10:02,469 [main:95] - GENERATED = StringBuilder("cfwqp")
2021-03-12 02:10:02,469 [main:117] - GENERATED CALL = (Outer().foo).removePrefix(StringBuilder("cfwqp"))
2021-03-12 02:10:02,469 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68bd8fe9]]
2021-03-12 02:10:02,469 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68bd8fe9]
2021-03-12 02:10:02,566 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 02:10:02,566 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 02:10:02,568 [main:117] - GENERATED CALL = (Outer().foo).filterNot({a: Char -> true})
2021-03-12 02:10:02,568 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4af4e98c]]
2021-03-12 02:10:02,568 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4af4e98c]
2021-03-12 02:10:02,654 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:02,655 [main:117] - GENERATED CALL = (Outer().foo).takeLast(1841494001)
2021-03-12 02:10:02,655 [main:61] - replacement of "Foo" of type String is (Outer().foo).subSequence(1644062257, -1282761995).repeat(-523137843)
2021-03-12 02:10:02,732 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:10:02,733 [main:66] - Compilation checking started
2021-03-12 02:10:02,944 [main:49] - Result = false
Text:
class Outer {
    val foo = (Outer().foo).subSequence(1644062257, -1282761995).repeat(-523137843)

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = (Outer().result()).substringAfterLast('澎', Outer().foo)
            fun outer() = Outer()
        }

        val l = Local(7707250564603797479)
        return (Outer().foo).filterIndexed({a: Int, b: Char -> false})
    }

    fun result(): String = (Outer().result()).toUpperCase()
}

fun box(): String {
    val r = Outer().result()

    if ((Outer().result()).trim() != "OKFoo") return "Fail: $r"

    return "OK"
}


2021-03-12 02:10:02,945 [main:53] - replacing ("xnuzo" + l.outer().foo, String)
2021-03-12 02:10:02,945 [main:50] - replacing "xnuzo" + l.outer().foo String
2021-03-12 02:10:02,945 [main:54] - Getting value of type String
2021-03-12 02:10:03,026 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:10:03,026 [main:58] - GENERATED VALUE OF TYPE String = "nzrtk"
2021-03-12 02:10:03,027 [main:61] - GENERATED IS CALL =false
2021-03-12 02:10:03,243 [main:67] - randomType = List<Outer?>
2021-03-12 02:10:03,243 [main:106] - GETTING String from String
2021-03-12 02:10:03,265 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bfe811c]]
2021-03-12 02:10:03,265 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bfe811c]
2021-03-12 02:10:03,346 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:10:03,347 [main:117] - GENERATED CALL = (Outer().result()).substringBeforeLast('豸', Outer().foo)
2021-03-12 02:10:03,347 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10892581]]
2021-03-12 02:10:03,347 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff]
2021-03-12 02:10:03,427 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:03,428 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10892581]
2021-03-12 02:10:03,428 [main:117] - GENERATED CALL = (Outer().result()).get(1014521329).lowercase()
2021-03-12 02:10:03,428 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d94be18]]
2021-03-12 02:10:03,428 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d94be18]
2021-03-12 02:10:03,506 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:10:03,506 [main:117] - GENERATED CALL = (Outer().result()).substringAfter('쓹', Outer().result())
2021-03-12 02:10:03,507 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73cb6541]]
2021-03-12 02:10:03,507 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73cb6541]
2021-03-12 02:10:03,589 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 02:10:03,589 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 02:10:03,590 [main:117] - GENERATED CALL = (Outer().result()).takeLastWhile({a: Char -> false})
2021-03-12 02:10:03,590 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53c84c83]]
2021-03-12 02:10:03,590 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53c84c83]
2021-03-12 02:10:03,668 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:10:03,669 [main:117] - GENERATED CALL = (Outer().result()).trimMargin("wlopm")
2021-03-12 02:10:03,669 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fce0b20]]
2021-03-12 02:10:03,669 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fce0b20]
2021-03-12 02:10:03,749 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 02:10:03,749 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 02:10:03,750 [main:117] - GENERATED CALL = (Outer().result()).dropWhile({a: Char -> true})
2021-03-12 02:10:03,750 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a0b08a7]]
2021-03-12 02:10:03,750 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a0b08a7]
2021-03-12 02:10:03,838 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 02:10:03,839 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 02:10:03,840 [main:117] - GENERATED CALL = (Outer().result()).dropLastWhile({a: Char -> false})
2021-03-12 02:10:03,840 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f87ec56]]
2021-03-12 02:10:03,840 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff]
2021-03-12 02:10:03,929 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:03,930 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f87ec56]
2021-03-12 02:10:03,930 [main:117] - GENERATED CALL = (Outer().result()).get(-147645555).titlecase()
2021-03-12 02:10:03,930 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@431d9bd0]]
2021-03-12 02:10:03,930 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@431d9bd0]
2021-03-12 02:10:04,012 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:10:04,013 [main:117] - GENERATED CALL = (Outer().result()).replaceBefore('됸', Outer().foo, Outer().foo)
2021-03-12 02:10:04,013 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47a34cf5]]
2021-03-12 02:10:04,013 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47a34cf5]
2021-03-12 02:10:04,091 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:04,174 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:04,257 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 02:10:04,262 [main:117] - GENERATED CALL = (Outer().result()).replaceRange(739928610, -1368677849, StringBuilder())
2021-03-12 02:10:04,262 [main:61] - replacement of "xnuzo" + l.outer().foo of type String is (Outer().result()).trimMargin("wlopm")
2021-03-12 02:10:04,353 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:10:04,446 [main:119] - TRYING TO REPLACE CONSTANT false
2021-03-12 02:10:04,539 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 02:10:04,539 [main:66] - Compilation checking started
2021-03-12 02:10:04,840 [main:119] - TRYING TO REPLACE CONSTANT '澎'
2021-03-12 02:10:04,919 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CHARACTER_CONSTANT)
2021-03-12 02:10:04,919 [main:66] - Compilation checking started
2021-03-12 02:10:05,296 [main:41] - AFTER TRY 0 res = class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if (r != "OKFoo") return "Fail: $r"

    return "OK"
}
2021-03-12 02:10:05,445 [main:112] - generating klass Outer text = class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}
2021-03-12 02:10:05,446 [main:112] - generating klass Local text = class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }
2021-03-12 02:10:05,596 [main:43] - Try №0
2021-03-12 02:10:17,277 [main:48] - Already checked
2021-03-12 02:10:21,251 [main:69] - Trying to insert fun box682(): String {
    var prope2: Any = "FAIL"
    fu0 {
        prope2 = Kla2().fu4()
    }
    if (prope2 != "OK") return "FAIL 0 $prope2"

    return prope2 as String
}
2021-03-12 02:10:21,477 [main:66] - Compilation checking started
2021-03-12 02:10:22,520 [main:103] - Trying to change 151 nodes
2021-03-12 02:10:22,520 [main:107] - replacing (numberOfSuspensions, Int)
2021-03-12 02:10:22,521 [main:50] - replacing numberOfSuspensions Int
2021-03-12 02:10:22,521 [main:54] - Getting value of type Int
2021-03-12 02:10:22,675 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:22,677 [main:58] - GENERATED VALUE OF TYPE Int = 1305058314
2021-03-12 02:10:22,677 [main:61] - GENERATED IS CALL =false
2021-03-12 02:10:22,684 [main:67] - randomType = Kla2
2021-03-12 02:10:22,821 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 02:10:22,823 [main:112] - generating klass Kla2 text = class Kla2() : Kla1 {
    override suspend fun fu3(): Kla0 = Kla0("OK")

    suspend fun fu4(): Any {
        return fu3().s
    }
}
2021-03-12 02:10:22,954 [main:194] - Type params = []
2021-03-12 02:10:23,098 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla2[DeserializedSimpleFunctionDescriptor@431ca311]
2021-03-12 02:10:23,244 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:10:23,244 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@470dd6a4]
2021-03-12 02:10:23,378 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:10:23,380 [main:78] - Generated call from random type = (Kla2()).equals("fbxqf").compareTo(true)
2021-03-12 02:10:23,380 [main:114] - replacement of numberOfSuspensions of type Int is (Kla2()).equals("fbxqf").compareTo(true)
2021-03-12 02:10:23,512 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:10:23,512 [main:66] - Compilation checking started
2021-03-12 02:10:24,140 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if (r != "OKFoo") return "Fail: $r"

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {
    override suspend fun fu3(): Kla0 = Kla0("OK")

    suspend fun fu4(): Any {
        return fu3().s
    }
}

fun box682(): String {
    var prope2: Any = "FAIL"
    fu0 {
        prope2 = Kla2().fu4()
    }
    if (prope2 != "OK") return "FAIL 0 $prope2"

    return prope2 as String
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val r = Outer().result()
for (i in 1..(Kla2()).equals("fbxqf").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:10:24,143 [main:107] - replacing (prope2.getOrThrow(), Any?)
2021-03-12 02:10:24,143 [main:50] - replacing prope2.getOrThrow() Any?
2021-03-12 02:10:24,143 [main:54] - Getting value of type Any?
2021-03-12 02:10:24,311 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:10:24,311 [main:58] - GENERATED VALUE OF TYPE Any? = "xumae"
2021-03-12 02:10:24,311 [main:61] - GENERATED IS CALL =false
2021-03-12 02:10:24,615 [main:67] - randomType = List<ULong>
2021-03-12 02:10:24,618 [main:106] - GETTING Any? from String
2021-03-12 02:10:24,649 [main:106] - GETTING Any? from String
2021-03-12 02:10:24,651 [main:106] - GETTING Any? from String
2021-03-12 02:10:24,652 [main:106] - GETTING Any? from Outer
2021-03-12 02:10:24,660 [main:114] - replacement of prope2.getOrThrow() of type Any? is "xumae"
2021-03-12 02:10:24,795 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 02:10:24,796 [main:66] - Compilation checking started
2021-03-12 02:10:25,465 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if (r != "OKFoo") return "Fail: $r"

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {
    override suspend fun fu3(): Kla0 = Kla0("OK")

    suspend fun fu4(): Any {
        return fu3().s
    }
}

fun box682(): String {
    var prope2: Any = "FAIL"
    fu0 {
        prope2 = Kla2().fu4()
    }
    if (prope2 != "OK") return "FAIL 0 $prope2"

    return prope2 as String
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
"xumae"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val r = Outer().result()
for (i in 1..(Kla2()).equals("fbxqf").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:10:25,468 [main:107] - replacing (fu4(), Any)
2021-03-12 02:10:25,469 [main:50] - replacing fu4() Any
2021-03-12 02:10:25,469 [main:54] - Getting value of type Any
2021-03-12 02:10:25,651 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:10:25,651 [main:58] - GENERATED VALUE OF TYPE Any = "toblu"
2021-03-12 02:10:25,652 [main:61] - GENERATED IS CALL =false
2021-03-12 02:10:25,996 [main:67] - randomType = UShort?
2021-03-12 02:10:26,140 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 02:10:26,194 [main:106] - GETTING Any from Outer
2021-03-12 02:10:26,203 [main:106] - GETTING Any from String
2021-03-12 02:10:26,235 [main:114] - replacement of fu4() of type Any is r
2021-03-12 02:10:26,370 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 02:10:26,371 [main:66] - Compilation checking started
2021-03-12 02:10:26,769 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if (r != "OKFoo") return "Fail: $r"

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {
    override suspend fun fu3(): Kla0 = Kla0("OK")

    suspend fun fu4(): Any {
        return fu3().s
    }
}

fun box682(): String {
    val r = Outer().result()
var prope2: Any = "FAIL"
    fu0 {
        prope2 = Kla2().r
    }
    if (prope2 != "OK") return "FAIL 0 $prope2"

    return prope2 as String
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
"xumae"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val r = Outer().result()
for (i in 1..(Kla2()).equals("fbxqf").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:10:26,771 [main:107] - replacing ("tail-call optimization hit: method " + method, String)
2021-03-12 02:10:26,772 [main:50] - replacing "tail-call optimization hit: method " + method String
2021-03-12 02:10:26,772 [main:54] - Getting value of type String
2021-03-12 02:10:26,915 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:10:26,917 [main:58] - GENERATED VALUE OF TYPE String = "tnwih"
2021-03-12 02:10:26,917 [main:61] - GENERATED IS CALL =false
2021-03-12 02:10:27,668 [main:67] - randomType = LinkedHashMap<UShort?, LinkedHashSet<ArrayDeque<Int>>>
2021-03-12 02:10:27,794 [main:302] - generating value of type = LinkedHashMap<UShort?, LinkedHashSet<ArrayDeque<Int>>> false depth = 0
2021-03-12 02:10:27,926 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<UShort?, LkedHashSet<ArrayDeque<Int>>> = TODO()
2021-03-12 02:10:27,930 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<UShort?, LkedHashSet<ArrayDeque<Int>>> = TODO()
2021-03-12 02:10:28,067 [main:95] - GENERATED = linkedMapOf<UShort?, LinkedHashSet<ArrayDeque<Int>>>()
2021-03-12 02:10:28,377 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49f0c862]
2021-03-12 02:10:28,520 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:28,522 [main:78] - Generated call from random type = (linkedMapOf<UShort?, LinkedHashSet<ArrayDeque<Int>>>()).size.toString(1264509750)
2021-03-12 02:10:28,522 [main:106] - GETTING String from String
2021-03-12 02:10:28,543 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28a1ce05]]
2021-03-12 02:10:28,544 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28a1ce05]
2021-03-12 02:10:28,670 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:10:28,824 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:10:28,971 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:10:28,974 [main:117] - GENERATED CALL = (r).replace('챣', '툯', true)
2021-03-12 02:10:28,975 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2987f96c]]
2021-03-12 02:10:28,975 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2987f96c]
2021-03-12 02:10:29,121 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:29,252 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:10:29,254 [main:117] - GENERATED CALL = (r).padStart(638538921, '쀜')
2021-03-12 02:10:29,254 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c5f167f]]
2021-03-12 02:10:29,254 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d]
2021-03-12 02:10:29,387 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:29,520 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:29,522 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c5f167f]
2021-03-12 02:10:29,649 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 02:10:29,778 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 02:10:29,781 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 02:10:30,104 [main:302] - generating value of type = String true depth = 3
2021-03-12 02:10:30,107 [main:95] - GENERATED = Regex("nyfmh")
2021-03-12 02:10:30,264 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:10:30,266 [main:117] - GENERATED CALL = (r).subSequence(1414042002, -948408324).replaceFirst(Regex("nyfmh"), "ipinu")
2021-03-12 02:10:30,267 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64f11559]]
2021-03-12 02:10:30,267 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64f11559]
2021-03-12 02:10:30,392 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 02:10:30,393 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 02:10:30,395 [main:117] - GENERATED CALL = (r).takeWhile({a: Char -> false})
2021-03-12 02:10:30,396 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32296d67]]
2021-03-12 02:10:30,396 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32296d67]
2021-03-12 02:10:30,524 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:30,526 [main:117] - GENERATED CALL = (r).dropLast(-1791752303)
2021-03-12 02:10:30,526 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f87ec56]]
2021-03-12 02:10:30,526 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff]
2021-03-12 02:10:30,649 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:30,651 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f87ec56]
2021-03-12 02:10:30,651 [main:117] - GENERATED CALL = (r).get(340992875).titlecase()
2021-03-12 02:10:30,651 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30602efe]]
2021-03-12 02:10:30,651 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30602efe]
2021-03-12 02:10:30,767 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:30,769 [main:117] - GENERATED CALL = (r).drop(-1705254831)
2021-03-12 02:10:30,769 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35167831]]
2021-03-12 02:10:30,769 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35167831]
2021-03-12 02:10:30,894 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:10:31,051 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:10:31,053 [main:117] - GENERATED CALL = (r).substringBefore('₣', "qgtwv")
2021-03-12 02:10:31,053 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16e0d7b]]
2021-03-12 02:10:31,053 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16e0d7b]
2021-03-12 02:10:31,204 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:10:31,335 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:10:31,461 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:10:31,463 [main:117] - GENERATED CALL = (r).replaceFirst('䬤', '杦', false)
2021-03-12 02:10:31,463 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a14ba2d]]
2021-03-12 02:10:31,464 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a14ba2d]
2021-03-12 02:10:31,587 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 02:10:31,593 [main:117] - GENERATED CALL = (r).removeSuffix("rvwmd")
2021-03-12 02:10:31,593 [main:114] - replacement of "tail-call optimization hit: method " + method of type String is (r).replace('챣', '툯', true)
2021-03-12 02:10:31,718 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:10:31,719 [main:66] - Compilation checking started
2021-03-12 02:10:32,358 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if (r != "OKFoo") return "Fail: $r"

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {
    override suspend fun fu3(): Kla0 = Kla0("OK")

    suspend fun fu4(): Any {
        return fu3().s
    }
}

fun box682(): String {
    val r = Outer().result()
var prope2: Any = "FAIL"
    fu0 {
        prope2 = Kla2().fu4()
    }
    if (prope2 != "OK") return "FAIL 0 $prope2"

    return prope2 as String
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
"xumae"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((r).replace('챣', '툯', true) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val r = Outer().result()
for (i in 1..(Kla2()).equals("fbxqf").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:10:32,362 [main:107] - replacing (prope2.isSuccess, Boolean)
2021-03-12 02:10:32,363 [main:50] - replacing prope2.isSuccess Boolean
2021-03-12 02:10:32,363 [main:54] - Getting value of type Boolean
2021-03-12 02:10:32,512 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:10:32,514 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 02:10:32,514 [main:61] - GENERATED IS CALL =false
2021-03-12 02:10:32,658 [main:67] - randomType = List<Outer>
2021-03-12 02:10:32,659 [main:106] - GETTING Boolean from String
2021-03-12 02:10:32,678 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d], public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bc8dca4]]
2021-03-12 02:10:32,679 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d]
2021-03-12 02:10:32,797 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:32,918 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:32,920 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bc8dca4]
2021-03-12 02:10:32,920 [main:117] - GENERATED CALL = (r).subSequence(894686196, -788548618).none()
2021-03-12 02:10:32,921 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b3b4dd4]]
2021-03-12 02:10:32,921 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff]
2021-03-12 02:10:33,046 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:33,049 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b3b4dd4]
2021-03-12 02:10:33,049 [main:117] - GENERATED CALL = (r).get(14100720).isTitleCase()
2021-03-12 02:10:33,049 [main:113] - Case = [public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6df90f78]]
2021-03-12 02:10:33,049 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6df90f78]
2021-03-12 02:10:33,189 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:10:33,325 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:10:33,327 [main:117] - GENERATED CALL = (r).contains('✿', true)
2021-03-12 02:10:33,327 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a6cb7a9]]
2021-03-12 02:10:33,328 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d]
2021-03-12 02:10:33,467 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:33,597 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:33,599 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a6cb7a9]
2021-03-12 02:10:33,599 [main:117] - GENERATED CALL = (r).subSequence(1972439672, -1491992293).isBlank()
2021-03-12 02:10:33,599 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4db11819]]
2021-03-12 02:10:33,599 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4db11819]
2021-03-12 02:10:33,599 [main:117] - GENERATED CALL = (r).isNotEmpty()
2021-03-12 02:10:33,600 [main:113] - Case = [public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a6cb7a9]]
2021-03-12 02:10:33,600 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a6cb7a9]
2021-03-12 02:10:33,600 [main:117] - GENERATED CALL = (r).isBlank()
2021-03-12 02:10:33,600 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@530d7c8c]]
2021-03-12 02:10:33,600 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff]
2021-03-12 02:10:33,719 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:33,721 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@530d7c8c]
2021-03-12 02:10:33,721 [main:117] - GENERATED CALL = (r).get(1086660414).isLetterOrDigit()
2021-03-12 02:10:33,721 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@164f82bd]]
2021-03-12 02:10:33,722 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@164f82bd]
2021-03-12 02:10:33,722 [main:117] - GENERATED CALL = (r).isNotBlank()
2021-03-12 02:10:33,722 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d], public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7433699f]]
2021-03-12 02:10:33,722 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d]
2021-03-12 02:10:33,851 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:33,984 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:33,987 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7433699f]
2021-03-12 02:10:34,114 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:34,116 [main:117] - GENERATED CALL = (r).subSequence(304837275, 718345595).hasSurrogatePairAt(-1541611793)
2021-03-12 02:10:34,116 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a79276b]]
2021-03-12 02:10:34,116 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff]
2021-03-12 02:10:34,232 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:34,234 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a79276b]
2021-03-12 02:10:34,234 [main:117] - GENERATED CALL = (r).get(2079775660).isDefined()
2021-03-12 02:10:34,234 [main:114] - replacement of prope2.isSuccess of type Boolean is (r).isNotEmpty()
2021-03-12 02:10:34,371 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:10:34,372 [main:66] - Compilation checking started
2021-03-12 02:10:35,031 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if (r != "OKFoo") return "Fail: $r"

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {
    override suspend fun fu3(): Kla0 = Kla0("OK")

    suspend fun fu4(): Any {
        return fu3().s
    }
}

fun box682(): String {
    val r = Outer().result()
var prope2: Any = "FAIL"
    fu0 {
        prope2 = Kla2().fu4()
    }
    if (prope2 != "OK") return "FAIL 0 $prope2"

    return prope2 as String
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
"xumae"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
if ((r).isNotEmpty()) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((r).replace('챣', '툯', true) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val r = Outer().result()
for (i in 1..(Kla2()).equals("fbxqf").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:10:35,033 [main:107] - replacing (prope4, Int)
2021-03-12 02:10:35,034 [main:50] - replacing prope4 Int
2021-03-12 02:10:35,034 [main:54] - Getting value of type Int
2021-03-12 02:10:35,157 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:35,159 [main:58] - GENERATED VALUE OF TYPE Int = 1943967298
2021-03-12 02:10:35,160 [main:61] - GENERATED IS CALL =false
2021-03-12 02:10:35,293 [main:67] - randomType = Double
2021-03-12 02:10:35,414 [main:302] - generating value of type = Double true depth = 0
2021-03-12 02:10:35,469 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@2e12c006]
2021-03-12 02:10:35,589 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 02:10:35,591 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1a1a977f]
2021-03-12 02:10:35,722 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 02:10:35,724 [main:78] - Generated call from random type = (0.5537180538860499).compareTo(-123).times(35)
2021-03-12 02:10:35,725 [main:106] - GETTING Int from String
2021-03-12 02:10:35,756 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@69d7e75d], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6be6d315]]
2021-03-12 02:10:35,756 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6be6d315]
2021-03-12 02:10:35,881 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:35,883 [main:117] - GENERATED CALL = (Outer().foo).length.and(612490142)
2021-03-12 02:10:35,883 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@69d7e75d], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2f6c4040]]
2021-03-12 02:10:35,883 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2f6c4040]
2021-03-12 02:10:36,001 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:36,003 [main:117] - GENERATED CALL = (Outer().foo).length.shr(-1314985160)
2021-03-12 02:10:36,003 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10048bd9], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@78eb4fee]]
2021-03-12 02:10:36,003 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10048bd9]
2021-03-12 02:10:36,118 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:10:36,120 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@78eb4fee]
2021-03-12 02:10:36,120 [main:117] - GENERATED CALL = (Outer().foo).compareTo("vptoh").countTrailingZeroBits()
2021-03-12 02:10:36,121 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a8ad80d]]
2021-03-12 02:10:36,121 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a8ad80d]
2021-03-12 02:10:36,234 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:10:36,236 [main:117] - GENERATED CALL = (Outer().foo).compareTo(Outer().foo, false)
2021-03-12 02:10:36,236 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10048bd9], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@47006177]]
2021-03-12 02:10:36,236 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10048bd9]
2021-03-12 02:10:36,236 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@47006177]
2021-03-12 02:10:36,350 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 02:10:36,352 [main:117] - GENERATED CALL = (Outer().foo).compareTo(r).minus(-120)
2021-03-12 02:10:36,352 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@69d7e75d], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c26a536]]
2021-03-12 02:10:36,352 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3c26a536]
2021-03-12 02:10:36,466 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:36,468 [main:117] - GENERATED CALL = (Outer().foo).length.ushr(-1919655082)
2021-03-12 02:10:36,468 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10048bd9], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1a1a977f]]
2021-03-12 02:10:36,468 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10048bd9]
2021-03-12 02:10:36,468 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1a1a977f]
2021-03-12 02:10:36,586 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 02:10:36,589 [main:117] - GENERATED CALL = (Outer().foo).compareTo(Outer().foo).times(85)
2021-03-12 02:10:36,589 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@2e0d2566]]
2021-03-12 02:10:36,589 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff]
2021-03-12 02:10:36,729 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:36,732 [main:117] - GENERATED CALL = (Outer().foo).get(-909754490).code
2021-03-12 02:10:36,732 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d], public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12d89c79]]
2021-03-12 02:10:36,732 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d]
2021-03-12 02:10:36,867 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:36,985 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:36,987 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12d89c79]
2021-03-12 02:10:37,101 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:10:37,215 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:37,332 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:10:37,334 [main:117] - GENERATED CALL = (Outer().foo).subSequence(-550818894, 2140792111).indexOf('襫', 1696895357, false)
2021-03-12 02:10:37,334 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@69d7e75d], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@558e1c99]]
2021-03-12 02:10:37,334 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@558e1c99]
2021-03-12 02:10:37,450 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 02:10:37,452 [main:117] - GENERATED CALL = (Outer().foo).length.compareTo(-80)
2021-03-12 02:10:37,452 [main:114] - replacement of prope4 of type Int is (0.5537180538860499).compareTo(-123).times(35)
2021-03-12 02:10:37,598 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:10:37,598 [main:66] - Compilation checking started
2021-03-12 02:10:37,988 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if (r != "OKFoo") return "Fail: $r"

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {
    override suspend fun fu3(): Kla0 = Kla0("OK")

    suspend fun fu4(): Any {
        return fu3().s
    }
}

fun box682(): String {
    val r = Outer().result()
var prope2: Any = "FAIL"
    fu0 {
        prope2 = Kla2().fu4()
    }
    if (prope2 != "OK") return "FAIL 0 $prope2"

    return prope2 as String
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
"xumae"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
if ((r).isNotEmpty()) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((r).replace('챣', '툯', true) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        val r = Outer().result()
(0.5537180538860499).compareTo(-123).times(35) = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val r = Outer().result()
for (i in 1..(Kla2()).equals("fbxqf").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:10:37,991 [main:107] - replacing ({ c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }, Function1<Continuation<Unit>, Unit>)
2021-03-12 02:10:37,991 [main:50] - replacing { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    } Function1<Continuation<Unit>, Unit>
2021-03-12 02:10:37,991 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-12 02:10:38,103 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-12 02:10:38,105 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 02:10:38,223 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 02:10:38,226 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 02:10:38,615 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 02:10:38,643 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 02:10:38,645 [main:302] - generating value of type = Any false depth = 5
2021-03-12 02:10:38,646 [main:95] - GENERATED = check(false, { "qgmuh"})
2021-03-12 02:10:38,646 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> check(false, { "qgmuh"})}
2021-03-12 02:10:38,646 [main:61] - GENERATED IS CALL =false
2021-03-12 02:10:38,780 [main:67] - randomType = LinkedHashSet<Long>
2021-03-12 02:10:38,900 [main:302] - generating value of type = LinkedHashSet<Long> false depth = 0
2021-03-12 02:10:39,022 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Long> = TODO()
2021-03-12 02:10:39,025 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Long> = TODO()
2021-03-12 02:10:39,146 [main:95] - GENERATED = linkedSetOf<Long>()
2021-03-12 02:10:39,294 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Outer
2021-03-12 02:10:39,303 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 02:10:39,331 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 02:10:39,332 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 02:10:39,332 [main:114] - replacement of { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> check(false, { "qgmuh"})}
2021-03-12 02:10:39,450 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 02:10:39,451 [main:66] - Compilation checking started
2021-03-12 02:10:40,039 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if (r != "OKFoo") return "Fail: $r"

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {
    override suspend fun fu3(): Kla0 = Kla0("OK")

    suspend fun fu4(): Any {
        return fu3().s
    }
}

fun box682(): String {
    val r = Outer().result()
var prope2: Any = "FAIL"
    fu0 {
        prope2 = Kla2().fu4()
    }
    if (prope2 != "OK") return "FAIL 0 $prope2"

    return prope2 as String
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
"xumae"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
if ((r).isNotEmpty()) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((r).replace('챣', '툯', true) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        val r = Outer().result()
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false, { "qgmuh"})}

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val r = Outer().result()
for (i in 1..(Kla2()).equals("fbxqf").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:10:40,042 [main:107] - replacing ({ error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }, Function0<Nothing>)
2021-03-12 02:10:40,043 [main:50] - replacing { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) } Function0<Nothing>
2021-03-12 02:10:40,043 [main:54] - Getting value of type Function0<Nothing>
2021-03-12 02:10:40,163 [main:302] - generating value of type = Function0<Nothing> false depth = 0
2021-03-12 02:10:40,165 [main:302] - generating value of type = Nothing false depth = 1
2021-03-12 02:10:40,291 [main:43] - GENERATING CALL OF fun TODO(reason: kotlin.String): Nothg = TODO()
2021-03-12 02:10:40,294 [main:61] - WITHOUT TYPE PARAMS = fun TODO(reason: kotlin.String): Nothg = TODO()
2021-03-12 02:10:40,571 [main:302] - generating value of type = String true depth = 4
2021-03-12 02:10:40,573 [main:95] - GENERATED = TODO("gluxc")
2021-03-12 02:10:40,573 [main:58] - GENERATED VALUE OF TYPE Function0<Nothing> = { TODO("gluxc")}
2021-03-12 02:10:40,573 [main:61] - GENERATED IS CALL =false
2021-03-12 02:10:40,581 [main:67] - randomType = Kla3
2021-03-12 02:10:40,697 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 02:10:40,699 [main:112] - generating klass Kla3 text = open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
"xumae"
    }
}
2021-03-12 02:10:40,816 [main:194] - Type params = []
2021-03-12 02:10:40,931 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 02:10:41,067 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 02:10:41,069 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 02:10:41,327 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 02:10:41,460 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 02:10:41,463 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 02:10:41,860 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 02:10:41,860 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 02:10:41,880 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 02:10:41,910 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 02:10:41,911 [main:106] - GETTING Function0<Nothing> from Outer
2021-03-12 02:10:41,918 [main:106] - GETTING Function0<Nothing> from String
2021-03-12 02:10:41,918 [main:114] - replacement of { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) } of type Function0<Nothing> is { TODO("gluxc")}
2021-03-12 02:10:42,068 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 02:10:42,068 [main:66] - Compilation checking started
2021-03-12 02:10:42,610 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if (r != "OKFoo") return "Fail: $r"

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {
    override suspend fun fu3(): Kla0 = Kla0("OK")

    suspend fun fu4(): Any {
        return fu3().s
    }
}

fun box682(): String {
    val r = Outer().result()
var prope2: Any = "FAIL"
    fu0 {
        prope2 = Kla2().fu4()
    }
    if (prope2 != "OK") return "FAIL 0 $prope2"

    return prope2 as String
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
"xumae"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
if ((r).isNotEmpty()) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true }?.let { TODO("gluxc")}
    }

    fun fu9(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((r).replace('챣', '툯', true) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        val r = Outer().result()
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false, { "qgmuh"})}

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val r = Outer().result()
for (i in 1..(Kla2()).equals("fbxqf").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:10:42,613 [main:107] - replacing (prope7 != null, Boolean)
2021-03-12 02:10:42,614 [main:50] - replacing prope7 != null Boolean
2021-03-12 02:10:42,614 [main:54] - Getting value of type Boolean
2021-03-12 02:10:42,725 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:10:42,727 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 02:10:42,727 [main:61] - GENERATED IS CALL =false
2021-03-12 02:10:42,854 [main:67] - randomType = UByte
2021-03-12 02:10:42,966 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 02:10:42,998 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@512c7627]
2021-03-12 02:10:42,998 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@5f69e9fe]
2021-03-12 02:10:43,108 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:10:43,108 [main:78] - Generated call from random type = (37.toUByte()).toFloat().equals("pnspx")
2021-03-12 02:10:43,108 [main:114] - replacement of prope7 != null of type Boolean is (37.toUByte()).toFloat().equals("pnspx")
2021-03-12 02:10:43,233 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:10:43,233 [main:66] - Compilation checking started
2021-03-12 02:10:43,561 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if (r != "OKFoo") return "Fail: $r"

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {
    override suspend fun fu3(): Kla0 = Kla0("OK")

    suspend fun fu4(): Any {
        return fu3().s
    }
}

fun box682(): String {
    val r = Outer().result()
var prope2: Any = "FAIL"
    fu0 {
        prope2 = Kla2().fu4()
    }
    if (prope2 != "OK") return "FAIL 0 $prope2"

    return prope2 as String
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
"xumae"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
if ((r).isNotEmpty()) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val r = Outer().result()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while ((37.toUByte()).toFloat().equals("pnspx")) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true }?.let { TODO("gluxc")}
    }

    fun fu9(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((r).replace('챣', '툯', true) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        val r = Outer().result()
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false, { "qgmuh"})}

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val r = Outer().result()
for (i in 1..(Kla2()).equals("fbxqf").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:10:43,563 [main:107] - replacing (fu3(), Kla0)
2021-03-12 02:10:43,563 [main:50] - replacing fu3() Kla0
2021-03-12 02:10:43,563 [main:54] - Getting value of type Kla0
2021-03-12 02:10:43,677 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 02:10:43,679 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any)
2021-03-12 02:10:43,789 [main:194] - Type params = []
2021-03-12 02:10:43,901 [main:302] - generating value of type = Any false depth = 2
2021-03-12 02:10:43,901 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0("ckavv")
2021-03-12 02:10:43,901 [main:61] - GENERATED IS CALL =true
2021-03-12 02:10:44,158 [main:67] - randomType = MutableMap<ULong, Outer>
2021-03-12 02:10:44,159 [main:106] - GETTING Kla0 from Outer
2021-03-12 02:10:44,164 [main:106] - GETTING Kla0 from String
2021-03-12 02:10:44,187 [main:106] - GETTING Kla0 from String
2021-03-12 02:10:44,188 [main:106] - GETTING Kla0 from String
2021-03-12 02:10:44,188 [main:114] - replacement of fu3() of type Kla0 is Kla0("ckavv")
2021-03-12 02:10:44,300 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 02:10:44,300 [main:66] - Compilation checking started
2021-03-12 02:10:44,827 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if (r != "OKFoo") return "Fail: $r"

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {
    override suspend fun fu3(): Kla0 = Kla0("OK")

    suspend fun fu4(): Any {
        val r = Outer().result()
return Kla0("ckavv").s
    }
}

fun box682(): String {
    val r = Outer().result()
var prope2: Any = "FAIL"
    fu0 {
        prope2 = Kla2().fu4()
    }
    if (prope2 != "OK") return "FAIL 0 $prope2"

    return prope2 as String
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
"xumae"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
if ((r).isNotEmpty()) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val r = Outer().result()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true }?.let { TODO("gluxc")}
    }

    fun fu9(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((r).replace('챣', '툯', true) + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        val r = Outer().result()
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false, { "qgmuh"})}

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val r = Outer().result()
for (i in 1..(Kla2()).equals("fbxqf").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:10:44,830 [main:107] - replacing ((r).replace('챣', '툯', true) + " has no state-machine " +
                prope3.joinToString(separator = "\n"), String)
2021-03-12 02:10:44,830 [main:50] - replacing (r).replace('챣', '툯', true) + " has no state-machine " +
                prope3.joinToString(separator = "\n") String
2021-03-12 02:10:44,830 [main:54] - Getting value of type String
2021-03-12 02:10:44,962 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:10:44,964 [main:58] - GENERATED VALUE OF TYPE String = "bwjoi"
2021-03-12 02:10:44,964 [main:61] - GENERATED IS CALL =false
2021-03-12 02:10:45,085 [main:67] - randomType = UInt
2021-03-12 02:10:45,194 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 02:10:45,224 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@1de02af4]
2021-03-12 02:10:45,224 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fb88914]
2021-03-12 02:10:45,334 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:45,335 [main:78] - Generated call from random type = (1952120426.toUInt()).toUByte().toString(-461211524)
2021-03-12 02:10:45,336 [main:106] - GETTING String from Outer
2021-03-12 02:10:45,341 [main:113] - Case = [public final val foo: kotlin.String defined in Outer[PropertyDescriptorImpl@18e3c5e1], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d94be18]]
2021-03-12 02:10:45,341 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d94be18]
2021-03-12 02:10:45,450 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:10:45,453 [main:117] - GENERATED CALL = (Outer()).foo.substringAfter('꛰', val r = Outer().result()
2021-03-12 02:10:45,453 [main:113] - Case = [public final val foo: kotlin.String defined in Outer[PropertyDescriptorImpl@18e3c5e1], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51567418]]
2021-03-12 02:10:45,453 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51567418]
2021-03-12 02:10:45,571 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 02:10:45,573 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 02:10:45,574 [main:117] - GENERATED CALL = (Outer()).foo.filterIndexed({a: Int, b: Char -> false})
2021-03-12 02:10:45,575 [main:113] - Case = [public final val foo: kotlin.String defined in Outer[PropertyDescriptorImpl@18e3c5e1], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aeda4a2]]
2021-03-12 02:10:45,575 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aeda4a2]
2021-03-12 02:10:45,707 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:10:45,709 [main:117] - GENERATED CALL = (Outer()).foo.concat("dtkfj")
2021-03-12 02:10:45,709 [main:113] - Case = [public final val foo: kotlin.String defined in Outer[PropertyDescriptorImpl@18e3c5e1], @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fb39d03]]
2021-03-12 02:10:45,709 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fb39d03]
2021-03-12 02:10:45,823 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:45,825 [main:117] - GENERATED CALL = (Outer()).foo.substring(1982756620)
2021-03-12 02:10:45,825 [main:113] - Case = [public final val foo: kotlin.String defined in Outer[PropertyDescriptorImpl@18e3c5e1], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64f11559]]
2021-03-12 02:10:45,825 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64f11559]
2021-03-12 02:10:45,940 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 02:10:45,941 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 02:10:45,943 [main:117] - GENERATED CALL = (Outer()).foo.takeWhile({a: Char -> false})
2021-03-12 02:10:45,944 [main:113] - Case = [public final val foo: kotlin.String defined in Outer[PropertyDescriptorImpl@18e3c5e1], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@198e0d63]]
2021-03-12 02:10:45,944 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@198e0d63]
2021-03-12 02:10:45,944 [main:117] - GENERATED CALL = (Outer()).foo.lowercase()
2021-03-12 02:10:45,944 [main:113] - Case = [public final val foo: kotlin.String defined in Outer[PropertyDescriptorImpl@18e3c5e1], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9c4835b]]
2021-03-12 02:10:45,944 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9c4835b]
2021-03-12 02:10:45,944 [main:117] - GENERATED CALL = (Outer()).foo.trimStart()
2021-03-12 02:10:45,944 [main:113] - Case = [public final val foo: kotlin.String defined in Outer[PropertyDescriptorImpl@18e3c5e1], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a8ca87c]]
2021-03-12 02:10:45,944 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a8ca87c]
2021-03-12 02:10:45,944 [main:117] - GENERATED CALL = (Outer()).foo.toLowerCase()
2021-03-12 02:10:45,944 [main:113] - Case = [public final val foo: kotlin.String defined in Outer[PropertyDescriptorImpl@18e3c5e1], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27df6c88]]
2021-03-12 02:10:45,944 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27df6c88]
2021-03-12 02:10:45,945 [main:117] - GENERATED CALL = (Outer()).foo.trim()
2021-03-12 02:10:45,945 [main:113] - Case = [public final val foo: kotlin.String defined in Outer[PropertyDescriptorImpl@18e3c5e1], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bfe811c]]
2021-03-12 02:10:45,945 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bfe811c]
2021-03-12 02:10:46,056 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:10:46,172 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:10:46,174 [main:117] - GENERATED CALL = (Outer()).foo.substringBeforeLast('꘹', "tgakc")
2021-03-12 02:10:46,174 [main:114] - replacement of (r).replace('챣', '툯', true) + " has no state-machine " +
                prope3.joinToString(separator = "\n") of type String is (Outer()).foo.toLowerCase()
2021-03-12 02:10:46,287 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:10:46,288 [main:66] - Compilation checking started
2021-03-12 02:10:46,813 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if (r != "OKFoo") return "Fail: $r"

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {
    override suspend fun fu3(): Kla0 = Kla0("OK")

    suspend fun fu4(): Any {
        val r = Outer().result()
return Kla0("ckavv").s
    }
}

fun box682(): String {
    val r = Outer().result()
var prope2: Any = "FAIL"
    fu0 {
        prope2 = Kla2().fu4()
    }
    if (prope2 != "OK") return "FAIL 0 $prope2"

    return prope2 as String
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
"xumae"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
if ((r).isNotEmpty()) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val r = Outer().result()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true }?.let { TODO("gluxc")}
    }

    fun fu9(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Outer()).foo.toLowerCase())
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        val r = Outer().result()
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false, { "qgmuh"})}

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val r = Outer().result()
for (i in 1..(Kla2()).equals("fbxqf").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:10:46,815 [main:107] - replacing (true, Boolean)
2021-03-12 02:10:46,816 [main:50] - replacing true Boolean
2021-03-12 02:10:46,816 [main:54] - Getting value of type Boolean
2021-03-12 02:10:46,937 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:10:46,939 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 02:10:46,939 [main:61] - GENERATED IS CALL =false
2021-03-12 02:10:47,199 [main:67] - randomType = Double?
2021-03-12 02:10:47,314 [main:302] - generating value of type = Double true depth = 0
2021-03-12 02:10:47,357 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3155bf62]
2021-03-12 02:10:47,358 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@60ea4f61]
2021-03-12 02:10:47,358 [main:78] - Generated call from random type = (0.8478997158797972)?.toDouble().isFinite()
2021-03-12 02:10:47,359 [main:106] - GETTING Boolean from String
2021-03-12 02:10:47,381 [main:113] - Case = [public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42b52fa3]]
2021-03-12 02:10:47,381 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42b52fa3]
2021-03-12 02:10:47,381 [main:117] - GENERATED CALL = (Outer().foo).matches(Outer().result())
2021-03-12 02:10:47,381 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ec7c1f1]]
2021-03-12 02:10:47,381 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff]
2021-03-12 02:10:47,492 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:47,494 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ec7c1f1]
2021-03-12 02:10:47,494 [main:117] - GENERATED CALL = (Outer().foo).get(-484733748).isLetter()
2021-03-12 02:10:47,494 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@727c8270]]
2021-03-12 02:10:47,494 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff]
2021-03-12 02:10:47,609 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:47,611 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@727c8270]
2021-03-12 02:10:47,611 [main:117] - GENERATED CALL = (Outer().foo).get(-457252187).isISOControl()
2021-03-12 02:10:47,611 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4a314af], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@317f3713]]
2021-03-12 02:10:47,611 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4a314af]
2021-03-12 02:10:47,722 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:10:47,722 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@317f3713]
2021-03-12 02:10:47,831 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:10:47,832 [main:117] - GENERATED CALL = (Outer().foo).equals("fsryq").equals("ubkhu")
2021-03-12 02:10:47,832 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@164f82bd]]
2021-03-12 02:10:47,832 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@164f82bd]
2021-03-12 02:10:47,832 [main:117] - GENERATED CALL = (Outer().foo).isNotBlank()
2021-03-12 02:10:47,832 [main:113] - Case = [public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74e0785b]]
2021-03-12 02:10:47,832 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74e0785b]
2021-03-12 02:10:47,944 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 02:10:47,946 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 02:10:47,948 [main:117] - GENERATED CALL = (Outer().foo).all({a: Char -> true})
2021-03-12 02:10:47,948 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10048bd9], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7bbaa3cd]]
2021-03-12 02:10:47,948 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10048bd9]
2021-03-12 02:10:48,057 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:10:48,058 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7bbaa3cd]
2021-03-12 02:10:48,191 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:10:48,192 [main:117] - GENERATED CALL = (Outer().foo).compareTo("otlnl").equals("txejl")
2021-03-12 02:10:48,192 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d], public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bc8dca4]]
2021-03-12 02:10:48,192 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d]
2021-03-12 02:10:48,321 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:48,433 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:48,434 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bc8dca4]
2021-03-12 02:10:48,434 [main:117] - GENERATED CALL = (Outer().foo).subSequence(1793219154, -287704646).none()
2021-03-12 02:10:48,435 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d], public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@111539f0]]
2021-03-12 02:10:48,435 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d]
2021-03-12 02:10:48,543 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:48,656 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:48,657 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@111539f0]
2021-03-12 02:10:48,766 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:48,876 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 02:10:48,992 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:49,122 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:49,244 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:10:49,247 [main:117] - GENERATED CALL = (Outer().foo).subSequence(11581656, 1352011691).regionMatches(-2056111943, StringBuilder(), 1853347205, 1829756293, false)
2021-03-12 02:10:49,247 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d], public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cf44f4]]
2021-03-12 02:10:49,247 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d]
2021-03-12 02:10:49,354 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:49,467 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:49,469 [main:149] - GENERATING call of type public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6cf44f4]
2021-03-12 02:10:49,579 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:10:49,693 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:10:49,695 [main:117] - GENERATED CALL = (Outer().foo).subSequence(451184566, 2074486899).endsWith('췞', true)
2021-03-12 02:10:49,695 [main:114] - replacement of true of type Boolean is (Outer().foo).compareTo("otlnl").equals("txejl")
2021-03-12 02:10:49,807 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:10:49,807 [main:66] - Compilation checking started
2021-03-12 02:10:50,321 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if (r != "OKFoo") return "Fail: $r"

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {
    override suspend fun fu3(): Kla0 = Kla0("OK")

    suspend fun fu4(): Any {
        val r = Outer().result()
return Kla0("ckavv").s
    }
}

fun box682(): String {
    val r = Outer().result()
var prope2: Any = "FAIL"
    fu0 {
        prope2 = Kla2().fu4()
    }
    if (prope2 != "OK") return "FAIL 0 $prope2"

    return prope2 as String
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
"xumae"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
if ((r).isNotEmpty()) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val r = Outer().result()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true }?.let { TODO("gluxc")}
    }

    fun fu9(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Outer()).foo.toLowerCase())
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        val r = Outer().result()
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false, { "qgmuh"})}

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (Outer().foo).compareTo("otlnl").equals("txejl")) {
        val r = Outer().result()
for (i in 1..(Kla2()).equals("fbxqf").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:10:50,323 [main:107] - replacing (getOrThrow(), Ty0)
2021-03-12 02:10:50,324 [main:50] - replacing getOrThrow() Ty0
2021-03-12 02:10:50,324 [main:54] - Getting value of type Ty0
2021-03-12 02:10:50,457 [main:58] - GENERATED VALUE OF TYPE Ty0 = null
2021-03-12 02:10:50,458 [main:61] - GENERATED IS CALL =false
2021-03-12 02:10:50,599 [main:67] - randomType = Map<Outer, Kla6>
2021-03-12 02:10:50,600 [main:106] - GETTING Ty0 from String
2021-03-12 02:10:50,618 [main:106] - GETTING Ty0 from Outer
2021-03-12 02:10:50,622 [main:106] - GETTING Ty0 from String
2021-03-12 02:10:50,623 [main:106] - GETTING Ty0 from String
2021-03-12 02:10:50,623 [main:114] - replacement of getOrThrow() of type Ty0 is null
2021-03-12 02:10:50,732 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(NULL)
2021-03-12 02:10:50,733 [main:66] - Compilation checking started
2021-03-12 02:10:51,056 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if (r != "OKFoo") return "Fail: $r"

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {
    override suspend fun fu3(): Kla0 = Kla0("OK")

    suspend fun fu4(): Any {
        val r = Outer().result()
return Kla0("ckavv").s
    }
}

fun box682(): String {
    val r = Outer().result()
var prope2: Any = "FAIL"
    fu0 {
        prope2 = Kla2().fu4()
    }
    if (prope2 != "OK") return "FAIL 0 $prope2"

    return prope2 as String
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
x(prope2.null)
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
"xumae"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
if ((r).isNotEmpty()) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val r = Outer().result()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true }?.let { TODO("gluxc")}
    }

    fun fu9(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Outer()).foo.toLowerCase())
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        val r = Outer().result()
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false, { "qgmuh"})}

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (Outer().foo).compareTo("otlnl").equals("txejl")) {
        val r = Outer().result()
for (i in 1..(Kla2()).equals("fbxqf").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:10:51,058 [main:107] - replacing (" is not subtype of CoroutineStackFrame", String)
2021-03-12 02:10:51,058 [main:50] - replacing " is not subtype of CoroutineStackFrame" String
2021-03-12 02:10:51,058 [main:54] - Getting value of type String
2021-03-12 02:10:51,172 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:10:51,173 [main:58] - GENERATED VALUE OF TYPE String = "pqnim"
2021-03-12 02:10:51,173 [main:61] - GENERATED IS CALL =false
2021-03-12 02:10:51,180 [main:67] - randomType = Kla4
2021-03-12 02:10:51,297 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 02:10:51,299 [main:112] - generating klass Kla4 text = class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-12 02:10:51,319 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@171823b4]
2021-03-12 02:10:51,319 [main:78] - Generated call from random type = (Kla4()).prope2?.toString()!!
2021-03-12 02:10:51,319 [main:114] - replacement of " is not subtype of CoroutineStackFrame" of type String is (Kla4()).prope2?.toString()!!
2021-03-12 02:10:51,431 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(POSTFIX_EXPRESSION)
2021-03-12 02:10:51,432 [main:66] - Compilation checking started
2021-03-12 02:10:51,989 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if (r != "OKFoo") return "Fail: $r"

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {
    override suspend fun fu3(): Kla0 = Kla0("OK")

    suspend fun fu4(): Any {
        val r = Outer().result()
return Kla0("ckavv").s
    }
}

fun box682(): String {
    val r = Outer().result()
var prope2: Any = "FAIL"
    fu0 {
        prope2 = Kla2().fu4()
    }
    if (prope2 != "OK") return "FAIL 0 $prope2"

    return prope2 as String
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
"xumae"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
if ((r).isNotEmpty()) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val r = Outer().result()
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla4()).prope2?.toString()!!)
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true }?.let { TODO("gluxc")}
    }

    fun fu9(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Outer()).foo.toLowerCase())
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        val r = Outer().result()
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false, { "qgmuh"})}

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (Outer().foo).compareTo("otlnl").equals("txejl")) {
        val r = Outer().result()
for (i in 1..(Kla2()).equals("fbxqf").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:10:51,991 [main:107] - replacing (Kla2().fu4(), Any)
2021-03-12 02:10:51,991 [main:50] - replacing Kla2().fu4() Any
2021-03-12 02:10:51,991 [main:54] - Getting value of type Any
2021-03-12 02:10:52,109 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:10:52,109 [main:58] - GENERATED VALUE OF TYPE Any = "iqvkl"
2021-03-12 02:10:52,109 [main:61] - GENERATED IS CALL =false
2021-03-12 02:10:52,237 [main:67] - randomType = UInt
2021-03-12 02:10:52,349 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 02:10:52,382 [main:106] - GETTING Any from Outer
2021-03-12 02:10:52,389 [main:106] - GETTING Any from String
2021-03-12 02:10:52,413 [main:114] - replacement of Kla2().fu4() of type Any is r
2021-03-12 02:10:52,523 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 02:10:52,524 [main:66] - Compilation checking started
2021-03-12 02:10:53,053 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if (r != "OKFoo") return "Fail: $r"

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {
    override suspend fun fu3(): Kla0 = Kla0("OK")

    suspend fun fu4(): Any {
        val r = Outer().result()
return Kla0("ckavv").s
    }
}

fun box682(): String {
    val r = Outer().result()
var prope2: Any = "FAIL"
    fu0 {
        prope2 = r
    }
    if (prope2 != "OK") return "FAIL 0 $prope2"

    return prope2 as String
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
"xumae"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
if ((r).isNotEmpty()) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val r = Outer().result()
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla4()).prope2?.toString()!!)
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true }?.let { TODO("gluxc")}
    }

    fun fu9(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Outer()).foo.toLowerCase())
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        val r = Outer().result()
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false, { "qgmuh"})}

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (Outer().foo).compareTo("otlnl").equals("txejl")) {
        val r = Outer().result()
for (i in 1..(Kla2()).equals("fbxqf").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:10:53,055 [main:107] - replacing (getOrThrow(), Any?)
2021-03-12 02:10:53,056 [main:50] - replacing getOrThrow() Any?
2021-03-12 02:10:53,056 [main:54] - Getting value of type Any?
2021-03-12 02:10:53,178 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:10:53,178 [main:58] - GENERATED VALUE OF TYPE Any? = "bytop"
2021-03-12 02:10:53,179 [main:61] - GENERATED IS CALL =false
2021-03-12 02:10:53,455 [main:67] - randomType = LinkedHashSet<UShort>
2021-03-12 02:10:53,568 [main:302] - generating value of type = LinkedHashSet<UShort> false depth = 0
2021-03-12 02:10:53,685 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int): LinkedHashSet<UShort> = TODO()
2021-03-12 02:10:53,688 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int): LinkedHashSet<UShort> = TODO()
2021-03-12 02:10:53,925 [main:302] - generating value of type = Int true depth = 3
2021-03-12 02:10:53,927 [main:95] - GENERATED = LinkedHashSet<UShort>(-336173425)
2021-03-12 02:10:54,074 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@109ebf3b]
2021-03-12 02:10:54,074 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Any? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@18eb941]
2021-03-12 02:10:54,184 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:54,186 [main:78] - Generated call from random type = (LinkedHashSet<UShort>(-336173425)).toArray().get(1173690614)
2021-03-12 02:10:54,187 [main:106] - GETTING Any? from String
2021-03-12 02:10:54,205 [main:106] - GETTING Any? from String
2021-03-12 02:10:54,206 [main:106] - GETTING Any? from String
2021-03-12 02:10:54,207 [main:106] - GETTING Any? from Outer
2021-03-12 02:10:54,212 [main:114] - replacement of getOrThrow() of type Any? is "bytop"
2021-03-12 02:10:54,321 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 02:10:54,321 [main:66] - Compilation checking started
2021-03-12 02:10:54,673 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if (r != "OKFoo") return "Fail: $r"

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {
    override suspend fun fu3(): Kla0 = Kla0("OK")

    suspend fun fu4(): Any {
        val r = Outer().result()
return Kla0("ckavv").s
    }
}

fun box682(): String {
    val r = Outer().result()
var prope2: Any = "FAIL"
    fu0 {
        prope2 = r
    }
    if (prope2 != "OK") return "FAIL 0 $prope2"

    return prope2 as String
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
"xumae"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
this.prope2 = prope2."bytop"
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
if ((r).isNotEmpty()) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val r = Outer().result()
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla4()).prope2?.toString()!!)
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true }?.let { TODO("gluxc")}
    }

    fun fu9(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Outer()).foo.toLowerCase())
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        val r = Outer().result()
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false, { "qgmuh"})}

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (Outer().foo).compareTo("otlnl").equals("txejl")) {
        val r = Outer().result()
for (i in 1..(Kla2()).equals("fbxqf").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:10:54,675 [main:107] - replacing (it, Continuation<Unit>)
2021-03-12 02:10:54,675 [main:50] - replacing it Continuation<Unit>
2021-03-12 02:10:54,676 [main:54] - Getting value of type Continuation<Unit>
2021-03-12 02:10:54,804 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-12 02:10:54,932 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 02:10:54,935 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 02:10:55,319 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 02:10:55,436 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 02:10:55,439 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 02:10:55,686 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 02:10:55,836 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 02:10:55,839 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 02:10:56,208 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 02:10:56,208 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 02:10:56,209 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-12 02:10:56,209 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-12 02:10:56,339 [main:67] - randomType = Kla5<Kla7>
2021-03-12 02:10:56,448 [main:302] - generating value of type = Kla5<Kla7> false depth = 0
2021-03-12 02:10:56,450 [main:112] - generating klass Kla5 text = abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
if ((r).isNotEmpty()) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 02:10:56,806 [main:302] - generating value of type = Kla8 false depth = 2
2021-03-12 02:10:56,808 [main:112] - generating klass Kla8 text = object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-12 02:10:56,825 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 02:10:56,846 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 02:10:56,847 [main:106] - GETTING Continuation<Unit> from Outer
2021-03-12 02:10:56,854 [main:106] - GETTING Continuation<Unit> from String
2021-03-12 02:10:56,854 [main:111] - Cant find and generate replacement for it type Continuation<Unit>
2021-03-12 02:10:56,854 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 02:10:56,854 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 02:10:56,854 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 02:10:56,967 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 02:10:56,972 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 02:10:57,643 [main:67] - randomType = Function1<LinkedHashMap<ULong, Byte>, Function1<Kla7, Boolean>>
2021-03-12 02:10:57,644 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 02:10:57,664 [main:106] - GETTING EmptyCoroutineContext from Outer
2021-03-12 02:10:57,670 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 02:10:57,670 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 02:10:57,670 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 02:10:57,670 [main:107] - replacing ("FAIL 0 $prope2", String)
2021-03-12 02:10:57,671 [main:50] - replacing "FAIL 0 $prope2" String
2021-03-12 02:10:57,671 [main:54] - Getting value of type String
2021-03-12 02:10:57,781 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:10:57,782 [main:58] - GENERATED VALUE OF TYPE String = "brpne"
2021-03-12 02:10:57,783 [main:61] - GENERATED IS CALL =false
2021-03-12 02:10:57,786 [main:67] - randomType = Int
2021-03-12 02:10:57,894 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:57,926 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@39292d0d]
2021-03-12 02:10:57,926 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32b42115]
2021-03-12 02:10:58,036 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:58,038 [main:78] - Generated call from random type = (1738912412).toByte().toString(1662774422)
2021-03-12 02:10:58,038 [main:106] - GETTING String from String
2021-03-12 02:10:58,065 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9c4835b]]
2021-03-12 02:10:58,065 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9c4835b]
2021-03-12 02:10:58,065 [main:117] - GENERATED CALL = (Outer().result()).trimStart()
2021-03-12 02:10:58,065 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30602efe]]
2021-03-12 02:10:58,066 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30602efe]
2021-03-12 02:10:58,178 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:58,180 [main:117] - GENERATED CALL = (Outer().result()).drop(1022800463)
2021-03-12 02:10:58,180 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fb39d03]]
2021-03-12 02:10:58,180 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fb39d03]
2021-03-12 02:10:58,297 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:58,299 [main:117] - GENERATED CALL = (Outer().result()).substring(-158765624)
2021-03-12 02:10:58,299 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@84ee0bd]]
2021-03-12 02:10:58,299 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@84ee0bd]
2021-03-12 02:10:58,299 [main:117] - GENERATED CALL = (Outer().result()).prependIndent(r)
2021-03-12 02:10:58,300 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64f11559]]
2021-03-12 02:10:58,300 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64f11559]
2021-03-12 02:10:58,411 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 02:10:58,412 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 02:10:58,427 [main:117] - GENERATED CALL = (Outer().result()).takeWhile({a: Char -> true})
2021-03-12 02:10:58,427 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53837034]]
2021-03-12 02:10:58,427 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53837034]
2021-03-12 02:10:58,543 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 02:10:58,658 [main:43] - GENERATING CALL OF fun <T> mutableListOf(): Iterable<Int> = TODO()
2021-03-12 02:10:58,661 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableListOf(): Iterable<Int> = TODO()
2021-03-12 02:10:58,778 [main:95] - GENERATED = mutableListOf<Int>()
2021-03-12 02:10:58,778 [main:117] - GENERATED CALL = (Outer().result()).slice(mutableListOf<Int>())
2021-03-12 02:10:58,778 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fce0b20]]
2021-03-12 02:10:58,778 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fce0b20]
2021-03-12 02:10:58,887 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 02:10:58,888 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 02:10:58,890 [main:117] - GENERATED CALL = (Outer().result()).dropWhile({a: Char -> false})
2021-03-12 02:10:58,890 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f8a0afb]]
2021-03-12 02:10:58,890 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d]
2021-03-12 02:10:58,998 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:59,107 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:10:59,109 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f8a0afb]
2021-03-12 02:10:59,217 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 02:10:59,332 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:10:59,334 [main:117] - GENERATED CALL = (Outer().result()).subSequence(-1254413018, 456138593).commonPrefixWith("nbyjt", true)
2021-03-12 02:10:59,334 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27df6c88]]
2021-03-12 02:10:59,334 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27df6c88]
2021-03-12 02:10:59,334 [main:117] - GENERATED CALL = (Outer().result()).trim()
2021-03-12 02:10:59,334 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a05ebe3]]
2021-03-12 02:10:59,334 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a05ebe3]
2021-03-12 02:10:59,442 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:10:59,444 [main:117] - GENERATED CALL = (Outer().result()).replaceIndentByMargin("chvuo", Outer().result())
2021-03-12 02:10:59,444 [main:114] - replacement of "FAIL 0 $prope2" of type String is (Outer().result()).drop(1022800463)
2021-03-12 02:10:59,552 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:10:59,552 [main:66] - Compilation checking started
2021-03-12 02:11:00,072 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if (r != "OKFoo") return "Fail: $r"

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {
    override suspend fun fu3(): Kla0 = Kla0("OK")

    suspend fun fu4(): Any {
        val r = Outer().result()
return Kla0("ckavv").s
    }
}

fun box682(): String {
    val r = Outer().result()
var prope2: Any = "FAIL"
    fu0 {
        prope2 = r
    }
    if (prope2 != "OK") return (Outer().result()).drop(1022800463)

    return prope2 as String
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
"xumae"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
if ((r).isNotEmpty()) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val r = Outer().result()
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla4()).prope2?.toString()!!)
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true }?.let { TODO("gluxc")}
    }

    fun fu9(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Outer()).foo.toLowerCase())
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        val r = Outer().result()
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false, { "qgmuh"})}

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (Outer().foo).compareTo("otlnl").equals("txejl")) {
        val r = Outer().result()
for (i in 1..(Kla2()).equals("fbxqf").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:11:00,074 [main:107] - replacing (Kla0("ckavv").s, Any)
2021-03-12 02:11:00,074 [main:50] - replacing Kla0("ckavv").s Any
2021-03-12 02:11:00,074 [main:54] - Getting value of type Any
2021-03-12 02:11:00,196 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:11:00,197 [main:58] - GENERATED VALUE OF TYPE Any = "eoqjj"
2021-03-12 02:11:00,197 [main:61] - GENERATED IS CALL =false
2021-03-12 02:11:00,460 [main:67] - randomType = LinkedHashSet<Byte>
2021-03-12 02:11:00,575 [main:302] - generating value of type = LinkedHashSet<Byte> false depth = 0
2021-03-12 02:11:00,692 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Byte): LkedHashSet<Byte> = TODO()
2021-03-12 02:11:00,695 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Byte): LkedHashSet<Byte> = TODO()
2021-03-12 02:11:00,811 [main:302] - generating value of type = Byte true depth = 3
2021-03-12 02:11:00,813 [main:95] - GENERATED = linkedSetOf<Byte>(46)
2021-03-12 02:11:00,931 [main:149] - GENERATING call of type @kotlin.js.JsName public open fun toJSON(): kotlin.Any defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@10cca380]
2021-03-12 02:11:00,931 [main:78] - Generated call from random type = (linkedSetOf<Byte>(46)).toJSON()
2021-03-12 02:11:00,932 [main:106] - GETTING Any from String
2021-03-12 02:11:00,948 [main:114] - replacement of Kla0("ckavv").s of type Any is Outer().result()
2021-03-12 02:11:01,057 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:11:01,057 [main:66] - Compilation checking started
2021-03-12 02:11:01,562 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if (r != "OKFoo") return "Fail: $r"

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {
    override suspend fun fu3(): Kla0 = Kla0("OK")

    suspend fun fu4(): Any {
        val r = Outer().result()
return Outer().result()
    }
}

fun box682(): String {
    val r = Outer().result()
var prope2: Any = "FAIL"
    fu0 {
        prope2 = r
    }
    if (prope2 != "OK") return (Outer().result()).drop(1022800463)

    return prope2 as String
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
"xumae"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
if ((r).isNotEmpty()) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val r = Outer().result()
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla4()).prope2?.toString()!!)
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true }?.let { TODO("gluxc")}
    }

    fun fu9(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Outer()).foo.toLowerCase())
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        val r = Outer().result()
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false, { "qgmuh"})}

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (Outer().foo).compareTo("otlnl").equals("txejl")) {
        val r = Outer().result()
for (i in 1..(Kla2()).equals("fbxqf").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:11:01,564 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 02:11:01,564 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 02:11:01,564 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 02:11:01,685 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 02:11:01,689 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 02:11:01,695 [main:67] - randomType = Outer
2021-03-12 02:11:01,813 [main:302] - generating value of type = Outer false depth = 0
2021-03-12 02:11:01,815 [main:112] - generating klass Outer text = class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}
2021-03-12 02:11:01,823 [main:106] - GETTING EmptyCoroutineContext from Outer
2021-03-12 02:11:01,831 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 02:11:01,860 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 02:11:01,861 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 02:11:01,861 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 02:11:01,861 [main:107] - replacing ("Continuation " + c + (Kla4()).prope2?.toString()!!, String)
2021-03-12 02:11:01,862 [main:50] - replacing "Continuation " + c + (Kla4()).prope2?.toString()!! String
2021-03-12 02:11:01,862 [main:54] - Getting value of type String
2021-03-12 02:11:01,975 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:11:01,977 [main:58] - GENERATED VALUE OF TYPE String = "nbtmw"
2021-03-12 02:11:01,977 [main:61] - GENERATED IS CALL =false
2021-03-12 02:11:02,103 [main:67] - randomType = Kla4?
2021-03-12 02:11:02,213 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 02:11:02,214 [main:112] - generating klass Kla4 text = class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-12 02:11:02,230 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@171823b4]
2021-03-12 02:11:02,230 [main:78] - Generated call from random type = (Kla4())?.prope2?.toString()!!
2021-03-12 02:11:02,230 [main:106] - GETTING String from String
2021-03-12 02:11:02,251 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7735a93e]]
2021-03-12 02:11:02,251 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d]
2021-03-12 02:11:02,370 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:02,491 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:02,493 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7735a93e]
2021-03-12 02:11:02,606 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:02,721 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:02,723 [main:117] - GENERATED CALL = (r).subSequence(1018761582, 1087340829).substring(475877335, -116617630)
2021-03-12 02:11:02,723 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@265d560b]]
2021-03-12 02:11:02,723 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@265d560b]
2021-03-12 02:11:02,832 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 02:11:02,964 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 02:11:02,966 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 02:11:03,204 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 02:11:03,317 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 02:11:03,320 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 02:11:03,557 [main:302] - generating value of type = CharSequence false depth = 6
2021-03-12 02:11:03,562 [main:95] - GENERATED = StringBuilder("gikde")
2021-03-12 02:11:03,562 [main:95] - GENERATED = StringBuilder(StringBuilder("gikde"))
2021-03-12 02:11:03,679 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:11:03,681 [main:117] - GENERATED CALL = (r).commonSuffixWith(StringBuilder(StringBuilder("gikde")), true)
2021-03-12 02:11:03,681 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f87ec56]]
2021-03-12 02:11:03,681 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff]
2021-03-12 02:11:03,796 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:03,797 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6f87ec56]
2021-03-12 02:11:03,798 [main:117] - GENERATED CALL = (r).get(-1383918648).titlecase()
2021-03-12 02:11:03,798 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d2a278f]]
2021-03-12 02:11:03,798 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d2a278f]
2021-03-12 02:11:03,908 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 02:11:03,909 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 02:11:03,911 [main:117] - GENERATED CALL = (r).filter({a: Char -> false})
2021-03-12 02:11:03,911 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72c65b88]]
2021-03-12 02:11:03,911 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72c65b88]
2021-03-12 02:11:04,021 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 02:11:04,025 [main:117] - GENERATED CALL = (r).removePrefix("gbldc")
2021-03-12 02:11:04,026 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35167831]]
2021-03-12 02:11:04,026 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35167831]
2021-03-12 02:11:04,134 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:11:04,136 [main:117] - GENERATED CALL = (r).substringBefore('䱼', Outer().result())
2021-03-12 02:11:04,136 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ebcf794]]
2021-03-12 02:11:04,136 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ebcf794]
2021-03-12 02:11:04,245 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:04,247 [main:117] - GENERATED CALL = (r).take(-202803174)
2021-03-12 02:11:04,247 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27df6c88]]
2021-03-12 02:11:04,247 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27df6c88]
2021-03-12 02:11:04,247 [main:117] - GENERATED CALL = (r).trim()
2021-03-12 02:11:04,247 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4af4e98c]]
2021-03-12 02:11:04,247 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4af4e98c]
2021-03-12 02:11:04,382 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:04,384 [main:117] - GENERATED CALL = (r).takeLast(-1523311814)
2021-03-12 02:11:04,384 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a05ebe3]]
2021-03-12 02:11:04,384 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a05ebe3]
2021-03-12 02:11:04,384 [main:117] - GENERATED CALL = (r).replaceIndentByMargin(Outer().foo, r)
2021-03-12 02:11:04,384 [main:114] - replacement of "Continuation " + c + (Kla4()).prope2?.toString()!! of type String is (r).removePrefix("gbldc")
2021-03-12 02:11:04,514 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:11:04,515 [main:66] - Compilation checking started
2021-03-12 02:11:05,007 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if (r != "OKFoo") return "Fail: $r"

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {
    override suspend fun fu3(): Kla0 = Kla0("OK")

    suspend fun fu4(): Any {
        val r = Outer().result()
return Outer().result()
    }
}

fun box682(): String {
    val r = Outer().result()
var prope2: Any = "FAIL"
    fu0 {
        prope2 = r
    }
    if (prope2 != "OK") return (Outer().result()).drop(1022800463)

    return prope2 as String
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
"xumae"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
if ((r).isNotEmpty()) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val r = Outer().result()
if (c !is CoroutineStackFrame) error((r).removePrefix("gbldc"))
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true }?.let { TODO("gluxc")}
    }

    fun fu9(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Outer()).foo.toLowerCase())
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        val r = Outer().result()
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false, { "qgmuh"})}

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (Outer().foo).compareTo("otlnl").equals("txejl")) {
        val r = Outer().result()
for (i in 1..(Kla2()).equals("fbxqf").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:11:05,009 [main:107] - replacing (prope5, Boolean)
2021-03-12 02:11:05,009 [main:50] - replacing prope5 Boolean
2021-03-12 02:11:05,009 [main:54] - Getting value of type Boolean
2021-03-12 02:11:05,119 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:11:05,120 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 02:11:05,121 [main:61] - GENERATED IS CALL =false
2021-03-12 02:11:05,240 [main:67] - randomType = Double
2021-03-12 02:11:05,350 [main:302] - generating value of type = Double true depth = 0
2021-03-12 02:11:05,379 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@2ec6dbc9]
2021-03-12 02:11:05,379 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@530d7c8c]
2021-03-12 02:11:05,380 [main:78] - Generated call from random type = (0.03827007556166673).toChar().isLetterOrDigit()
2021-03-12 02:11:05,380 [main:106] - GETTING Boolean from Outer
2021-03-12 02:11:05,384 [main:113] - Case = [public final val foo: kotlin.String defined in Outer[PropertyDescriptorImpl@18e3c5e1], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39e26f35]]
2021-03-12 02:11:05,384 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39e26f35]
2021-03-12 02:11:05,493 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:11:05,495 [main:117] - GENERATED CALL = (Outer()).foo.endsWith(Outer().foo, true)
2021-03-12 02:11:05,495 [main:113] - Case = [public final val foo: kotlin.String defined in Outer[PropertyDescriptorImpl@18e3c5e1], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42b52fa3]]
2021-03-12 02:11:05,495 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42b52fa3]
2021-03-12 02:11:05,495 [main:117] - GENERATED CALL = (Outer()).foo.matches(Outer().foo)
2021-03-12 02:11:05,495 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Outer[DeserializedSimpleFunctionDescriptor@58a8859d], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@243f5f42]]
2021-03-12 02:11:05,495 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Outer[DeserializedSimpleFunctionDescriptor@58a8859d]
2021-03-12 02:11:05,603 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:11:05,603 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@243f5f42]
2021-03-12 02:11:05,604 [main:117] - GENERATED CALL = (Outer()).equals("pbyjp").not()
2021-03-12 02:11:05,604 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Outer[DeserializedSimpleFunctionDescriptor@58a8859d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@317f3713]]
2021-03-12 02:11:05,604 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Outer[DeserializedSimpleFunctionDescriptor@58a8859d]
2021-03-12 02:11:05,712 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:11:05,712 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@317f3713]
2021-03-12 02:11:05,836 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:11:05,836 [main:117] - GENERATED CALL = (Outer()).equals("ydgjd").equals("miysq")
2021-03-12 02:11:05,836 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Outer[DeserializedSimpleFunctionDescriptor@58a8859d], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@10418c7]]
2021-03-12 02:11:05,836 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Outer[DeserializedSimpleFunctionDescriptor@58a8859d]
2021-03-12 02:11:05,945 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:11:05,945 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@10418c7]
2021-03-12 02:11:06,053 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:11:06,055 [main:117] - GENERATED CALL = (Outer()).equals("ihugp").xor(true)
2021-03-12 02:11:06,055 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Outer[DeserializedSimpleFunctionDescriptor@58a8859d], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4e8bd556]]
2021-03-12 02:11:06,055 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Outer[DeserializedSimpleFunctionDescriptor@58a8859d]
2021-03-12 02:11:06,163 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:11:06,163 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4e8bd556]
2021-03-12 02:11:06,270 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:11:06,272 [main:117] - GENERATED CALL = (Outer()).equals("nuctw").and(true)
2021-03-12 02:11:06,272 [main:113] - Case = [public final val foo: kotlin.String defined in Outer[PropertyDescriptorImpl@18e3c5e1], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58d09a36]]
2021-03-12 02:11:06,273 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58d09a36]
2021-03-12 02:11:06,387 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:11:06,503 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:11:06,505 [main:117] - GENERATED CALL = (Outer()).foo.startsWith("viqee", true)
2021-03-12 02:11:06,505 [main:113] - Case = [public final val foo: kotlin.String defined in Outer[PropertyDescriptorImpl@18e3c5e1], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c8f0a08]]
2021-03-12 02:11:06,505 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c8f0a08]
2021-03-12 02:11:06,505 [main:117] - GENERATED CALL = (Outer()).foo.toBoolean()
2021-03-12 02:11:06,505 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Outer[DeserializedSimpleFunctionDescriptor@58a8859d], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@dae0597]]
2021-03-12 02:11:06,506 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Outer[DeserializedSimpleFunctionDescriptor@58a8859d]
2021-03-12 02:11:06,618 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:11:06,618 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@dae0597]
2021-03-12 02:11:06,727 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:11:06,729 [main:117] - GENERATED CALL = (Outer()).equals("idfgm").or(true)
2021-03-12 02:11:06,729 [main:113] - Case = [public final val foo: kotlin.String defined in Outer[PropertyDescriptorImpl@18e3c5e1], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4a314af]]
2021-03-12 02:11:06,729 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4a314af]
2021-03-12 02:11:06,839 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:11:06,839 [main:117] - GENERATED CALL = (Outer()).foo.equals("aqmnk")
2021-03-12 02:11:06,843 [main:114] - replacement of prope5 of type Boolean is (Outer()).foo.equals("aqmnk")
2021-03-12 02:11:06,953 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:11:06,953 [main:66] - Compilation checking started
2021-03-12 02:11:07,305 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if (r != "OKFoo") return "Fail: $r"

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {
    override suspend fun fu3(): Kla0 = Kla0("OK")

    suspend fun fu4(): Any {
        val r = Outer().result()
return Outer().result()
    }
}

fun box682(): String {
    val r = Outer().result()
var prope2: Any = "FAIL"
    fu0 {
        prope2 = r
    }
    if (prope2 != "OK") return (Outer().result()).drop(1022800463)

    return prope2 as String
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
"xumae"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
if ((r).isNotEmpty()) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val r = Outer().result()
if (c !is CoroutineStackFrame) error((r).removePrefix("gbldc"))
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true }?.let { TODO("gluxc")}
    }

    fun fu9(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Outer()).foo.toLowerCase())
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        val r = Outer().result()
prope4 = 0
        (Outer()).foo.equals("aqmnk") = false
        prope6 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false, { "qgmuh"})}

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (Outer().foo).compareTo("otlnl").equals("txejl")) {
        val r = Outer().result()
for (i in 1..(Kla2()).equals("fbxqf").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:11:07,307 [main:107] - replacing (prope5, Boolean)
2021-03-12 02:11:07,307 [main:50] - replacing prope5 Boolean
2021-03-12 02:11:07,307 [main:54] - Getting value of type Boolean
2021-03-12 02:11:07,420 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:11:07,422 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 02:11:07,422 [main:61] - GENERATED IS CALL =false
2021-03-12 02:11:07,427 [main:67] - randomType = String
2021-03-12 02:11:07,535 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:11:07,554 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d]
2021-03-12 02:11:07,663 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:07,774 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:07,776 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19d0ecf7]
2021-03-12 02:11:07,776 [main:78] - Generated call from random type = ("xwotd").subSequence(1240560806, 1700734095).any()
2021-03-12 02:11:07,777 [main:106] - GETTING Boolean from String
2021-03-12 02:11:07,796 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19d0ecf7]]
2021-03-12 02:11:07,796 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d]
2021-03-12 02:11:07,908 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:08,017 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:08,019 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19d0ecf7]
2021-03-12 02:11:08,019 [main:117] - GENERATED CALL = (r).subSequence(-540029269, 1803554963).any()
2021-03-12 02:11:08,019 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2fa4eab8]]
2021-03-12 02:11:08,020 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff]
2021-03-12 02:11:08,127 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:08,129 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2fa4eab8]
2021-03-12 02:11:08,129 [main:117] - GENERATED CALL = (r).get(1839432336).isUpperCase()
2021-03-12 02:11:08,129 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4a314af], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4e8bd556]]
2021-03-12 02:11:08,129 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4a314af]
2021-03-12 02:11:08,241 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:11:08,241 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4e8bd556]
2021-03-12 02:11:08,351 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:11:08,352 [main:117] - GENERATED CALL = (r).equals("mbzgj").and(false)
2021-03-12 02:11:08,353 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21927eec]]
2021-03-12 02:11:08,353 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff]
2021-03-12 02:11:08,465 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:08,467 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21927eec]
2021-03-12 02:11:08,591 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:11:08,701 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:11:08,703 [main:117] - GENERATED CALL = (r).get(1363549787).equals('헚', false)
2021-03-12 02:11:08,703 [main:113] - Case = [public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6df90f78]]
2021-03-12 02:11:08,703 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6df90f78]
2021-03-12 02:11:08,812 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:11:08,921 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:11:08,923 [main:117] - GENERATED CALL = (r).contains('⽥', true)
2021-03-12 02:11:08,923 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4a314af]]
2021-03-12 02:11:08,923 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4a314af]
2021-03-12 02:11:09,030 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:11:09,031 [main:117] - GENERATED CALL = (r).equals("dbgzg")
2021-03-12 02:11:09,031 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52eee71f]]
2021-03-12 02:11:09,031 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff]
2021-03-12 02:11:09,141 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:09,142 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52eee71f]
2021-03-12 02:11:09,143 [main:117] - GENERATED CALL = (r).get(-992069078).isSurrogate()
2021-03-12 02:11:09,143 [main:113] - Case = [public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a6cb7a9]]
2021-03-12 02:11:09,143 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a6cb7a9]
2021-03-12 02:11:09,143 [main:117] - GENERATED CALL = (r).isBlank()
2021-03-12 02:11:09,143 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4db11819]]
2021-03-12 02:11:09,143 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4db11819]
2021-03-12 02:11:09,143 [main:117] - GENERATED CALL = (r).isNotEmpty()
2021-03-12 02:11:09,143 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ec7c1f1]]
2021-03-12 02:11:09,143 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff]
2021-03-12 02:11:09,257 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:09,259 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ec7c1f1]
2021-03-12 02:11:09,259 [main:117] - GENERATED CALL = (r).get(-1175037390).isLetter()
2021-03-12 02:11:09,259 [main:114] - replacement of prope5 of type Boolean is true
2021-03-12 02:11:09,368 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-12 02:11:09,368 [main:66] - Compilation checking started
2021-03-12 02:11:09,687 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if (r != "OKFoo") return "Fail: $r"

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {
    override suspend fun fu3(): Kla0 = Kla0("OK")

    suspend fun fu4(): Any {
        val r = Outer().result()
return Outer().result()
    }
}

fun box682(): String {
    val r = Outer().result()
var prope2: Any = "FAIL"
    fu0 {
        prope2 = r
    }
    if (prope2 != "OK") return (Outer().result()).drop(1022800463)

    return prope2 as String
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
"xumae"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
if ((r).isNotEmpty()) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val r = Outer().result()
if (c !is CoroutineStackFrame) error((r).removePrefix("gbldc"))
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true }?.let { TODO("gluxc")}
    }

    fun fu9(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Outer()).foo.toLowerCase())
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        val r = Outer().result()
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false, { "qgmuh"})}

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (Outer().foo).compareTo("otlnl").equals("txejl")) {
        val r = Outer().result()
for (i in 1..(Kla2()).equals("fbxqf").compareTo(true)) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val r = Outer().result()
prope1.prope6 = {
            prope1.true = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:11:09,688 [main:107] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got ", String)
2021-03-12 02:11:09,688 [main:50] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " String
2021-03-12 02:11:09,689 [main:54] - Getting value of type String
2021-03-12 02:11:09,804 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:11:09,805 [main:58] - GENERATED VALUE OF TYPE String = "xbcba"
2021-03-12 02:11:09,806 [main:61] - GENERATED IS CALL =false
2021-03-12 02:11:09,927 [main:67] - randomType = Float
2021-03-12 02:11:10,039 [main:302] - generating value of type = Float true depth = 0
2021-03-12 02:11:10,094 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@33e607da]
2021-03-12 02:11:10,204 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 02:11:10,205 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49f0c862]
2021-03-12 02:11:10,316 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:10,318 [main:78] - Generated call from random type = (0.5571683f).compareTo(123).toString(-449895545)
2021-03-12 02:11:10,318 [main:106] - GETTING String from String
2021-03-12 02:11:10,342 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26c9f80b]]
2021-03-12 02:11:10,342 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d]
2021-03-12 02:11:10,459 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:10,571 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:10,573 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@26c9f80b]
2021-03-12 02:11:10,685 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 02:11:10,801 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 02:11:10,804 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 02:11:11,167 [main:302] - generating value of type = String true depth = 3
2021-03-12 02:11:11,169 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 02:11:11,172 [main:95] - GENERATED = Regex("qlbnl", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 02:11:11,281 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 02:11:11,283 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 02:11:11,287 [main:117] - GENERATED CALL = (Outer().result()).subSequence(1596862767, 880292850).replace(Regex("qlbnl", kotlin.text.RegexOption.IGNORE_CASE), {a: MatchResult -> "vsvnw"})
2021-03-12 02:11:11,287 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9c4835b]]
2021-03-12 02:11:11,287 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9c4835b]
2021-03-12 02:11:11,287 [main:117] - GENERATED CALL = (Outer().result()).trimStart()
2021-03-12 02:11:11,288 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3836e47]]
2021-03-12 02:11:11,288 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3836e47]
2021-03-12 02:11:11,397 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 02:11:11,509 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 02:11:11,511 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 02:11:11,814 [main:302] - generating value of type = String true depth = 3
2021-03-12 02:11:11,816 [main:95] - GENERATED = StringBuilder("pfpsu")
2021-03-12 02:11:11,816 [main:117] - GENERATED CALL = (Outer().result()).removeSurrounding(StringBuilder("pfpsu"))
2021-03-12 02:11:11,816 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a8ca87c]]
2021-03-12 02:11:11,817 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a8ca87c]
2021-03-12 02:11:11,817 [main:117] - GENERATED CALL = (Outer().result()).toLowerCase()
2021-03-12 02:11:11,817 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10048bd9], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49f0c862]]
2021-03-12 02:11:11,817 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10048bd9]
2021-03-12 02:11:11,817 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49f0c862]
2021-03-12 02:11:11,925 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:11,927 [main:117] - GENERATED CALL = (Outer().result()).compareTo(val r = Outer().result().toString(-2091903870)
2021-03-12 02:11:11,927 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@69d7e75d], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49f0c862]]
2021-03-12 02:11:11,927 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49f0c862]
2021-03-12 02:11:12,040 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:12,042 [main:117] - GENERATED CALL = (Outer().result()).length.toString(-1088513642)
2021-03-12 02:11:12,042 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68bd8fe9]]
2021-03-12 02:11:12,042 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68bd8fe9]
2021-03-12 02:11:12,155 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 02:11:12,156 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 02:11:12,158 [main:117] - GENERATED CALL = (Outer().result()).filterNot({a: Char -> false})
2021-03-12 02:11:12,158 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1df89f02]]
2021-03-12 02:11:12,158 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1df89f02]
2021-03-12 02:11:12,267 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:11:12,269 [main:117] - GENERATED CALL = (Outer().result()).substringAfterLast('叚', r)
2021-03-12 02:11:12,269 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32296d67]]
2021-03-12 02:11:12,269 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32296d67]
2021-03-12 02:11:12,380 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:12,382 [main:117] - GENERATED CALL = (Outer().result()).dropLast(325459069)
2021-03-12 02:11:12,382 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bc5531b]]
2021-03-12 02:11:12,382 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bc5531b]
2021-03-12 02:11:12,492 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:12,600 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:11:12,602 [main:117] - GENERATED CALL = (Outer().result()).padEnd(-318836683, '')
2021-03-12 02:11:12,602 [main:114] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " of type String is (Outer().result()).toLowerCase()
2021-03-12 02:11:12,736 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:11:12,737 [main:66] - Compilation checking started
2021-03-12 02:11:13,263 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if (r != "OKFoo") return "Fail: $r"

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {
    override suspend fun fu3(): Kla0 = Kla0("OK")

    suspend fun fu4(): Any {
        val r = Outer().result()
return Outer().result()
    }
}

fun box682(): String {
    val r = Outer().result()
var prope2: Any = "FAIL"
    fu0 {
        prope2 = r
    }
    if (prope2 != "OK") return (Outer().result()).drop(1022800463)

    return prope2 as String
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
"xumae"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
if ((r).isNotEmpty()) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val r = Outer().result()
if (c !is CoroutineStackFrame) error((r).removePrefix("gbldc"))
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true }?.let { TODO("gluxc")}
    }

    fun fu9(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Outer()).foo.toLowerCase())
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        val r = Outer().result()
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false, { "qgmuh"})}

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (Outer().foo).compareTo("otlnl").equals("txejl")) {
        val r = Outer().result()
for (i in 1..(Kla2()).equals("fbxqf").compareTo(true)) {
            if (prope4 != i) error((Outer().result()).toLowerCase() + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val r = Outer().result()
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:11:13,265 [main:107] - replacing (prope4, Int)
2021-03-12 02:11:13,266 [main:50] - replacing prope4 Int
2021-03-12 02:11:13,266 [main:54] - Getting value of type Int
2021-03-12 02:11:13,382 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:13,384 [main:58] - GENERATED VALUE OF TYPE Int = 1837862103
2021-03-12 02:11:13,384 [main:61] - GENERATED IS CALL =false
2021-03-12 02:11:13,506 [main:67] - randomType = Float
2021-03-12 02:11:13,625 [main:302] - generating value of type = Float true depth = 0
2021-03-12 02:11:13,671 [main:149] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@4a469ef3]
2021-03-12 02:11:13,671 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@102b7e0b]
2021-03-12 02:11:13,780 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 02:11:13,782 [main:78] - Generated call from random type = (0.72933626f).toByte().minus(97)
2021-03-12 02:11:13,783 [main:106] - GETTING Int from String
2021-03-12 02:11:13,800 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10048bd9], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5b2ebfe5]]
2021-03-12 02:11:13,800 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10048bd9]
2021-03-12 02:11:13,800 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5b2ebfe5]
2021-03-12 02:11:13,800 [main:117] - GENERATED CALL = (Outer().foo).compareTo(Outer().result()).inc()
2021-03-12 02:11:13,801 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@69d7e75d], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3586461a]]
2021-03-12 02:11:13,801 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3586461a]
2021-03-12 02:11:13,801 [main:117] - GENERATED CALL = (Outer().foo).length.dec()
2021-03-12 02:11:13,801 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4a314af], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@470dd6a4]]
2021-03-12 02:11:13,801 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4a314af]
2021-03-12 02:11:13,910 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:11:13,911 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@470dd6a4]
2021-03-12 02:11:14,028 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:11:14,030 [main:117] - GENERATED CALL = (Outer().foo).equals("oucbe").compareTo(false)
2021-03-12 02:11:14,030 [main:113] - Case = [public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b2620c]]
2021-03-12 02:11:14,030 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b2620c]
2021-03-12 02:11:14,157 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 02:11:14,270 [main:43] - GENERATING CALL OF fun CharArray(size: kotlin.Int, init: (kotlin.Int)->kotlin.Char): CharArray = TODO()
2021-03-12 02:11:14,273 [main:61] - WITHOUT TYPE PARAMS = fun CharArray(size: kotlin.Int, init: (kotlin.Int)->kotlin.Char): CharArray = TODO()
2021-03-12 02:11:14,628 [main:302] - generating value of type = Int true depth = 3
2021-03-12 02:11:14,630 [main:302] - generating value of type = Function1<Int, Char> false depth = 3
2021-03-12 02:11:14,631 [main:302] - generating value of type = Char true depth = 4
2021-03-12 02:11:14,633 [main:95] - GENERATED = CharArray(-2136501531, {a: Int -> '쨝'})
2021-03-12 02:11:14,742 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:14,850 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:11:14,852 [main:117] - GENERATED CALL = (Outer().foo).indexOfAny(CharArray(-2136501531, {a: Int -> '쨝'}), 1844423280, true)
2021-03-12 02:11:14,852 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10048bd9], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2540410e]]
2021-03-12 02:11:14,852 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10048bd9]
2021-03-12 02:11:14,852 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2540410e]
2021-03-12 02:11:14,853 [main:117] - GENERATED CALL = (Outer().foo).compareTo(val r = Outer().result().takeHighestOneBit()
2021-03-12 02:11:14,853 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10048bd9], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@558e1c99]]
2021-03-12 02:11:14,853 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10048bd9]
2021-03-12 02:11:14,853 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@558e1c99]
2021-03-12 02:11:14,960 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 02:11:14,962 [main:117] - GENERATED CALL = (Outer().foo).compareTo(val r = Outer().result().compareTo(59)
2021-03-12 02:11:14,962 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@69d7e75d], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1a1a977f]]
2021-03-12 02:11:14,962 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1a1a977f]
2021-03-12 02:11:15,069 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 02:11:15,071 [main:117] - GENERATED CALL = (Outer().foo).length.times(-40)
2021-03-12 02:11:15,071 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@576801d2]]
2021-03-12 02:11:15,071 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d]
2021-03-12 02:11:15,179 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:15,312 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:15,314 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@576801d2]
2021-03-12 02:11:15,314 [main:117] - GENERATED CALL = (Outer().foo).subSequence(-1098895342, -1266921897).count()
2021-03-12 02:11:15,314 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@69d7e75d], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@53a858b0]]
2021-03-12 02:11:15,314 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@53a858b0]
2021-03-12 02:11:15,438 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:15,549 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:15,551 [main:117] - GENERATED CALL = (Outer().foo).length.coerceIn(1087881741, -1071337138)
2021-03-12 02:11:15,551 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10048bd9], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@52907b1e]]
2021-03-12 02:11:15,551 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10048bd9]
2021-03-12 02:11:15,659 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:11:15,661 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@52907b1e]
2021-03-12 02:11:15,769 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:15,771 [main:117] - GENERATED CALL = (Outer().foo).compareTo("zvlcn").or(-1994017830)
2021-03-12 02:11:15,771 [main:114] - replacement of prope4 of type Int is (Outer().foo).equals("oucbe").compareTo(false)
2021-03-12 02:11:15,880 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:11:15,880 [main:66] - Compilation checking started
2021-03-12 02:11:16,351 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if (r != "OKFoo") return "Fail: $r"

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {
    override suspend fun fu3(): Kla0 = Kla0("OK")

    suspend fun fu4(): Any {
        val r = Outer().result()
return Outer().result()
    }
}

fun box682(): String {
    val r = Outer().result()
var prope2: Any = "FAIL"
    fu0 {
        prope2 = r
    }
    if (prope2 != "OK") return (Outer().result()).drop(1022800463)

    return prope2 as String
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
"xumae"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
if ((r).isNotEmpty()) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val r = Outer().result()
if (c !is CoroutineStackFrame) error((r).removePrefix("gbldc"))
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true }?.let { TODO("gluxc")}
    }

    fun fu9(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Outer()).foo.toLowerCase())
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        val r = Outer().result()
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false, { "qgmuh"})}

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (Outer().foo).compareTo("otlnl").equals("txejl")) {
        val r = Outer().result()
for (i in 1..(Kla2()).equals("fbxqf").compareTo(true)) {
            if ((Outer().foo).equals("oucbe").compareTo(false) != i) error((Outer().result()).toLowerCase() + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val r = Outer().result()
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:11:16,353 [main:107] - replacing (prope2.getOrThrow(), Ty0)
2021-03-12 02:11:16,353 [main:50] - replacing prope2.getOrThrow() Ty0
2021-03-12 02:11:16,353 [main:54] - Getting value of type Ty0
2021-03-12 02:11:16,466 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 02:11:16,471 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 02:11:16,737 [main:67] - randomType = Array<ULong>
2021-03-12 02:11:16,845 [main:302] - generating value of type = Array<ULong> false depth = 0
2021-03-12 02:11:16,958 [main:43] - GENERATING CALL OF fun <T> arrayOfNulls(size: kotlin.Int): Array<ULong> = TODO()
2021-03-12 02:11:16,960 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOfNulls(size: kotlin.Int): Array<ULong> = TODO()
2021-03-12 02:11:17,195 [main:302] - generating value of type = Int true depth = 3
2021-03-12 02:11:17,197 [main:95] - GENERATED = arrayOfNulls<ULong>(1708285861)
2021-03-12 02:11:17,209 [main:106] - GETTING Ty0 from String
2021-03-12 02:11:17,226 [main:106] - GETTING Ty0 from Outer
2021-03-12 02:11:17,230 [main:106] - GETTING Ty0 from String
2021-03-12 02:11:17,231 [main:106] - GETTING Ty0 from String
2021-03-12 02:11:17,231 [main:111] - Cant find and generate replacement for prope2.getOrThrow() type Ty0
2021-03-12 02:11:17,231 [main:107] - replacing (prope2.getOrThrow(), Any?)
2021-03-12 02:11:17,231 [main:50] - replacing prope2.getOrThrow() Any?
2021-03-12 02:11:17,231 [main:54] - Getting value of type Any?
2021-03-12 02:11:17,342 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:11:17,342 [main:58] - GENERATED VALUE OF TYPE Any? = "uznmt"
2021-03-12 02:11:17,342 [main:61] - GENERATED IS CALL =false
2021-03-12 02:11:17,601 [main:67] - randomType = Set<Byte>
2021-03-12 02:11:17,602 [main:106] - GETTING Any? from Outer
2021-03-12 02:11:17,607 [main:106] - GETTING Any? from String
2021-03-12 02:11:17,624 [main:106] - GETTING Any? from String
2021-03-12 02:11:17,625 [main:106] - GETTING Any? from String
2021-03-12 02:11:17,625 [main:114] - replacement of prope2.getOrThrow() of type Any? is "uznmt"
2021-03-12 02:11:17,736 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 02:11:17,736 [main:66] - Compilation checking started
2021-03-12 02:11:18,247 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if (r != "OKFoo") return "Fail: $r"

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {
    override suspend fun fu3(): Kla0 = Kla0("OK")

    suspend fun fu4(): Any {
        val r = Outer().result()
return Outer().result()
    }
}

fun box682(): String {
    val r = Outer().result()
var prope2: Any = "FAIL"
    fu0 {
        prope2 = r
    }
    if (prope2 != "OK") return (Outer().result()).drop(1022800463)

    return prope2 as String
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
"xumae"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
this.prope2 = "uznmt"
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
if ((r).isNotEmpty()) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val r = Outer().result()
if (c !is CoroutineStackFrame) error((r).removePrefix("gbldc"))
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true }?.let { TODO("gluxc")}
    }

    fun fu9(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Outer()).foo.toLowerCase())
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        val r = Outer().result()
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false, { "qgmuh"})}

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (Outer().foo).compareTo("otlnl").equals("txejl")) {
        val r = Outer().result()
for (i in 1..(Kla2()).equals("fbxqf").compareTo(true)) {
            if ((Outer().foo).equals("oucbe").compareTo(false) != i) error((Outer().result()).toLowerCase() + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val r = Outer().result()
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:11:18,248 [main:107] - replacing (prope2, Any)
2021-03-12 02:11:18,249 [main:50] - replacing prope2 Any
2021-03-12 02:11:18,249 [main:54] - Getting value of type Any
2021-03-12 02:11:18,360 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:11:18,360 [main:58] - GENERATED VALUE OF TYPE Any = "kywto"
2021-03-12 02:11:18,360 [main:61] - GENERATED IS CALL =false
2021-03-12 02:11:18,485 [main:67] - randomType = Kla6?
2021-03-12 02:11:18,593 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 02:11:18,595 [main:112] - generating klass Kla6 text = class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val r = Outer().result()
if (c !is CoroutineStackFrame) error((r).removePrefix("gbldc"))
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true }?.let { TODO("gluxc")}
    }

    fun fu9(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Outer()).foo.toLowerCase())
    }
}
2021-03-12 02:11:18,603 [main:106] - GETTING Any from Outer
2021-03-12 02:11:18,609 [main:106] - GETTING Any from String
2021-03-12 02:11:18,634 [main:114] - replacement of prope2 of type Any is "kywto"
2021-03-12 02:11:18,744 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 02:11:18,745 [main:66] - Compilation checking started
2021-03-12 02:11:19,238 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if (r != "OKFoo") return "Fail: $r"

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {
    override suspend fun fu3(): Kla0 = Kla0("OK")

    suspend fun fu4(): Any {
        val r = Outer().result()
return Outer().result()
    }
}

fun box682(): String {
    val r = Outer().result()
var prope2: Any = "FAIL"
    fu0 {
        prope2 = r
    }
    if ("kywto" != "OK") return (Outer().result()).drop(1022800463)

    return prope2 as String
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
"xumae"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
this.prope2 = "uznmt"
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
if ((r).isNotEmpty()) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val r = Outer().result()
if (c !is CoroutineStackFrame) error((r).removePrefix("gbldc"))
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true }?.let { TODO("gluxc")}
    }

    fun fu9(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Outer()).foo.toLowerCase())
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        val r = Outer().result()
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false, { "qgmuh"})}

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (Outer().foo).compareTo("otlnl").equals("txejl")) {
        val r = Outer().result()
for (i in 1..(Kla2()).equals("fbxqf").compareTo(true)) {
            if ((Outer().foo).equals("oucbe").compareTo(false) != i) error((Outer().result()).toLowerCase() + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val r = Outer().result()
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:11:19,239 [main:107] - replacing (false, Boolean)
2021-03-12 02:11:19,240 [main:50] - replacing false Boolean
2021-03-12 02:11:19,240 [main:54] - Getting value of type Boolean
2021-03-12 02:11:19,353 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:11:19,355 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 02:11:19,355 [main:61] - GENERATED IS CALL =false
2021-03-12 02:11:19,731 [main:67] - randomType = ArrayDeque<LinkedHashSet<Long>>
2021-03-12 02:11:19,858 [main:302] - generating value of type = ArrayDeque<LinkedHashSet<Long>> false depth = 0
2021-03-12 02:11:19,973 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<LinkedHashSet<Long>> = TODO()
2021-03-12 02:11:19,976 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<LinkedHashSet<Long>> = TODO()
2021-03-12 02:11:20,208 [main:302] - generating value of type = Int true depth = 3
2021-03-12 02:11:20,210 [main:95] - GENERATED = ArrayDeque<LinkedHashSet<Long>>(-1666542363)
2021-03-12 02:11:20,379 [main:149] - GENERATING call of type public final fun firstOrNull(): kotlin.collections.LinkedHashSet<kotlin.Long>? defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@39a86ad9]
2021-03-12 02:11:20,379 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@5963e356]
2021-03-12 02:11:20,491 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:11:20,491 [main:78] - Generated call from random type = (ArrayDeque<LinkedHashSet<Long>>(-1666542363)).firstOrNull()?.equals("ayifa")!!
2021-03-12 02:11:20,491 [main:114] - replacement of false of type Boolean is (ArrayDeque<LinkedHashSet<Long>>(-1666542363)).firstOrNull()?.equals("ayifa")!!
2021-03-12 02:11:20,598 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(POSTFIX_EXPRESSION)
2021-03-12 02:11:20,599 [main:66] - Compilation checking started
2021-03-12 02:11:21,150 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if (r != "OKFoo") return "Fail: $r"

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {
    override suspend fun fu3(): Kla0 = Kla0("OK")

    suspend fun fu4(): Any {
        val r = Outer().result()
return Outer().result()
    }
}

fun box682(): String {
    val r = Outer().result()
var prope2: Any = "FAIL"
    fu0 {
        prope2 = r
    }
    if ("kywto" != "OK") return (Outer().result()).drop(1022800463)

    return prope2 as String
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
"xumae"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
this.prope2 = "uznmt"
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
if ((r).isNotEmpty()) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val r = Outer().result()
if (c !is CoroutineStackFrame) error((r).removePrefix("gbldc"))
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true }?.let { TODO("gluxc")}
    }

    fun fu9(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Outer()).foo.toLowerCase())
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        val r = Outer().result()
prope4 = 0
        prope5 = (ArrayDeque<LinkedHashSet<Long>>(-1666542363)).firstOrNull()?.equals("ayifa")!!
        prope6 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false, { "qgmuh"})}

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (Outer().foo).compareTo("otlnl").equals("txejl")) {
        val r = Outer().result()
for (i in 1..(Kla2()).equals("fbxqf").compareTo(true)) {
            if ((Outer().foo).equals("oucbe").compareTo(false) != i) error((Outer().result()).toLowerCase() + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val r = Outer().result()
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:11:21,152 [main:107] - replacing (i, Int)
2021-03-12 02:11:21,152 [main:50] - replacing i Int
2021-03-12 02:11:21,152 [main:54] - Getting value of type Int
2021-03-12 02:11:21,294 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:21,296 [main:58] - GENERATED VALUE OF TYPE Int = -358770833
2021-03-12 02:11:21,296 [main:61] - GENERATED IS CALL =false
2021-03-12 02:11:21,464 [main:67] - randomType = Function1<String, String>
2021-03-12 02:11:21,465 [main:106] - GETTING Int from Outer
2021-03-12 02:11:21,471 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Outer[DeserializedSimpleFunctionDescriptor@58a8859d], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@470dd6a4]]
2021-03-12 02:11:21,471 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Outer[DeserializedSimpleFunctionDescriptor@58a8859d]
2021-03-12 02:11:21,592 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:11:21,592 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@470dd6a4]
2021-03-12 02:11:21,717 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:11:21,719 [main:117] - GENERATED CALL = (Outer()).equals("rxnzl").compareTo(true)
2021-03-12 02:11:21,720 [main:113] - Case = [public final val foo: kotlin.String defined in Outer[PropertyDescriptorImpl@18e3c5e1], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50b59aef]]
2021-03-12 02:11:21,720 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50b59aef]
2021-03-12 02:11:21,720 [main:117] - GENERATED CALL = (Outer()).foo.toInt()
2021-03-12 02:11:21,720 [main:113] - Case = [public final val foo: kotlin.String defined in Outer[PropertyDescriptorImpl@18e3c5e1], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@69d7e75d]]
2021-03-12 02:11:21,720 [main:117] - GENERATED CALL = (Outer()).foo.length
2021-03-12 02:11:21,720 [main:113] - Case = [public final val foo: kotlin.String defined in Outer[PropertyDescriptorImpl@18e3c5e1], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a8ad80d]]
2021-03-12 02:11:21,720 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a8ad80d]
2021-03-12 02:11:21,834 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:11:21,836 [main:117] - GENERATED CALL = (Outer()).foo.compareTo(Outer().foo, false)
2021-03-12 02:11:21,836 [main:114] - replacement of i of type Int is -358770833
2021-03-12 02:11:21,947 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 02:11:21,947 [main:66] - Compilation checking started
2021-03-12 02:11:22,518 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if (r != "OKFoo") return "Fail: $r"

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {
    override suspend fun fu3(): Kla0 = Kla0("OK")

    suspend fun fu4(): Any {
        val r = Outer().result()
return Outer().result()
    }
}

fun box682(): String {
    val r = Outer().result()
var prope2: Any = "FAIL"
    fu0 {
        prope2 = r
    }
    if ("kywto" != "OK") return (Outer().result()).drop(1022800463)

    return prope2 as String
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
"xumae"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
this.prope2 = "uznmt"
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
if ((r).isNotEmpty()) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val r = Outer().result()
if (c !is CoroutineStackFrame) error((r).removePrefix("gbldc"))
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true }?.let { TODO("gluxc")}
    }

    fun fu9(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Outer()).foo.toLowerCase())
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        val r = Outer().result()
prope4 = 0
        prope5 = (ArrayDeque<LinkedHashSet<Long>>(-1666542363)).firstOrNull()?.equals("ayifa")!!
        prope6 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false, { "qgmuh"})}

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (Outer().foo).compareTo("otlnl").equals("txejl")) {
        val r = Outer().result()
for (i in 1..(Kla2()).equals("fbxqf").compareTo(true)) {
            if ((Outer().foo).equals("oucbe").compareTo(false) != -358770833) error((Outer().result()).toLowerCase() + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val r = Outer().result()
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:11:22,520 [main:107] - replacing (prope5, Boolean)
2021-03-12 02:11:22,521 [main:50] - replacing prope5 Boolean
2021-03-12 02:11:22,521 [main:54] - Getting value of type Boolean
2021-03-12 02:11:22,674 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:11:22,677 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 02:11:22,677 [main:61] - GENERATED IS CALL =false
2021-03-12 02:11:22,813 [main:67] - randomType = Int?
2021-03-12 02:11:22,926 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:22,959 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ddf31cd]
2021-03-12 02:11:23,070 [main:302] - generating value of type = Double true depth = 0
2021-03-12 02:11:23,072 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@60ea4f61]
2021-03-12 02:11:23,072 [main:78] - Generated call from random type = (-1184999276)?.div(0.7505872341657672).isFinite()
2021-03-12 02:11:23,073 [main:106] - GETTING Boolean from String
2021-03-12 02:11:23,090 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a79276b]]
2021-03-12 02:11:23,090 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff]
2021-03-12 02:11:23,221 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:23,223 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a79276b]
2021-03-12 02:11:23,223 [main:117] - GENERATED CALL = (r).get(-1825792831).isDefined()
2021-03-12 02:11:23,223 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@727c8270]]
2021-03-12 02:11:23,223 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff]
2021-03-12 02:11:23,343 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:23,345 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@727c8270]
2021-03-12 02:11:23,346 [main:117] - GENERATED CALL = (r).get(2019472730).isISOControl()
2021-03-12 02:11:23,346 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4a314af], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4e8bd556]]
2021-03-12 02:11:23,346 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4a314af]
2021-03-12 02:11:23,461 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:11:23,461 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4e8bd556]
2021-03-12 02:11:23,576 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:11:23,579 [main:117] - GENERATED CALL = (r).equals("yoamh").and(false)
2021-03-12 02:11:23,579 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d], public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74e0785b]]
2021-03-12 02:11:23,579 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d]
2021-03-12 02:11:23,697 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:23,810 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:23,812 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74e0785b]
2021-03-12 02:11:23,922 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 02:11:23,924 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 02:11:23,926 [main:117] - GENERATED CALL = (r).subSequence(-1606018449, -1314019740).all({a: Char -> true})
2021-03-12 02:11:23,926 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a6cb7a9]]
2021-03-12 02:11:23,926 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d]
2021-03-12 02:11:24,036 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:24,147 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:24,149 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a6cb7a9]
2021-03-12 02:11:24,149 [main:117] - GENERATED CALL = (r).subSequence(-1579497814, 1476817240).isBlank()
2021-03-12 02:11:24,149 [main:113] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58d09a36]]
2021-03-12 02:11:24,149 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58d09a36]
2021-03-12 02:11:24,260 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:11:24,262 [main:117] - GENERATED CALL = (r).startsWith(val r = Outer().result()
2021-03-12 02:11:24,262 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58964c07]]
2021-03-12 02:11:24,262 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff]
2021-03-12 02:11:24,372 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:24,374 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58964c07]
2021-03-12 02:11:24,374 [main:117] - GENERATED CALL = (r).get(-737109968).isDigit()
2021-03-12 02:11:24,374 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10048bd9], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7bbaa3cd]]
2021-03-12 02:11:24,374 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10048bd9]
2021-03-12 02:11:24,374 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7bbaa3cd]
2021-03-12 02:11:24,487 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:11:24,487 [main:117] - GENERATED CALL = (r).compareTo(Outer().foo).equals("uamos")
2021-03-12 02:11:24,487 [main:113] - Case = [public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@111539f0]]
2021-03-12 02:11:24,487 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@111539f0]
2021-03-12 02:11:24,628 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:24,762 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 02:11:24,879 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:24,991 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:25,106 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:11:25,109 [main:117] - GENERATED CALL = (r).regionMatches(402431148, "yucvw", -115726749, -1566896698, false)
2021-03-12 02:11:25,109 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@69d7e75d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7bbaa3cd]]
2021-03-12 02:11:25,110 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7bbaa3cd]
2021-03-12 02:11:25,225 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:11:25,225 [main:117] - GENERATED CALL = (r).length.equals("tzvuy")
2021-03-12 02:11:25,225 [main:114] - replacement of prope5 of type Boolean is (r).get(-737109968).isDigit()
2021-03-12 02:11:25,334 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:11:25,335 [main:66] - Compilation checking started
2021-03-12 02:11:25,891 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if (r != "OKFoo") return "Fail: $r"

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {
    override suspend fun fu3(): Kla0 = Kla0("OK")

    suspend fun fu4(): Any {
        val r = Outer().result()
return Outer().result()
    }
}

fun box682(): String {
    val r = Outer().result()
var prope2: Any = "FAIL"
    fu0 {
        prope2 = r
    }
    if ("kywto" != "OK") return (Outer().result()).drop(1022800463)

    return prope2 as String
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
"xumae"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
this.prope2 = "uznmt"
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
if ((r).isNotEmpty()) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val r = Outer().result()
if (c !is CoroutineStackFrame) error((r).removePrefix("gbldc"))
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true }?.let { TODO("gluxc")}
    }

    fun fu9(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Outer()).foo.toLowerCase())
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        val r = Outer().result()
prope4 = 0
        prope5 = (ArrayDeque<LinkedHashSet<Long>>(-1666542363)).firstOrNull()?.equals("ayifa")!!
        prope6 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false, { "qgmuh"})}

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (Outer().foo).compareTo("otlnl").equals("txejl")) {
        val r = Outer().result()
for (i in 1..(Kla2()).equals("fbxqf").compareTo(true)) {
            if ((Outer().foo).equals("oucbe").compareTo(false) != -358770833) error((Outer().result()).toLowerCase() + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((r).get(-737109968).isDigit()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val r = Outer().result()
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:11:25,893 [main:107] - replacing (getOrThrow(), Ty0)
2021-03-12 02:11:25,893 [main:50] - replacing getOrThrow() Ty0
2021-03-12 02:11:25,894 [main:54] - Getting value of type Ty0
2021-03-12 02:11:26,030 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 02:11:26,034 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 02:11:26,162 [main:67] - randomType = Float
2021-03-12 02:11:26,293 [main:302] - generating value of type = Float true depth = 0
2021-03-12 02:11:26,328 [main:106] - GETTING Ty0 from String
2021-03-12 02:11:26,344 [main:106] - GETTING Ty0 from String
2021-03-12 02:11:26,345 [main:106] - GETTING Ty0 from Outer
2021-03-12 02:11:26,349 [main:106] - GETTING Ty0 from String
2021-03-12 02:11:26,349 [main:111] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-12 02:11:26,349 [main:107] - replacing (1, Int)
2021-03-12 02:11:26,350 [main:50] - replacing 1 Int
2021-03-12 02:11:26,350 [main:54] - Getting value of type Int
2021-03-12 02:11:26,460 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:26,462 [main:58] - GENERATED VALUE OF TYPE Int = 26117114
2021-03-12 02:11:26,462 [main:61] - GENERATED IS CALL =false
2021-03-12 02:11:26,593 [main:67] - randomType = ArrayList<Int>
2021-03-12 02:11:26,712 [main:302] - generating value of type = ArrayList<Int> false depth = 0
2021-03-12 02:11:26,828 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Int): ArrayList<Int> = TODO()
2021-03-12 02:11:26,830 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Int): ArrayList<Int> = TODO()
2021-03-12 02:11:26,945 [main:302] - generating value of type = Int true depth = 3
2021-03-12 02:11:26,947 [main:95] - GENERATED = arrayListOf<Int>(1099511879)
2021-03-12 02:11:27,058 [main:149] - GENERATING call of type public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.Int> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@bcbabab]
2021-03-12 02:11:27,171 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:27,283 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:27,285 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun <T> kotlin.collections.MutableList<T>.removeLastOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@68e71dca]
2021-03-12 02:11:27,286 [main:78] - Generated call from random type = (arrayListOf<Int>(1099511879)).subList(-323593058, 486169413).removeLastOrNull()!!
2021-03-12 02:11:27,286 [main:106] - GETTING Int from String
2021-03-12 02:11:27,303 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10048bd9], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6be6d315]]
2021-03-12 02:11:27,303 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10048bd9]
2021-03-12 02:11:27,417 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:11:27,419 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6be6d315]
2021-03-12 02:11:27,532 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:27,534 [main:117] - GENERATED CALL = (r).compareTo("vrlyw").and(1799490662)
2021-03-12 02:11:27,534 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@69d7e75d], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@41bb9bf6]]
2021-03-12 02:11:27,534 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@41bb9bf6]
2021-03-12 02:11:27,644 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:27,646 [main:117] - GENERATED CALL = (r).length.coerceAtMost(1653894765)
2021-03-12 02:11:27,646 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d], public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@589c3148]]
2021-03-12 02:11:27,646 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d]
2021-03-12 02:11:27,782 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:27,895 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:27,897 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@589c3148]
2021-03-12 02:11:28,012 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 02:11:28,014 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 02:11:28,016 [main:117] - GENERATED CALL = (r).subSequence(2047847215, -151884314).indexOfLast({a: Char -> false})
2021-03-12 02:11:28,016 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10048bd9], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3835302c]]
2021-03-12 02:11:28,016 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10048bd9]
2021-03-12 02:11:28,126 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:11:28,127 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3835302c]
2021-03-12 02:11:28,128 [main:117] - GENERATED CALL = (r).compareTo("olafs").toInt()
2021-03-12 02:11:28,128 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10048bd9], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@393830f3]]
2021-03-12 02:11:28,128 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10048bd9]
2021-03-12 02:11:28,128 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@393830f3]
2021-03-12 02:11:28,237 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 02:11:28,239 [main:117] - GENERATED CALL = (r).compareTo(Outer().foo).rem(95)
2021-03-12 02:11:28,239 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4a314af], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@470dd6a4]]
2021-03-12 02:11:28,240 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4a314af]
2021-03-12 02:11:28,349 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:11:28,350 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@470dd6a4]
2021-03-12 02:11:28,460 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:11:28,462 [main:117] - GENERATED CALL = (r).equals("funjg").compareTo(true)
2021-03-12 02:11:28,462 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10048bd9], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@631f3dce]]
2021-03-12 02:11:28,462 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10048bd9]
2021-03-12 02:11:28,572 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:11:28,574 [main:117] - GENERATED CALL = (r).compareTo("ikylv").absoluteValue
2021-03-12 02:11:28,574 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@69d7e75d], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2c8f94f6]]
2021-03-12 02:11:28,574 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2c8f94f6]
2021-03-12 02:11:28,575 [main:117] - GENERATED CALL = (r).length.countLeadingZeroBits()
2021-03-12 02:11:28,575 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d], @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33b97e4e]]
2021-03-12 02:11:28,575 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d]
2021-03-12 02:11:28,685 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:28,801 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:28,803 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33b97e4e]
2021-03-12 02:11:28,914 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 02:11:28,916 [main:302] - generating value of type = Int true depth = 1
2021-03-12 02:11:28,919 [main:117] - GENERATED CALL = (r).subSequence(-243643941, -722919880).sumOf({a: Char -> -1741070350})
2021-03-12 02:11:28,919 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@69d7e75d], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@466905aa]]
2021-03-12 02:11:28,919 [main:117] - GENERATED CALL = (r).length.sign
2021-03-12 02:11:28,919 [main:114] - replacement of 1 of type Int is (r).subSequence(-243643941, -722919880).sumOf({a: Char -> -1741070350})
2021-03-12 02:11:29,028 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:11:29,029 [main:66] - Compilation checking started
2021-03-12 02:11:29,441 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if (r != "OKFoo") return "Fail: $r"

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {
    override suspend fun fu3(): Kla0 = Kla0("OK")

    suspend fun fu4(): Any {
        val r = Outer().result()
return Outer().result()
    }
}

fun box682(): String {
    val r = Outer().result()
var prope2: Any = "FAIL"
    fu0 {
        prope2 = r
    }
    if ("kywto" != "OK") return (Outer().result()).drop(1022800463)

    return prope2 as String
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
"xumae"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
this.prope2 = "uznmt"
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
if ((r).isNotEmpty()) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val r = Outer().result()
if (c !is CoroutineStackFrame) error((r).removePrefix("gbldc"))
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true }?.let { TODO("gluxc")}
    }

    fun fu9(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Outer()).foo.toLowerCase())
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        val r = Outer().result()
prope4 = 0
        prope5 = (ArrayDeque<LinkedHashSet<Long>>(-1666542363)).firstOrNull()?.equals("ayifa")!!
        prope6 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false, { "qgmuh"})}

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (Outer().foo).compareTo("otlnl").equals("txejl")) {
        val r = Outer().result()
for (i in (r).subSequence(-243643941, -722919880).sumOf({a: Char -> -1741070350})..(Kla2()).equals("fbxqf").compareTo(true)) {
            if ((Outer().foo).equals("oucbe").compareTo(false) != -358770833) error((Outer().result()).toLowerCase() + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((r).get(-737109968).isDigit()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val r = Outer().result()
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:11:29,443 [main:107] - replacing (prope2.getOrThrow(), Ty0)
2021-03-12 02:11:29,443 [main:50] - replacing prope2.getOrThrow() Ty0
2021-03-12 02:11:29,443 [main:54] - Getting value of type Ty0
2021-03-12 02:11:29,567 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 02:11:29,572 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 02:11:29,698 [main:67] - randomType = ULong
2021-03-12 02:11:29,813 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 02:11:29,845 [main:106] - GETTING Ty0 from String
2021-03-12 02:11:29,861 [main:106] - GETTING Ty0 from Outer
2021-03-12 02:11:29,865 [main:106] - GETTING Ty0 from String
2021-03-12 02:11:29,866 [main:106] - GETTING Ty0 from String
2021-03-12 02:11:29,866 [main:111] - Cant find and generate replacement for prope2.getOrThrow() type Ty0
2021-03-12 02:11:29,866 [main:107] - replacing (getOrThrow(), Ty0)
2021-03-12 02:11:29,866 [main:50] - replacing getOrThrow() Ty0
2021-03-12 02:11:29,866 [main:54] - Getting value of type Ty0
2021-03-12 02:11:29,978 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 02:11:29,982 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 02:11:29,986 [main:67] - randomType = Boolean
2021-03-12 02:11:30,096 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:11:30,108 [main:106] - GETTING Ty0 from String
2021-03-12 02:11:30,124 [main:106] - GETTING Ty0 from String
2021-03-12 02:11:30,124 [main:106] - GETTING Ty0 from String
2021-03-12 02:11:30,125 [main:106] - GETTING Ty0 from Outer
2021-03-12 02:11:30,129 [main:111] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-12 02:11:30,129 [main:107] - replacing ({
        prope2 = r
    }, SuspendFunction0<Unit>)
2021-03-12 02:11:30,129 [main:50] - replacing {
        prope2 = r
    } SuspendFunction0<Unit>
2021-03-12 02:11:30,129 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-12 02:11:30,241 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-12 02:11:30,243 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 02:11:30,362 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 02:11:30,364 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 02:11:30,608 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 02:11:30,610 [main:95] - GENERATED = require(false)
2021-03-12 02:11:30,610 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { require(false)}
2021-03-12 02:11:30,610 [main:61] - GENERATED IS CALL =false
2021-03-12 02:11:30,857 [main:67] - randomType = Double?
2021-03-12 02:11:30,989 [main:302] - generating value of type = Double true depth = 0
2021-03-12 02:11:31,022 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 02:11:31,038 [main:106] - GETTING SuspendFunction0<Unit> from Outer
2021-03-12 02:11:31,043 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 02:11:31,044 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 02:11:31,044 [main:114] - replacement of {
        prope2 = r
    } of type SuspendFunction0<Unit> is { require(false)}
2021-03-12 02:11:31,156 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 02:11:31,157 [main:66] - Compilation checking started
2021-03-12 02:11:31,679 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if (r != "OKFoo") return "Fail: $r"

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {
    override suspend fun fu3(): Kla0 = Kla0("OK")

    suspend fun fu4(): Any {
        val r = Outer().result()
return Outer().result()
    }
}

fun box682(): String {
    val r = Outer().result()
var prope2: Any = "FAIL"
    fu0 { require(false)}
    if ("kywto" != "OK") return (Outer().result()).drop(1022800463)

    return prope2 as String
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
"xumae"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
this.prope2 = "uznmt"
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
if ((r).isNotEmpty()) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val r = Outer().result()
if (c !is CoroutineStackFrame) error((r).removePrefix("gbldc"))
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true }?.let { TODO("gluxc")}
    }

    fun fu9(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Outer()).foo.toLowerCase())
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        val r = Outer().result()
prope4 = 0
        prope5 = (ArrayDeque<LinkedHashSet<Long>>(-1666542363)).firstOrNull()?.equals("ayifa")!!
        prope6 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false, { "qgmuh"})}

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (Outer().foo).compareTo("otlnl").equals("txejl")) {
        val r = Outer().result()
for (i in 1..(Kla2()).equals("fbxqf").compareTo(true)) {
            if ((Outer().foo).equals("oucbe").compareTo(false) != -358770833) error((Outer().result()).toLowerCase() + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((r).get(-737109968).isDigit()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val r = Outer().result()
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:11:31,681 [main:107] - replacing (prope4, Int)
2021-03-12 02:11:31,682 [main:50] - replacing prope4 Int
2021-03-12 02:11:31,682 [main:54] - Getting value of type Int
2021-03-12 02:11:31,815 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:31,817 [main:58] - GENERATED VALUE OF TYPE Int = -1706984926
2021-03-12 02:11:31,817 [main:61] - GENERATED IS CALL =false
2021-03-12 02:11:31,824 [main:67] - randomType = Kla3
2021-03-12 02:11:31,935 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 02:11:31,937 [main:112] - generating klass Kla3 text = open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
"xumae"
    }
}
2021-03-12 02:11:32,048 [main:194] - Type params = []
2021-03-12 02:11:32,158 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 02:11:32,276 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 02:11:32,279 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 02:11:32,526 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 02:11:32,645 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 02:11:32,647 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 02:11:33,069 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 02:11:33,069 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 02:11:33,085 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla3[DeserializedSimpleFunctionDescriptor@37026e14]
2021-03-12 02:11:33,196 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:11:33,196 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@470dd6a4]
2021-03-12 02:11:33,310 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:11:33,312 [main:78] - Generated call from random type = (Kla3()).equals("wkfqo").compareTo(false)
2021-03-12 02:11:33,313 [main:106] - GETTING Int from String
2021-03-12 02:11:33,333 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d], public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d1d86c8]]
2021-03-12 02:11:33,333 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d]
2021-03-12 02:11:33,447 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:33,558 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:33,560 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d1d86c8]
2021-03-12 02:11:33,668 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 02:11:33,670 [main:302] - generating value of type = Int true depth = 1
2021-03-12 02:11:33,672 [main:117] - GENERATED CALL = (Outer().foo).subSequence(1063599682, 1252032719).sumBy({a: Char -> -1943915047})
2021-03-12 02:11:33,672 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10048bd9], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a2266a3]]
2021-03-12 02:11:33,672 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10048bd9]
2021-03-12 02:11:33,672 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5a2266a3]
2021-03-12 02:11:33,782 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:33,784 [main:117] - GENERATED CALL = (Outer().foo).compareTo(Outer().result()).shl(-1242344919)
2021-03-12 02:11:33,784 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@69d7e75d], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1a1a977f]]
2021-03-12 02:11:33,784 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1a1a977f]
2021-03-12 02:11:33,893 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 02:11:33,895 [main:117] - GENERATED CALL = (Outer().foo).length.times(41)
2021-03-12 02:11:33,895 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d], @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33b97e4e]]
2021-03-12 02:11:33,895 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d]
2021-03-12 02:11:34,005 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:34,116 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:34,118 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33b97e4e]
2021-03-12 02:11:34,232 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 02:11:34,235 [main:302] - generating value of type = Int true depth = 1
2021-03-12 02:11:34,238 [main:117] - GENERATED CALL = (Outer().foo).subSequence(-1557365682, -163398423).sumOf({a: Char -> 1859722812})
2021-03-12 02:11:34,238 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33b97e4e]]
2021-03-12 02:11:34,238 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33b97e4e]
2021-03-12 02:11:34,349 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 02:11:34,351 [main:302] - generating value of type = Int true depth = 1
2021-03-12 02:11:34,353 [main:117] - GENERATED CALL = (Outer().foo).sumOf({a: Char -> 179652059})
2021-03-12 02:11:34,353 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10048bd9], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1c87dc0d]]
2021-03-12 02:11:34,353 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@10048bd9]
2021-03-12 02:11:34,462 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:11:34,464 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1c87dc0d]
2021-03-12 02:11:34,464 [main:117] - GENERATED CALL = (Outer().foo).compareTo("apahb").countOneBits()
2021-03-12 02:11:34,464 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff], public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@77d7c5e2]]
2021-03-12 02:11:34,464 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff]
2021-03-12 02:11:34,597 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:34,599 [main:149] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@77d7c5e2]
2021-03-12 02:11:34,599 [main:117] - GENERATED CALL = (Outer().foo).get(-561554742).toInt()
2021-03-12 02:11:34,599 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@69d7e75d], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2c8f94f6]]
2021-03-12 02:11:34,599 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2c8f94f6]
2021-03-12 02:11:34,599 [main:117] - GENERATED CALL = (Outer().foo).length.countLeadingZeroBits()
2021-03-12 02:11:34,599 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@69d7e75d], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1865ede]]
2021-03-12 02:11:34,599 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1865ede]
2021-03-12 02:11:34,708 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 02:11:34,710 [main:117] - GENERATED CALL = (Outer().foo).length.plus(-44)
2021-03-12 02:11:34,710 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@69d7e75d], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@41bb9bf6]]
2021-03-12 02:11:34,710 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@41bb9bf6]
2021-03-12 02:11:34,819 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:34,821 [main:117] - GENERATED CALL = (Outer().foo).length.coerceAtMost(249478378)
2021-03-12 02:11:34,821 [main:114] - replacement of prope4 of type Int is (Outer().foo).length.countLeadingZeroBits()
2021-03-12 02:11:34,929 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:11:34,930 [main:66] - Compilation checking started
2021-03-12 02:11:35,449 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if (r != "OKFoo") return "Fail: $r"

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {
    override suspend fun fu3(): Kla0 = Kla0("OK")

    suspend fun fu4(): Any {
        val r = Outer().result()
return Outer().result()
    }
}

fun box682(): String {
    val r = Outer().result()
var prope2: Any = "FAIL"
    fu0 { require(false)}
    if ("kywto" != "OK") return (Outer().result()).drop(1022800463)

    return prope2 as String
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
"xumae"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
this.prope2 = "uznmt"
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
if ((r).isNotEmpty()) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val r = Outer().result()
if (c !is CoroutineStackFrame) error((r).removePrefix("gbldc"))
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true }?.let { TODO("gluxc")}
    }

    fun fu9(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Outer()).foo.toLowerCase())
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        val r = Outer().result()
prope4 = 0
        prope5 = (ArrayDeque<LinkedHashSet<Long>>(-1666542363)).firstOrNull()?.equals("ayifa")!!
        prope6 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false, { "qgmuh"})}

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (Outer().foo).compareTo("otlnl").equals("txejl")) {
        val r = Outer().result()
for (i in 1..(Kla2()).equals("fbxqf").compareTo(true)) {
            if ((Outer().foo).equals("oucbe").compareTo(false) != -358770833) error((Outer().result()).toLowerCase() + (Outer().foo).length.countLeadingZeroBits())
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((r).get(-737109968).isDigit()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val r = Outer().result()
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:11:35,451 [main:107] - replacing ("kywto" != "OK", Boolean)
2021-03-12 02:11:35,451 [main:50] - replacing "kywto" != "OK" Boolean
2021-03-12 02:11:35,451 [main:54] - Getting value of type Boolean
2021-03-12 02:11:35,562 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:11:35,564 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 02:11:35,564 [main:61] - GENERATED IS CALL =false
2021-03-12 02:11:36,067 [main:67] - randomType = Function1<ArrayList<Float>, Double>
2021-03-12 02:11:36,068 [main:106] - GETTING Boolean from Outer
2021-03-12 02:11:36,073 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Outer[DeserializedSimpleFunctionDescriptor@58a8859d], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@dae0597]]
2021-03-12 02:11:36,073 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Outer[DeserializedSimpleFunctionDescriptor@58a8859d]
2021-03-12 02:11:36,184 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@dae0597]
2021-03-12 02:11:36,294 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:11:36,296 [main:117] - GENERATED CALL = (Outer()).equals(null).or(false)
2021-03-12 02:11:36,296 [main:113] - Case = [public final val foo: kotlin.String defined in Outer[PropertyDescriptorImpl@18e3c5e1], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c8f0a08]]
2021-03-12 02:11:36,297 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c8f0a08]
2021-03-12 02:11:36,297 [main:117] - GENERATED CALL = (Outer()).foo.toBoolean()
2021-03-12 02:11:36,297 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Outer[DeserializedSimpleFunctionDescriptor@58a8859d], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@243f5f42]]
2021-03-12 02:11:36,297 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Outer[DeserializedSimpleFunctionDescriptor@58a8859d]
2021-03-12 02:11:36,408 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:11:36,408 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@243f5f42]
2021-03-12 02:11:36,408 [main:117] - GENERATED CALL = (Outer()).equals("dilyi").not()
2021-03-12 02:11:36,409 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Outer[DeserializedSimpleFunctionDescriptor@58a8859d], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@10418c7]]
2021-03-12 02:11:36,409 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Outer[DeserializedSimpleFunctionDescriptor@58a8859d]
2021-03-12 02:11:36,518 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:11:36,519 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@10418c7]
2021-03-12 02:11:36,648 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:11:36,650 [main:117] - GENERATED CALL = (Outer()).equals("nzmrm").xor(true)
2021-03-12 02:11:36,651 [main:113] - Case = [public final val foo: kotlin.String defined in Outer[PropertyDescriptorImpl@18e3c5e1], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39e26f35]]
2021-03-12 02:11:36,651 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39e26f35]
2021-03-12 02:11:36,760 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:11:36,762 [main:117] - GENERATED CALL = (Outer()).foo.endsWith(val r = Outer().result()
2021-03-12 02:11:36,762 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Outer[DeserializedSimpleFunctionDescriptor@58a8859d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@317f3713]]
2021-03-12 02:11:36,762 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Outer[DeserializedSimpleFunctionDescriptor@58a8859d]
2021-03-12 02:11:36,873 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:11:36,873 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@317f3713]
2021-03-12 02:11:36,982 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:11:36,983 [main:117] - GENERATED CALL = (Outer()).equals("bpdxb").equals("nlell")
2021-03-12 02:11:36,983 [main:113] - Case = [public final val foo: kotlin.String defined in Outer[PropertyDescriptorImpl@18e3c5e1], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58d09a36]]
2021-03-12 02:11:36,983 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58d09a36]
2021-03-12 02:11:37,092 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:11:37,094 [main:117] - GENERATED CALL = (Outer()).foo.startsWith(Outer().result(), true)
2021-03-12 02:11:37,094 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Outer[DeserializedSimpleFunctionDescriptor@58a8859d], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4e8bd556]]
2021-03-12 02:11:37,094 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Outer[DeserializedSimpleFunctionDescriptor@58a8859d]
2021-03-12 02:11:37,206 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:11:37,206 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4e8bd556]
2021-03-12 02:11:37,321 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:11:37,323 [main:117] - GENERATED CALL = (Outer()).equals("flimt").and(false)
2021-03-12 02:11:37,323 [main:113] - Case = [public final val foo: kotlin.String defined in Outer[PropertyDescriptorImpl@18e3c5e1], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4a314af]]
2021-03-12 02:11:37,324 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4a314af]
2021-03-12 02:11:37,434 [main:302] - generating value of type = Any false depth = 0
2021-03-12 02:11:37,434 [main:117] - GENERATED CALL = (Outer()).foo.equals("qapxy")
2021-03-12 02:11:37,434 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Outer[DeserializedSimpleFunctionDescriptor@58a8859d]]
2021-03-12 02:11:37,434 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Outer[DeserializedSimpleFunctionDescriptor@58a8859d]
2021-03-12 02:11:37,543 [main:117] - GENERATED CALL = (Outer()).equals(null)
2021-03-12 02:11:37,544 [main:114] - replacement of "kywto" != "OK" of type Boolean is (Outer()).equals(null).or(false)
2021-03-12 02:11:37,652 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:11:37,653 [main:66] - Compilation checking started
2021-03-12 02:11:38,227 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if (r != "OKFoo") return "Fail: $r"

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {
    override suspend fun fu3(): Kla0 = Kla0("OK")

    suspend fun fu4(): Any {
        val r = Outer().result()
return Outer().result()
    }
}

fun box682(): String {
    val r = Outer().result()
var prope2: Any = "FAIL"
    fu0 { require(false)}
    if ((Outer()).equals(null).or(false)) return (Outer().result()).drop(1022800463)

    return prope2 as String
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
"xumae"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
this.prope2 = "uznmt"
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
if ((r).isNotEmpty()) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val r = Outer().result()
if (c !is CoroutineStackFrame) error((r).removePrefix("gbldc"))
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true }?.let { TODO("gluxc")}
    }

    fun fu9(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Outer()).foo.toLowerCase())
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        val r = Outer().result()
prope4 = 0
        prope5 = (ArrayDeque<LinkedHashSet<Long>>(-1666542363)).firstOrNull()?.equals("ayifa")!!
        prope6 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false, { "qgmuh"})}

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (Outer().foo).compareTo("otlnl").equals("txejl")) {
        val r = Outer().result()
for (i in 1..(Kla2()).equals("fbxqf").compareTo(true)) {
            if ((Outer().foo).equals("oucbe").compareTo(false) != -358770833) error((Outer().result()).toLowerCase() + (Outer().foo).length.countLeadingZeroBits())
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((r).get(-737109968).isDigit()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val r = Outer().result()
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:11:38,229 [main:107] - replacing (c !is CoroutineStackFrame, Boolean)
2021-03-12 02:11:38,229 [main:50] - replacing c !is CoroutineStackFrame Boolean
2021-03-12 02:11:38,229 [main:54] - Getting value of type Boolean
2021-03-12 02:11:38,340 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:11:38,342 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 02:11:38,342 [main:61] - GENERATED IS CALL =false
2021-03-12 02:11:38,346 [main:67] - randomType = String
2021-03-12 02:11:38,457 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:11:38,475 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff]
2021-03-12 02:11:38,587 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:38,589 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39938af3]
2021-03-12 02:11:38,589 [main:78] - Generated call from random type = ("wjfud").get(-1883768070).isHighSurrogate()
2021-03-12 02:11:38,589 [main:114] - replacement of c !is CoroutineStackFrame of type Boolean is ("wjfud").get(-1883768070).isHighSurrogate()
2021-03-12 02:11:38,723 [main:33] - Trying to replace Element(IS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 02:11:38,723 [main:66] - Compilation checking started
2021-03-12 02:11:39,055 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class Outer {
    val foo = "Foo"

    fun String.id(): String {
        class Local(unused: Long) {
            fun result() = this@id
            fun outer() = this@Outer
        }

        val l = Local(42L)
        return l.result() + l.outer().foo
    }

    fun result(): String = "OK".id()
}

fun box(): String {
    val r = Outer().result()

    if (r != "OKFoo") return "Fail: $r"

    return "OK"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla3)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Any)

interface Kla1 {
    suspend fun fu3(): Kla0
}

class Kla2() : Kla1 {
    override suspend fun fu3(): Kla0 = Kla0("OK")

    suspend fun fu4(): Any {
        val r = Outer().result()
return Outer().result()
    }
}

fun box682(): String {
    val r = Outer().result()
var prope2: Any = "FAIL"
    fu0 { require(false)}
    if ((Outer()).equals(null).or(false)) return (Outer().result()).drop(1022800463)

    return prope2 as String
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
"xumae"
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        val r = Outer().result()
this.prope2 = "uznmt"
    }

    var prope2: Any? = null
}

abstract class Kla5<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        val r = Outer().result()
if ((r).isNotEmpty()) {
            resume(prope2.getOrThrow())
        } else {
            fu5(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla6 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        val r = Outer().result()
if (("wjfud").get(-1883768070).isHighSurrogate()) error((r).removePrefix("gbldc"))
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu8(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true }?.let { TODO("gluxc")}
    }

    fun fu9(method: String) {
        val r = Outer().result()
prope3.find { it?.methodName?.startsWith(method) == true } ?: error((Outer()).foo.toLowerCase())
    }
}

val prope0 = Kla6()

class Kla7 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu10() {
        val r = Outer().result()
prope4 = 0
        prope5 = (ArrayDeque<LinkedHashSet<Long>>(-1666542363)).firstOrNull()?.equals("ayifa")!!
        prope6 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false, { "qgmuh"})}

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = (Outer().foo).compareTo("otlnl").equals("txejl")) {
        val r = Outer().result()
for (i in 1..(Kla2()).equals("fbxqf").compareTo(true)) {
            if ((Outer().foo).equals("oucbe").compareTo(false) != -358770833) error((Outer().result()).toLowerCase() + (Outer().foo).length.countLeadingZeroBits())
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if ((r).get(-737109968).isDigit()) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val r = Outer().result()
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-12 02:11:39,058 [main:107] - replacing ("Wrong state-machine generated: it is not finished yet", String)
2021-03-12 02:11:39,058 [main:50] - replacing "Wrong state-machine generated: it is not finished yet" String
2021-03-12 02:11:39,058 [main:54] - Getting value of type String
2021-03-12 02:11:39,170 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:11:39,172 [main:58] - GENERATED VALUE OF TYPE String = "xnyrx"
2021-03-12 02:11:39,172 [main:61] - GENERATED IS CALL =false
2021-03-12 02:11:39,449 [main:67] - randomType = UInt?
2021-03-12 02:11:39,560 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 02:11:39,589 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@2f40ab1b]
2021-03-12 02:11:39,589 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fb88914]
2021-03-12 02:11:39,700 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:39,702 [main:78] - Generated call from random type = (880870306.toUInt())?.toUByte().toString(341340610)
2021-03-12 02:11:39,702 [main:106] - GETTING String from String
2021-03-12 02:11:39,719 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b3e6d31]]
2021-03-12 02:11:39,719 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b3e6d31]
2021-03-12 02:11:39,830 [main:302] - generating value of type = Char true depth = 0
2021-03-12 02:11:39,942 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:11:40,055 [main:302] - generating value of type = String true depth = 0
2021-03-12 02:11:40,057 [main:117] - GENERATED CALL = (Outer().foo).replaceAfter('䷽', "jkmpl", "agrpb")
2021-03-12 02:11:40,057 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fb39d03]]
2021-03-12 02:11:40,057 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fb39d03]
2021-03-12 02:11:40,167 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:40,169 [main:117] - GENERATED CALL = (Outer().foo).substring(-495264831)
2021-03-12 02:11:40,169 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59340e5c]]
2021-03-12 02:11:40,169 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59340e5c]
2021-03-12 02:11:40,169 [main:117] - GENERATED CALL = (Outer().foo).uppercase()
2021-03-12 02:11:40,170 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7735a93e]]
2021-03-12 02:11:40,170 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d]
2021-03-12 02:11:40,280 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:40,401 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:40,403 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7735a93e]
2021-03-12 02:11:40,514 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:40,627 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:40,629 [main:117] - GENERATED CALL = (Outer().foo).subSequence(-1904401572, 707024009).substring(798646210, 236736957)
2021-03-12 02:11:40,629 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68bd8fe9]]
2021-03-12 02:11:40,629 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68bd8fe9]
2021-03-12 02:11:40,758 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 02:11:40,760 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 02:11:40,762 [main:117] - GENERATED CALL = (Outer().foo).filterNot({a: Char -> true})
2021-03-12 02:11:40,763 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f8a0afb]]
2021-03-12 02:11:40,763 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@1936633d]
2021-03-12 02:11:40,873 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:40,989 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:40,991 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f8a0afb]
2021-03-12 02:11:41,100 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 02:11:41,215 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 02:11:41,217 [main:117] - GENERATED CALL = (Outer().foo).subSequence(1643098722, -524873336).commonPrefixWith("xtuev", false)
2021-03-12 02:11:41,217 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10892581]]
2021-03-12 02:11:41,217 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@36acfcff]
2021-03-12 02:11:41,329 [main:302] - generating value of type = Int true depth = 0
2021-03-12 02:11:41,331 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10892581]
2021-03-12 02:11:41,331 [main:117] - GENERATED CALL = (Outer().foo).get(1859579083).lowercase()
2021-03-12 02:11:41,331 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a05ebe3]]
2021-03-12 02:11:41,331 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a05ebe3]
