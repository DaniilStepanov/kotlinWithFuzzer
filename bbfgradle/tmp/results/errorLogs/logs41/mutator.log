2021-03-11 22:27:04,494 [main:66] - Compilation checking started
2021-03-11 22:27:05,682 [main:50] - replacing s: () -> Int Function0<Int>
2021-03-11 22:27:05,682 [main:54] - Getting value of type Function0<Int>
2021-03-11 22:27:05,842 [main:302] - generating value of type = Function0<Int> false depth = 0
2021-03-11 22:27:05,844 [main:302] - generating value of type = Int true depth = 1
2021-03-11 22:27:05,846 [main:58] - GENERATED VALUE OF TYPE Function0<Int> = { -117864465}
2021-03-11 22:27:05,847 [main:61] - GENERATED IS CALL =false
2021-03-11 22:27:07,381 [main:67] - randomType = Collection<Function2<Char, ArrayList<UByte?>?, Float>>
2021-03-11 22:27:07,382 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 22:27:07,383 [main:66] - Compilation checking started
2021-03-11 22:27:07,931 [main:53] - Result = true
Text:
inline fun test(s: () -> Int = { -117864465}): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}
2021-03-11 22:27:07,932 [main:50] - replacing e: Exception Exception
2021-03-11 22:27:07,933 [main:54] - Getting value of type Exception
2021-03-11 22:27:08,036 [main:302] - generating value of type = Exception false depth = 0
2021-03-11 22:27:08,064 [main:58] - GENERATED VALUE OF TYPE Exception = NoSuchElementException()
2021-03-11 22:27:08,064 [main:61] - GENERATED IS CALL =true
2021-03-11 22:27:08,170 [main:67] - randomType = Byte
2021-03-11 22:27:08,293 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:08,468 [main:106] - GETTING Exception from Function0<Int>
2021-03-11 22:27:08,494 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-11 22:27:08,495 [main:66] - Compilation checking started
2021-03-11 22:27:08,782 [main:49] - Result = false
Text:
inline fun test(s: () -> Int = { -117864465}): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception = NoSuchElementException()) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}
2021-03-11 22:27:09,201 [main:43] - GENERATING CALL OF inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }
2021-03-11 22:27:09,202 [main:61] - WITHOUT TYPE PARAMS = inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }
2021-03-11 22:27:09,380 [main:302] - generating value of type = Function0<Int> false depth = 1
2021-03-11 22:27:09,380 [main:302] - generating value of type = Int true depth = 2
2021-03-11 22:27:09,381 [main:95] - GENERATED = test({ 1591249110})
2021-03-11 22:27:09,498 [main:45] - Trying to change 21 nodes
2021-03-11 22:27:09,503 [main:53] - replacing (3, Int)
2021-03-11 22:27:09,503 [main:50] - replacing 3 Int
2021-03-11 22:27:09,503 [main:54] - Getting value of type Int
2021-03-11 22:27:09,593 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:09,594 [main:58] - GENERATED VALUE OF TYPE Int = -1500306755
2021-03-11 22:27:09,594 [main:61] - GENERATED IS CALL =false
2021-03-11 22:27:09,688 [main:67] - randomType = UInt
2021-03-11 22:27:09,784 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 22:27:09,854 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.ULong): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@32980ac8]
2021-03-11 22:27:09,947 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 22:27:09,950 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.ExperimentalUnsignedTypes @kotlin.internal.InlineOnly public inline fun kotlin.ULong.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2aa43b2e]
2021-03-11 22:27:09,952 [main:78] - Generated call from random type = (1791676306.toUInt()).div(1448853010650263951.toULong()).countTrailingZeroBits()
2021-03-11 22:27:09,952 [main:106] - GETTING Int from Int
2021-03-11 22:27:10,025 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@45c57d7f], public open val start: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@32b92218]]
2021-03-11 22:27:10,026 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@45c57d7f]
2021-03-11 22:27:10,108 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:10,109 [main:117] - GENERATED CALL = (test({ 1591249110})).rangeTo(75).start
2021-03-11 22:27:10,109 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@581fa170]]
2021-03-11 22:27:10,110 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:27:10,110 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@581fa170]
2021-03-11 22:27:10,110 [main:117] - GENERATED CALL = (test({ 1591249110})).toInt().inc()
2021-03-11 22:27:10,111 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@2c9d6a2e]]
2021-03-11 22:27:10,111 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:27:10,111 [main:117] - GENERATED CALL = (test({ 1591249110})).toChar().code
2021-03-11 22:27:10,112 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7f3daf18]]
2021-03-11 22:27:10,112 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:10,112 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7f3daf18]
2021-03-11 22:27:10,113 [main:117] - GENERATED CALL = (test({ 1591249110})).compareTo(test({ 1591249110})).rotateLeft(test({ 1591249110}))
2021-03-11 22:27:10,113 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@390b15c0]]
2021-03-11 22:27:10,114 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:10,114 [main:117] - GENERATED CALL = (test({ 1591249110})).compareTo(test({ 1591249110})).sign
2021-03-11 22:27:10,115 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@39777ad2]]
2021-03-11 22:27:10,115 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:10,115 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@39777ad2]
2021-03-11 22:27:10,117 [main:117] - GENERATED CALL = (test({ 1591249110})).compareTo(test({ 1591249110})).ushr(test({ 1591249110}))
2021-03-11 22:27:10,117 [main:113] - Case = [public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@44dce520]]
2021-03-11 22:27:10,117 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@44dce520]
2021-03-11 22:27:10,118 [main:117] - GENERATED CALL = (test({ 1591249110})).shl(test({ 1591249110}))
2021-03-11 22:27:10,118 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1f6e0bcf]]
2021-03-11 22:27:10,118 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:10,118 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1f6e0bcf]
2021-03-11 22:27:10,119 [main:117] - GENERATED CALL = (test({ 1591249110})).compareTo(test({ 1591249110})).takeLowestOneBit()
2021-03-11 22:27:10,119 [main:113] - Case = [public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12446614]]
2021-03-11 22:27:10,119 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12446614]
2021-03-11 22:27:10,120 [main:117] - GENERATED CALL = (test({ 1591249110})).and(test({ 1591249110}))
2021-03-11 22:27:10,120 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3e573440]]
2021-03-11 22:27:10,121 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:27:10,121 [main:149] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3e573440]
2021-03-11 22:27:10,122 [main:117] - GENERATED CALL = (test({ 1591249110})).toChar().toInt()
2021-03-11 22:27:10,122 [main:61] - replacement of 3 of type Int is (test({ 1591249110})).compareTo(test({ 1591249110})).ushr(test({ 1591249110}))
2021-03-11 22:27:10,243 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:27:10,244 [main:66] - Compilation checking started
2021-03-11 22:27:10,768 [main:53] - Result = true
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -(test({ 1591249110})).compareTo(test({ 1591249110})).ushr(test({ 1591249110}))
        }
    }

    return "Failed"
}
2021-03-11 22:27:10,769 [main:53] - replacing ("OK", String)
2021-03-11 22:27:10,770 [main:50] - replacing "OK" String
2021-03-11 22:27:10,770 [main:54] - Getting value of type String
2021-03-11 22:27:10,863 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:27:10,864 [main:58] - GENERATED VALUE OF TYPE String = "jmjqq"
2021-03-11 22:27:10,865 [main:61] - GENERATED IS CALL =false
2021-03-11 22:27:11,111 [main:67] - randomType = Double?
2021-03-11 22:27:11,209 [main:302] - generating value of type = Double true depth = 0
2021-03-11 22:27:11,292 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@411f5b08]
2021-03-11 22:27:11,293 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58808d82]
2021-03-11 22:27:11,294 [main:78] - Generated call from random type = (0.6042841388619092)?.toChar().titlecase()
2021-03-11 22:27:11,297 [main:106] - GETTING String from Int
2021-03-11 22:27:11,346 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]]
2021-03-11 22:27:11,347 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:27:11,347 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]
2021-03-11 22:27:11,349 [main:117] - GENERATED CALL = (p).toInt().toString(test({ 1591249110}))
2021-03-11 22:27:11,349 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]]
2021-03-11 22:27:11,349 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:11,349 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]
2021-03-11 22:27:11,442 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:11,443 [main:117] - GENERATED CALL = (p).compareTo(p).toString(-231230707)
2021-03-11 22:27:11,444 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]]
2021-03-11 22:27:11,444 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]
2021-03-11 22:27:11,536 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:11,537 [main:117] - GENERATED CALL = (p).toString(-1065993947)
2021-03-11 22:27:11,537 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ef7baad]]
2021-03-11 22:27:11,537 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:27:11,538 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ef7baad]
2021-03-11 22:27:11,629 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:27:11,631 [main:117] - GENERATED CALL = (p).toChar().plus("fmbej")
2021-03-11 22:27:11,631 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@630a089]]
2021-03-11 22:27:11,631 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd]
2021-03-11 22:27:11,631 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@630a089]
2021-03-11 22:27:11,632 [main:117] - GENERATED CALL = (p).toShort().toString(p)
2021-03-11 22:27:11,632 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63cdd551], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]]
2021-03-11 22:27:11,632 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63cdd551]
2021-03-11 22:27:11,718 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:27:11,719 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]
2021-03-11 22:27:11,720 [main:117] - GENERATED CALL = (p).div(1733721865997047151).toString(p)
2021-03-11 22:27:11,720 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58808d82]]
2021-03-11 22:27:11,720 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:27:11,720 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58808d82]
2021-03-11 22:27:11,720 [main:117] - GENERATED CALL = (p).toChar().titlecase()
2021-03-11 22:27:11,721 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@416d03a5]]
2021-03-11 22:27:11,721 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:27:11,721 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@416d03a5]
2021-03-11 22:27:11,721 [main:117] - GENERATED CALL = (p).toChar().lowercase()
2021-03-11 22:27:11,721 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6fc8fc8f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]]
2021-03-11 22:27:11,721 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6fc8fc8f]
2021-03-11 22:27:11,722 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]
2021-03-11 22:27:11,822 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:11,823 [main:117] - GENERATED CALL = (p).toLong().toString(319525977)
2021-03-11 22:27:11,823 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6694d9]]
2021-03-11 22:27:11,823 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a]
2021-03-11 22:27:11,824 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6694d9]
2021-03-11 22:27:11,825 [main:117] - GENERATED CALL = (p).toByte().toString(test({ 1591249110}))
2021-03-11 22:27:11,825 [main:61] - replacement of "OK" of type String is (p).toString(-1065993947)
2021-03-11 22:27:11,911 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:27:11,912 [main:66] - Compilation checking started
2021-03-11 22:27:12,345 [main:53] - Result = true
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return (p).toString(-1065993947)
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -(test({ 1591249110})).compareTo(test({ 1591249110})).ushr(test({ 1591249110}))
        }
    }

    return "Failed"
}
2021-03-11 22:27:12,347 [main:53] - replacing ({
            -(test({ 1591249110})).compareTo(test({ 1591249110})).ushr(test({ 1591249110}))
        }, Int)
2021-03-11 22:27:12,347 [main:50] - replacing {
            -(test({ 1591249110})).compareTo(test({ 1591249110})).ushr(test({ 1591249110}))
        } Int
2021-03-11 22:27:12,347 [main:54] - Getting value of type Int
2021-03-11 22:27:12,438 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:12,438 [main:58] - GENERATED VALUE OF TYPE Int = 1573814568
2021-03-11 22:27:12,438 [main:61] - GENERATED IS CALL =false
2021-03-11 22:27:12,545 [main:67] - randomType = Char
2021-03-11 22:27:12,646 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:27:12,678 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@31786993]
2021-03-11 22:27:12,678 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@de1d842]
2021-03-11 22:27:12,679 [main:78] - Generated call from random type = ('戁').toByte().unaryPlus()
2021-03-11 22:27:12,679 [main:106] - GETTING Int from Int
2021-03-11 22:27:12,731 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@581fa170]]
2021-03-11 22:27:12,731 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:27:12,732 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@581fa170]
2021-03-11 22:27:12,733 [main:117] - GENERATED CALL = (test({ 1591249110})).toInt().inc()
2021-03-11 22:27:12,733 [main:113] - Case = [@kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@390b15c0]]
2021-03-11 22:27:12,734 [main:117] - GENERATED CALL = (test({ 1591249110})).sign
2021-03-11 22:27:12,734 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@48649202], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@54362452]]
2021-03-11 22:27:12,734 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@48649202]
2021-03-11 22:27:12,835 [main:302] - generating value of type = Double true depth = 0
2021-03-11 22:27:12,836 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@54362452]
2021-03-11 22:27:12,943 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:12,945 [main:117] - GENERATED CALL = (test({ 1591249110})).div(0.5397266838757703).compareTo(-104)
2021-03-11 22:27:12,945 [main:113] - Case = [public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7a95ed24]]
2021-03-11 22:27:12,945 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7a95ed24]
2021-03-11 22:27:12,946 [main:117] - GENERATED CALL = (test({ 1591249110})).inv()
2021-03-11 22:27:12,946 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2e163f44]]
2021-03-11 22:27:12,946 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a]
2021-03-11 22:27:12,947 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2e163f44]
2021-03-11 22:27:12,948 [main:117] - GENERATED CALL = (test({ 1591249110})).toByte().unaryMinus()
2021-03-11 22:27:12,948 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@42a85b18]]
2021-03-11 22:27:12,948 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:12,949 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@42a85b18]
2021-03-11 22:27:13,041 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:13,042 [main:117] - GENERATED CALL = (test({ 1591249110})).compareTo(test({ 1591249110})).plus(-44)
2021-03-11 22:27:13,043 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@37eacfbc]]
2021-03-11 22:27:13,043 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:13,133 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:13,134 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@37eacfbc]
2021-03-11 22:27:13,135 [main:117] - GENERATED CALL = (test({ 1591249110})).compareTo(715222733).coerceAtMost(test({ 1591249110}))
2021-03-11 22:27:13,136 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5138d036]]
2021-03-11 22:27:13,136 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:13,136 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5138d036]
2021-03-11 22:27:13,137 [main:117] - GENERATED CALL = (test({ 1591249110})).compareTo(test({ 1591249110})).shr(test({ 1591249110}))
2021-03-11 22:27:13,137 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@30f2e0e0]]
2021-03-11 22:27:13,138 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:27:13,138 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@30f2e0e0]
2021-03-11 22:27:13,139 [main:117] - GENERATED CALL = (test({ 1591249110})).toInt().unaryMinus()
2021-03-11 22:27:13,139 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@608030b3]]
2021-03-11 22:27:13,139 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a]
2021-03-11 22:27:13,139 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@608030b3]
2021-03-11 22:27:13,249 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:13,251 [main:117] - GENERATED CALL = (test({ 1591249110})).toByte().minus(-55)
2021-03-11 22:27:13,251 [main:61] - replacement of {
            -(test({ 1591249110})).compareTo(test({ 1591249110})).ushr(test({ 1591249110}))
        } of type Int is ('戁').toByte().unaryPlus()
2021-03-11 22:27:13,344 [main:33] - Trying to replace BLOCK on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:27:13,344 [main:66] - Compilation checking started
2021-03-11 22:27:13,346 [main:71] - Wrong syntax or breaks conditions
2021-03-11 22:27:13,347 [main:49] - Result = false
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return (p).toString(-1065993947)
        }
        catch(e: Exception) {
            -2
        }
        finally ('戁').toByte().unaryPlus()
    }

    return "Failed"
}
2021-03-11 22:27:13,347 [main:53] - replacing ("OK", String)
2021-03-11 22:27:13,347 [main:50] - replacing "OK" String
2021-03-11 22:27:13,347 [main:54] - Getting value of type String
2021-03-11 22:27:13,435 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:27:13,435 [main:58] - GENERATED VALUE OF TYPE String = "tiodq"
2021-03-11 22:27:13,435 [main:61] - GENERATED IS CALL =false
2021-03-11 22:27:13,536 [main:67] - randomType = Long
2021-03-11 22:27:13,624 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:27:13,665 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6fc8fc8f]
2021-03-11 22:27:13,666 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]
2021-03-11 22:27:13,667 [main:78] - Generated call from random type = (-303749947726295095).toLong().toString(test({ 1591249110}))
2021-03-11 22:27:13,668 [main:106] - GETTING String from Int
2021-03-11 22:27:13,707 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]]
2021-03-11 22:27:13,708 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]
2021-03-11 22:27:13,806 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:13,807 [main:117] - GENERATED CALL = (test({ 1591249110})).toString(-1822687143)
2021-03-11 22:27:13,807 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6694d9]]
2021-03-11 22:27:13,807 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a]
2021-03-11 22:27:13,808 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6694d9]
2021-03-11 22:27:13,808 [main:117] - GENERATED CALL = (test({ 1591249110})).toByte().toString(test({ 1591249110}))
2021-03-11 22:27:13,809 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63cdd551], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]]
2021-03-11 22:27:13,809 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63cdd551]
2021-03-11 22:27:13,913 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:27:13,914 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]
2021-03-11 22:27:13,915 [main:117] - GENERATED CALL = (test({ 1591249110})).div(-1133342620969489953).toString(test({ 1591249110}))
2021-03-11 22:27:13,915 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@416d03a5]]
2021-03-11 22:27:13,915 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:27:13,915 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@416d03a5]
2021-03-11 22:27:13,916 [main:117] - GENERATED CALL = (test({ 1591249110})).toChar().lowercase()
2021-03-11 22:27:13,916 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ef7baad]]
2021-03-11 22:27:13,916 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:27:13,916 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ef7baad]
2021-03-11 22:27:13,999 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:27:14,000 [main:117] - GENERATED CALL = (test({ 1591249110})).toChar().plus("vqzbu")
2021-03-11 22:27:14,001 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15e7f7d8]]
2021-03-11 22:27:14,001 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:27:14,001 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15e7f7d8]
2021-03-11 22:27:14,001 [main:117] - GENERATED CALL = (test({ 1591249110})).toChar().uppercase()
2021-03-11 22:27:14,001 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58808d82]]
2021-03-11 22:27:14,001 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:27:14,002 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58808d82]
2021-03-11 22:27:14,002 [main:117] - GENERATED CALL = (test({ 1591249110})).toChar().titlecase()
2021-03-11 22:27:14,002 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6fc8fc8f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]]
2021-03-11 22:27:14,002 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6fc8fc8f]
2021-03-11 22:27:14,002 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]
2021-03-11 22:27:14,003 [main:117] - GENERATED CALL = (test({ 1591249110})).toLong().toString(test({ 1591249110}))
2021-03-11 22:27:14,003 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]]
2021-03-11 22:27:14,003 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:14,004 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]
2021-03-11 22:27:14,004 [main:117] - GENERATED CALL = (test({ 1591249110})).compareTo(test({ 1591249110})).toString(test({ 1591249110}))
2021-03-11 22:27:14,005 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]]
2021-03-11 22:27:14,005 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:27:14,005 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]
2021-03-11 22:27:14,091 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:14,092 [main:117] - GENERATED CALL = (test({ 1591249110})).toInt().toString(-1588803910)
2021-03-11 22:27:14,092 [main:61] - replacement of "OK" of type String is "tiodq"
2021-03-11 22:27:14,181 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 22:27:14,182 [main:53] - replacing ("OK", String)
2021-03-11 22:27:14,182 [main:50] - replacing "OK" String
2021-03-11 22:27:14,182 [main:54] - Getting value of type String
2021-03-11 22:27:14,292 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:27:14,293 [main:58] - GENERATED VALUE OF TYPE String = "bwprw"
2021-03-11 22:27:14,297 [main:61] - GENERATED IS CALL =false
2021-03-11 22:27:14,389 [main:67] - randomType = String?
2021-03-11 22:27:14,471 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:27:14,498 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@264f2b1a]
2021-03-11 22:27:14,583 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:27:14,584 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3af71897]
2021-03-11 22:27:14,670 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 22:27:14,670 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:27:14,672 [main:78] - Generated call from random type = ("wmgxo")?.plus("brmdc").filterNot({a: Char -> true})
2021-03-11 22:27:14,673 [main:106] - GETTING String from Int
2021-03-11 22:27:14,734 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58808d82]]
2021-03-11 22:27:14,734 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:27:14,734 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58808d82]
2021-03-11 22:27:14,735 [main:117] - GENERATED CALL = (test({ 1591249110})).toChar().titlecase()
2021-03-11 22:27:14,735 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@630a089]]
2021-03-11 22:27:14,735 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd]
2021-03-11 22:27:14,735 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@630a089]
2021-03-11 22:27:14,853 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:14,854 [main:117] - GENERATED CALL = (test({ 1591249110})).toShort().toString(-948245393)
2021-03-11 22:27:14,855 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63cdd551], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]]
2021-03-11 22:27:14,855 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63cdd551]
2021-03-11 22:27:14,939 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:27:14,940 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]
2021-03-11 22:27:14,941 [main:117] - GENERATED CALL = (test({ 1591249110})).div(4435506191495208161).toString(test({ 1591249110}))
2021-03-11 22:27:14,941 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15e7f7d8]]
2021-03-11 22:27:14,941 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:27:14,941 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15e7f7d8]
2021-03-11 22:27:14,941 [main:117] - GENERATED CALL = (test({ 1591249110})).toChar().uppercase()
2021-03-11 22:27:14,942 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ef7baad]]
2021-03-11 22:27:14,942 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:27:14,942 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ef7baad]
2021-03-11 22:27:15,029 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:27:15,030 [main:117] - GENERATED CALL = (test({ 1591249110})).toChar().plus("rtdaz")
2021-03-11 22:27:15,030 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6694d9]]
2021-03-11 22:27:15,030 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a]
2021-03-11 22:27:15,030 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6694d9]
2021-03-11 22:27:15,118 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:15,119 [main:117] - GENERATED CALL = (test({ 1591249110})).toByte().toString(-298508600)
2021-03-11 22:27:15,120 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6fc8fc8f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]]
2021-03-11 22:27:15,120 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6fc8fc8f]
2021-03-11 22:27:15,120 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]
2021-03-11 22:27:15,120 [main:117] - GENERATED CALL = (test({ 1591249110})).toLong().toString(test({ 1591249110}))
2021-03-11 22:27:15,121 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]]
2021-03-11 22:27:15,121 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:15,121 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]
2021-03-11 22:27:15,202 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:15,203 [main:117] - GENERATED CALL = (test({ 1591249110})).compareTo(test({ 1591249110})).toString(221757961)
2021-03-11 22:27:15,204 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]]
2021-03-11 22:27:15,204 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]
2021-03-11 22:27:15,204 [main:117] - GENERATED CALL = (test({ 1591249110})).toString(test({ 1591249110}))
2021-03-11 22:27:15,204 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]]
2021-03-11 22:27:15,204 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:27:15,204 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]
2021-03-11 22:27:15,299 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:15,304 [main:117] - GENERATED CALL = (test({ 1591249110})).toInt().toString(-1083271173)
2021-03-11 22:27:15,304 [main:61] - replacement of "OK" of type String is (test({ 1591249110})).toInt().toString(-1083271173)
2021-03-11 22:27:15,385 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:27:15,386 [main:53] - replacing ({
            val i = s()
            i + 10
        }, Int)
2021-03-11 22:27:15,386 [main:50] - replacing {
            val i = s()
            i + 10
        } Int
2021-03-11 22:27:15,386 [main:54] - Getting value of type Int
2021-03-11 22:27:15,465 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:15,465 [main:58] - GENERATED VALUE OF TYPE Int = -1301970854
2021-03-11 22:27:15,466 [main:61] - GENERATED IS CALL =false
2021-03-11 22:27:15,561 [main:67] - randomType = UInt
2021-03-11 22:27:15,642 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 22:27:15,699 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@2def49de]
2021-03-11 22:27:15,699 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@4d251371]
2021-03-11 22:27:15,700 [main:78] - Generated call from random type = (1887018109.toUInt()).toDouble().toInt()
2021-03-11 22:27:15,700 [main:106] - GETTING Int from Int
2021-03-11 22:27:15,755 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@581fa170]]
2021-03-11 22:27:15,755 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:15,756 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@581fa170]
2021-03-11 22:27:15,756 [main:117] - GENERATED CALL = (test({ 1591249110})).compareTo(test({ 1591249110})).inc()
2021-03-11 22:27:15,756 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7a95ed24]]
2021-03-11 22:27:15,757 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:15,757 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7a95ed24]
2021-03-11 22:27:15,758 [main:117] - GENERATED CALL = (test({ 1591249110})).compareTo(test({ 1591249110})).inv()
2021-03-11 22:27:15,758 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5138d036]]
2021-03-11 22:27:15,758 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:15,758 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5138d036]
2021-03-11 22:27:15,866 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:15,868 [main:117] - GENERATED CALL = (test({ 1591249110})).compareTo(test({ 1591249110})).shr(1945702653)
2021-03-11 22:27:15,868 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5b3ab554]]
2021-03-11 22:27:15,868 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:27:15,868 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5b3ab554]
2021-03-11 22:27:15,952 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:27:15,953 [main:117] - GENERATED CALL = (test({ 1591249110})).toChar().compareTo('磇')
2021-03-11 22:27:15,953 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a], public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7b10db5e]]
2021-03-11 22:27:15,953 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a]
2021-03-11 22:27:15,953 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7b10db5e]
2021-03-11 22:27:15,953 [main:117] - GENERATED CALL = (test({ 1591249110})).toByte().toInt()
2021-03-11 22:27:15,954 [main:113] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6324aad8], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@78508503]]
2021-03-11 22:27:15,954 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6324aad8]
2021-03-11 22:27:16,037 [main:302] - generating value of type = Float true depth = 0
2021-03-11 22:27:16,038 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@78508503]
2021-03-11 22:27:16,039 [main:117] - GENERATED CALL = (test({ 1591249110})).div(0.70531166f).toBits()
2021-03-11 22:27:16,039 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b526e15]]
2021-03-11 22:27:16,039 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:16,039 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b526e15]
2021-03-11 22:27:16,040 [main:117] - GENERATED CALL = (test({ 1591249110})).compareTo(test({ 1591249110})).xor(test({ 1591249110}))
2021-03-11 22:27:16,040 [main:113] - Case = [public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12446614]]
2021-03-11 22:27:16,040 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12446614]
2021-03-11 22:27:16,124 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:16,125 [main:117] - GENERATED CALL = (test({ 1591249110})).and(-319386801)
2021-03-11 22:27:16,126 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@f7f3777], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@54362452]]
2021-03-11 22:27:16,126 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@f7f3777]
2021-03-11 22:27:16,126 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@54362452]
2021-03-11 22:27:16,209 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:16,210 [main:117] - GENERATED CALL = (test({ 1591249110})).toDouble().compareTo(-62)
2021-03-11 22:27:16,210 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1c0ff117]]
2021-03-11 22:27:16,210 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd]
2021-03-11 22:27:16,210 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1c0ff117]
2021-03-11 22:27:16,311 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:16,312 [main:117] - GENERATED CALL = (test({ 1591249110})).toShort().times(110)
2021-03-11 22:27:16,312 [main:61] - replacement of {
            val i = s()
            i + 10
        } of type Int is (test({ 1591249110})).and(-319386801)
2021-03-11 22:27:16,416 [main:33] - Trying to replace BLOCK on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:27:16,416 [main:66] - Compilation checking started
2021-03-11 22:27:16,418 [main:71] - Wrong syntax or breaks conditions
2021-03-11 22:27:16,418 [main:49] - Result = false
Text:
inline fun test(s: () -> Int): Int =
        try (test({ 1591249110})).and(-319386801)
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return (p).toString(-1065993947)
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -(test({ 1591249110})).compareTo(test({ 1591249110})).ushr(test({ 1591249110}))
        }
    }

    return "Failed"
}
2021-03-11 22:27:16,419 [main:53] - replacing (try {
            val i = s()
            i + 10
        }
        finally {
            0
        }, Int)
2021-03-11 22:27:16,419 [main:50] - replacing try {
            val i = s()
            i + 10
        }
        finally {
            0
        } Int
2021-03-11 22:27:16,419 [main:54] - Getting value of type Int
2021-03-11 22:27:16,497 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:16,497 [main:58] - GENERATED VALUE OF TYPE Int = -917474424
2021-03-11 22:27:16,497 [main:61] - GENERATED IS CALL =false
2021-03-11 22:27:16,582 [main:67] - randomType = UShort
2021-03-11 22:27:16,659 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 22:27:16,691 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@31fd7fe1]
2021-03-11 22:27:16,691 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6e484af9]
2021-03-11 22:27:16,801 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:16,802 [main:78] - Generated call from random type = (24049.toUShort()).toByte().plus(44)
2021-03-11 22:27:16,802 [main:61] - replacement of try {
            val i = s()
            i + 10
        }
        finally {
            0
        } of type Int is (24049.toUShort()).toByte().plus(44)
2021-03-11 22:27:16,900 [main:33] - Trying to replace Element(TRY) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:27:16,900 [main:66] - Compilation checking started
2021-03-11 22:27:17,241 [main:53] - Result = true
Text:
inline fun test(s: () -> Int): Int =
        (24049.toUShort()).toByte().plus(44)

fun box() : String {
    test {
        try {
            val p = 1
            return (p).toString(-1065993947)
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -(test({ 1591249110})).compareTo(test({ 1591249110})).ushr(test({ 1591249110}))
        }
    }

    return "Failed"
}
2021-03-11 22:27:17,242 [main:53] - replacing (1, Int)
2021-03-11 22:27:17,242 [main:50] - replacing 1 Int
2021-03-11 22:27:17,242 [main:54] - Getting value of type Int
2021-03-11 22:27:17,324 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:17,324 [main:58] - GENERATED VALUE OF TYPE Int = 87613192
2021-03-11 22:27:17,325 [main:61] - GENERATED IS CALL =false
2021-03-11 22:27:17,415 [main:67] - randomType = Byte
2021-03-11 22:27:17,521 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:17,578 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@77a940aa]
2021-03-11 22:27:17,659 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:27:17,660 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@43dd471f]
2021-03-11 22:27:17,661 [main:78] - Generated call from random type = (-90).div(-7249959260929781905).countTrailingZeroBits()
2021-03-11 22:27:17,661 [main:106] - GETTING Int from Int
2021-03-11 22:27:17,706 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5138d036]]
2021-03-11 22:27:17,706 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:27:17,706 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5138d036]
2021-03-11 22:27:17,707 [main:117] - GENERATED CALL = (p).toInt().shr(test({ 1591249110}))
2021-03-11 22:27:17,707 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7021ab0e]]
2021-03-11 22:27:17,707 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:27:17,707 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7021ab0e]
2021-03-11 22:27:17,707 [main:117] - GENERATED CALL = (p).toInt().countTrailingZeroBits()
2021-03-11 22:27:17,707 [main:113] - Case = [public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37a45e67]]
2021-03-11 22:27:17,707 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37a45e67]
2021-03-11 22:27:17,787 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:17,788 [main:117] - GENERATED CALL = (p).times(79)
2021-03-11 22:27:17,788 [main:113] - Case = [public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@39777ad2]]
2021-03-11 22:27:17,789 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@39777ad2]
2021-03-11 22:27:17,871 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:17,872 [main:117] - GENERATED CALL = (p).ushr(305637483)
2021-03-11 22:27:17,872 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12446614]]
2021-03-11 22:27:17,872 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:27:17,872 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12446614]
2021-03-11 22:27:17,872 [main:117] - GENERATED CALL = (p).toInt().and(p)
2021-03-11 22:27:17,873 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@7c385f68]]
2021-03-11 22:27:17,873 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd]
2021-03-11 22:27:17,873 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@7c385f68]
2021-03-11 22:27:17,957 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:17,958 [main:117] - GENERATED CALL = (p).toShort().plus(-29)
2021-03-11 22:27:17,958 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5b3ab554]]
2021-03-11 22:27:17,958 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:27:17,959 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5b3ab554]
2021-03-11 22:27:18,042 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:27:18,043 [main:117] - GENERATED CALL = (p).toChar().compareTo('㰽')
2021-03-11 22:27:18,043 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d799dea]]
2021-03-11 22:27:18,043 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:18,043 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d799dea]
2021-03-11 22:27:18,044 [main:117] - GENERATED CALL = (p).compareTo(test({ 1591249110})).or(p)
2021-03-11 22:27:18,044 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7f3daf18]]
2021-03-11 22:27:18,044 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7f3daf18]
2021-03-11 22:27:18,044 [main:117] - GENERATED CALL = (p).rotateLeft(p)
2021-03-11 22:27:18,044 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2e9d1b66]]
2021-03-11 22:27:18,045 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:18,045 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2e9d1b66]
2021-03-11 22:27:18,168 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:18,170 [main:117] - GENERATED CALL = (p).compareTo(test({ 1591249110})).rotateRight(-1546433783)
2021-03-11 22:27:18,170 [main:61] - replacement of 1 of type Int is (-90).div(-7249959260929781905).countTrailingZeroBits()
2021-03-11 22:27:18,285 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:27:18,285 [main:66] - Compilation checking started
2021-03-11 22:27:18,627 [main:53] - Result = true
Text:
inline fun test(s: () -> Int): Int =
        (24049.toUShort()).toByte().plus(44)

fun box() : String {
    test {
        try {
            val p = (-90).div(-7249959260929781905).countTrailingZeroBits()
            return (p).toString(-1065993947)
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -(test({ 1591249110})).compareTo(test({ 1591249110})).ushr(test({ 1591249110}))
        }
    }

    return "Failed"
}
2021-03-11 22:27:18,627 [main:53] - replacing (1, Int)
2021-03-11 22:27:18,627 [main:50] - replacing 1 Int
2021-03-11 22:27:18,627 [main:54] - Getting value of type Int
2021-03-11 22:27:18,716 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:18,717 [main:58] - GENERATED VALUE OF TYPE Int = -1552091992
2021-03-11 22:27:18,717 [main:61] - GENERATED IS CALL =false
2021-03-11 22:27:18,717 [main:67] - randomType = String
2021-03-11 22:27:18,805 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:27:18,833 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6b2ac950]
2021-03-11 22:27:18,923 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:19,008 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:19,010 [main:78] - Generated call from random type = ("nkhea").length.coerceIn(1184218961, 1127079804)
2021-03-11 22:27:19,010 [main:61] - replacement of 1 of type Int is ("nkhea").length.coerceIn(1184218961, 1127079804)
2021-03-11 22:27:19,104 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:27:19,105 [main:53] - replacing (10, Int)
2021-03-11 22:27:19,106 [main:50] - replacing 10 Int
2021-03-11 22:27:19,106 [main:54] - Getting value of type Int
2021-03-11 22:27:19,194 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:19,194 [main:58] - GENERATED VALUE OF TYPE Int = -2024641638
2021-03-11 22:27:19,194 [main:61] - GENERATED IS CALL =false
2021-03-11 22:27:19,282 [main:67] - randomType = Boolean
2021-03-11 22:27:19,369 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:27:19,382 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3de6a235]
2021-03-11 22:27:19,483 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:27:19,484 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@581fa170]
2021-03-11 22:27:19,484 [main:78] - Generated call from random type = (false).compareTo(true).inc()
2021-03-11 22:27:19,485 [main:106] - GETTING Int from Int
2021-03-11 22:27:19,545 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36f5468d]]
2021-03-11 22:27:19,545 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:27:19,545 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36f5468d]
2021-03-11 22:27:19,629 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:19,630 [main:117] - GENERATED CALL = (test({ 1591249110})).toInt().rem(85)
2021-03-11 22:27:19,630 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@30f2e0e0]]
2021-03-11 22:27:19,630 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:19,630 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@30f2e0e0]
2021-03-11 22:27:19,631 [main:117] - GENERATED CALL = (test({ 1591249110})).compareTo(i).unaryMinus()
2021-03-11 22:27:19,631 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@304035e4], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@33e54876]]
2021-03-11 22:27:19,631 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@304035e4]
2021-03-11 22:27:19,631 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@33e54876]
2021-03-11 22:27:19,631 [main:117] - GENERATED CALL = (test({ 1591249110})).toFloat().toRawBits()
2021-03-11 22:27:19,631 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1f6e0bcf]]
2021-03-11 22:27:19,632 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1f6e0bcf]
2021-03-11 22:27:19,632 [main:117] - GENERATED CALL = (test({ 1591249110})).takeLowestOneBit()
2021-03-11 22:27:19,632 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@11648fd6]]
2021-03-11 22:27:19,632 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@11648fd6]
2021-03-11 22:27:19,720 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:19,721 [main:117] - GENERATED CALL = (test({ 1591249110})).compareTo(-43)
2021-03-11 22:27:19,721 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@48649202], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@54362452]]
2021-03-11 22:27:19,721 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@48649202]
2021-03-11 22:27:19,808 [main:302] - generating value of type = Double true depth = 0
2021-03-11 22:27:19,809 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@54362452]
2021-03-11 22:27:19,898 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:19,900 [main:117] - GENERATED CALL = (test({ 1591249110})).div(0.8065527197199045).compareTo(-18)
2021-03-11 22:27:19,900 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1f6e0bcf]]
2021-03-11 22:27:19,900 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:20,020 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:20,026 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1f6e0bcf]
2021-03-11 22:27:20,026 [main:117] - GENERATED CALL = (test({ 1591249110})).compareTo(1614859465).takeLowestOneBit()
2021-03-11 22:27:20,026 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37a45e67]]
2021-03-11 22:27:20,026 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:27:20,027 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37a45e67]
2021-03-11 22:27:20,117 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:20,118 [main:117] - GENERATED CALL = (test({ 1591249110})).toInt().times(-36)
2021-03-11 22:27:20,118 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@51f15610]]
2021-03-11 22:27:20,119 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@51f15610]
2021-03-11 22:27:20,119 [main:117] - GENERATED CALL = (test({ 1591249110})).countOneBits()
2021-03-11 22:27:20,119 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@581fa170]]
2021-03-11 22:27:20,119 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:20,211 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:20,211 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@581fa170]
2021-03-11 22:27:20,212 [main:117] - GENERATED CALL = (test({ 1591249110})).compareTo(1860194102).inc()
2021-03-11 22:27:20,212 [main:61] - replacement of 10 of type Int is (test({ 1591249110})).toFloat().toRawBits()
2021-03-11 22:27:20,294 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:27:20,295 [main:53] - replacing ({
        try {
            val p = (-90).div(-7249959260929781905).countTrailingZeroBits()
            return (p).toString(-1065993947)
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -(test({ 1591249110})).compareTo(test({ 1591249110})).ushr(test({ 1591249110}))
        }
    }, Function0<Int>)
2021-03-11 22:27:20,295 [main:50] - replacing {
        try {
            val p = (-90).div(-7249959260929781905).countTrailingZeroBits()
            return (p).toString(-1065993947)
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -(test({ 1591249110})).compareTo(test({ 1591249110})).ushr(test({ 1591249110}))
        }
    } Function0<Int>
2021-03-11 22:27:20,295 [main:54] - Getting value of type Function0<Int>
2021-03-11 22:27:20,377 [main:302] - generating value of type = Function0<Int> false depth = 0
2021-03-11 22:27:20,377 [main:302] - generating value of type = Int true depth = 1
2021-03-11 22:27:20,377 [main:58] - GENERATED VALUE OF TYPE Function0<Int> = { 1434189829}
2021-03-11 22:27:20,378 [main:61] - GENERATED IS CALL =false
2021-03-11 22:27:20,681 [main:67] - randomType = List<Char?>
2021-03-11 22:27:20,683 [main:106] - GETTING Function0<Int> from Int
2021-03-11 22:27:20,722 [main:61] - replacement of {
        try {
            val p = (-90).div(-7249959260929781905).countTrailingZeroBits()
            return (p).toString(-1065993947)
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -(test({ 1591249110})).compareTo(test({ 1591249110})).ushr(test({ 1591249110}))
        }
    } of type Function0<Int> is { 1434189829}
2021-03-11 22:27:20,801 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 22:27:20,802 [main:66] - Compilation checking started
2021-03-11 22:27:21,036 [main:53] - Result = true
Text:
inline fun test(s: () -> Int): Int =
        (24049.toUShort()).toByte().plus(44)

fun box() : String {
    test { 1434189829}

    return "Failed"
}
2021-03-11 22:27:21,037 [main:53] - replacing (s(), Int)
2021-03-11 22:27:21,037 [main:50] - replacing s() Int
2021-03-11 22:27:21,037 [main:54] - Getting value of type Int
2021-03-11 22:27:21,130 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:21,131 [main:58] - GENERATED VALUE OF TYPE Int = 125633071
2021-03-11 22:27:21,131 [main:61] - GENERATED IS CALL =false
2021-03-11 22:27:21,203 [main:67] - randomType = ULong
2021-03-11 22:27:21,271 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 22:27:21,302 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@37cad9d7]
2021-03-11 22:27:21,383 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 22:27:21,383 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@39777ad2]
2021-03-11 22:27:21,384 [main:78] - Generated call from random type = (4596349626469269200.toULong()).compareTo(106.toUByte()).ushr(i)
2021-03-11 22:27:21,384 [main:106] - GETTING Int from Int
2021-03-11 22:27:21,419 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@45c57d7f], public open val start: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@32b92218]]
2021-03-11 22:27:21,419 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@45c57d7f]
2021-03-11 22:27:21,488 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:21,489 [main:117] - GENERATED CALL = (test({ 1591249110})).rangeTo(-26).start
2021-03-11 22:27:21,489 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6e484af9]]
2021-03-11 22:27:21,489 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a]
2021-03-11 22:27:21,489 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6e484af9]
2021-03-11 22:27:21,558 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:21,559 [main:117] - GENERATED CALL = (test({ 1591249110})).toByte().plus(29)
2021-03-11 22:27:21,559 [main:113] - Case = [public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@60f9d3e1]]
2021-03-11 22:27:21,559 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@60f9d3e1]
2021-03-11 22:27:21,559 [main:117] - GENERATED CALL = (test({ 1591249110})).coerceAtLeast(test({ 1591249110}))
2021-03-11 22:27:21,559 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@37eacfbc]]
2021-03-11 22:27:21,560 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:27:21,560 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@37eacfbc]
2021-03-11 22:27:21,560 [main:117] - GENERATED CALL = (test({ 1591249110})).toInt().coerceAtMost(i)
2021-03-11 22:27:21,560 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a], public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7b10db5e]]
2021-03-11 22:27:21,560 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a]
2021-03-11 22:27:21,560 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7b10db5e]
2021-03-11 22:27:21,560 [main:117] - GENERATED CALL = (test({ 1591249110})).toByte().toInt()
2021-03-11 22:27:21,561 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6fc8fc8f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3c1a6d8c]]
2021-03-11 22:27:21,561 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6fc8fc8f]
2021-03-11 22:27:21,561 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3c1a6d8c]
2021-03-11 22:27:21,561 [main:117] - GENERATED CALL = (test({ 1591249110})).toLong().countLeadingZeroBits()
2021-03-11 22:27:21,561 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@11648fd6]]
2021-03-11 22:27:21,561 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:21,561 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@11648fd6]
2021-03-11 22:27:21,660 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:21,661 [main:117] - GENERATED CALL = (test({ 1591249110})).compareTo(i).compareTo(69)
2021-03-11 22:27:21,661 [main:113] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6324aad8], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@78508503]]
2021-03-11 22:27:21,661 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6324aad8]
2021-03-11 22:27:21,736 [main:302] - generating value of type = Float true depth = 0
2021-03-11 22:27:21,736 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@78508503]
2021-03-11 22:27:21,737 [main:117] - GENERATED CALL = (test({ 1591249110})).div(0.17379361f).toBits()
2021-03-11 22:27:21,737 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd], public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2fba07dc]]
2021-03-11 22:27:21,737 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd]
2021-03-11 22:27:21,737 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2fba07dc]
2021-03-11 22:27:21,737 [main:117] - GENERATED CALL = (test({ 1591249110})).toShort().toInt()
2021-03-11 22:27:21,737 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63cdd551], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@24823f40]]
2021-03-11 22:27:21,737 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63cdd551]
2021-03-11 22:27:21,806 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:27:21,806 [main:117] - GENERATED CALL = (test({ 1591249110})).div(6231038879936601856).sign
2021-03-11 22:27:21,806 [main:61] - replacement of s() of type Int is (test({ 1591249110})).div(0.17379361f).toBits()
2021-03-11 22:27:21,877 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:27:21,878 [main:53] - replacing (-(test({ 1591249110})).compareTo(test({ 1591249110})).ushr(test({ 1591249110})), Int)
2021-03-11 22:27:21,878 [main:50] - replacing -(test({ 1591249110})).compareTo(test({ 1591249110})).ushr(test({ 1591249110})) Int
2021-03-11 22:27:21,878 [main:54] - Getting value of type Int
2021-03-11 22:27:21,949 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:21,949 [main:58] - GENERATED VALUE OF TYPE Int = -1817238547
2021-03-11 22:27:21,949 [main:61] - GENERATED IS CALL =false
2021-03-11 22:27:22,145 [main:67] - randomType = UInt?
2021-03-11 22:27:22,212 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 22:27:22,245 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@6d12e570]
2021-03-11 22:27:22,314 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:27:22,314 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3de6a235]
2021-03-11 22:27:22,385 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:27:22,385 [main:78] - Generated call from random type = (855742752.toUInt())?.equals("dashc").compareTo(true)
2021-03-11 22:27:22,385 [main:106] - GETTING Int from Int
2021-03-11 22:27:22,433 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@728a9b59]]
2021-03-11 22:27:22,433 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a]
2021-03-11 22:27:22,433 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@728a9b59]
2021-03-11 22:27:22,516 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:22,517 [main:117] - GENERATED CALL = (test({ 1591249110})).toByte().div(-16)
2021-03-11 22:27:22,517 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3463d5f7]]
2021-03-11 22:27:22,517 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:22,517 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3463d5f7]
2021-03-11 22:27:22,517 [main:117] - GENERATED CALL = (test({ 1591249110})).compareTo(test({ 1591249110})).toInt()
2021-03-11 22:27:22,518 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@390b15c0]]
2021-03-11 22:27:22,518 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:27:22,518 [main:117] - GENERATED CALL = (test({ 1591249110})).toInt().sign
2021-03-11 22:27:22,518 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@68d02503]]
2021-03-11 22:27:22,518 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd]
2021-03-11 22:27:22,518 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@68d02503]
2021-03-11 22:27:22,519 [main:117] - GENERATED CALL = (test({ 1591249110})).toShort().countLeadingZeroBits()
2021-03-11 22:27:22,519 [main:113] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6324aad8], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@78508503]]
2021-03-11 22:27:22,519 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6324aad8]
2021-03-11 22:27:22,593 [main:302] - generating value of type = Float true depth = 0
2021-03-11 22:27:22,594 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@78508503]
2021-03-11 22:27:22,594 [main:117] - GENERATED CALL = (test({ 1591249110})).div(0.002504468f).toBits()
2021-03-11 22:27:22,595 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6b2ac950]]
2021-03-11 22:27:22,595 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:27:22,595 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6b2ac950]
2021-03-11 22:27:22,596 [main:117] - GENERATED CALL = (test({ 1591249110})).toInt().coerceIn(test({ 1591249110}), test({ 1591249110}))
2021-03-11 22:27:22,596 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@44dce520]]
2021-03-11 22:27:22,596 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:22,666 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:22,667 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@44dce520]
2021-03-11 22:27:22,667 [main:117] - GENERATED CALL = (test({ 1591249110})).compareTo(-1568380739).shl(test({ 1591249110}))
2021-03-11 22:27:22,667 [main:113] - Case = [public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e4f51e7]]
2021-03-11 22:27:22,667 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e4f51e7]
2021-03-11 22:27:22,736 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:22,737 [main:117] - GENERATED CALL = (test({ 1591249110})).div(-47)
2021-03-11 22:27:22,737 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4b935a8b]]
2021-03-11 22:27:22,737 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a]
2021-03-11 22:27:22,737 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4b935a8b]
2021-03-11 22:27:22,737 [main:117] - GENERATED CALL = (test({ 1591249110})).toByte().countOneBits()
2021-03-11 22:27:22,737 [main:113] - Case = [public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12446614]]
2021-03-11 22:27:22,737 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12446614]
2021-03-11 22:27:22,805 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:22,806 [main:117] - GENERATED CALL = (test({ 1591249110})).and(1928033512)
2021-03-11 22:27:22,806 [main:61] - replacement of -(test({ 1591249110})).compareTo(test({ 1591249110})).ushr(test({ 1591249110})) of type Int is -1817238547
2021-03-11 22:27:22,884 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 22:27:22,885 [main:53] - replacing (s(), Int)
2021-03-11 22:27:22,885 [main:50] - replacing s() Int
2021-03-11 22:27:22,885 [main:54] - Getting value of type Int
2021-03-11 22:27:22,959 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:22,960 [main:58] - GENERATED VALUE OF TYPE Int = 870697238
2021-03-11 22:27:22,960 [main:61] - GENERATED IS CALL =false
2021-03-11 22:27:23,032 [main:67] - randomType = Char
2021-03-11 22:27:23,101 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:27:23,129 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@5b3ab554]
2021-03-11 22:27:23,197 [main:302] - generating value of type = Char true depth = 0
2021-03-11 22:27:23,198 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@51f15610]
2021-03-11 22:27:23,198 [main:78] - Generated call from random type = ('ミ').compareTo('䦈').countOneBits()
2021-03-11 22:27:23,198 [main:61] - replacement of s() of type Int is ('ミ').compareTo('䦈').countOneBits()
2021-03-11 22:27:23,292 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:27:23,367 [main:119] - TRYING TO REPLACE CONSTANT 24049
2021-03-11 22:27:23,441 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 22:27:23,441 [main:66] - Compilation checking started
2021-03-11 22:27:23,677 [main:119] - TRYING TO REPLACE CONSTANT 44
2021-03-11 22:27:23,768 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:27:23,768 [main:66] - Compilation checking started
2021-03-11 22:27:24,016 [main:53] - Result = true
Text:
inline fun test(s: () -> Int): Int =
        (24049.toUShort()).toByte().plus((24049.toUShort()).toByte().plus(44))

fun box() : String {
    test { 1434189829}

    return "Failed"
}
2021-03-11 22:27:24,016 [main:119] - TRYING TO REPLACE CONSTANT 1434189829
2021-03-11 22:27:24,085 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 22:27:24,086 [main:66] - Compilation checking started
2021-03-11 22:27:24,306 [main:53] - Result = true
Text:
inline fun test(s: () -> Int): Int =
        (24049.toUShort()).toByte().plus((24049.toUShort()).toByte().plus(44))

fun box() : String {
    test { 24049}

    return "Failed"
}
2021-03-11 22:27:24,327 [main:41] - AFTER TRY 0 res = inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}
2021-03-11 22:27:24,629 [main:43] - GENERATING CALL OF inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }
2021-03-11 22:27:24,629 [main:61] - WITHOUT TYPE PARAMS = inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }
2021-03-11 22:27:24,781 [main:302] - generating value of type = Function0<Int> false depth = 1
2021-03-11 22:27:24,781 [main:302] - generating value of type = Int true depth = 2
2021-03-11 22:27:24,782 [main:95] - GENERATED = test({ -1627866910})
2021-03-11 22:27:24,856 [main:43] - Try №0
2021-03-11 22:27:28,304 [main:69] - Trying to insert fun <Ty0> fu2(a: Kla2): Ty0 = fu5(a) {
    it.fu0()
}
2021-03-11 22:27:28,433 [main:66] - Compilation checking started
2021-03-11 22:27:29,261 [main:103] - Trying to change 76 nodes
2021-03-11 22:27:29,261 [main:107] - replacing (a, Kla2)
2021-03-11 22:27:29,261 [main:50] - replacing a Kla2
2021-03-11 22:27:29,262 [main:54] - Getting value of type Kla2
2021-03-11 22:27:29,383 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 22:27:29,384 [main:112] - generating klass Kla2 text = inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (value as Kla1).value as Ty0
}
2021-03-11 22:27:29,489 [main:194] - Type params = []
2021-03-11 22:27:29,590 [main:302] - generating value of type = Kla0 false depth = 2
2021-03-11 22:27:29,591 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:27:29,818 [main:302] - generating value of type = Kla1 false depth = 4
2021-03-11 22:27:29,819 [main:112] - generating klass Kla1 text = class Kla1(val value: Any): Kla0
2021-03-11 22:27:29,934 [main:194] - Type params = []
2021-03-11 22:27:30,033 [main:302] - generating value of type = Any false depth = 6
2021-03-11 22:27:30,034 [main:58] - GENERATED VALUE OF TYPE Kla2 = Kla2(Kla1("nyrsn"))
2021-03-11 22:27:30,034 [main:61] - GENERATED IS CALL =true
2021-03-11 22:27:30,143 [main:67] - randomType = UByte
2021-03-11 22:27:30,239 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 22:27:30,287 [main:106] - GETTING Kla2 from Int
2021-03-11 22:27:30,337 [main:106] - GETTING Kla2 from Int
2021-03-11 22:27:30,338 [main:106] - GETTING Kla2 from Int
2021-03-11 22:27:30,339 [main:106] - GETTING Kla2 from Int
2021-03-11 22:27:30,339 [main:114] - replacement of a of type Kla2 is Kla2(Kla1("nyrsn"))
2021-03-11 22:27:30,465 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:27:30,465 [main:66] - Compilation checking started
2021-03-11 22:27:30,897 [main:53] - Result = true
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (value as Kla1).value as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (value as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = (a.value as Kla1).value as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(a) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    return f(value)
}

fun box930(): String {
    var prope0 = fu2<Int>(Kla2(Kla1(40))) + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = fu3<Int>(Kla2(Kla1(40))) + 4
    if (prope0 != 44) return "FAIL 3: $prope0"

    prope0 = fu4<Int>(Kla2(Kla1(40))) + 5
    if (prope0 != 45) return "FAIL 4: $prope0"

    return "OK"
}


2021-03-11 22:27:30,899 [main:107] - replacing (prope0, Int)
2021-03-11 22:27:30,902 [main:50] - replacing prope0 Int
2021-03-11 22:27:30,902 [main:54] - Getting value of type Int
2021-03-11 22:27:31,011 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:31,011 [main:58] - GENERATED VALUE OF TYPE Int = 1339568082
2021-03-11 22:27:31,012 [main:61] - GENERATED IS CALL =false
2021-03-11 22:27:31,476 [main:67] - randomType = Map<List<Boolean>, Kla2?>
2021-03-11 22:27:31,477 [main:106] - GETTING Int from Int
2021-03-11 22:27:31,544 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7a95ed24]]
2021-03-11 22:27:31,545 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:31,545 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7a95ed24]
2021-03-11 22:27:31,547 [main:117] - GENERATED CALL = (test({ -1627866910})).compareTo(val p =.inv()
2021-03-11 22:27:31,547 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4ad1ca85]]
2021-03-11 22:27:31,547 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:31,548 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4ad1ca85]
2021-03-11 22:27:31,548 [main:117] - GENERATED CALL = (test({ -1627866910})).compareTo(-2).countLeadingZeroBits()
2021-03-11 22:27:31,548 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@304035e4], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@78508503]]
2021-03-11 22:27:31,548 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@304035e4]
2021-03-11 22:27:31,548 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@78508503]
2021-03-11 22:27:31,549 [main:117] - GENERATED CALL = (test({ -1627866910})).toFloat().toBits()
2021-03-11 22:27:31,549 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a], public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7b10db5e]]
2021-03-11 22:27:31,549 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a]
2021-03-11 22:27:31,549 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7b10db5e]
2021-03-11 22:27:31,549 [main:117] - GENERATED CALL = (test({ -1627866910})).toByte().toInt()
2021-03-11 22:27:31,550 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@45c57d7f], public open val start: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@32b92218]]
2021-03-11 22:27:31,550 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@45c57d7f]
2021-03-11 22:27:31,649 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:31,650 [main:117] - GENERATED CALL = (test({ -1627866910})).rangeTo(28).start
2021-03-11 22:27:31,651 [main:113] - Case = [@kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36f5468d]]
2021-03-11 22:27:31,651 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36f5468d]
2021-03-11 22:27:31,751 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:31,752 [main:117] - GENERATED CALL = (test({ -1627866910})).rem(88)
2021-03-11 22:27:31,752 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@495e3dd2]]
2021-03-11 22:27:31,752 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd]
2021-03-11 22:27:31,752 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@495e3dd2]
2021-03-11 22:27:31,856 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:31,858 [main:117] - GENERATED CALL = (test({ -1627866910})).toShort().div(45)
2021-03-11 22:27:31,858 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12446614]]
2021-03-11 22:27:31,858 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:27:31,858 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12446614]
2021-03-11 22:27:31,858 [main:117] - GENERATED CALL = (test({ -1627866910})).toInt().and(-2)
2021-03-11 22:27:31,859 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1e551bfd]]
2021-03-11 22:27:31,859 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:31,859 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1e551bfd]
2021-03-11 22:27:31,860 [main:117] - GENERATED CALL = (test({ -1627866910})).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).takeHighestOneBit()
2021-03-11 22:27:31,860 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37a45e67]]
2021-03-11 22:27:31,860 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:27:31,861 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37a45e67]
2021-03-11 22:27:31,963 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:31,964 [main:117] - GENERATED CALL = (test({ -1627866910})).toInt().times(36)
2021-03-11 22:27:31,964 [main:114] - replacement of prope0 of type Int is (test({ -1627866910})).toInt().times(36)
2021-03-11 22:27:32,107 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:27:32,108 [main:66] - Compilation checking started
2021-03-11 22:27:32,525 [main:53] - Result = true
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (value as Kla1).value as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (value as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = (a.value as Kla1).value as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(a) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = fu2<Int>(Kla2(Kla1(40))) + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = fu3<Int>(Kla2(Kla1(40))) + 4
    if ((test({ -1627866910})).toInt().times(36) != 44) return "FAIL 3: $prope0"

    prope0 = fu4<Int>(Kla2(Kla1(40))) + 5
    if (prope0 != 45) return "FAIL 4: $prope0"

    return "OK"
}


2021-03-11 22:27:32,526 [main:107] - replacing (value, Any)
2021-03-11 22:27:32,526 [main:50] - replacing value Any
2021-03-11 22:27:32,526 [main:54] - Getting value of type Any
2021-03-11 22:27:32,626 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:27:32,626 [main:58] - GENERATED VALUE OF TYPE Any = "grbsc"
2021-03-11 22:27:32,626 [main:61] - GENERATED IS CALL =false
2021-03-11 22:27:32,736 [main:67] - randomType = Kla2?
2021-03-11 22:27:32,842 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 22:27:32,843 [main:112] - generating klass Kla2 text = inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (value as Kla1).value as Ty0
}
2021-03-11 22:27:32,943 [main:194] - Type params = []
2021-03-11 22:27:33,073 [main:302] - generating value of type = Kla0 false depth = 2
2021-03-11 22:27:33,073 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:27:33,288 [main:302] - generating value of type = Kla1 false depth = 4
2021-03-11 22:27:33,289 [main:112] - generating klass Kla1 text = class Kla1(val value: Any): Kla0
2021-03-11 22:27:33,390 [main:194] - Type params = []
2021-03-11 22:27:33,485 [main:302] - generating value of type = Any false depth = 6
2021-03-11 22:27:33,511 [main:106] - GETTING Any from Int
2021-03-11 22:27:33,575 [main:114] - replacement of value of type Any is test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }
2021-03-11 22:27:33,674 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:27:33,674 [main:66] - Compilation checking started
2021-03-11 22:27:33,972 [main:49] - Result = false
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (value as Kla1).test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    } as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (value as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = (a.value as Kla1).value as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(a) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = fu2<Int>(Kla2(Kla1(40))) + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = fu3<Int>(Kla2(Kla1(40))) + 4
    if ((test({ -1627866910})).toInt().times(36) != 44) return "FAIL 3: $prope0"

    prope0 = fu4<Int>(Kla2(Kla1(40))) + 5
    if (prope0 != 45) return "FAIL 4: $prope0"

    return "OK"
}


2021-03-11 22:27:33,973 [main:107] - replacing (prope0, Int)
2021-03-11 22:27:33,974 [main:50] - replacing prope0 Int
2021-03-11 22:27:33,974 [main:54] - Getting value of type Int
2021-03-11 22:27:34,079 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:34,079 [main:58] - GENERATED VALUE OF TYPE Int = -876230357
2021-03-11 22:27:34,080 [main:61] - GENERATED IS CALL =false
2021-03-11 22:27:34,524 [main:67] - randomType = LinkedHashSet<UShort?>?
2021-03-11 22:27:34,669 [main:302] - generating value of type = LinkedHashSet<UShort?> false depth = 0
2021-03-11 22:27:34,824 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(): LinkedHashSet<UShort?> = TODO()
2021-03-11 22:27:34,826 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(): LinkedHashSet<UShort?> = TODO()
2021-03-11 22:27:34,937 [main:95] - GENERATED = LinkedHashSet<UShort?>()
2021-03-11 22:27:35,154 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.indexOfFirst(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@522c56e8]
2021-03-11 22:27:35,256 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-11 22:27:35,257 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 22:27:35,258 [main:78] - Generated call from random type = (LinkedHashSet<UShort?>())?.indexOfFirst({a: T -> false})
2021-03-11 22:27:35,259 [main:106] - GETTING Int from Int
2021-03-11 22:27:35,320 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7f3daf18]]
2021-03-11 22:27:35,320 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:35,422 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:35,424 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7f3daf18]
2021-03-11 22:27:35,424 [main:117] - GENERATED CALL = (-2).compareTo(-800157549).rotateLeft(val p =
2021-03-11 22:27:35,425 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@608030b3]]
2021-03-11 22:27:35,425 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a]
2021-03-11 22:27:35,425 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@608030b3]
2021-03-11 22:27:35,523 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:35,525 [main:117] - GENERATED CALL = (-2).toByte().minus(-18)
2021-03-11 22:27:35,525 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@304035e4], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@78508503]]
2021-03-11 22:27:35,525 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@304035e4]
2021-03-11 22:27:35,525 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@78508503]
2021-03-11 22:27:35,526 [main:117] - GENERATED CALL = (-2).toFloat().toBits()
2021-03-11 22:27:35,526 [main:113] - Case = [public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@60f9d3e1]]
2021-03-11 22:27:35,526 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@60f9d3e1]
2021-03-11 22:27:35,661 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:35,663 [main:117] - GENERATED CALL = (-2).coerceAtLeast(-1747091627)
2021-03-11 22:27:35,663 [main:113] - Case = [@kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@390b15c0]]
2021-03-11 22:27:35,663 [main:117] - GENERATED CALL = (-2).sign
2021-03-11 22:27:35,663 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6fc8fc8f], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@784ec44d]]
2021-03-11 22:27:35,663 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6fc8fc8f]
2021-03-11 22:27:35,663 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@784ec44d]
2021-03-11 22:27:35,773 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:35,774 [main:117] - GENERATED CALL = (-2).toLong().compareTo(-88)
2021-03-11 22:27:35,775 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@51f15610]]
2021-03-11 22:27:35,775 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:27:35,775 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@51f15610]
2021-03-11 22:27:35,775 [main:117] - GENERATED CALL = (-2).toInt().countOneBits()
2021-03-11 22:27:35,776 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@51f15610]]
2021-03-11 22:27:35,776 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:35,776 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@51f15610]
2021-03-11 22:27:35,777 [main:117] - GENERATED CALL = (-2).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).countOneBits()
2021-03-11 22:27:35,777 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e8712b0]]
2021-03-11 22:27:35,777 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:35,873 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:35,874 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e8712b0]
2021-03-11 22:27:35,966 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:35,967 [main:117] - GENERATED CALL = (-2).compareTo(-150958743).minus(119)
2021-03-11 22:27:35,967 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@581fa170]]
2021-03-11 22:27:35,967 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:35,967 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@581fa170]
2021-03-11 22:27:35,968 [main:117] - GENERATED CALL = (-2).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).inc()
2021-03-11 22:27:35,968 [main:114] - replacement of prope0 of type Int is -876230357
2021-03-11 22:27:36,062 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 22:27:36,062 [main:66] - Compilation checking started
2021-03-11 22:27:36,285 [main:49] - Result = false
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (value as Kla1).value as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (value as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = (a.value as Kla1).value as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(a) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = fu2<Int>(Kla2(Kla1(40))) + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = fu3<Int>(Kla2(Kla1(40))) + 4
    if ((test({ -1627866910})).toInt().times(36) != 44) return "FAIL 3: $prope0"

    -876230357 = fu4<Int>(Kla2(Kla1(40))) + 5
    if (prope0 != 45) return "FAIL 4: $prope0"

    return "OK"
}


2021-03-11 22:27:36,286 [main:107] - replacing (a, Kla2)
2021-03-11 22:27:36,286 [main:50] - replacing a Kla2
2021-03-11 22:27:36,286 [main:54] - Getting value of type Kla2
2021-03-11 22:27:36,391 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 22:27:36,392 [main:112] - generating klass Kla2 text = inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (value as Kla1).value as Ty0
}
2021-03-11 22:27:36,549 [main:194] - Type params = []
2021-03-11 22:27:36,666 [main:302] - generating value of type = Kla0 false depth = 2
2021-03-11 22:27:36,667 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:27:36,858 [main:302] - generating value of type = Kla1 false depth = 4
2021-03-11 22:27:36,859 [main:112] - generating klass Kla1 text = class Kla1(val value: Any): Kla0
2021-03-11 22:27:36,961 [main:194] - Type params = []
2021-03-11 22:27:37,061 [main:302] - generating value of type = Any false depth = 6
2021-03-11 22:27:37,062 [main:58] - GENERATED VALUE OF TYPE Kla2 = Kla2(Kla1("gdwgq"))
2021-03-11 22:27:37,062 [main:61] - GENERATED IS CALL =true
2021-03-11 22:27:37,216 [main:67] - randomType = Boolean?
2021-03-11 22:27:37,349 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:27:37,366 [main:106] - GETTING Kla2 from Int
2021-03-11 22:27:37,413 [main:106] - GETTING Kla2 from Int
2021-03-11 22:27:37,414 [main:106] - GETTING Kla2 from Int
2021-03-11 22:27:37,415 [main:106] - GETTING Kla2 from Int
2021-03-11 22:27:37,415 [main:114] - replacement of a of type Kla2 is Kla2(Kla1("gdwgq"))
2021-03-11 22:27:37,507 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:27:37,507 [main:66] - Compilation checking started
2021-03-11 22:27:37,889 [main:53] - Result = true
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (value as Kla1).value as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (value as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = (a.value as Kla1).value as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = fu2<Int>(Kla2(Kla1(40))) + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = fu3<Int>(Kla2(Kla1(40))) + 4
    if ((test({ -1627866910})).toInt().times(36) != 44) return "FAIL 3: $prope0"

    prope0 = fu4<Int>(Kla2(Kla1(40))) + 5
    if (prope0 != 45) return "FAIL 4: $prope0"

    return "OK"
}


2021-03-11 22:27:37,890 [main:107] - replacing ((value as Kla1).value as Ty0, Ty0)
2021-03-11 22:27:37,890 [main:50] - replacing (value as Kla1).value as Ty0 Ty0
2021-03-11 22:27:37,890 [main:54] - Getting value of type Ty0
2021-03-11 22:27:37,983 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 22:27:37,988 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 22:27:38,190 [main:67] - randomType = Byte?
2021-03-11 22:27:38,285 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:38,359 [main:106] - GETTING Ty0 from Int
2021-03-11 22:27:38,410 [main:106] - GETTING Ty0 from Int
2021-03-11 22:27:38,411 [main:106] - GETTING Ty0 from Int
2021-03-11 22:27:38,411 [main:106] - GETTING Ty0 from Int
2021-03-11 22:27:38,412 [main:111] - Cant find and generate replacement for (value as Kla1).value as Ty0 type Ty0
2021-03-11 22:27:38,412 [main:107] - replacing (value, Any)
2021-03-11 22:27:38,412 [main:50] - replacing value Any
2021-03-11 22:27:38,412 [main:54] - Getting value of type Any
2021-03-11 22:27:38,502 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:27:38,503 [main:58] - GENERATED VALUE OF TYPE Any = "vawbf"
2021-03-11 22:27:38,503 [main:61] - GENERATED IS CALL =false
2021-03-11 22:27:38,600 [main:67] - randomType = Kla2?
2021-03-11 22:27:38,686 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 22:27:38,687 [main:112] - generating klass Kla2 text = inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (value as Kla1).value as Ty0
}
2021-03-11 22:27:38,776 [main:194] - Type params = []
2021-03-11 22:27:38,866 [main:302] - generating value of type = Kla0 false depth = 2
2021-03-11 22:27:38,867 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:27:39,088 [main:302] - generating value of type = Kla2 false depth = 4
2021-03-11 22:27:39,099 [main:112] - generating klass Kla2 text = inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (value as Kla1).value as Ty0
}
2021-03-11 22:27:39,196 [main:194] - Type params = []
2021-03-11 22:27:39,286 [main:302] - generating value of type = Kla0 false depth = 6
2021-03-11 22:27:39,287 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:27:39,467 [main:302] - generating value of type = Kla2 false depth = 8
2021-03-11 22:27:39,468 [main:112] - generating klass Kla2 text = inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (value as Kla1).value as Ty0
}
2021-03-11 22:27:39,586 [main:194] - Type params = []
2021-03-11 22:27:39,694 [main:302] - generating value of type = Kla0 false depth = 10
2021-03-11 22:27:39,695 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:27:39,893 [main:302] - generating value of type = Kla2 false depth = 12
2021-03-11 22:27:39,894 [main:112] - generating klass Kla2 text = inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (value as Kla1).value as Ty0
}
2021-03-11 22:27:39,981 [main:194] - Type params = []
2021-03-11 22:27:40,067 [main:302] - generating value of type = Kla0 false depth = 14
2021-03-11 22:27:40,068 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:27:40,308 [main:302] - generating value of type = Kla1 false depth = 16
2021-03-11 22:27:40,331 [main:106] - GETTING Any from Int
2021-03-11 22:27:40,392 [main:114] - replacement of value of type Any is test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }
2021-03-11 22:27:40,497 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:27:40,497 [main:66] - Compilation checking started
2021-03-11 22:27:40,723 [main:49] - Result = false
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (value as Kla1).value as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (value as Kla1).test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    } as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = (a.value as Kla1).value as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = fu2<Int>(Kla2(Kla1(40))) + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = fu3<Int>(Kla2(Kla1(40))) + 4
    if ((test({ -1627866910})).toInt().times(36) != 44) return "FAIL 3: $prope0"

    prope0 = fu4<Int>(Kla2(Kla1(40))) + 5
    if (prope0 != 45) return "FAIL 4: $prope0"

    return "OK"
}


2021-03-11 22:27:40,724 [main:107] - replacing (a.value, Kla0)
2021-03-11 22:27:40,724 [main:50] - replacing a.value Kla0
2021-03-11 22:27:40,724 [main:54] - Getting value of type Kla0
2021-03-11 22:27:40,810 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 22:27:40,810 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:27:41,015 [main:302] - generating value of type = Kla2 false depth = 2
2021-03-11 22:27:41,016 [main:112] - generating klass Kla2 text = inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (value as Kla1).value as Ty0
}
2021-03-11 22:27:41,137 [main:194] - Type params = []
2021-03-11 22:27:41,224 [main:302] - generating value of type = Kla0 false depth = 4
2021-03-11 22:27:41,225 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:27:41,407 [main:302] - generating value of type = Kla2 false depth = 6
2021-03-11 22:27:41,408 [main:112] - generating klass Kla2 text = inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (value as Kla1).value as Ty0
}
2021-03-11 22:27:41,492 [main:194] - Type params = []
2021-03-11 22:27:41,621 [main:302] - generating value of type = Kla0 false depth = 8
2021-03-11 22:27:41,621 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:27:41,806 [main:302] - generating value of type = Kla1 false depth = 10
2021-03-11 22:27:41,807 [main:112] - generating klass Kla1 text = class Kla1(val value: Any): Kla0
2021-03-11 22:27:41,893 [main:194] - Type params = []
2021-03-11 22:27:41,981 [main:302] - generating value of type = Any false depth = 12
2021-03-11 22:27:41,981 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla2(Kla2(Kla1("sgkrx")))
2021-03-11 22:27:41,982 [main:61] - GENERATED IS CALL =true
2021-03-11 22:27:42,405 [main:67] - randomType = LinkedHashMap<Set<ULong>, Kla0>
2021-03-11 22:27:42,491 [main:302] - generating value of type = LinkedHashMap<Set<ULong>, Kla0> false depth = 0
2021-03-11 22:27:42,583 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int): LinkedHashMap<Set<ULong>, Kla0> = TODO()
2021-03-11 22:27:42,585 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int): LinkedHashMap<Set<ULong>, Kla0> = TODO()
2021-03-11 22:27:42,811 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:27:42,812 [main:95] - GENERATED = LinkedHashMap<Set<ULong>, Kla0>(-515307053)
2021-03-11 22:27:43,041 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun <K, V> kotlin.collections.Map<K, V>.getValue(key: K): V defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1e441f46]
2021-03-11 22:27:43,128 [main:302] - generating value of type = K false depth = 0
2021-03-11 22:27:43,132 [main:158] - CANT GENERATE PARAMS FOR @kotlin.SinceKotlin public fun <K, V> kotlin.collections.Map<K, V>.getValue(key: K): V defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1e441f46]
2021-03-11 22:27:43,133 [main:78] - Generated call from random type = (LinkedHashMap<Set<ULong>, Kla0>(-515307053)).null!!
2021-03-11 22:27:43,134 [main:106] - GETTING Kla0 from Int
2021-03-11 22:27:43,191 [main:106] - GETTING Kla0 from Int
2021-03-11 22:27:43,192 [main:106] - GETTING Kla0 from Int
2021-03-11 22:27:43,193 [main:106] - GETTING Kla0 from Int
2021-03-11 22:27:43,193 [main:114] - replacement of a.value of type Kla0 is Kla2(Kla2(Kla1("sgkrx")))
2021-03-11 22:27:43,280 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:27:43,280 [main:66] - Compilation checking started
2021-03-11 22:27:43,655 [main:53] - Result = true
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (value as Kla1).value as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (value as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = (Kla2(Kla2(Kla1("sgkrx"))) as Kla1).value as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = fu2<Int>(Kla2(Kla1(40))) + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = fu3<Int>(Kla2(Kla1(40))) + 4
    if ((test({ -1627866910})).toInt().times(36) != 44) return "FAIL 3: $prope0"

    prope0 = fu4<Int>(Kla2(Kla1(40))) + 5
    if (prope0 != 45) return "FAIL 4: $prope0"

    return "OK"
}


2021-03-11 22:27:43,656 [main:107] - replacing (prope0, Int)
2021-03-11 22:27:43,656 [main:50] - replacing prope0 Int
2021-03-11 22:27:43,656 [main:54] - Getting value of type Int
2021-03-11 22:27:43,753 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:43,754 [main:58] - GENERATED VALUE OF TYPE Int = 605674244
2021-03-11 22:27:43,754 [main:61] - GENERATED IS CALL =false
2021-03-11 22:27:44,299 [main:67] - randomType = Function1<ArrayList<Kla0>, Sequence<Kla2?>>
2021-03-11 22:27:44,299 [main:106] - GETTING Int from Int
2021-03-11 22:27:44,353 [main:113] - Case = [public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d799dea]]
2021-03-11 22:27:44,354 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d799dea]
2021-03-11 22:27:44,444 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:44,446 [main:117] - GENERATED CALL = (-2).or(2088516722)
2021-03-11 22:27:44,446 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4468febc]]
2021-03-11 22:27:44,446 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd]
2021-03-11 22:27:44,446 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4468febc]
2021-03-11 22:27:44,544 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:44,546 [main:117] - GENERATED CALL = (-2).toShort().rem(110)
2021-03-11 22:27:44,546 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1c0ff117]]
2021-03-11 22:27:44,546 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd]
2021-03-11 22:27:44,546 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1c0ff117]
2021-03-11 22:27:44,643 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:44,644 [main:117] - GENERATED CALL = (-2).toShort().times(95)
2021-03-11 22:27:44,644 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@ad7cc4c]]
2021-03-11 22:27:44,644 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a]
2021-03-11 22:27:44,644 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@ad7cc4c]
2021-03-11 22:27:44,645 [main:117] - GENERATED CALL = (-2).toByte().countLeadingZeroBits()
2021-03-11 22:27:44,645 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37a45e67]]
2021-03-11 22:27:44,645 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:27:44,645 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37a45e67]
2021-03-11 22:27:44,729 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:44,730 [main:117] - GENERATED CALL = (-2).toInt().times(-126)
2021-03-11 22:27:44,730 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@467f2235]]
2021-03-11 22:27:44,730 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:44,731 [main:117] - GENERATED CALL = (-2).compareTo(test({ -1627866910})).absoluteValue
2021-03-11 22:27:44,731 [main:113] - Case = [public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37a45e67]]
2021-03-11 22:27:44,731 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37a45e67]
2021-03-11 22:27:44,812 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:44,813 [main:117] - GENERATED CALL = (-2).times(-80)
2021-03-11 22:27:44,813 [main:113] - Case = [public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@39777ad2]]
2021-03-11 22:27:44,813 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@39777ad2]
2021-03-11 22:27:44,814 [main:117] - GENERATED CALL = (-2).ushr(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
2021-03-11 22:27:44,814 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@77cbedfb]]
2021-03-11 22:27:44,814 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd]
2021-03-11 22:27:44,814 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@77cbedfb]
2021-03-11 22:27:44,896 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:44,897 [main:117] - GENERATED CALL = (-2).toShort().minus(-90)
2021-03-11 22:27:44,900 [main:113] - Case = [public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5138d036]]
2021-03-11 22:27:44,900 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5138d036]
2021-03-11 22:27:44,982 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:44,983 [main:117] - GENERATED CALL = (-2).shr(1058946036)
2021-03-11 22:27:44,983 [main:114] - replacement of prope0 of type Int is (-2).shr(1058946036)
2021-03-11 22:27:45,065 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:27:45,066 [main:66] - Compilation checking started
2021-03-11 22:27:45,386 [main:53] - Result = true
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (value as Kla1).value as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (value as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = (Kla2(Kla2(Kla1("sgkrx"))) as Kla1).value as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = fu2<Int>(Kla2(Kla1(40))) + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = fu3<Int>(Kla2(Kla1(40))) + 4
    if ((test({ -1627866910})).toInt().times(36) != 44) return "FAIL 3: $prope0"

    prope0 = fu4<Int>(Kla2(Kla1(40))) + 5
    if ((-2).shr(1058946036) != 45) return "FAIL 4: $prope0"

    return "OK"
}


2021-03-11 22:27:45,387 [main:107] - replacing ((Kla2(Kla2(Kla1("sgkrx"))) as Kla1), Kla1)
2021-03-11 22:27:45,388 [main:50] - replacing (Kla2(Kla2(Kla1("sgkrx"))) as Kla1) Kla1
2021-03-11 22:27:45,388 [main:54] - Getting value of type Kla1
2021-03-11 22:27:45,498 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 22:27:45,499 [main:112] - generating klass Kla1 text = class Kla1(val value: Any): Kla0
2021-03-11 22:27:45,601 [main:194] - Type params = []
2021-03-11 22:27:45,699 [main:302] - generating value of type = Any false depth = 2
2021-03-11 22:27:45,700 [main:58] - GENERATED VALUE OF TYPE Kla1 = Kla1("qlhze")
2021-03-11 22:27:45,700 [main:61] - GENERATED IS CALL =true
2021-03-11 22:27:45,703 [main:67] - randomType = Kla0
2021-03-11 22:27:45,703 [main:106] - GETTING Kla1 from Int
2021-03-11 22:27:45,741 [main:106] - GETTING Kla1 from Int
2021-03-11 22:27:45,741 [main:106] - GETTING Kla1 from Int
2021-03-11 22:27:45,742 [main:106] - GETTING Kla1 from Int
2021-03-11 22:27:45,742 [main:114] - replacement of (Kla2(Kla2(Kla1("sgkrx"))) as Kla1) of type Kla1 is Kla1("qlhze")
2021-03-11 22:27:45,825 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(CALL_EXPRESSION)
2021-03-11 22:27:45,825 [main:66] - Compilation checking started
2021-03-11 22:27:46,150 [main:53] - Result = true
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (value as Kla1).value as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (value as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = Kla1("qlhze").value as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = fu2<Int>(Kla2(Kla1(40))) + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = fu3<Int>(Kla2(Kla1(40))) + 4
    if ((test({ -1627866910})).toInt().times(36) != 44) return "FAIL 3: $prope0"

    prope0 = fu4<Int>(Kla2(Kla1(40))) + 5
    if ((-2).shr(1058946036) != 45) return "FAIL 4: $prope0"

    return "OK"
}


2021-03-11 22:27:46,151 [main:107] - replacing (fu2<Int>(Kla2(Kla1(40))) + 3, Int)
2021-03-11 22:27:46,151 [main:50] - replacing fu2<Int>(Kla2(Kla1(40))) + 3 Int
2021-03-11 22:27:46,151 [main:54] - Getting value of type Int
2021-03-11 22:27:46,232 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:46,233 [main:58] - GENERATED VALUE OF TYPE Int = 607991147
2021-03-11 22:27:46,233 [main:61] - GENERATED IS CALL =false
2021-03-11 22:27:46,234 [main:67] - randomType = String
2021-03-11 22:27:46,318 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:27:46,348 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@198549aa]
2021-03-11 22:27:46,434 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:27:46,436 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@42a85b18]
2021-03-11 22:27:46,518 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:46,519 [main:78] - Generated call from random type = ("hogmf").compareTo("hjesp").plus(11)
2021-03-11 22:27:46,519 [main:106] - GETTING Int from Int
2021-03-11 22:27:46,571 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37a45e67]]
2021-03-11 22:27:46,571 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:46,656 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:46,657 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37a45e67]
2021-03-11 22:27:46,740 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:46,741 [main:117] - GENERATED CALL = (-3).compareTo(-846460559).times(-127)
2021-03-11 22:27:46,741 [main:113] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6324aad8], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@78508503]]
2021-03-11 22:27:46,742 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6324aad8]
2021-03-11 22:27:46,823 [main:302] - generating value of type = Float true depth = 0
2021-03-11 22:27:46,824 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@78508503]
2021-03-11 22:27:46,825 [main:117] - GENERATED CALL = (-3).div(0.4813518f).toBits()
2021-03-11 22:27:46,825 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@de1d842]]
2021-03-11 22:27:46,825 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a]
2021-03-11 22:27:46,825 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@de1d842]
2021-03-11 22:27:46,825 [main:117] - GENERATED CALL = (-3).toByte().unaryPlus()
2021-03-11 22:27:46,825 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d799dea]]
2021-03-11 22:27:46,825 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:46,825 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d799dea]
2021-03-11 22:27:46,826 [main:117] - GENERATED CALL = (-3).compareTo(val p =.or(-2)
2021-03-11 22:27:46,826 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@390b15c0]]
2021-03-11 22:27:46,826 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:46,826 [main:117] - GENERATED CALL = (-3).compareTo(-3).sign
2021-03-11 22:27:46,826 [main:113] - Case = [public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d799dea]]
2021-03-11 22:27:46,826 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d799dea]
2021-03-11 22:27:46,906 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:46,907 [main:117] - GENERATED CALL = (-3).or(1033307839)
2021-03-11 22:27:46,907 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1c0ff117]]
2021-03-11 22:27:46,907 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd]
2021-03-11 22:27:46,907 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1c0ff117]
2021-03-11 22:27:46,987 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:46,988 [main:117] - GENERATED CALL = (-3).toShort().times(-120)
2021-03-11 22:27:46,988 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7021ab0e]]
2021-03-11 22:27:46,988 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:46,988 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7021ab0e]
2021-03-11 22:27:46,989 [main:117] - GENERATED CALL = (-3).compareTo(-2).countTrailingZeroBits()
2021-03-11 22:27:46,989 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1f6e0bcf]]
2021-03-11 22:27:46,989 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1f6e0bcf]
2021-03-11 22:27:46,989 [main:117] - GENERATED CALL = (-3).takeLowestOneBit()
2021-03-11 22:27:46,989 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6af24d36]]
2021-03-11 22:27:46,989 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd]
2021-03-11 22:27:46,989 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6af24d36]
2021-03-11 22:27:46,989 [main:117] - GENERATED CALL = (-3).toShort().unaryMinus()
2021-03-11 22:27:46,989 [main:114] - replacement of fu2<Int>(Kla2(Kla1(40))) + 3 of type Int is (-3).compareTo(-3).sign
2021-03-11 22:27:47,071 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:27:47,071 [main:66] - Compilation checking started
2021-03-11 22:27:47,308 [main:49] - Result = false
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (value as Kla1).value as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (value as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = Kla1("qlhze").value as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (-3).compareTo(-3).sign
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = fu3<Int>(Kla2(Kla1(40))) + 4
    if ((test({ -1627866910})).toInt().times(36) != 44) return "FAIL 3: $prope0"

    prope0 = fu4<Int>(Kla2(Kla1(40))) + 5
    if ((-2).shr(1058946036) != 45) return "FAIL 4: $prope0"

    return "OK"
}


2021-03-11 22:27:47,309 [main:107] - replacing ({
    fu1(it)
}, Function1<Kla2, Ty0>)
2021-03-11 22:27:47,310 [main:50] - replacing {
    fu1(it)
} Function1<Kla2, Ty0>
2021-03-11 22:27:47,310 [main:54] - Getting value of type Function1<Kla2, Ty0>
2021-03-11 22:27:47,408 [main:302] - generating value of type = Function1<Kla2, Ty0> false depth = 0
2021-03-11 22:27:47,409 [main:302] - generating value of type = Ty0 false depth = 1
2021-03-11 22:27:47,413 [main:58] - GENERATED VALUE OF TYPE Function1<Kla2, Ty0> = {a: Kla2 -> }
2021-03-11 22:27:47,413 [main:61] - GENERATED IS CALL =false
2021-03-11 22:27:47,502 [main:67] - randomType = Short
2021-03-11 22:27:47,583 [main:302] - generating value of type = Short true depth = 0
2021-03-11 22:27:47,621 [main:106] - GETTING Function1<Kla2, Ty0> from Int
2021-03-11 22:27:47,660 [main:106] - GETTING Function1<Kla2, Ty0> from Int
2021-03-11 22:27:47,661 [main:106] - GETTING Function1<Kla2, Ty0> from Int
2021-03-11 22:27:47,662 [main:106] - GETTING Function1<Kla2, Ty0> from Int
2021-03-11 22:27:47,662 [main:114] - replacement of {
    fu1(it)
} of type Function1<Kla2, Ty0> is {a: Kla2 -> }
2021-03-11 22:27:47,746 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 22:27:47,747 [main:66] - Compilation checking started
2021-03-11 22:27:47,957 [main:49] - Result = false
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (value as Kla1).value as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (value as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = Kla1("qlhze").value as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {a: Kla2 -> }

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = fu2<Int>(Kla2(Kla1(40))) + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = fu3<Int>(Kla2(Kla1(40))) + 4
    if ((test({ -1627866910})).toInt().times(36) != 44) return "FAIL 3: $prope0"

    prope0 = fu4<Int>(Kla2(Kla1(40))) + 5
    if ((-2).shr(1058946036) != 45) return "FAIL 4: $prope0"

    return "OK"
}


2021-03-11 22:27:47,959 [main:107] - replacing ("FAIL 3: $prope0", String)
2021-03-11 22:27:47,959 [main:50] - replacing "FAIL 3: $prope0" String
2021-03-11 22:27:47,959 [main:54] - Getting value of type String
2021-03-11 22:27:48,047 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:27:48,049 [main:58] - GENERATED VALUE OF TYPE String = "cylwl"
2021-03-11 22:27:48,049 [main:61] - GENERATED IS CALL =false
2021-03-11 22:27:48,053 [main:67] - randomType = Kla2
2021-03-11 22:27:48,136 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 22:27:48,137 [main:112] - generating klass Kla2 text = inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (value as Kla1).value as Ty0
}
2021-03-11 22:27:48,233 [main:194] - Type params = []
2021-03-11 22:27:48,314 [main:302] - generating value of type = Kla0 false depth = 2
2021-03-11 22:27:48,315 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:27:48,487 [main:302] - generating value of type = Kla1 false depth = 4
2021-03-11 22:27:48,488 [main:112] - generating klass Kla1 text = class Kla1(val value: Any): Kla0
2021-03-11 22:27:48,574 [main:194] - Type params = []
2021-03-11 22:27:48,662 [main:302] - generating value of type = Any false depth = 6
2021-03-11 22:27:48,675 [main:106] - GETTING String from Int
2021-03-11 22:27:48,721 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]]
2021-03-11 22:27:48,721 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:48,801 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:48,802 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]
2021-03-11 22:27:48,803 [main:117] - GENERATED CALL = (-3).compareTo(520368736).toString(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
2021-03-11 22:27:48,803 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@416d03a5]]
2021-03-11 22:27:48,803 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:27:48,803 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@416d03a5]
2021-03-11 22:27:48,803 [main:117] - GENERATED CALL = (-3).toChar().lowercase()
2021-03-11 22:27:48,803 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15e7f7d8]]
2021-03-11 22:27:48,803 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:27:48,803 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15e7f7d8]
2021-03-11 22:27:48,803 [main:117] - GENERATED CALL = (-3).toChar().uppercase()
2021-03-11 22:27:48,803 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58808d82]]
2021-03-11 22:27:48,804 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:27:48,804 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58808d82]
2021-03-11 22:27:48,804 [main:117] - GENERATED CALL = (-3).toChar().titlecase()
2021-03-11 22:27:48,804 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]]
2021-03-11 22:27:48,804 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]
2021-03-11 22:27:48,804 [main:117] - GENERATED CALL = (-3).toString(-3)
2021-03-11 22:27:48,804 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6fc8fc8f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]]
2021-03-11 22:27:48,804 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6fc8fc8f]
2021-03-11 22:27:48,804 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]
2021-03-11 22:27:48,886 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:48,887 [main:117] - GENERATED CALL = (-3).toLong().toString(-1663411174)
2021-03-11 22:27:48,887 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63cdd551], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]]
2021-03-11 22:27:48,887 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63cdd551]
2021-03-11 22:27:48,981 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:27:48,982 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]
2021-03-11 22:27:48,983 [main:117] - GENERATED CALL = (-3).div(-265817438999564427).toString(-3)
2021-03-11 22:27:48,983 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ef7baad]]
2021-03-11 22:27:48,983 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:27:48,983 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ef7baad]
2021-03-11 22:27:49,081 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:27:49,083 [main:117] - GENERATED CALL = (-3).toChar().plus("eiltk")
2021-03-11 22:27:49,083 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]]
2021-03-11 22:27:49,083 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:27:49,083 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]
2021-03-11 22:27:49,083 [main:117] - GENERATED CALL = (-3).toInt().toString(val p =
2021-03-11 22:27:49,083 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6694d9]]
2021-03-11 22:27:49,084 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a]
2021-03-11 22:27:49,084 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6694d9]
2021-03-11 22:27:49,084 [main:117] - GENERATED CALL = (-3).toByte().toString(-2)
2021-03-11 22:27:49,084 [main:114] - replacement of "FAIL 3: $prope0" of type String is (-3).toLong().toString(-1663411174)
2021-03-11 22:27:49,173 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:27:49,174 [main:66] - Compilation checking started
2021-03-11 22:27:49,488 [main:53] - Result = true
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (value as Kla1).value as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (value as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = Kla1("qlhze").value as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = fu2<Int>(Kla2(Kla1(40))) + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = fu3<Int>(Kla2(Kla1(40))) + 4
    if ((test({ -1627866910})).toInt().times(36) != 44) return (-3).toLong().toString(-1663411174)

    prope0 = fu4<Int>(Kla2(Kla1(40))) + 5
    if ((-2).shr(1058946036) != 45) return "FAIL 4: $prope0"

    return "OK"
}


2021-03-11 22:27:49,489 [main:107] - replacing (prope0, Int)
2021-03-11 22:27:49,489 [main:50] - replacing prope0 Int
2021-03-11 22:27:49,489 [main:54] - Getting value of type Int
2021-03-11 22:27:49,571 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:49,571 [main:58] - GENERATED VALUE OF TYPE Int = 1484994189
2021-03-11 22:27:49,571 [main:61] - GENERATED IS CALL =false
2021-03-11 22:27:49,574 [main:67] - randomType = Kla0
2021-03-11 22:27:49,574 [main:106] - GETTING Int from Int
2021-03-11 22:27:49,604 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@390b15c0]]
2021-03-11 22:27:49,604 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:49,605 [main:117] - GENERATED CALL = (-2).compareTo(val p =.sign
2021-03-11 22:27:49,605 [main:113] - Case = [public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@60f9d3e1]]
2021-03-11 22:27:49,605 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@60f9d3e1]
2021-03-11 22:27:49,605 [main:117] - GENERATED CALL = (-2).coerceAtLeast(test({ -1627866910}))
2021-03-11 22:27:49,605 [main:113] - Case = [public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@30f2e0e0]]
2021-03-11 22:27:49,605 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@30f2e0e0]
2021-03-11 22:27:49,606 [main:117] - GENERATED CALL = (-2).unaryMinus()
2021-03-11 22:27:49,606 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@304035e4], public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@df8a698]]
2021-03-11 22:27:49,606 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@304035e4]
2021-03-11 22:27:49,606 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@df8a698]
2021-03-11 22:27:49,606 [main:117] - GENERATED CALL = (-2).toFloat().toInt()
2021-03-11 22:27:49,606 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7f3daf18]]
2021-03-11 22:27:49,606 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7f3daf18]
2021-03-11 22:27:49,606 [main:117] - GENERATED CALL = (-2).rotateLeft(val p =
2021-03-11 22:27:49,606 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@42611ed]]
2021-03-11 22:27:49,606 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:27:49,606 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@42611ed]
2021-03-11 22:27:49,607 [main:117] - GENERATED CALL = (-2).toInt().dec()
2021-03-11 22:27:49,607 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@54e1dc9a]]
2021-03-11 22:27:49,607 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd]
2021-03-11 22:27:49,607 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@54e1dc9a]
2021-03-11 22:27:49,607 [main:117] - GENERATED CALL = (-2).toShort().countTrailingZeroBits()
2021-03-11 22:27:49,607 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6749add0]]
2021-03-11 22:27:49,607 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a]
2021-03-11 22:27:49,607 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6749add0]
2021-03-11 22:27:49,608 [main:117] - GENERATED CALL = (-2).toByte().countTrailingZeroBits()
2021-03-11 22:27:49,608 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@f7f3777], @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@7b100eed]]
2021-03-11 22:27:49,608 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@f7f3777]
2021-03-11 22:27:49,608 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@7b100eed]
2021-03-11 22:27:49,608 [main:117] - GENERATED CALL = (-2).toDouble().roundToInt()
2021-03-11 22:27:49,608 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@f7f3777], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@54362452]]
2021-03-11 22:27:49,608 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@f7f3777]
2021-03-11 22:27:49,608 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@54362452]
2021-03-11 22:27:49,701 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:49,702 [main:117] - GENERATED CALL = (-2).toDouble().compareTo(28)
2021-03-11 22:27:49,702 [main:114] - replacement of prope0 of type Int is (-2).unaryMinus()
2021-03-11 22:27:49,783 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:27:49,783 [main:66] - Compilation checking started
2021-03-11 22:27:50,117 [main:53] - Result = true
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (value as Kla1).value as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (value as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = Kla1("qlhze").value as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = fu2<Int>(Kla2(Kla1(40))) + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = fu3<Int>(Kla2(Kla1(40))) + 4
    if ((test({ -1627866910})).toInt().times(36) != 44) return (-3).toLong().toString(-1663411174)

    prope0 = fu4<Int>(Kla2(Kla1(40))) + 5
    if ((-2).shr(1058946036) != 45) return "FAIL 4: $(-2).unaryMinus()"

    return "OK"
}


2021-03-11 22:27:50,118 [main:107] - replacing (Kla1("qlhze").value, Any)
2021-03-11 22:27:50,118 [main:50] - replacing Kla1("qlhze").value Any
2021-03-11 22:27:50,118 [main:54] - Getting value of type Any
2021-03-11 22:27:50,220 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:27:50,220 [main:58] - GENERATED VALUE OF TYPE Any = "dgiue"
2021-03-11 22:27:50,220 [main:61] - GENERATED IS CALL =false
2021-03-11 22:27:50,785 [main:67] - randomType = MutableMap<Function1<List<Kla1?>?, UShort>, Boolean>
2021-03-11 22:27:50,786 [main:106] - GETTING Any from Int
2021-03-11 22:27:50,828 [main:114] - replacement of Kla1("qlhze").value of type Any is test({ -1627866910})
2021-03-11 22:27:50,929 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:27:50,929 [main:66] - Compilation checking started
2021-03-11 22:27:51,342 [main:53] - Result = true
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (value as Kla1).value as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (value as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = fu2<Int>(Kla2(Kla1(40))) + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = fu3<Int>(Kla2(Kla1(40))) + 4
    if ((test({ -1627866910})).toInt().times(36) != 44) return (-3).toLong().toString(-1663411174)

    prope0 = fu4<Int>(Kla2(Kla1(40))) + 5
    if ((-2).shr(1058946036) != 45) return "FAIL 4: $(-2).unaryMinus()"

    return "OK"
}


2021-03-11 22:27:51,343 [main:107] - replacing (prope0, Int)
2021-03-11 22:27:51,343 [main:50] - replacing prope0 Int
2021-03-11 22:27:51,343 [main:54] - Getting value of type Int
2021-03-11 22:27:51,439 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:51,440 [main:58] - GENERATED VALUE OF TYPE Int = -2134929985
2021-03-11 22:27:51,440 [main:61] - GENERATED IS CALL =false
2021-03-11 22:27:51,443 [main:67] - randomType = Kla0
2021-03-11 22:27:51,443 [main:106] - GETTING Int from Int
2021-03-11 22:27:51,501 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7a95ed24]]
2021-03-11 22:27:51,501 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:27:51,502 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7a95ed24]
2021-03-11 22:27:51,502 [main:117] - GENERATED CALL = (test({ -1627866910})).toInt().inv()
2021-03-11 22:27:51,502 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1e551bfd]]
2021-03-11 22:27:51,502 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1e551bfd]
2021-03-11 22:27:51,502 [main:117] - GENERATED CALL = (test({ -1627866910})).takeHighestOneBit()
2021-03-11 22:27:51,502 [main:113] - Case = [public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7a95ed24]]
2021-03-11 22:27:51,503 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7a95ed24]
2021-03-11 22:27:51,503 [main:117] - GENERATED CALL = (test({ -1627866910})).inv()
2021-03-11 22:27:51,503 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a], public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7b10db5e]]
2021-03-11 22:27:51,503 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a]
2021-03-11 22:27:51,503 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7b10db5e]
2021-03-11 22:27:51,503 [main:117] - GENERATED CALL = (test({ -1627866910})).toByte().toInt()
2021-03-11 22:27:51,503 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@11648fd6]]
2021-03-11 22:27:51,503 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:27:51,503 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@11648fd6]
2021-03-11 22:27:51,587 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:51,588 [main:117] - GENERATED CALL = (test({ -1627866910})).toInt().compareTo(95)
2021-03-11 22:27:51,588 [main:113] - Case = [public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@30f2e0e0]]
2021-03-11 22:27:51,588 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@30f2e0e0]
2021-03-11 22:27:51,588 [main:117] - GENERATED CALL = (test({ -1627866910})).unaryMinus()
2021-03-11 22:27:51,588 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4ad1ca85]]
2021-03-11 22:27:51,588 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:27:51,589 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4ad1ca85]
2021-03-11 22:27:51,589 [main:117] - GENERATED CALL = (test({ -1627866910})).toInt().countLeadingZeroBits()
2021-03-11 22:27:51,589 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63cdd551], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6feaf424]]
2021-03-11 22:27:51,589 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63cdd551]
2021-03-11 22:27:51,670 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:27:51,671 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6feaf424]
2021-03-11 22:27:51,672 [main:117] - GENERATED CALL = (test({ -1627866910})).div(-9042119923484079554).countOneBits()
2021-03-11 22:27:51,672 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1f6e0bcf]]
2021-03-11 22:27:51,672 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1f6e0bcf]
2021-03-11 22:27:51,672 [main:117] - GENERATED CALL = (test({ -1627866910})).takeLowestOneBit()
2021-03-11 22:27:51,672 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@608030b3]]
2021-03-11 22:27:51,672 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a]
2021-03-11 22:27:51,672 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@608030b3]
2021-03-11 22:27:51,754 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:51,755 [main:117] - GENERATED CALL = (test({ -1627866910})).toByte().minus(27)
2021-03-11 22:27:51,755 [main:114] - replacement of prope0 of type Int is test({ -1627866910})
2021-03-11 22:27:51,838 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:27:51,838 [main:66] - Compilation checking started
2021-03-11 22:27:52,055 [main:49] - Result = false
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (value as Kla1).value as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (value as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = fu2<Int>(Kla2(Kla1(40))) + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    test({ -1627866910}) = fu3<Int>(Kla2(Kla1(40))) + 4
    if ((test({ -1627866910})).toInt().times(36) != 44) return (-3).toLong().toString(-1663411174)

    prope0 = fu4<Int>(Kla2(Kla1(40))) + 5
    if ((-2).shr(1058946036) != 45) return "FAIL 4: $(-2).unaryMinus()"

    return "OK"
}


2021-03-11 22:27:52,056 [main:107] - replacing (fu0(), Ty0)
2021-03-11 22:27:52,056 [main:50] - replacing fu0() Ty0
2021-03-11 22:27:52,056 [main:54] - Getting value of type Ty0
2021-03-11 22:27:52,138 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 22:27:52,143 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 22:27:52,231 [main:67] - randomType = Boolean?
2021-03-11 22:27:52,312 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:27:52,328 [main:106] - GETTING Ty0 from Int
2021-03-11 22:27:52,357 [main:106] - GETTING Ty0 from Int
2021-03-11 22:27:52,358 [main:106] - GETTING Ty0 from Int
2021-03-11 22:27:52,358 [main:106] - GETTING Ty0 from Int
2021-03-11 22:27:52,358 [main:111] - Cant find and generate replacement for fu0() type Ty0
2021-03-11 22:27:52,359 [main:107] - replacing (value, Kla0)
2021-03-11 22:27:52,359 [main:50] - replacing value Kla0
2021-03-11 22:27:52,359 [main:54] - Getting value of type Kla0
2021-03-11 22:27:52,440 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 22:27:52,440 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:27:52,613 [main:302] - generating value of type = Kla1 false depth = 2
2021-03-11 22:27:52,614 [main:112] - generating klass Kla1 text = class Kla1(val value: Any): Kla0
2021-03-11 22:27:52,698 [main:194] - Type params = []
2021-03-11 22:27:52,827 [main:302] - generating value of type = Any false depth = 4
2021-03-11 22:27:52,828 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla1("rmtth")
2021-03-11 22:27:52,828 [main:61] - GENERATED IS CALL =true
2021-03-11 22:27:52,832 [main:67] - randomType = Kla1
2021-03-11 22:27:52,965 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 22:27:52,966 [main:112] - generating klass Kla1 text = class Kla1(val value: Any): Kla0
2021-03-11 22:27:53,061 [main:194] - Type params = []
2021-03-11 22:27:53,145 [main:302] - generating value of type = Any false depth = 2
2021-03-11 22:27:53,156 [main:106] - GETTING Kla0 from Int
2021-03-11 22:27:53,188 [main:106] - GETTING Kla0 from Int
2021-03-11 22:27:53,188 [main:106] - GETTING Kla0 from Int
2021-03-11 22:27:53,189 [main:106] - GETTING Kla0 from Int
2021-03-11 22:27:53,189 [main:114] - replacement of value of type Kla0 is Kla1("rmtth")
2021-03-11 22:27:53,270 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:27:53,270 [main:66] - Compilation checking started
2021-03-11 22:27:53,593 [main:53] - Result = true
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (value as Kla1).value as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = fu2<Int>(Kla2(Kla1(40))) + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = fu3<Int>(Kla2(Kla1(40))) + 4
    if ((test({ -1627866910})).toInt().times(36) != 44) return (-3).toLong().toString(-1663411174)

    prope0 = fu4<Int>(Kla2(Kla1(40))) + 5
    if ((-2).shr(1058946036) != 45) return "FAIL 4: $(-2).unaryMinus()"

    return "OK"
}


2021-03-11 22:27:53,593 [main:107] - replacing (value, Any)
2021-03-11 22:27:53,593 [main:50] - replacing value Any
2021-03-11 22:27:53,594 [main:54] - Getting value of type Any
2021-03-11 22:27:53,676 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:27:53,677 [main:58] - GENERATED VALUE OF TYPE Any = "ummpd"
2021-03-11 22:27:53,677 [main:61] - GENERATED IS CALL =false
2021-03-11 22:27:53,679 [main:67] - randomType = Kla0
2021-03-11 22:27:53,680 [main:106] - GETTING Any from Int
2021-03-11 22:27:53,732 [main:114] - replacement of value of type Any is "ummpd"
2021-03-11 22:27:53,818 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 22:27:53,819 [main:66] - Compilation checking started
2021-03-11 22:27:54,038 [main:49] - Result = false
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (value as Kla1).value as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1)."ummpd" as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = fu2<Int>(Kla2(Kla1(40))) + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = fu3<Int>(Kla2(Kla1(40))) + 4
    if ((test({ -1627866910})).toInt().times(36) != 44) return (-3).toLong().toString(-1663411174)

    prope0 = fu4<Int>(Kla2(Kla1(40))) + 5
    if ((-2).shr(1058946036) != 45) return "FAIL 4: $(-2).unaryMinus()"

    return "OK"
}


2021-03-11 22:27:54,039 [main:107] - replacing (fu3<Int>(Kla2(Kla1(40))), Int)
2021-03-11 22:27:54,039 [main:50] - replacing fu3<Int>(Kla2(Kla1(40))) Int
2021-03-11 22:27:54,039 [main:54] - Getting value of type Int
2021-03-11 22:27:54,123 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:54,124 [main:58] - GENERATED VALUE OF TYPE Int = -970585069
2021-03-11 22:27:54,124 [main:61] - GENERATED IS CALL =false
2021-03-11 22:27:54,300 [main:67] - randomType = HashSet<Char>
2021-03-11 22:27:54,381 [main:302] - generating value of type = HashSet<Char> false depth = 0
2021-03-11 22:27:54,468 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int): HashSet<Char> = TODO()
2021-03-11 22:27:54,469 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int): HashSet<Char> = TODO()
2021-03-11 22:27:54,646 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:27:54,647 [main:95] - GENERATED = LinkedHashSet<Char>(737441069)
2021-03-11 22:27:54,766 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@2def9018]
2021-03-11 22:27:54,767 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.Array<out T>.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3afa0f4e]
2021-03-11 22:27:54,767 [main:78] - Generated call from random type = (LinkedHashSet<Char>(737441069)).toArray().count()
2021-03-11 22:27:54,767 [main:106] - GETTING Int from Int
2021-03-11 22:27:54,834 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63cdd551], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3c1a6d8c]]
2021-03-11 22:27:54,835 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63cdd551]
2021-03-11 22:27:54,915 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:27:54,916 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3c1a6d8c]
2021-03-11 22:27:54,917 [main:117] - GENERATED CALL = (test({ -1627866910})).div(-394417196945231762).countLeadingZeroBits()
2021-03-11 22:27:54,917 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@ad7cc4c]]
2021-03-11 22:27:54,917 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a]
2021-03-11 22:27:54,917 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@ad7cc4c]
2021-03-11 22:27:54,917 [main:117] - GENERATED CALL = (test({ -1627866910})).toByte().countLeadingZeroBits()
2021-03-11 22:27:54,917 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a], public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@79cf42f2]]
2021-03-11 22:27:54,917 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a]
2021-03-11 22:27:54,917 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@79cf42f2]
2021-03-11 22:27:54,998 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:54,999 [main:117] - GENERATED CALL = (test({ -1627866910})).toByte().compareTo(92)
2021-03-11 22:27:54,999 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6af24d36]]
2021-03-11 22:27:54,999 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd]
2021-03-11 22:27:54,999 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6af24d36]
2021-03-11 22:27:55,000 [main:117] - GENERATED CALL = (test({ -1627866910})).toShort().unaryMinus()
2021-03-11 22:27:55,000 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63cdd551], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@24823f40]]
2021-03-11 22:27:55,000 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63cdd551]
2021-03-11 22:27:55,081 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:27:55,082 [main:117] - GENERATED CALL = (test({ -1627866910})).div(5325256216930102456).sign
2021-03-11 22:27:55,082 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@37eacfbc]]
2021-03-11 22:27:55,082 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:27:55,082 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@37eacfbc]
2021-03-11 22:27:55,082 [main:117] - GENERATED CALL = (test({ -1627866910})).toInt().coerceAtMost(val p =
2021-03-11 22:27:55,082 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1f6e0bcf]]
2021-03-11 22:27:55,082 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:27:55,083 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1f6e0bcf]
2021-03-11 22:27:55,083 [main:117] - GENERATED CALL = (test({ -1627866910})).toInt().takeLowestOneBit()
2021-03-11 22:27:55,083 [main:113] - Case = [public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3bae5f78]]
2021-03-11 22:27:55,083 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3bae5f78]
2021-03-11 22:27:55,083 [main:117] - GENERATED CALL = (test({ -1627866910})).unaryPlus()
2021-03-11 22:27:55,083 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7021ab0e]]
2021-03-11 22:27:55,083 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:55,165 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:55,166 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7021ab0e]
2021-03-11 22:27:55,166 [main:117] - GENERATED CALL = (test({ -1627866910})).compareTo(2123460390).countTrailingZeroBits()
2021-03-11 22:27:55,167 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@45c57d7f], public final val first: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@7257cbce]]
2021-03-11 22:27:55,167 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@45c57d7f]
2021-03-11 22:27:55,248 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:55,249 [main:117] - GENERATED CALL = (test({ -1627866910})).rangeTo(111).first
2021-03-11 22:27:55,250 [main:114] - replacement of fu3<Int>(Kla2(Kla1(40))) of type Int is (test({ -1627866910})).toByte().countLeadingZeroBits()
2021-03-11 22:27:55,331 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:27:55,331 [main:66] - Compilation checking started
2021-03-11 22:27:55,660 [main:53] - Result = true
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (value as Kla1).value as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = fu2<Int>(Kla2(Kla1(40))) + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ -1627866910})).toInt().times(36) != 44) return (-3).toLong().toString(-1663411174)

    prope0 = fu4<Int>(Kla2(Kla1(40))) + 5
    if ((-2).shr(1058946036) != 45) return "FAIL 4: $(-2).unaryMinus()"

    return "OK"
}


2021-03-11 22:27:55,661 [main:107] - replacing (value, Kla0)
2021-03-11 22:27:55,661 [main:50] - replacing value Kla0
2021-03-11 22:27:55,661 [main:54] - Getting value of type Kla0
2021-03-11 22:27:55,756 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 22:27:55,757 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:27:55,948 [main:302] - generating value of type = Kla1 false depth = 2
2021-03-11 22:27:55,949 [main:112] - generating klass Kla1 text = class Kla1(val value: Any): Kla0
2021-03-11 22:27:56,054 [main:194] - Type params = []
2021-03-11 22:27:56,137 [main:302] - generating value of type = Any false depth = 4
2021-03-11 22:27:56,137 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla1("ywtos")
2021-03-11 22:27:56,137 [main:61] - GENERATED IS CALL =true
2021-03-11 22:27:56,318 [main:67] - randomType = HashSet<Long>
2021-03-11 22:27:56,400 [main:302] - generating value of type = HashSet<Long> false depth = 0
2021-03-11 22:27:56,487 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): HashSet<Long> = TODO()
2021-03-11 22:27:56,489 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): HashSet<Long> = TODO()
2021-03-11 22:27:56,576 [main:95] - GENERATED = linkedSetOf<Long>()
2021-03-11 22:27:56,719 [main:106] - GETTING Kla0 from Int
2021-03-11 22:27:56,749 [main:106] - GETTING Kla0 from Int
2021-03-11 22:27:56,749 [main:106] - GETTING Kla0 from Int
2021-03-11 22:27:56,750 [main:106] - GETTING Kla0 from Int
2021-03-11 22:27:56,750 [main:114] - replacement of value of type Kla0 is Kla1("ywtos")
2021-03-11 22:27:56,846 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:27:56,847 [main:66] - Compilation checking started
2021-03-11 22:27:57,168 [main:53] - Result = true
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (Kla1("ywtos") as Kla1).value as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = fu2<Int>(Kla2(Kla1(40))) + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ -1627866910})).toInt().times(36) != 44) return (-3).toLong().toString(-1663411174)

    prope0 = fu4<Int>(Kla2(Kla1(40))) + 5
    if ((-2).shr(1058946036) != 45) return "FAIL 4: $(-2).unaryMinus()"

    return "OK"
}


2021-03-11 22:27:57,169 [main:107] - replacing (40, Int)
2021-03-11 22:27:57,169 [main:50] - replacing 40 Int
2021-03-11 22:27:57,169 [main:54] - Getting value of type Int
2021-03-11 22:27:57,280 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:57,281 [main:58] - GENERATED VALUE OF TYPE Int = 228595033
2021-03-11 22:27:57,281 [main:61] - GENERATED IS CALL =false
2021-03-11 22:27:57,283 [main:67] - randomType = String
2021-03-11 22:27:57,367 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:27:57,398 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@198549aa]
2021-03-11 22:27:57,483 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:27:57,484 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@51f15610]
2021-03-11 22:27:57,485 [main:78] - Generated call from random type = ("wobfd").compareTo("czgcw").countOneBits()
2021-03-11 22:27:57,485 [main:106] - GETTING Int from Int
2021-03-11 22:27:57,536 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7021ab0e]]
2021-03-11 22:27:57,537 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:57,620 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:57,621 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7021ab0e]
2021-03-11 22:27:57,621 [main:117] - GENERATED CALL = (test({ -1627866910})).compareTo(234112579).countTrailingZeroBits()
2021-03-11 22:27:57,621 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4468febc]]
2021-03-11 22:27:57,621 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd]
2021-03-11 22:27:57,621 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4468febc]
2021-03-11 22:27:57,705 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:27:57,707 [main:117] - GENERATED CALL = (test({ -1627866910})).toShort().rem(62)
2021-03-11 22:27:57,707 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@60f9d3e1]]
2021-03-11 22:27:57,707 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:57,708 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@60f9d3e1]
2021-03-11 22:27:57,708 [main:117] - GENERATED CALL = (test({ -1627866910})).compareTo(-2).coerceAtLeast(-2)
2021-03-11 22:27:57,708 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a], public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7b10db5e]]
2021-03-11 22:27:57,708 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a]
2021-03-11 22:27:57,708 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7b10db5e]
2021-03-11 22:27:57,709 [main:117] - GENERATED CALL = (test({ -1627866910})).toByte().toInt()
2021-03-11 22:27:57,709 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@304035e4], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@1d5251fc]]
2021-03-11 22:27:57,709 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@304035e4]
2021-03-11 22:27:57,709 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@1d5251fc]
2021-03-11 22:27:57,709 [main:117] - GENERATED CALL = (test({ -1627866910})).toFloat().roundToInt()
2021-03-11 22:27:57,710 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@304035e4], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@78508503]]
2021-03-11 22:27:57,710 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@304035e4]
2021-03-11 22:27:57,710 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@78508503]
2021-03-11 22:27:57,710 [main:117] - GENERATED CALL = (test({ -1627866910})).toFloat().toBits()
2021-03-11 22:27:57,710 [main:113] - Case = [public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6b2ac950]]
2021-03-11 22:27:57,710 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6b2ac950]
2021-03-11 22:27:57,805 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:57,806 [main:117] - GENERATED CALL = (test({ -1627866910})).coerceIn(val p =
2021-03-11 22:27:57,806 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2762b792]]
2021-03-11 22:27:57,806 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:27:57,806 [main:149] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2762b792]
2021-03-11 22:27:57,807 [main:117] - GENERATED CALL = (test({ -1627866910})).toChar().digitToInt()
2021-03-11 22:27:57,807 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd], public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2fba07dc]]
2021-03-11 22:27:57,807 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd]
2021-03-11 22:27:57,807 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2fba07dc]
2021-03-11 22:27:57,807 [main:117] - GENERATED CALL = (test({ -1627866910})).toShort().toInt()
2021-03-11 22:27:57,807 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12446614]]
2021-03-11 22:27:57,807 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:27:57,807 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12446614]
2021-03-11 22:27:57,807 [main:117] - GENERATED CALL = (test({ -1627866910})).toInt().and(-2)
2021-03-11 22:27:57,807 [main:114] - replacement of 40 of type Int is (test({ -1627866910})).compareTo(-2).coerceAtLeast(-2)
2021-03-11 22:27:57,893 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:27:57,893 [main:66] - Compilation checking started
2021-03-11 22:27:58,277 [main:53] - Result = true
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (Kla1("ywtos") as Kla1).value as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = fu2<Int>(Kla2(Kla1((test({ -1627866910})).compareTo(-2).coerceAtLeast(-2)))) + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ -1627866910})).toInt().times(36) != 44) return (-3).toLong().toString(-1663411174)

    prope0 = fu4<Int>(Kla2(Kla1(40))) + 5
    if ((-2).shr(1058946036) != 45) return "FAIL 4: $(-2).unaryMinus()"

    return "OK"
}


2021-03-11 22:27:58,278 [main:107] - replacing ("OK", String)
2021-03-11 22:27:58,278 [main:50] - replacing "OK" String
2021-03-11 22:27:58,278 [main:54] - Getting value of type String
2021-03-11 22:27:58,373 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:27:58,375 [main:58] - GENERATED VALUE OF TYPE String = "mguxp"
2021-03-11 22:27:58,375 [main:61] - GENERATED IS CALL =false
2021-03-11 22:27:58,379 [main:67] - randomType = Kla2
2021-03-11 22:27:58,464 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 22:27:58,466 [main:112] - generating klass Kla2 text = inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (Kla1("ywtos") as Kla1).value as Ty0
}
2021-03-11 22:27:58,552 [main:194] - Type params = []
2021-03-11 22:27:58,640 [main:302] - generating value of type = Kla0 false depth = 2
2021-03-11 22:27:58,641 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:27:58,825 [main:302] - generating value of type = Kla2 false depth = 4
2021-03-11 22:27:58,826 [main:112] - generating klass Kla2 text = inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (Kla1("ywtos") as Kla1).value as Ty0
}
2021-03-11 22:27:58,916 [main:194] - Type params = []
2021-03-11 22:27:59,006 [main:302] - generating value of type = Kla0 false depth = 6
2021-03-11 22:27:59,007 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:27:59,232 [main:302] - generating value of type = Kla1 false depth = 8
2021-03-11 22:27:59,233 [main:112] - generating klass Kla1 text = class Kla1(val value: Any): Kla0
2021-03-11 22:27:59,334 [main:194] - Type params = []
2021-03-11 22:27:59,445 [main:302] - generating value of type = Any false depth = 10
2021-03-11 22:27:59,460 [main:106] - GETTING String from Int
2021-03-11 22:27:59,503 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6694d9]]
2021-03-11 22:27:59,503 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a]
2021-03-11 22:27:59,503 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6694d9]
2021-03-11 22:27:59,504 [main:117] - GENERATED CALL = (-3).toByte().toString(val p =
2021-03-11 22:27:59,504 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]]
2021-03-11 22:27:59,504 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:27:59,504 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]
2021-03-11 22:27:59,504 [main:117] - GENERATED CALL = (-3).toInt().toString(-2)
2021-03-11 22:27:59,504 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58808d82]]
2021-03-11 22:27:59,504 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:27:59,505 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58808d82]
2021-03-11 22:27:59,505 [main:117] - GENERATED CALL = (-3).toChar().titlecase()
2021-03-11 22:27:59,505 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@630a089]]
2021-03-11 22:27:59,505 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd]
2021-03-11 22:27:59,505 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@630a089]
2021-03-11 22:27:59,591 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:59,593 [main:117] - GENERATED CALL = (-3).toShort().toString(728036924)
2021-03-11 22:27:59,593 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@416d03a5]]
2021-03-11 22:27:59,593 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:27:59,593 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@416d03a5]
2021-03-11 22:27:59,593 [main:117] - GENERATED CALL = (-3).toChar().lowercase()
2021-03-11 22:27:59,593 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15e7f7d8]]
2021-03-11 22:27:59,593 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:27:59,594 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15e7f7d8]
2021-03-11 22:27:59,594 [main:117] - GENERATED CALL = (-3).toChar().uppercase()
2021-03-11 22:27:59,594 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6fc8fc8f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]]
2021-03-11 22:27:59,594 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6fc8fc8f]
2021-03-11 22:27:59,594 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]
2021-03-11 22:27:59,595 [main:117] - GENERATED CALL = (-3).toLong().toString(val p =
2021-03-11 22:27:59,595 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ef7baad]]
2021-03-11 22:27:59,595 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:27:59,595 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ef7baad]
2021-03-11 22:27:59,690 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:27:59,692 [main:117] - GENERATED CALL = (-3).toChar().plus("lwjcy")
2021-03-11 22:27:59,692 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]]
2021-03-11 22:27:59,692 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:27:59,778 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:27:59,780 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]
2021-03-11 22:27:59,780 [main:117] - GENERATED CALL = (-3).compareTo(499457543).toString(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
2021-03-11 22:27:59,780 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]]
2021-03-11 22:27:59,781 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]
2021-03-11 22:27:59,781 [main:117] - GENERATED CALL = (-3).toString(-2)
2021-03-11 22:27:59,781 [main:114] - replacement of "OK" of type String is (-3).compareTo(499457543).toString(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
2021-03-11 22:27:59,868 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:27:59,868 [main:66] - Compilation checking started
2021-03-11 22:28:00,261 [main:53] - Result = true
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (Kla1("ywtos") as Kla1).value as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = fu2<Int>(Kla2(Kla1((test({ -1627866910})).compareTo(-2).coerceAtLeast(-2)))) + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ -1627866910})).toInt().times(36) != 44) return (-3).toLong().toString(-1663411174)

    prope0 = fu4<Int>(Kla2(Kla1(40))) + 5
    if ((-2).shr(1058946036) != 45) return "FAIL 4: $(-2).unaryMinus()"

    return (-3).compareTo(499457543).toString(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}


2021-03-11 22:28:00,262 [main:107] - replacing (prope0, Int)
2021-03-11 22:28:00,263 [main:50] - replacing prope0 Int
2021-03-11 22:28:00,263 [main:54] - Getting value of type Int
2021-03-11 22:28:00,384 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:28:00,386 [main:58] - GENERATED VALUE OF TYPE Int = -145135010
2021-03-11 22:28:00,387 [main:61] - GENERATED IS CALL =false
2021-03-11 22:28:00,392 [main:67] - randomType = Kla0
2021-03-11 22:28:00,392 [main:106] - GETTING Int from Int
2021-03-11 22:28:00,441 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@304035e4], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@33e54876]]
2021-03-11 22:28:00,442 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@304035e4]
2021-03-11 22:28:00,442 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@33e54876]
2021-03-11 22:28:00,442 [main:117] - GENERATED CALL = (test({ -1627866910})).toFloat().toRawBits()
2021-03-11 22:28:00,442 [main:113] - Case = [public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5138d036]]
2021-03-11 22:28:00,442 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5138d036]
2021-03-11 22:28:00,443 [main:117] - GENERATED CALL = (test({ -1627866910})).shr(-3)
2021-03-11 22:28:00,443 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@45c57d7f], public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@1fbd9e5f]]
2021-03-11 22:28:00,443 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@45c57d7f]
2021-03-11 22:28:00,559 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:28:00,562 [main:117] - GENERATED CALL = (test({ -1627866910})).rangeTo(-6).endInclusive
2021-03-11 22:28:00,562 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@467f2235]]
2021-03-11 22:28:00,562 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:28:00,562 [main:117] - GENERATED CALL = (test({ -1627866910})).toInt().absoluteValue
2021-03-11 22:28:00,562 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@27db378a]]
2021-03-11 22:28:00,563 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a]
2021-03-11 22:28:00,563 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@27db378a]
2021-03-11 22:28:00,660 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:28:00,662 [main:117] - GENERATED CALL = (test({ -1627866910})).toByte().rem(126)
2021-03-11 22:28:00,662 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3463d5f7]]
2021-03-11 22:28:00,662 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:28:00,662 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3463d5f7]
2021-03-11 22:28:00,662 [main:117] - GENERATED CALL = (test({ -1627866910})).toInt().toInt()
2021-03-11 22:28:00,663 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a], public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@79cf42f2]]
2021-03-11 22:28:00,663 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a]
2021-03-11 22:28:00,663 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@79cf42f2]
2021-03-11 22:28:00,755 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:28:00,756 [main:117] - GENERATED CALL = (test({ -1627866910})).toByte().compareTo(92)
2021-03-11 22:28:00,757 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3463d5f7]]
2021-03-11 22:28:00,757 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:28:00,757 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3463d5f7]
2021-03-11 22:28:00,758 [main:117] - GENERATED CALL = (test({ -1627866910})).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).toInt()
2021-03-11 22:28:00,758 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e8712b0]]
2021-03-11 22:28:00,758 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:28:00,758 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e8712b0]
2021-03-11 22:28:00,857 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:28:00,859 [main:117] - GENERATED CALL = (test({ -1627866910})).toInt().minus(68)
2021-03-11 22:28:00,859 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@f7f3777], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@54362452]]
2021-03-11 22:28:00,859 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@f7f3777]
2021-03-11 22:28:00,859 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@54362452]
2021-03-11 22:28:00,952 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:28:00,953 [main:117] - GENERATED CALL = (test({ -1627866910})).toDouble().compareTo(-81)
2021-03-11 22:28:00,953 [main:114] - replacement of prope0 of type Int is test({ -1627866910})
2021-03-11 22:28:01,040 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:28:01,041 [main:66] - Compilation checking started
2021-03-11 22:28:01,285 [main:49] - Result = false
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (Kla1("ywtos") as Kla1).value as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = fu2<Int>(Kla2(Kla1((test({ -1627866910})).compareTo(-2).coerceAtLeast(-2)))) + 3
    if (prope0 != 43) return "FAIL 2: $test({ -1627866910})"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ -1627866910})).toInt().times(36) != 44) return (-3).toLong().toString(-1663411174)

    prope0 = fu4<Int>(Kla2(Kla1(40))) + 5
    if ((-2).shr(1058946036) != 45) return "FAIL 4: $(-2).unaryMinus()"

    return (-3).compareTo(499457543).toString(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}


2021-03-11 22:28:01,287 [main:107] - replacing (prope0, Int)
2021-03-11 22:28:01,287 [main:50] - replacing prope0 Int
2021-03-11 22:28:01,287 [main:54] - Getting value of type Int
2021-03-11 22:28:01,376 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:28:01,378 [main:58] - GENERATED VALUE OF TYPE Int = -81391018
2021-03-11 22:28:01,378 [main:61] - GENERATED IS CALL =false
2021-03-11 22:28:01,486 [main:67] - randomType = Double
2021-03-11 22:28:01,576 [main:302] - generating value of type = Double true depth = 0
2021-03-11 22:28:01,619 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:28:01,619 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@51f15610]
2021-03-11 22:28:01,619 [main:78] - Generated call from random type = (0.8419452517089889).toInt().countOneBits()
2021-03-11 22:28:01,619 [main:106] - GETTING Int from Int
2021-03-11 22:28:01,659 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7f3daf18]]
2021-03-11 22:28:01,660 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7f3daf18]
2021-03-11 22:28:01,660 [main:117] - GENERATED CALL = (test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).rotateLeft(-2)
2021-03-11 22:28:01,660 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5138d036]]
2021-03-11 22:28:01,660 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:28:01,660 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5138d036]
2021-03-11 22:28:01,661 [main:117] - GENERATED CALL = (test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).compareTo(val p =.shr(test({ -1627866910}))
2021-03-11 22:28:01,661 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@60f9d3e1]]
2021-03-11 22:28:01,661 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:28:01,661 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@60f9d3e1]
2021-03-11 22:28:01,661 [main:117] - GENERATED CALL = (test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).toInt().coerceAtLeast(test({ -1627866910}))
2021-03-11 22:28:01,661 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36f5468d]]
2021-03-11 22:28:01,662 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:28:01,662 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36f5468d]
2021-03-11 22:28:01,753 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:28:01,755 [main:117] - GENERATED CALL = (test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).toInt().rem(-40)
2021-03-11 22:28:01,755 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@304035e4], public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@df8a698]]
2021-03-11 22:28:01,755 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@304035e4]
2021-03-11 22:28:01,755 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@df8a698]
2021-03-11 22:28:01,755 [main:117] - GENERATED CALL = (test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).toFloat().toInt()
2021-03-11 22:28:01,755 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d799dea]]
2021-03-11 22:28:01,755 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:28:01,862 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:28:01,863 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1d799dea]
2021-03-11 22:28:01,954 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:28:01,955 [main:117] - GENERATED CALL = (test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).compareTo(-871609253).or(-1023852204)
2021-03-11 22:28:01,956 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@304035e4], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@1d5251fc]]
2021-03-11 22:28:01,956 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@304035e4]
2021-03-11 22:28:01,956 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@1d5251fc]
2021-03-11 22:28:01,956 [main:117] - GENERATED CALL = (test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).toFloat().roundToInt()
2021-03-11 22:28:01,956 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@495e3dd2]]
2021-03-11 22:28:01,956 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd]
2021-03-11 22:28:01,956 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@495e3dd2]
2021-03-11 22:28:02,044 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:28:02,045 [main:117] - GENERATED CALL = (test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).toShort().div(-118)
2021-03-11 22:28:02,045 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1e0ae372]]
2021-03-11 22:28:02,045 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd]
2021-03-11 22:28:02,045 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1e0ae372]
2021-03-11 22:28:02,046 [main:117] - GENERATED CALL = (test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).toShort().unaryPlus()
2021-03-11 22:28:02,046 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@37eacfbc]]
2021-03-11 22:28:02,046 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:28:02,046 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@37eacfbc]
2021-03-11 22:28:02,046 [main:117] - GENERATED CALL = (test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).toInt().coerceAtMost(-2)
2021-03-11 22:28:02,046 [main:114] - replacement of prope0 of type Int is (test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).toInt().rem(-40)
2021-03-11 22:28:02,132 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:28:02,132 [main:66] - Compilation checking started
2021-03-11 22:28:02,135 [main:71] - Wrong syntax or breaks conditions
2021-03-11 22:28:02,136 [main:49] - Result = false
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (Kla1("ywtos") as Kla1).value as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = fu2<Int>(Kla2(Kla1((test({ -1627866910})).compareTo(-2).coerceAtLeast(-2)))) + 3
    if (prope0 != 43) return "FAIL 2: $(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).toInt().rem(-40)"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ -1627866910})).toInt().times(36) != 44) return (-3).toLong().toString(-1663411174)

    prope0 = fu4<Int>(Kla2(Kla1(40))) + 5
    if ((-2).shr(1058946036) != 45) return "FAIL 4: $(-2).unaryMinus()"

    return (-3).compareTo(499457543).toString(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}


2021-03-11 22:28:02,137 [main:107] - replacing (fu4<Int>(Kla2(Kla1(40))), Int)
2021-03-11 22:28:02,137 [main:50] - replacing fu4<Int>(Kla2(Kla1(40))) Int
2021-03-11 22:28:02,137 [main:54] - Getting value of type Int
2021-03-11 22:28:02,225 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:28:02,226 [main:58] - GENERATED VALUE OF TYPE Int = -1810275502
2021-03-11 22:28:02,226 [main:61] - GENERATED IS CALL =false
2021-03-11 22:28:02,324 [main:67] - randomType = ULong
2021-03-11 22:28:02,409 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 22:28:02,452 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@78d0541e]
2021-03-11 22:28:02,543 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 22:28:02,544 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@37eacfbc]
2021-03-11 22:28:02,545 [main:78] - Generated call from random type = (3094771063245643077.toULong()).compareTo(49.toUByte()).coerceAtMost(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
2021-03-11 22:28:02,545 [main:106] - GETTING Int from Int
2021-03-11 22:28:02,600 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36d9ad3f]]
2021-03-11 22:28:02,600 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd]
2021-03-11 22:28:02,601 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36d9ad3f]
2021-03-11 22:28:02,601 [main:117] - GENERATED CALL = (-3).toShort().countOneBits()
2021-03-11 22:28:02,601 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@728a9b59]]
2021-03-11 22:28:02,601 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a]
2021-03-11 22:28:02,601 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@728a9b59]
2021-03-11 22:28:02,687 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:28:02,688 [main:117] - GENERATED CALL = (-3).toByte().div(-59)
2021-03-11 22:28:02,688 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4b935a8b]]
2021-03-11 22:28:02,688 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a]
2021-03-11 22:28:02,688 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4b935a8b]
2021-03-11 22:28:02,689 [main:117] - GENERATED CALL = (-3).toByte().countOneBits()
2021-03-11 22:28:02,689 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7f3daf18]]
2021-03-11 22:28:02,689 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:28:02,689 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7f3daf18]
2021-03-11 22:28:02,773 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:28:02,775 [main:117] - GENERATED CALL = (-3).compareTo(val p =.rotateLeft(-1766498700)
2021-03-11 22:28:02,775 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6fc8fc8f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@43dd471f]]
2021-03-11 22:28:02,775 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6fc8fc8f]
2021-03-11 22:28:02,775 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@43dd471f]
2021-03-11 22:28:02,775 [main:117] - GENERATED CALL = (-3).toLong().countTrailingZeroBits()
2021-03-11 22:28:02,775 [main:113] - Case = [public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@44dce520]]
2021-03-11 22:28:02,775 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@44dce520]
2021-03-11 22:28:02,775 [main:117] - GENERATED CALL = (-3).shl(test({ -1627866910}))
2021-03-11 22:28:02,775 [main:113] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6324aad8], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@78508503]]
2021-03-11 22:28:02,775 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6324aad8]
2021-03-11 22:28:02,859 [main:302] - generating value of type = Float true depth = 0
2021-03-11 22:28:02,861 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@78508503]
2021-03-11 22:28:02,861 [main:117] - GENERATED CALL = (-3).div(0.16374195f).toBits()
2021-03-11 22:28:02,861 [main:113] - Case = [public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5138d036]]
2021-03-11 22:28:02,861 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5138d036]
2021-03-11 22:28:02,966 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:28:02,968 [main:117] - GENERATED CALL = (-3).shr(443760401)
2021-03-11 22:28:02,968 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@30f2e0e0]]
2021-03-11 22:28:02,968 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:28:02,968 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@30f2e0e0]
2021-03-11 22:28:02,969 [main:117] - GENERATED CALL = (-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).unaryMinus()
2021-03-11 22:28:02,969 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6b2ac950]]
2021-03-11 22:28:02,969 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:28:02,969 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6b2ac950]
2021-03-11 22:28:03,073 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:28:03,075 [main:117] - GENERATED CALL = (-3).compareTo(-2).coerceIn(-1895991093, test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
2021-03-11 22:28:03,075 [main:114] - replacement of fu4<Int>(Kla2(Kla1(40))) of type Int is (-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).unaryMinus()
2021-03-11 22:28:03,162 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:28:03,163 [main:66] - Compilation checking started
2021-03-11 22:28:03,544 [main:53] - Result = true
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (Kla1("ywtos") as Kla1).value as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = fu2<Int>(Kla2(Kla1((test({ -1627866910})).compareTo(-2).coerceAtLeast(-2)))) + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ -1627866910})).toInt().times(36) != 44) return (-3).toLong().toString(-1663411174)

    prope0 = (-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).unaryMinus() + 5
    if ((-2).shr(1058946036) != 45) return "FAIL 4: $(-2).unaryMinus()"

    return (-3).compareTo(499457543).toString(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}


2021-03-11 22:28:03,546 [main:107] - replacing (fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}, Ty0)
2021-03-11 22:28:03,546 [main:50] - replacing fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
} Ty0
2021-03-11 22:28:03,546 [main:54] - Getting value of type Ty0
2021-03-11 22:28:03,653 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 22:28:03,657 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 22:28:03,953 [main:67] - randomType = HashMap<Double, UShort>
2021-03-11 22:28:04,038 [main:302] - generating value of type = HashMap<Double, UShort> false depth = 0
2021-03-11 22:28:04,129 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): HashMap<Double, UShort> = TODO()
2021-03-11 22:28:04,131 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): HashMap<Double, UShort> = TODO()
2021-03-11 22:28:04,245 [main:95] - GENERATED = linkedMapOf<Double, UShort>()
2021-03-11 22:28:04,350 [main:106] - GETTING Ty0 from Int
2021-03-11 22:28:04,380 [main:106] - GETTING Ty0 from Int
2021-03-11 22:28:04,381 [main:106] - GETTING Ty0 from Int
2021-03-11 22:28:04,382 [main:106] - GETTING Ty0 from Int
2021-03-11 22:28:04,382 [main:111] - Cant find and generate replacement for fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
} type Ty0
2021-03-11 22:28:04,382 [main:107] - replacing (fu2<Int>(Kla2(Kla1((test({ -1627866910})).compareTo(-2).coerceAtLeast(-2)))), Int)
2021-03-11 22:28:04,382 [main:50] - replacing fu2<Int>(Kla2(Kla1((test({ -1627866910})).compareTo(-2).coerceAtLeast(-2)))) Int
2021-03-11 22:28:04,382 [main:54] - Getting value of type Int
2021-03-11 22:28:04,468 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:28:04,470 [main:58] - GENERATED VALUE OF TYPE Int = 2024404528
2021-03-11 22:28:04,470 [main:61] - GENERATED IS CALL =false
2021-03-11 22:28:04,569 [main:67] - randomType = List<Kla0>
2021-03-11 22:28:04,570 [main:106] - GETTING Int from Int
2021-03-11 22:28:04,607 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12446614]]
2021-03-11 22:28:04,607 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:28:04,607 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12446614]
2021-03-11 22:28:04,608 [main:117] - GENERATED CALL = (test({ -1627866910})).toInt().and(test({ -1627866910}))
2021-03-11 22:28:04,608 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e8712b0]]
2021-03-11 22:28:04,608 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:28:04,699 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:28:04,700 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e8712b0]
2021-03-11 22:28:04,790 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:28:04,791 [main:117] - GENERATED CALL = (test({ -1627866910})).compareTo(928608230).minus(37)
2021-03-11 22:28:04,791 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36f5468d]]
2021-03-11 22:28:04,792 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:28:04,792 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36f5468d]
2021-03-11 22:28:04,878 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:28:04,879 [main:117] - GENERATED CALL = (test({ -1627866910})).toInt().rem(-113)
2021-03-11 22:28:04,879 [main:113] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6324aad8], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@78508503]]
2021-03-11 22:28:04,879 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6324aad8]
2021-03-11 22:28:04,964 [main:302] - generating value of type = Float true depth = 0
2021-03-11 22:28:04,966 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@78508503]
2021-03-11 22:28:04,966 [main:117] - GENERATED CALL = (test({ -1627866910})).div(0.8483434f).toBits()
2021-03-11 22:28:04,966 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@ad7cc4c]]
2021-03-11 22:28:04,966 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a]
2021-03-11 22:28:04,966 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@ad7cc4c]
2021-03-11 22:28:04,967 [main:117] - GENERATED CALL = (test({ -1627866910})).toByte().countLeadingZeroBits()
2021-03-11 22:28:04,967 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36f5468d]]
2021-03-11 22:28:04,967 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:28:04,967 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36f5468d]
2021-03-11 22:28:05,053 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:28:05,054 [main:117] - GENERATED CALL = (test({ -1627866910})).compareTo(test({ -1627866910})).rem(41)
2021-03-11 22:28:05,054 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6b2ac950]]
2021-03-11 22:28:05,054 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:28:05,055 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6b2ac950]
2021-03-11 22:28:05,140 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:28:05,142 [main:117] - GENERATED CALL = (test({ -1627866910})).toInt().coerceIn(1238095401, -3)
2021-03-11 22:28:05,142 [main:113] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6324aad8], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@33e54876]]
2021-03-11 22:28:05,142 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6324aad8]
2021-03-11 22:28:05,246 [main:302] - generating value of type = Float true depth = 0
2021-03-11 22:28:05,248 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@33e54876]
2021-03-11 22:28:05,248 [main:117] - GENERATED CALL = (test({ -1627866910})).div(0.6370276f).toRawBits()
2021-03-11 22:28:05,248 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@42a85b18]]
2021-03-11 22:28:05,248 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:28:05,248 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@42a85b18]
2021-03-11 22:28:05,333 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:28:05,335 [main:117] - GENERATED CALL = (test({ -1627866910})).toInt().plus(51)
2021-03-11 22:28:05,335 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@51f15610]]
2021-03-11 22:28:05,335 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:28:05,422 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:28:05,424 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@51f15610]
2021-03-11 22:28:05,424 [main:117] - GENERATED CALL = (test({ -1627866910})).compareTo(1340631913).countOneBits()
2021-03-11 22:28:05,424 [main:114] - replacement of fu2<Int>(Kla2(Kla1((test({ -1627866910})).compareTo(-2).coerceAtLeast(-2)))) of type Int is (test({ -1627866910})).toByte().countLeadingZeroBits()
2021-03-11 22:28:05,512 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:28:05,512 [main:66] - Compilation checking started
2021-03-11 22:28:05,851 [main:53] - Result = true
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (Kla1("ywtos") as Kla1).value as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ -1627866910})).toInt().times(36) != 44) return (-3).toLong().toString(-1663411174)

    prope0 = (-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).unaryMinus() + 5
    if ((-2).shr(1058946036) != 45) return "FAIL 4: $(-2).unaryMinus()"

    return (-3).compareTo(499457543).toString(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}


2021-03-11 22:28:05,852 [main:107] - replacing ((Kla1("ywtos") as Kla1).value as Ty0, Ty0)
2021-03-11 22:28:05,852 [main:50] - replacing (Kla1("ywtos") as Kla1).value as Ty0 Ty0
2021-03-11 22:28:05,852 [main:54] - Getting value of type Ty0
2021-03-11 22:28:05,937 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 22:28:05,941 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 22:28:06,033 [main:67] - randomType = UInt
2021-03-11 22:28:06,118 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 22:28:06,156 [main:106] - GETTING Ty0 from Int
2021-03-11 22:28:06,188 [main:106] - GETTING Ty0 from Int
2021-03-11 22:28:06,189 [main:106] - GETTING Ty0 from Int
2021-03-11 22:28:06,190 [main:106] - GETTING Ty0 from Int
2021-03-11 22:28:06,190 [main:111] - Cant find and generate replacement for (Kla1("ywtos") as Kla1).value as Ty0 type Ty0
2021-03-11 22:28:06,190 [main:107] - replacing ((Kla1("ywtos") as Kla1).value as Ty0, Ty0)
2021-03-11 22:28:06,190 [main:50] - replacing (Kla1("ywtos") as Kla1).value as Ty0 Ty0
2021-03-11 22:28:06,190 [main:54] - Getting value of type Ty0
2021-03-11 22:28:06,275 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 22:28:06,280 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 22:28:06,474 [main:67] - randomType = ArrayDeque<Set<Kla0>>
2021-03-11 22:28:06,582 [main:302] - generating value of type = ArrayDeque<Set<Kla0>> false depth = 0
2021-03-11 22:28:06,674 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Set<Kla0>> = TODO()
2021-03-11 22:28:06,676 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Set<Kla0>> = TODO()
2021-03-11 22:28:06,863 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:28:06,864 [main:95] - GENERATED = ArrayDeque<Set<Kla0>>(1845009078)
2021-03-11 22:28:07,031 [main:106] - GETTING Ty0 from Int
2021-03-11 22:28:07,061 [main:106] - GETTING Ty0 from Int
2021-03-11 22:28:07,062 [main:106] - GETTING Ty0 from Int
2021-03-11 22:28:07,062 [main:106] - GETTING Ty0 from Int
2021-03-11 22:28:07,062 [main:111] - Cant find and generate replacement for (Kla1("ywtos") as Kla1).value as Ty0 type Ty0
2021-03-11 22:28:07,062 [main:107] - replacing (value, Any)
2021-03-11 22:28:07,062 [main:50] - replacing value Any
2021-03-11 22:28:07,062 [main:54] - Getting value of type Any
2021-03-11 22:28:07,146 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:28:07,146 [main:58] - GENERATED VALUE OF TYPE Any = "ttpyg"
2021-03-11 22:28:07,146 [main:61] - GENERATED IS CALL =false
2021-03-11 22:28:07,239 [main:67] - randomType = Float
2021-03-11 22:28:07,326 [main:302] - generating value of type = Float true depth = 0
2021-03-11 22:28:07,374 [main:106] - GETTING Any from Int
2021-03-11 22:28:07,420 [main:114] - replacement of value of type Any is test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }
2021-03-11 22:28:07,504 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:28:07,505 [main:66] - Compilation checking started
2021-03-11 22:28:07,715 [main:49] - Result = false
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (Kla1("ywtos") as Kla1).test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    } as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ -1627866910})).toInt().times(36) != 44) return (-3).toLong().toString(-1663411174)

    prope0 = (-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).unaryMinus() + 5
    if ((-2).shr(1058946036) != 45) return "FAIL 4: $(-2).unaryMinus()"

    return (-3).compareTo(499457543).toString(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}


2021-03-11 22:28:07,716 [main:107] - replacing (value, Ty0)
2021-03-11 22:28:07,717 [main:50] - replacing value Ty0
2021-03-11 22:28:07,717 [main:54] - Getting value of type Ty0
2021-03-11 22:28:07,817 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 22:28:07,822 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 22:28:07,913 [main:67] - randomType = Short
2021-03-11 22:28:07,998 [main:302] - generating value of type = Short true depth = 0
2021-03-11 22:28:08,033 [main:106] - GETTING Ty0 from Int
2021-03-11 22:28:08,063 [main:106] - GETTING Ty0 from Int
2021-03-11 22:28:08,063 [main:106] - GETTING Ty0 from Int
2021-03-11 22:28:08,064 [main:106] - GETTING Ty0 from Int
2021-03-11 22:28:08,064 [main:111] - Cant find and generate replacement for value type Ty0
2021-03-11 22:28:08,064 [main:107] - replacing (it.fu6(), Ty0)
2021-03-11 22:28:08,064 [main:50] - replacing it.fu6() Ty0
2021-03-11 22:28:08,064 [main:54] - Getting value of type Ty0
2021-03-11 22:28:08,146 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 22:28:08,150 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 22:28:08,152 [main:67] - randomType = Int
2021-03-11 22:28:08,235 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:28:08,275 [main:106] - GETTING Ty0 from Int
2021-03-11 22:28:08,305 [main:106] - GETTING Ty0 from Int
2021-03-11 22:28:08,305 [main:106] - GETTING Ty0 from Int
2021-03-11 22:28:08,306 [main:106] - GETTING Ty0 from Int
2021-03-11 22:28:08,306 [main:111] - Cant find and generate replacement for it.fu6() type Ty0
2021-03-11 22:28:08,306 [main:107] - replacing (f(value), Ty1)
2021-03-11 22:28:08,306 [main:50] - replacing f(value) Ty1
2021-03-11 22:28:08,306 [main:54] - Getting value of type Ty1
2021-03-11 22:28:08,388 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-11 22:28:08,392 [main:58] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-11 22:28:08,396 [main:67] - randomType = Kla2
2021-03-11 22:28:08,478 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 22:28:08,479 [main:112] - generating klass Kla2 text = inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = (Kla1("ywtos") as Kla1).value as Ty0
}
2021-03-11 22:28:08,561 [main:194] - Type params = []
2021-03-11 22:28:08,643 [main:302] - generating value of type = Kla0 false depth = 2
2021-03-11 22:28:08,644 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:28:08,816 [main:302] - generating value of type = Kla1 false depth = 4
2021-03-11 22:28:08,817 [main:112] - generating klass Kla1 text = class Kla1(val value: Any): Kla0
2021-03-11 22:28:08,928 [main:194] - Type params = []
2021-03-11 22:28:09,011 [main:302] - generating value of type = Any false depth = 6
2021-03-11 22:28:09,024 [main:106] - GETTING Ty1 from Int
2021-03-11 22:28:09,054 [main:106] - GETTING Ty1 from Int
2021-03-11 22:28:09,055 [main:106] - GETTING Ty1 from Int
2021-03-11 22:28:09,055 [main:106] - GETTING Ty1 from Int
2021-03-11 22:28:09,055 [main:111] - Cant find and generate replacement for f(value) type Ty1
2021-03-11 22:28:09,055 [main:107] - replacing (fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}, Ty0)
2021-03-11 22:28:09,055 [main:50] - replacing fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
} Ty0
2021-03-11 22:28:09,055 [main:54] - Getting value of type Ty0
2021-03-11 22:28:09,137 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 22:28:09,141 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 22:28:09,234 [main:67] - randomType = Sequence<Boolean>
2021-03-11 22:28:09,235 [main:106] - GETTING Ty0 from Int
2021-03-11 22:28:09,286 [main:106] - GETTING Ty0 from Int
2021-03-11 22:28:09,287 [main:106] - GETTING Ty0 from Int
2021-03-11 22:28:09,288 [main:106] - GETTING Ty0 from Int
2021-03-11 22:28:09,288 [main:111] - Cant find and generate replacement for fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
} type Ty0
2021-03-11 22:28:09,288 [main:107] - replacing ((Kla1("ywtos") as Kla1).value, Any)
2021-03-11 22:28:09,288 [main:50] - replacing (Kla1("ywtos") as Kla1).value Any
2021-03-11 22:28:09,288 [main:54] - Getting value of type Any
2021-03-11 22:28:09,370 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:28:09,371 [main:58] - GENERATED VALUE OF TYPE Any = "aaehr"
2021-03-11 22:28:09,371 [main:61] - GENERATED IS CALL =false
2021-03-11 22:28:09,374 [main:67] - randomType = Kla0
2021-03-11 22:28:09,375 [main:106] - GETTING Any from Int
2021-03-11 22:28:09,405 [main:114] - replacement of (Kla1("ywtos") as Kla1).value of type Any is "aaehr"
2021-03-11 22:28:09,488 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 22:28:09,489 [main:66] - Compilation checking started
2021-03-11 22:28:09,816 [main:53] - Result = true
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ -1627866910})).toInt().times(36) != 44) return (-3).toLong().toString(-1663411174)

    prope0 = (-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).unaryMinus() + 5
    if ((-2).shr(1058946036) != 45) return "FAIL 4: $(-2).unaryMinus()"

    return (-3).compareTo(499457543).toString(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}


2021-03-11 22:28:09,817 [main:107] - replacing (it.fu0(), Ty0)
2021-03-11 22:28:09,817 [main:50] - replacing it.fu0() Ty0
2021-03-11 22:28:09,817 [main:54] - Getting value of type Ty0
2021-03-11 22:28:09,904 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 22:28:09,908 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 22:28:09,999 [main:67] - randomType = Float
2021-03-11 22:28:10,081 [main:302] - generating value of type = Float true depth = 0
2021-03-11 22:28:10,121 [main:106] - GETTING Ty0 from Int
2021-03-11 22:28:10,163 [main:106] - GETTING Ty0 from Int
2021-03-11 22:28:10,164 [main:106] - GETTING Ty0 from Int
2021-03-11 22:28:10,164 [main:106] - GETTING Ty0 from Int
2021-03-11 22:28:10,164 [main:111] - Cant find and generate replacement for it.fu0() type Ty0
2021-03-11 22:28:10,164 [main:107] - replacing (fu6(), Ty0)
2021-03-11 22:28:10,164 [main:50] - replacing fu6() Ty0
2021-03-11 22:28:10,164 [main:54] - Getting value of type Ty0
2021-03-11 22:28:10,248 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 22:28:10,252 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 22:28:10,254 [main:67] - randomType = Long
2021-03-11 22:28:10,352 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:28:10,382 [main:106] - GETTING Ty0 from Int
2021-03-11 22:28:10,412 [main:106] - GETTING Ty0 from Int
2021-03-11 22:28:10,413 [main:106] - GETTING Ty0 from Int
2021-03-11 22:28:10,413 [main:106] - GETTING Ty0 from Int
2021-03-11 22:28:10,413 [main:111] - Cant find and generate replacement for fu6() type Ty0
2021-03-11 22:28:10,499 [main:141] - TRYING TO REPLACE CONSTANT 36
2021-03-11 22:28:10,585 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-11 22:28:10,586 [main:66] - Compilation checking started
2021-03-11 22:28:10,804 [main:49] - Result = false
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ -1627866910})).toInt().times(countLeadingZeroBits()) != 44) return (-3).toLong().toString(-1663411174)

    prope0 = (-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).unaryMinus() + 5
    if ((-2).shr(1058946036) != 45) return "FAIL 4: $(-2).unaryMinus()"

    return (-3).compareTo(499457543).toString(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}


2021-03-11 22:28:10,804 [main:141] - TRYING TO REPLACE CONSTANT 1627866910
2021-03-11 22:28:10,890 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 22:28:10,890 [main:66] - Compilation checking started
2021-03-11 22:28:11,213 [main:53] - Result = true
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return (-3).toLong().toString(-1663411174)

    prope0 = (-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).unaryMinus() + 5
    if ((-2).shr(1058946036) != 45) return "FAIL 4: $(-2).unaryMinus()"

    return (-3).compareTo(499457543).toString(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}


2021-03-11 22:28:11,213 [main:141] - TRYING TO REPLACE CONSTANT 2
2021-03-11 22:28:11,303 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 22:28:11,304 [main:66] - Compilation checking started
2021-03-11 22:28:11,621 [main:53] - Result = true
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return (-3).toLong().toString(-1663411174)

    prope0 = (-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).unaryMinus() + 5
    if ((0).shr(1058946036) != 45) return "FAIL 4: $(-2).unaryMinus()"

    return (-3).compareTo(499457543).toString(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}


2021-03-11 22:28:11,621 [main:141] - TRYING TO REPLACE CONSTANT 1058946036
2021-03-11 22:28:11,726 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(TRY)
2021-03-11 22:28:11,726 [main:66] - Compilation checking started
2021-03-11 22:28:12,083 [main:53] - Result = true
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return (-3).toLong().toString(-1663411174)

    prope0 = (-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $(-2).unaryMinus()"

    return (-3).compareTo(499457543).toString(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}


2021-03-11 22:28:12,083 [main:141] - TRYING TO REPLACE CONSTANT 3
2021-03-11 22:28:12,179 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:28:12,180 [main:66] - Compilation checking started
2021-03-11 22:28:12,520 [main:53] - Result = true
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(-1663411174)

    prope0 = (-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $(-2).unaryMinus()"

    return (-3).compareTo(499457543).toString(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}


2021-03-11 22:28:12,521 [main:141] - TRYING TO REPLACE CONSTANT 1663411174
2021-03-11 22:28:12,639 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 22:28:12,639 [main:66] - Compilation checking started
2021-03-11 22:28:12,994 [main:53] - Result = true
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = (-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $(-2).unaryMinus()"

    return (-3).compareTo(499457543).toString(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}


2021-03-11 22:28:12,994 [main:141] - TRYING TO REPLACE CONSTANT 2
2021-03-11 22:28:13,100 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 22:28:13,101 [main:66] - Compilation checking started
2021-03-11 22:28:13,451 [main:53] - Result = true
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = (-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $((test({ -1627866910})).toByte().countLeadingZeroBits() + 4).unaryMinus()"

    return (-3).compareTo(499457543).toString(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}


2021-03-11 22:28:13,451 [main:141] - TRYING TO REPLACE CONSTANT 1627866910
2021-03-11 22:28:13,552 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 22:28:13,552 [main:66] - Compilation checking started
2021-03-11 22:28:13,761 [main:49] - Result = false
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ (-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).unaryMinus() + 5}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = (-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $((test({ -1627866910})).toByte().countLeadingZeroBits() + 4).unaryMinus()"

    return (-3).compareTo(499457543).toString(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}


2021-03-11 22:28:13,762 [main:141] - TRYING TO REPLACE CONSTANT 1627866910
2021-03-11 22:28:13,847 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(TRY)
2021-03-11 22:28:13,848 [main:66] - Compilation checking started
2021-03-11 22:28:14,054 [main:49] - Result = false
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ try {
            val i = s()
            i + 10
        }
        finally {
            0
        }})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = (-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $((test({ -1627866910})).toByte().countLeadingZeroBits() + 4).unaryMinus()"

    return (-3).compareTo(499457543).toString(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}


2021-03-11 22:28:14,055 [main:141] - TRYING TO REPLACE CONSTANT 3
2021-03-11 22:28:14,140 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PARENTHESIZED)
2021-03-11 22:28:14,140 [main:66] - Compilation checking started
2021-03-11 22:28:14,456 [main:53] - Result = true
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = (-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $((test({ -1627866910})).toByte().countLeadingZeroBits() + 4).unaryMinus()"

    return ((test({ 1627866910}))).compareTo(499457543).toString(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}


2021-03-11 22:28:14,457 [main:141] - TRYING TO REPLACE CONSTANT 499457543
2021-03-11 22:28:14,546 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-11 22:28:14,547 [main:66] - Compilation checking started
2021-03-11 22:28:14,756 [main:49] - Result = false
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = (-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $((test({ -1627866910})).toByte().countLeadingZeroBits() + 4).unaryMinus()"

    return ((test({ 1627866910}))).compareTo(countLeadingZeroBits()).toString(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}


2021-03-11 22:28:14,756 [main:141] - TRYING TO REPLACE CONSTANT 1
2021-03-11 22:28:14,850 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-11 22:28:14,851 [main:66] - Compilation checking started
2021-03-11 22:28:15,243 [main:53] - Result = true
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = (-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $((test({ -1627866910})).toByte().countLeadingZeroBits() + 4).unaryMinus()"

    return ((test({ 1627866910}))).compareTo(499457543).toString(test {
        try {
            val p = test({ -1627866910})
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}


2021-03-11 22:28:15,244 [main:141] - TRYING TO REPLACE CONSTANT 2
2021-03-11 22:28:15,337 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:28:15,337 [main:66] - Compilation checking started
2021-03-11 22:28:15,545 [main:49] - Result = false
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = (-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $((test({ -1627866910})).toByte().countLeadingZeroBits() + 4).unaryMinus()"

    return ((test({ 1627866910}))).compareTo(499457543).toString(test {
        try {
            val p = test({ -1627866910})
            return "OK"
        }
        catch(e: Exception) {
            countLeadingZeroBits()
        }
        finally {
            -3
        }
    })
}


2021-03-11 22:28:15,545 [main:141] - TRYING TO REPLACE CONSTANT 3
2021-03-11 22:28:15,634 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:28:15,634 [main:66] - Compilation checking started
2021-03-11 22:28:15,837 [main:49] - Result = false
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = (-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $((test({ -1627866910})).toByte().countLeadingZeroBits() + 4).unaryMinus()"

    return ((test({ 1627866910}))).compareTo(499457543).toString(test {
        try {
            val p = test({ -1627866910})
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            countLeadingZeroBits()
        }
    })
}


2021-03-11 22:28:15,838 [main:141] - TRYING TO REPLACE CONSTANT 3
2021-03-11 22:28:15,927 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on BLOCK
2021-03-11 22:28:15,928 [main:66] - Compilation checking started
2021-03-11 22:28:16,152 [main:49] - Result = false
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = ({
            -2
        }).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $((test({ -1627866910})).toByte().countLeadingZeroBits() + 4).unaryMinus()"

    return ((test({ 1627866910}))).compareTo(499457543).toString(test {
        try {
            val p = test({ -1627866910})
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}


2021-03-11 22:28:16,152 [main:141] - TRYING TO REPLACE CONSTANT 1
2021-03-11 22:28:16,244 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 22:28:16,244 [main:66] - Compilation checking started
2021-03-11 22:28:16,588 [main:53] - Result = true
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = (-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $((test({ -1627866910})).toByte().countLeadingZeroBits() + 4).unaryMinus()"

    return ((test({ 1627866910}))).compareTo(499457543).toString(test {
        try {
            val p = test({ -1627866910})
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}


2021-03-11 22:28:16,588 [main:141] - TRYING TO REPLACE CONSTANT 2
2021-03-11 22:28:16,679 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on BLOCK
2021-03-11 22:28:16,679 [main:66] - Compilation checking started
2021-03-11 22:28:16,898 [main:49] - Result = false
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = (-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            {
            -2
        }
        }
        finally {
            -3
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $((test({ -1627866910})).toByte().countLeadingZeroBits() + 4).unaryMinus()"

    return ((test({ 1627866910}))).compareTo(499457543).toString(test {
        try {
            val p = test({ -1627866910})
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}


2021-03-11 22:28:16,899 [main:141] - TRYING TO REPLACE CONSTANT 3
2021-03-11 22:28:16,987 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PARENTHESIZED)
2021-03-11 22:28:16,987 [main:66] - Compilation checking started
2021-03-11 22:28:17,305 [main:53] - Result = true
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = (-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $((test({ -1627866910})).toByte().countLeadingZeroBits() + 4).unaryMinus()"

    return ((test({ 1627866910}))).compareTo(499457543).toString(test {
        try {
            val p = test({ -1627866910})
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}


2021-03-11 22:28:17,306 [main:141] - TRYING TO REPLACE CONSTANT 1627866910
2021-03-11 22:28:17,401 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 22:28:17,401 [main:66] - Compilation checking started
2021-03-11 22:28:17,703 [main:53] - Result = true
Text:
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = (-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $((test({ -1627866910})).toByte().countLeadingZeroBits() + 4).unaryMinus()"

    return ((test({ 1627866910}))).compareTo(499457543).toString(test {
        try {
            val p = test({ -1627866910})
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}


2021-03-11 22:28:17,703 [main:41] - AFTER TRY 1 res = inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = (-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $((test({ -1627866910})).toByte().countLeadingZeroBits() + 4).unaryMinus()"

    return ((test({ 1627866910}))).compareTo(499457543).toString(test {
        try {
            val p = test({ -1627866910})
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}


2021-03-11 22:28:17,895 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:28:18,074 [main:302] - generating value of type = Kla1 false depth = 1
2021-03-11 22:28:18,075 [main:112] - generating klass Kla1 text = class Kla1(val value: Any): Kla0
2021-03-11 22:28:18,161 [main:194] - Type params = []
2021-03-11 22:28:18,247 [main:302] - generating value of type = Any false depth = 3
2021-03-11 22:28:18,247 [main:112] - generating klass Kla1 text = class Kla1(val value: Any): Kla0
2021-03-11 22:28:18,334 [main:194] - Type params = []
2021-03-11 22:28:18,419 [main:302] - generating value of type = Any false depth = 1
2021-03-11 22:28:18,419 [main:112] - generating klass Kla2 text = inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}
2021-03-11 22:28:18,505 [main:194] - Type params = []
2021-03-11 22:28:18,591 [main:302] - generating value of type = Kla0 false depth = 1
2021-03-11 22:28:18,593 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:28:18,771 [main:302] - generating value of type = Kla2 false depth = 3
2021-03-11 22:28:18,772 [main:112] - generating klass Kla2 text = inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}
2021-03-11 22:28:18,860 [main:194] - Type params = []
2021-03-11 22:28:18,948 [main:302] - generating value of type = Kla0 false depth = 5
2021-03-11 22:28:18,949 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:28:19,208 [main:302] - generating value of type = Kla2 false depth = 7
2021-03-11 22:28:19,209 [main:112] - generating klass Kla2 text = inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}
2021-03-11 22:28:19,296 [main:194] - Type params = []
2021-03-11 22:28:19,382 [main:302] - generating value of type = Kla0 false depth = 9
2021-03-11 22:28:19,384 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:28:19,564 [main:302] - generating value of type = Kla2 false depth = 11
2021-03-11 22:28:19,565 [main:112] - generating klass Kla2 text = inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}
2021-03-11 22:28:19,651 [main:194] - Type params = []
2021-03-11 22:28:19,737 [main:302] - generating value of type = Kla0 false depth = 13
2021-03-11 22:28:19,738 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:28:19,917 [main:302] - generating value of type = Kla2 false depth = 15
2021-03-11 22:28:19,919 [main:112] - generating klass Kla2 text = inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}
2021-03-11 22:28:20,007 [main:194] - Type params = []
2021-03-11 22:28:20,139 [main:302] - generating value of type = Kla0 false depth = 17
2021-03-11 22:28:20,339 [main:43] - GENERATING CALL OF inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }
2021-03-11 22:28:20,437 [main:61] - WITHOUT TYPE PARAMS = inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }
2021-03-11 22:28:20,632 [main:302] - generating value of type = Function0<Int> false depth = 1
2021-03-11 22:28:20,634 [main:302] - generating value of type = Int true depth = 2
2021-03-11 22:28:20,635 [main:95] - GENERATED = test({ 2114828160})
2021-03-11 22:28:20,720 [main:43] - GENERATING CALL OF inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0
2021-03-11 22:28:20,815 [main:61] - WITHOUT TYPE PARAMS = inline fun <Ty0> Kla2.fu0(): UByte = (Kla1("rmtth") as Kla1).value as Ty0
2021-03-11 22:28:20,905 [main:302] - generating value of type = Kla2 false depth = 1
2021-03-11 22:28:20,906 [main:112] - generating klass Kla2 text = inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}
2021-03-11 22:28:20,992 [main:194] - Type params = []
2021-03-11 22:28:21,082 [main:302] - generating value of type = Kla0 false depth = 3
2021-03-11 22:28:21,083 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:28:21,293 [main:302] - generating value of type = Kla2 false depth = 5
2021-03-11 22:28:21,294 [main:112] - generating klass Kla2 text = inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}
2021-03-11 22:28:21,396 [main:194] - Type params = []
2021-03-11 22:28:21,485 [main:302] - generating value of type = Kla0 false depth = 7
2021-03-11 22:28:21,487 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:28:21,662 [main:302] - generating value of type = Kla1 false depth = 9
2021-03-11 22:28:21,664 [main:112] - generating klass Kla1 text = class Kla1(val value: Any): Kla0
2021-03-11 22:28:21,749 [main:194] - Type params = []
2021-03-11 22:28:21,834 [main:302] - generating value of type = Any false depth = 11
2021-03-11 22:28:21,835 [main:95] - GENERATED = Kla2(Kla2(Kla1("npqzo"))).fu0<UByte>()
2021-03-11 22:28:21,919 [main:43] - GENERATING CALL OF inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0
2021-03-11 22:28:22,014 [main:61] - WITHOUT TYPE PARAMS = inline fun <Ty0> fu1(a: Kla2): Short = test({ -1627866910}) as Ty0
2021-03-11 22:28:22,101 [main:302] - generating value of type = Kla2 false depth = 1
2021-03-11 22:28:22,102 [main:112] - generating klass Kla2 text = inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}
2021-03-11 22:28:22,187 [main:194] - Type params = []
2021-03-11 22:28:22,305 [main:302] - generating value of type = Kla0 false depth = 3
2021-03-11 22:28:22,306 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:28:22,504 [main:302] - generating value of type = Kla2 false depth = 5
2021-03-11 22:28:22,505 [main:112] - generating klass Kla2 text = inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}
2021-03-11 22:28:22,599 [main:194] - Type params = []
2021-03-11 22:28:22,686 [main:302] - generating value of type = Kla0 false depth = 7
2021-03-11 22:28:22,687 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:28:22,865 [main:302] - generating value of type = Kla1 false depth = 9
2021-03-11 22:28:22,867 [main:112] - generating klass Kla1 text = class Kla1(val value: Any): Kla0
2021-03-11 22:28:22,952 [main:194] - Type params = []
2021-03-11 22:28:23,037 [main:302] - generating value of type = Any false depth = 11
2021-03-11 22:28:23,037 [main:95] - GENERATED = fu1<Short>(Kla2(Kla2(Kla1("xzbxq"))))
2021-03-11 22:28:23,123 [main:43] - GENERATING CALL OF fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}
2021-03-11 22:28:23,127 [main:61] - WITHOUT TYPE PARAMS = fun <Ty0> fu2(a: Kla2): Boolean = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}
2021-03-11 22:28:23,230 [main:302] - generating value of type = Kla2 false depth = 1
2021-03-11 22:28:23,231 [main:112] - generating klass Kla2 text = inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}
2021-03-11 22:28:23,336 [main:194] - Type params = []
2021-03-11 22:28:23,430 [main:302] - generating value of type = Kla0 false depth = 3
2021-03-11 22:28:23,431 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:28:23,606 [main:302] - generating value of type = Kla1 false depth = 5
2021-03-11 22:28:23,608 [main:112] - generating klass Kla1 text = class Kla1(val value: Any): Kla0
2021-03-11 22:28:23,693 [main:194] - Type params = []
2021-03-11 22:28:23,778 [main:302] - generating value of type = Any false depth = 7
2021-03-11 22:28:23,778 [main:95] - GENERATED = fu2<Boolean>(Kla2(Kla1("hqhpc")))
2021-03-11 22:28:23,862 [main:43] - GENERATING CALL OF fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}
2021-03-11 22:28:23,956 [main:61] - WITHOUT TYPE PARAMS = fun <Ty0> fu3(a: Kla2): UShort = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}
2021-03-11 22:28:24,044 [main:302] - generating value of type = Kla2 false depth = 1
2021-03-11 22:28:24,045 [main:112] - generating klass Kla2 text = inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}
2021-03-11 22:28:24,158 [main:194] - Type params = []
2021-03-11 22:28:24,249 [main:302] - generating value of type = Kla0 false depth = 3
2021-03-11 22:28:24,250 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:28:24,442 [main:302] - generating value of type = Kla2 false depth = 5
2021-03-11 22:28:24,443 [main:112] - generating klass Kla2 text = inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}
2021-03-11 22:28:24,530 [main:194] - Type params = []
2021-03-11 22:28:24,616 [main:302] - generating value of type = Kla0 false depth = 7
2021-03-11 22:28:24,618 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:28:24,794 [main:302] - generating value of type = Kla1 false depth = 9
2021-03-11 22:28:24,795 [main:112] - generating klass Kla1 text = class Kla1(val value: Any): Kla0
2021-03-11 22:28:24,883 [main:194] - Type params = []
2021-03-11 22:28:24,970 [main:302] - generating value of type = Any false depth = 11
2021-03-11 22:28:24,971 [main:95] - GENERATED = fu3<UShort>(Kla2(Kla2(Kla1("wtqfp"))))
2021-03-11 22:28:25,076 [main:43] - GENERATING CALL OF fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}
2021-03-11 22:28:25,305 [main:61] - WITHOUT TYPE PARAMS = fun <Ty0> fu4(a: Kla2): MutableMap<Kla1?, Kla2> = fu5(a) {
    fu1(it)
}
2021-03-11 22:28:25,394 [main:302] - generating value of type = Kla2 false depth = 1
2021-03-11 22:28:25,395 [main:112] - generating klass Kla2 text = inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}
2021-03-11 22:28:25,480 [main:194] - Type params = []
2021-03-11 22:28:25,570 [main:302] - generating value of type = Kla0 false depth = 3
2021-03-11 22:28:25,571 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:28:25,746 [main:302] - generating value of type = Kla1 false depth = 5
2021-03-11 22:28:25,747 [main:112] - generating klass Kla1 text = class Kla1(val value: Any): Kla0
2021-03-11 22:28:25,836 [main:194] - Type params = []
2021-03-11 22:28:25,921 [main:302] - generating value of type = Any false depth = 7
2021-03-11 22:28:25,921 [main:95] - GENERATED = fu4<MutableMap<Kla1?, Kla2>>(Kla2(Kla1("opmmq")))
2021-03-11 22:28:26,044 [main:43] - GENERATING CALL OF fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}
2021-03-11 22:28:26,570 [main:61] - WITHOUT TYPE PARAMS = fun <Ty0, Ty1> fu5(value: Kla0, f: (Kla0) -> Function2<UInt?, Int?, Kla2?>): Function2<UInt?, Int?, Kla2?> {
    val p = 1
return f(value)
}
2021-03-11 22:28:26,762 [main:302] - generating value of type = Kla0 false depth = 1
2021-03-11 22:28:26,763 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:28:26,944 [main:302] - generating value of type = Kla2 false depth = 3
2021-03-11 22:28:26,945 [main:112] - generating klass Kla2 text = inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}
2021-03-11 22:28:27,064 [main:194] - Type params = []
2021-03-11 22:28:27,157 [main:302] - generating value of type = Kla0 false depth = 5
2021-03-11 22:28:27,166 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:28:27,349 [main:302] - generating value of type = Kla2 false depth = 7
2021-03-11 22:28:27,350 [main:112] - generating klass Kla2 text = inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}
2021-03-11 22:28:27,434 [main:194] - Type params = []
2021-03-11 22:28:27,518 [main:302] - generating value of type = Kla0 false depth = 9
2021-03-11 22:28:27,520 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:28:27,693 [main:302] - generating value of type = Kla1 false depth = 11
2021-03-11 22:28:27,695 [main:112] - generating klass Kla1 text = class Kla1(val value: Any): Kla0
2021-03-11 22:28:27,778 [main:194] - Type params = []
2021-03-11 22:28:27,863 [main:302] - generating value of type = Any false depth = 13
2021-03-11 22:28:27,864 [main:302] - generating value of type = Function1<Kla0, Function2<UInt?, Int?, Kla2?>> false depth = 1
2021-03-11 22:28:27,865 [main:302] - generating value of type = Function2<UInt?, Int?, Kla2?> false depth = 2
2021-03-11 22:28:27,866 [main:302] - generating value of type = Kla2 false depth = 3
2021-03-11 22:28:27,867 [main:112] - generating klass Kla2 text = inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}
2021-03-11 22:28:27,979 [main:194] - Type params = []
2021-03-11 22:28:28,070 [main:302] - generating value of type = Kla0 false depth = 5
2021-03-11 22:28:28,071 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:28:28,261 [main:302] - generating value of type = Kla1 false depth = 7
2021-03-11 22:28:28,262 [main:112] - generating klass Kla1 text = class Kla1(val value: Any): Kla0
2021-03-11 22:28:28,351 [main:194] - Type params = []
2021-03-11 22:28:28,440 [main:302] - generating value of type = Any false depth = 9
2021-03-11 22:28:28,441 [main:95] - GENERATED = fu5<Kla0, Function2<UInt?, Int?, Kla2?>>(Kla2(Kla2(Kla1("ksobb"))), {a: Kla0 -> {a: UInt?, b: Int? -> Kla2(Kla1("pzjwa"))}})
2021-03-11 22:28:28,551 [main:43] - Try №1
2021-03-11 22:28:37,261 [main:48] - Already checked
2021-03-11 22:28:37,533 [main:48] - Already checked
2021-03-11 22:28:41,042 [main:69] - Trying to insert override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }
2021-03-11 22:28:41,151 [main:66] - Compilation checking started
2021-03-11 22:28:42,363 [main:103] - Trying to change 180 nodes
2021-03-11 22:28:42,363 [main:107] - replacing (prope6++, Int)
2021-03-11 22:28:42,363 [main:50] - replacing prope6++ Int
2021-03-11 22:28:42,363 [main:54] - Getting value of type Int
2021-03-11 22:28:42,537 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:28:42,540 [main:58] - GENERATED VALUE OF TYPE Int = -1826963880
2021-03-11 22:28:42,540 [main:61] - GENERATED IS CALL =false
2021-03-11 22:28:42,707 [main:67] - randomType = Double
2021-03-11 22:28:42,900 [main:302] - generating value of type = Double true depth = 0
2021-03-11 22:28:42,956 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:28:42,956 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3463d5f7]
2021-03-11 22:28:42,957 [main:78] - Generated call from random type = (0.019174936919303942).toInt().toInt()
2021-03-11 22:28:42,958 [main:106] - GETTING Int from UShort
2021-03-11 22:28:43,004 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@5f305672], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37a45e67]]
2021-03-11 22:28:43,004 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@5f305672]
2021-03-11 22:28:43,004 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@37a45e67]
2021-03-11 22:28:43,162 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:28:43,166 [main:117] - GENERATED CALL = (fu3<UShort>(Kla2(Kla2(Kla1("wtqfp"))))).compareTo(Kla2(Kla2(Kla1("npqzo"))).fu0<UByte>()).times(10)
2021-03-11 22:28:43,166 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@2872da6], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4468febc]]
2021-03-11 22:28:43,167 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@2872da6]
2021-03-11 22:28:43,167 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4468febc]
2021-03-11 22:28:43,167 [main:117] - GENERATED CALL = (fu3<UShort>(Kla2(Kla2(Kla1("wtqfp"))))).toShort().rem((test({ -2})).toByte())
2021-03-11 22:28:43,167 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@5f305672], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7f3daf18]]
2021-03-11 22:28:43,167 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@5f305672]
2021-03-11 22:28:43,324 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 22:28:43,328 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7f3daf18]
2021-03-11 22:28:43,483 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:28:43,486 [main:117] - GENERATED CALL = (fu3<UShort>(Kla2(Kla2(Kla1("wtqfp"))))).compareTo(10.toUByte()).rotateLeft(-1846003264)
2021-03-11 22:28:43,486 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@6ca38b9d], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@ad7cc4c]]
2021-03-11 22:28:43,486 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@6ca38b9d]
2021-03-11 22:28:43,487 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@ad7cc4c]
2021-03-11 22:28:43,487 [main:117] - GENERATED CALL = (fu3<UShort>(Kla2(Kla2(Kla1("wtqfp"))))).toByte().countLeadingZeroBits()
2021-03-11 22:28:43,487 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@5f305672], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@390b15c0]]
2021-03-11 22:28:43,487 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@5f305672]
2021-03-11 22:28:43,487 [main:117] - GENERATED CALL = (fu3<UShort>(Kla2(Kla2(Kla1("wtqfp"))))).compareTo(Kla2(Kla2(Kla1("npqzo"))).fu0<UByte>()).sign
2021-03-11 22:28:43,487 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@78f642d1], @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@7b100eed]]
2021-03-11 22:28:43,487 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@78f642d1]
2021-03-11 22:28:43,488 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@7b100eed]
2021-03-11 22:28:43,488 [main:117] - GENERATED CALL = (fu3<UShort>(Kla2(Kla2(Kla1("wtqfp"))))).toDouble().roundToInt()
2021-03-11 22:28:43,488 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@2872da6], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6af24d36]]
2021-03-11 22:28:43,488 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@2872da6]
2021-03-11 22:28:43,488 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6af24d36]
2021-03-11 22:28:43,488 [main:117] - GENERATED CALL = (fu3<UShort>(Kla2(Kla2(Kla1("wtqfp"))))).toShort().unaryMinus()
2021-03-11 22:28:43,488 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@2872da6], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@54e1dc9a]]
2021-03-11 22:28:43,488 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@2872da6]
2021-03-11 22:28:43,488 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@54e1dc9a]
2021-03-11 22:28:43,489 [main:117] - GENERATED CALL = (fu3<UShort>(Kla2(Kla2(Kla1("wtqfp"))))).toShort().countTrailingZeroBits()
2021-03-11 22:28:43,489 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@5f305672], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3bae5f78]]
2021-03-11 22:28:43,489 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@5f305672]
2021-03-11 22:28:43,489 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3bae5f78]
2021-03-11 22:28:43,489 [main:117] - GENERATED CALL = (fu3<UShort>(Kla2(Kla2(Kla1("wtqfp"))))).compareTo(Kla2(Kla2(Kla1("npqzo"))).fu0<UByte>()).unaryPlus()
2021-03-11 22:28:43,489 [main:113] - Case = [@kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@5f305672], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@51f15610]]
2021-03-11 22:28:43,489 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@5f305672]
2021-03-11 22:28:43,489 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@51f15610]
2021-03-11 22:28:43,490 [main:117] - GENERATED CALL = (fu3<UShort>(Kla2(Kla2(Kla1("wtqfp"))))).compareTo(Kla2(Kla2(Kla1("npqzo"))).fu0<UByte>()).countOneBits()
2021-03-11 22:28:43,490 [main:114] - replacement of prope6++ of type Int is (fu3<UShort>(Kla2(Kla2(Kla1("wtqfp"))))).toShort().countTrailingZeroBits()
2021-03-11 22:28:43,642 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:28:43,643 [main:66] - Compilation checking started
2021-03-11 22:28:44,372 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = (-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $((test({ -1627866910})).toByte().countLeadingZeroBits() + 4).unaryMinus()"

    return ((test({ 1627866910}))).compareTo(499457543).toString(test {
        try {
            val p = test({ -1627866910})
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}

suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu8(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu9(c: suspend () -> String): String {
    var prope3: String? = null

    c.startCoroutine(object: Kla5<String>() {
        override val context: CoroutineContext
            get() =  EmptyCoroutineContext

        override fun resumeWithException(exception: Throwable) {
            prope3 = "Exception: " + exception.message!!
        }

        override fun resume(value: String) {
            prope3 = value
        }
    })

    return prope3 as String
}

fun box838(): String {
    if (fu9 { "OK" } != "OK") return "fail 4"
    if (fu9 { fu7() } != "OK") return "fail 5"

    if (fu9 { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu9 { fu8() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty2> fu10(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla5<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            resumeWithException(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla6 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu14() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu14(it)
    }

    fun fu14(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu15(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu16(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu17() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        (fu3<UShort>(Kla2(Kla2(Kla1("wtqfp"))))).toShort().countTrailingZeroBits()
        prope8 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:28:44,374 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected ", String)
2021-03-11 22:28:44,376 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " String
2021-03-11 22:28:44,376 [main:54] - Getting value of type String
2021-03-11 22:28:44,543 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:28:44,547 [main:58] - GENERATED VALUE OF TYPE String = "jpjsm"
2021-03-11 22:28:44,547 [main:61] - GENERATED IS CALL =false
2021-03-11 22:28:44,732 [main:67] - randomType = Kla8
2021-03-11 22:28:44,895 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-11 22:28:44,899 [main:112] - generating klass Kla8 text = object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}
2021-03-11 22:28:44,955 [main:106] - GETTING String from Int
2021-03-11 22:28:44,997 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58808d82]]
2021-03-11 22:28:44,997 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:28:44,998 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58808d82]
2021-03-11 22:28:44,998 [main:117] - GENERATED CALL = (((test({ 1627866910})))).toChar().titlecase()
2021-03-11 22:28:44,998 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ef7baad]]
2021-03-11 22:28:44,998 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:28:44,998 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ef7baad]
2021-03-11 22:28:45,141 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:28:45,145 [main:117] - GENERATED CALL = (((test({ 1627866910})))).toChar().plus("xyxbn")
2021-03-11 22:28:45,145 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]]
2021-03-11 22:28:45,145 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:28:45,146 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]
2021-03-11 22:28:45,146 [main:117] - GENERATED CALL = (((test({ 1627866910})))).compareTo((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        })).toString(val p = test({ -1627866910})
2021-03-11 22:28:45,146 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@416d03a5]]
2021-03-11 22:28:45,146 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:28:45,147 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@416d03a5]
2021-03-11 22:28:45,147 [main:117] - GENERATED CALL = (((test({ 1627866910})))).toChar().lowercase()
2021-03-11 22:28:45,147 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]]
2021-03-11 22:28:45,147 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]
2021-03-11 22:28:45,307 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:28:45,311 [main:117] - GENERATED CALL = (((test({ 1627866910})))).toString(-217129705)
2021-03-11 22:28:45,311 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6fc8fc8f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]]
2021-03-11 22:28:45,311 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6fc8fc8f]
2021-03-11 22:28:45,311 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]
2021-03-11 22:28:45,475 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:28:45,481 [main:117] - GENERATED CALL = (((test({ 1627866910})))).toLong().toString(-1816678181)
2021-03-11 22:28:45,482 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15e7f7d8]]
2021-03-11 22:28:45,482 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:28:45,482 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15e7f7d8]
2021-03-11 22:28:45,482 [main:117] - GENERATED CALL = (((test({ 1627866910})))).toChar().uppercase()
2021-03-11 22:28:45,482 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@630a089]]
2021-03-11 22:28:45,482 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd]
2021-03-11 22:28:45,483 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@630a089]
2021-03-11 22:28:45,483 [main:117] - GENERATED CALL = (((test({ 1627866910})))).toShort().toString(-2)
2021-03-11 22:28:45,483 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63cdd551], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]]
2021-03-11 22:28:45,483 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63cdd551]
2021-03-11 22:28:45,483 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]
2021-03-11 22:28:45,484 [main:117] - GENERATED CALL = (((test({ 1627866910})))).div(((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong()).toString((test({ -2})).toByte().countLeadingZeroBits())
2021-03-11 22:28:45,484 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6694d9]]
2021-03-11 22:28:45,484 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a]
2021-03-11 22:28:45,485 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6694d9]
2021-03-11 22:28:45,485 [main:117] - GENERATED CALL = (((test({ 1627866910})))).toByte().toString(test({ 2114828160}))
2021-03-11 22:28:45,485 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " of type String is (((test({ 1627866910})))).toByte().toString(test({ 2114828160}))
2021-03-11 22:28:45,642 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:28:45,642 [main:66] - Compilation checking started
2021-03-11 22:28:46,070 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = (-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $((test({ -1627866910})).toByte().countLeadingZeroBits() + 4).unaryMinus()"

    return ((test({ 1627866910}))).compareTo(499457543).toString(test {
        try {
            val p = test({ -1627866910})
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}

suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu8(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu9(c: suspend () -> String): String {
    var prope3: String? = null

    c.startCoroutine(object: Kla5<String>() {
        override val context: CoroutineContext
            get() =  EmptyCoroutineContext

        override fun resumeWithException(exception: Throwable) {
            prope3 = "Exception: " + exception.message!!
        }

        override fun resume(value: String) {
            prope3 = value
        }
    })

    return prope3 as String
}

fun box838(): String {
    if (fu9 { "OK" } != "OK") return "fail 4"
    if (fu9 { fu7() } != "OK") return "fail 5"

    if (fu9 { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu9 { fu8() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty2> fu10(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla5<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            resumeWithException(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla6 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu14() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu14(it)
    }

    fun fu14(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu15(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu16(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu17() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        (fu3<UShort>(Kla2(Kla2(Kla1("wtqfp"))))).toShort().countTrailingZeroBits()
        prope8 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error((((test({ 1627866910})))).toByte().toString(test({ 2114828160})) + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:28:46,072 [main:107] - replacing (prope3, String?)
2021-03-11 22:28:46,074 [main:50] - replacing prope3 String?
2021-03-11 22:28:46,074 [main:54] - Getting value of type String?
2021-03-11 22:28:46,232 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:28:46,235 [main:58] - GENERATED VALUE OF TYPE String? = "pqbvk"
2021-03-11 22:28:46,235 [main:61] - GENERATED IS CALL =false
2021-03-11 22:28:46,411 [main:67] - randomType = Double
2021-03-11 22:28:46,557 [main:302] - generating value of type = Double true depth = 0
2021-03-11 22:28:46,602 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@411f5b08]
2021-03-11 22:28:46,602 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15e7f7d8]
2021-03-11 22:28:46,602 [main:78] - Generated call from random type = (0.3698108188647986).toChar().uppercase()
2021-03-11 22:28:46,604 [main:106] - GETTING String? from Int
2021-03-11 22:28:46,656 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6fc8fc8f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]]
2021-03-11 22:28:46,656 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6fc8fc8f]
2021-03-11 22:28:46,657 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]
2021-03-11 22:28:46,871 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:28:46,875 [main:117] - GENERATED CALL = ((-3))?.toLong().toString(593096312)
2021-03-11 22:28:46,875 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6694d9]]
2021-03-11 22:28:46,875 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a]
2021-03-11 22:28:46,875 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6694d9]
2021-03-11 22:28:46,875 [main:117] - GENERATED CALL = ((-3))?.toByte().toString(val p =
2021-03-11 22:28:46,875 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]]
2021-03-11 22:28:46,875 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]
2021-03-11 22:28:46,876 [main:117] - GENERATED CALL = ((-3))?.toString((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }))
2021-03-11 22:28:46,876 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]]
2021-03-11 22:28:46,876 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:28:46,876 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]
2021-03-11 22:28:46,876 [main:117] - GENERATED CALL = ((-3))?.compareTo((test({ -1627866910})).toByte().countLeadingZeroBits()).toString(val p =
2021-03-11 22:28:46,876 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]]
2021-03-11 22:28:46,876 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:28:46,876 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]
2021-03-11 22:28:46,877 [main:117] - GENERATED CALL = ((-3))?.toInt().toString(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
2021-03-11 22:28:46,877 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@416d03a5]]
2021-03-11 22:28:46,877 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:28:46,877 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@416d03a5]
2021-03-11 22:28:46,877 [main:117] - GENERATED CALL = ((-3))?.toChar().lowercase()
2021-03-11 22:28:46,877 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58808d82]]
2021-03-11 22:28:46,877 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:28:46,877 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58808d82]
2021-03-11 22:28:46,878 [main:117] - GENERATED CALL = ((-3))?.toChar().titlecase()
2021-03-11 22:28:46,878 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15e7f7d8]]
2021-03-11 22:28:46,878 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:28:46,878 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15e7f7d8]
2021-03-11 22:28:46,878 [main:117] - GENERATED CALL = ((-3))?.toChar().uppercase()
2021-03-11 22:28:46,878 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@630a089]]
2021-03-11 22:28:46,878 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd]
2021-03-11 22:28:46,878 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@630a089]
2021-03-11 22:28:46,878 [main:117] - GENERATED CALL = ((-3))?.toShort().toString(test({ -1627866910}))
2021-03-11 22:28:46,878 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63cdd551], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]]
2021-03-11 22:28:46,878 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63cdd551]
2021-03-11 22:28:46,879 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]
2021-03-11 22:28:46,879 [main:117] - GENERATED CALL = ((-3))?.div(((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong()).toString((test({ 1627866910})).toInt())
2021-03-11 22:28:46,879 [main:114] - replacement of prope3 of type String? is ((-3))?.toString((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }))
2021-03-11 22:28:47,035 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 22:28:47,035 [main:66] - Compilation checking started
2021-03-11 22:28:47,480 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = (-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $((test({ -1627866910})).toByte().countLeadingZeroBits() + 4).unaryMinus()"

    return ((test({ 1627866910}))).compareTo(499457543).toString(test {
        try {
            val p = test({ -1627866910})
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}

suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu8(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu9(c: suspend () -> String): String {
    var prope3: String? = null

    c.startCoroutine(object: Kla5<String>() {
        override val context: CoroutineContext
            get() =  EmptyCoroutineContext

        override fun resumeWithException(exception: Throwable) {
            prope3 = "Exception: " + exception.message!!
        }

        override fun resume(value: String) {
            var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
((-3))?.toString((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })) = value
        }
    })

    return prope3 as String
}

fun box838(): String {
    if (fu9 { "OK" } != "OK") return "fail 4"
    if (fu9 { fu7() } != "OK") return "fail 5"

    if (fu9 { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu9 { fu8() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty2> fu10(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla5<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            resumeWithException(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla6 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu14() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu14(it)
    }

    fun fu14(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu15(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu16(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu17() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        (fu3<UShort>(Kla2(Kla2(Kla1("wtqfp"))))).toShort().countTrailingZeroBits()
        prope8 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:28:47,483 [main:107] - replacing (numberOfSuspensions, Int)
2021-03-11 22:28:47,483 [main:50] - replacing numberOfSuspensions Int
2021-03-11 22:28:47,483 [main:54] - Getting value of type Int
2021-03-11 22:28:47,631 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:28:47,635 [main:58] - GENERATED VALUE OF TYPE Int = -1571585880
2021-03-11 22:28:47,635 [main:61] - GENERATED IS CALL =false
2021-03-11 22:28:47,826 [main:67] - randomType = Byte?
2021-03-11 22:28:47,977 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:28:48,031 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:28:48,031 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@44dce520]
2021-03-11 22:28:48,032 [main:78] - Generated call from random type = (122)?.toInt().shl((test({ -1627866910})).toByte().countLeadingZeroBits())
2021-03-11 22:28:48,032 [main:106] - GETTING Int from Int
2021-03-11 22:28:48,062 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6af24d36]]
2021-03-11 22:28:48,062 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd]
2021-03-11 22:28:48,062 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6af24d36]
2021-03-11 22:28:48,062 [main:117] - GENERATED CALL = (-3).toShort().unaryMinus()
2021-03-11 22:28:48,063 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4ad1ca85]]
2021-03-11 22:28:48,063 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:28:48,063 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4ad1ca85]
2021-03-11 22:28:48,063 [main:117] - GENERATED CALL = (-3).toInt().countLeadingZeroBits()
2021-03-11 22:28:48,063 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6e484af9]]
2021-03-11 22:28:48,063 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a]
2021-03-11 22:28:48,063 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6e484af9]
2021-03-11 22:28:48,063 [main:117] - GENERATED CALL = (-3).toByte().plus((test({ -2})).toByte())
2021-03-11 22:28:48,063 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4ad1ca85]]
2021-03-11 22:28:48,063 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:28:48,063 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4ad1ca85]
2021-03-11 22:28:48,064 [main:117] - GENERATED CALL = (-3).compareTo((test({ -1627866910})).toByte().countLeadingZeroBits()).countLeadingZeroBits()
2021-03-11 22:28:48,064 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@390b15c0]]
2021-03-11 22:28:48,064 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:28:48,064 [main:117] - GENERATED CALL = (-3).compareTo((0)).sign
2021-03-11 22:28:48,064 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5138d036]]
2021-03-11 22:28:48,064 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:28:48,064 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5138d036]
2021-03-11 22:28:48,214 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:28:48,218 [main:117] - GENERATED CALL = (-3).compareTo(val p =.shr(-523555362)
2021-03-11 22:28:48,218 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@390b15c0]]
2021-03-11 22:28:48,218 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:28:48,218 [main:117] - GENERATED CALL = (-3).toInt().sign
2021-03-11 22:28:48,218 [main:113] - Case = [@kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@390b15c0]]
2021-03-11 22:28:48,218 [main:117] - GENERATED CALL = (-3).sign
2021-03-11 22:28:48,218 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7a95ed24]]
2021-03-11 22:28:48,218 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:28:48,368 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:28:48,371 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7a95ed24]
2021-03-11 22:28:48,372 [main:117] - GENERATED CALL = (-3).compareTo(-1902044001).inv()
2021-03-11 22:28:48,372 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@467f2235]]
2021-03-11 22:28:48,372 [main:117] - GENERATED CALL = (-3).absoluteValue
2021-03-11 22:28:48,372 [main:114] - replacement of numberOfSuspensions of type Int is (-3).absoluteValue
2021-03-11 22:28:48,518 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:28:48,518 [main:66] - Compilation checking started
2021-03-11 22:28:48,966 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = (-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $((test({ -1627866910})).toByte().countLeadingZeroBits() + 4).unaryMinus()"

    return ((test({ 1627866910}))).compareTo(499457543).toString(test {
        try {
            val p = test({ -1627866910})
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}

suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu8(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu9(c: suspend () -> String): String {
    var prope3: String? = null

    c.startCoroutine(object: Kla5<String>() {
        override val context: CoroutineContext
            get() =  EmptyCoroutineContext

        override fun resumeWithException(exception: Throwable) {
            prope3 = "Exception: " + exception.message!!
        }

        override fun resume(value: String) {
            var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
prope3 = value
        }
    })

    return prope3 as String
}

fun box838(): String {
    if (fu9 { "OK" } != "OK") return "fail 4"
    if (fu9 { fu7() } != "OK") return "fail 5"

    if (fu9 { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu9 { fu8() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty2> fu10(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla5<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            resumeWithException(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla6 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu14() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu14(it)
    }

    fun fu14(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu15(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu16(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu17() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        (fu3<UShort>(Kla2(Kla2(Kla1("wtqfp"))))).toShort().countTrailingZeroBits()
        prope8 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != (-3).absoluteValue)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:28:48,968 [main:107] - replacing (c !is CoroutineStackFrame, Boolean)
2021-03-11 22:28:48,969 [main:50] - replacing c !is CoroutineStackFrame Boolean
2021-03-11 22:28:48,969 [main:54] - Getting value of type Boolean
2021-03-11 22:28:49,111 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:28:49,115 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 22:28:49,115 [main:61] - GENERATED IS CALL =false
2021-03-11 22:28:49,279 [main:67] - randomType = Float
2021-03-11 22:28:49,423 [main:302] - generating value of type = Float true depth = 0
2021-03-11 22:28:49,456 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:28:49,456 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4961b6f0]
2021-03-11 22:28:49,595 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:28:49,595 [main:78] - Generated call from random type = (0.24269152f).toInt().equals("nlmhs")
2021-03-11 22:28:49,596 [main:106] - GETTING Boolean from Int
2021-03-11 22:28:49,628 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@48649202], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4ce6e84f]]
2021-03-11 22:28:49,628 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@48649202]
2021-03-11 22:28:49,766 [main:302] - generating value of type = Double true depth = 0
2021-03-11 22:28:49,769 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4ce6e84f]
2021-03-11 22:28:49,770 [main:117] - GENERATED CALL = ((-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus()).div(0.5436253109619568).isInfinite()
2021-03-11 22:28:49,770 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4109a87b]]
2021-03-11 22:28:49,770 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:28:49,770 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4109a87b]
2021-03-11 22:28:49,770 [main:117] - GENERATED CALL = ((-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus()).toChar().isISOControl()
2021-03-11 22:28:49,770 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6fc8fc8f], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@335cb6cd]]
2021-03-11 22:28:49,770 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6fc8fc8f]
2021-03-11 22:28:49,770 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@335cb6cd]
2021-03-11 22:28:49,908 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:28:49,908 [main:117] - GENERATED CALL = ((-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus()).toLong().equals("fitta")
2021-03-11 22:28:49,908 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@48649202], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@405dfba3]]
2021-03-11 22:28:49,908 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@48649202]
2021-03-11 22:28:50,049 [main:302] - generating value of type = Double true depth = 0
2021-03-11 22:28:50,053 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@405dfba3]
2021-03-11 22:28:50,054 [main:117] - GENERATED CALL = ((-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus()).div(0.28783997048587906).isFinite()
2021-03-11 22:28:50,054 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@45c57d7f], public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@35730a4d]]
2021-03-11 22:28:50,054 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@45c57d7f]
2021-03-11 22:28:50,054 [main:149] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@35730a4d]
2021-03-11 22:28:50,054 [main:117] - GENERATED CALL = ((-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus()).rangeTo((test({ -2})).toByte()).isEmpty()
2021-03-11 22:28:50,054 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@f7f3777], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4ce6e84f]]
2021-03-11 22:28:50,054 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@f7f3777]
2021-03-11 22:28:50,054 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4ce6e84f]
2021-03-11 22:28:50,055 [main:117] - GENERATED CALL = ((-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus()).toDouble().isInfinite()
2021-03-11 22:28:50,055 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e4cb2ba]]
2021-03-11 22:28:50,055 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:28:50,055 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e4cb2ba]
2021-03-11 22:28:50,055 [main:117] - GENERATED CALL = ((-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus()).toChar().isTitleCase()
2021-03-11 22:28:50,055 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6335c0ff]]
2021-03-11 22:28:50,055 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:28:50,055 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6335c0ff]
2021-03-11 22:28:50,055 [main:117] - GENERATED CALL = ((-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus()).toChar().isHighSurrogate()
2021-03-11 22:28:50,055 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4961b6f0]]
2021-03-11 22:28:50,055 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4961b6f0]
2021-03-11 22:28:50,194 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:28:50,195 [main:117] - GENERATED CALL = ((-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus()).equals("ucdwc")
2021-03-11 22:28:50,195 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@f7f3777], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6014ff2]]
2021-03-11 22:28:50,195 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@f7f3777]
2021-03-11 22:28:50,195 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6014ff2]
2021-03-11 22:28:50,359 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:28:50,359 [main:117] - GENERATED CALL = ((-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus()).toDouble().equals("fxgts")
2021-03-11 22:28:50,359 [main:114] - replacement of c !is CoroutineStackFrame of type Boolean is ((-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus()).toChar().isTitleCase()
2021-03-11 22:28:50,497 [main:33] - Trying to replace Element(IS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:28:50,497 [main:66] - Compilation checking started
2021-03-11 22:28:50,911 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = (-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $((test({ -1627866910})).toByte().countLeadingZeroBits() + 4).unaryMinus()"

    return ((test({ 1627866910}))).compareTo(499457543).toString(test {
        try {
            val p = test({ -1627866910})
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}

suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu8(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu9(c: suspend () -> String): String {
    var prope3: String? = null

    c.startCoroutine(object: Kla5<String>() {
        override val context: CoroutineContext
            get() =  EmptyCoroutineContext

        override fun resumeWithException(exception: Throwable) {
            prope3 = "Exception: " + exception.message!!
        }

        override fun resume(value: String) {
            var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
prope3 = value
        }
    })

    return prope3 as String
}

fun box838(): String {
    if (fu9 { "OK" } != "OK") return "fail 4"
    if (fu9 { fu7() } != "OK") return "fail 5"

    if (fu9 { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu9 { fu8() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty2> fu10(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla5<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            resumeWithException(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla6 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu14() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu14(it)
    }

    fun fu14(c: Continuation<*>) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (((-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus()).toChar().isTitleCase()) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu15(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu16(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu17() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        (fu3<UShort>(Kla2(Kla2(Kla1("wtqfp"))))).toShort().countTrailingZeroBits()
        prope8 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:28:50,914 [main:107] - replacing ("OK", String)
2021-03-11 22:28:50,914 [main:50] - replacing "OK" String
2021-03-11 22:28:50,914 [main:54] - Getting value of type String
2021-03-11 22:28:51,062 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:28:51,066 [main:58] - GENERATED VALUE OF TYPE String = "dyiuv"
2021-03-11 22:28:51,066 [main:61] - GENERATED IS CALL =false
2021-03-11 22:28:51,247 [main:67] - randomType = LinkedHashSet<Kla2>
2021-03-11 22:28:51,384 [main:302] - generating value of type = LinkedHashSet<Kla2> false depth = 0
2021-03-11 22:28:51,532 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Kla2): LkedHashSet<Kla2> = TODO()
2021-03-11 22:28:51,537 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Kla2): LkedHashSet<Kla2> = TODO()
2021-03-11 22:28:51,682 [main:302] - generating value of type = Kla2 false depth = 3
2021-03-11 22:28:51,686 [main:112] - generating klass Kla2 text = inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}
2021-03-11 22:28:51,822 [main:194] - Type params = []
2021-03-11 22:28:51,957 [main:302] - generating value of type = Kla0 false depth = 5
2021-03-11 22:28:51,961 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:28:52,299 [main:302] - generating value of type = Kla2 false depth = 7
2021-03-11 22:28:52,303 [main:112] - generating klass Kla2 text = inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}
2021-03-11 22:28:52,444 [main:194] - Type params = []
2021-03-11 22:28:52,585 [main:302] - generating value of type = Kla0 false depth = 9
2021-03-11 22:28:52,589 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:28:52,883 [main:302] - generating value of type = Kla2 false depth = 11
2021-03-11 22:28:52,887 [main:112] - generating klass Kla2 text = inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}
2021-03-11 22:28:53,030 [main:194] - Type params = []
2021-03-11 22:28:53,174 [main:302] - generating value of type = Kla0 false depth = 13
2021-03-11 22:28:53,178 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:28:53,489 [main:302] - generating value of type = Kla1 false depth = 15
2021-03-11 22:28:53,495 [main:112] - generating klass Kla1 text = class Kla1(val value: Any): Kla0
2021-03-11 22:28:53,641 [main:194] - Type params = []
2021-03-11 22:28:53,776 [main:302] - generating value of type = Any false depth = 17
2021-03-11 22:28:53,777 [main:95] - GENERATED = linkedSetOf<Kla2>(Kla2(Kla2(Kla2(Kla1()))))
2021-03-11 22:28:53,896 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@8418dfa]
2021-03-11 22:28:53,896 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3dfbd145]
2021-03-11 22:28:53,897 [main:78] - Generated call from random type = (linkedSetOf<Kla2>(Kla2(Kla2(Kla2(Kla1()))))).toArray().contentToString()
2021-03-11 22:28:53,898 [main:106] - GETTING String from Int
2021-03-11 22:28:53,927 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ef7baad]]
2021-03-11 22:28:53,927 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:28:53,927 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ef7baad]
2021-03-11 22:28:54,096 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:28:54,100 [main:117] - GENERATED CALL = (((test({ -1627866910})).toByte().countLeadingZeroBits() + 4)).toChar().plus("ydjou")
2021-03-11 22:28:54,100 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63cdd551], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]]
2021-03-11 22:28:54,100 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63cdd551]
2021-03-11 22:28:54,100 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]
2021-03-11 22:28:54,236 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:28:54,240 [main:117] - GENERATED CALL = (((test({ -1627866910})).toByte().countLeadingZeroBits() + 4)).div(((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong()).toString(1064708363)
2021-03-11 22:28:54,240 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6694d9]]
2021-03-11 22:28:54,240 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a]
2021-03-11 22:28:54,240 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6694d9]
2021-03-11 22:28:54,240 [main:117] - GENERATED CALL = (((test({ -1627866910})).toByte().countLeadingZeroBits() + 4)).toByte().toString(val p =
2021-03-11 22:28:54,240 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]]
2021-03-11 22:28:54,240 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:28:54,240 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]
2021-03-11 22:28:54,241 [main:117] - GENERATED CALL = (((test({ -1627866910})).toByte().countLeadingZeroBits() + 4)).toInt().toString(val p =
2021-03-11 22:28:54,241 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@630a089]]
2021-03-11 22:28:54,241 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd]
2021-03-11 22:28:54,241 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@630a089]
2021-03-11 22:28:54,241 [main:117] - GENERATED CALL = (((test({ -1627866910})).toByte().countLeadingZeroBits() + 4)).toShort().toString(test({ -1627866910}))
2021-03-11 22:28:54,241 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15e7f7d8]]
2021-03-11 22:28:54,241 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:28:54,241 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15e7f7d8]
2021-03-11 22:28:54,241 [main:117] - GENERATED CALL = (((test({ -1627866910})).toByte().countLeadingZeroBits() + 4)).toChar().uppercase()
2021-03-11 22:28:54,241 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58808d82]]
2021-03-11 22:28:54,242 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:28:54,242 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58808d82]
2021-03-11 22:28:54,242 [main:117] - GENERATED CALL = (((test({ -1627866910})).toByte().countLeadingZeroBits() + 4)).toChar().titlecase()
2021-03-11 22:28:54,242 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6fc8fc8f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]]
2021-03-11 22:28:54,242 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6fc8fc8f]
2021-03-11 22:28:54,242 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]
2021-03-11 22:28:54,242 [main:117] - GENERATED CALL = (((test({ -1627866910})).toByte().countLeadingZeroBits() + 4)).toLong().toString(val p =
2021-03-11 22:28:54,242 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]]
2021-03-11 22:28:54,242 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]
2021-03-11 22:28:54,243 [main:117] - GENERATED CALL = (((test({ -1627866910})).toByte().countLeadingZeroBits() + 4)).toString(test({ 1627866910}))
2021-03-11 22:28:54,243 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@416d03a5]]
2021-03-11 22:28:54,243 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:28:54,243 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@416d03a5]
2021-03-11 22:28:54,243 [main:117] - GENERATED CALL = (((test({ -1627866910})).toByte().countLeadingZeroBits() + 4)).toChar().lowercase()
2021-03-11 22:28:54,243 [main:114] - replacement of "OK" of type String is (((test({ -1627866910})).toByte().countLeadingZeroBits() + 4)).toChar().uppercase()
2021-03-11 22:28:54,385 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:28:54,386 [main:66] - Compilation checking started
2021-03-11 22:28:54,827 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = (-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $((test({ -1627866910})).toByte().countLeadingZeroBits() + 4).unaryMinus()"

    return ((test({ 1627866910}))).compareTo(499457543).toString(test {
        try {
            val p = test({ -1627866910})
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}

suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu8(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException((((test({ -1627866910})).toByte().countLeadingZeroBits() + 4)).toChar().uppercase()))
    COROUTINE_SUSPENDED
}

fun fu9(c: suspend () -> String): String {
    var prope3: String? = null

    c.startCoroutine(object: Kla5<String>() {
        override val context: CoroutineContext
            get() =  EmptyCoroutineContext

        override fun resumeWithException(exception: Throwable) {
            prope3 = "Exception: " + exception.message!!
        }

        override fun resume(value: String) {
            var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
prope3 = value
        }
    })

    return prope3 as String
}

fun box838(): String {
    if (fu9 { "OK" } != "OK") return "fail 4"
    if (fu9 { fu7() } != "OK") return "fail 5"

    if (fu9 { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu9 { fu8() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty2> fu10(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla5<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            resumeWithException(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla6 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu14() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu14(it)
    }

    fun fu14(c: Continuation<*>) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu15(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu16(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu17() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        (fu3<UShort>(Kla2(Kla2(Kla1("wtqfp"))))).toShort().countTrailingZeroBits()
        prope8 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:28:54,829 [main:107] - replacing ("fail 5", String)
2021-03-11 22:28:54,831 [main:50] - replacing "fail 5" String
2021-03-11 22:28:54,831 [main:54] - Getting value of type String
2021-03-11 22:28:54,972 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:28:54,975 [main:58] - GENERATED VALUE OF TYPE String = "seuxp"
2021-03-11 22:28:54,976 [main:61] - GENERATED IS CALL =false
2021-03-11 22:28:55,143 [main:67] - randomType = Kla8
2021-03-11 22:28:55,280 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-11 22:28:55,284 [main:112] - generating klass Kla8 text = object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}
2021-03-11 22:28:55,305 [main:106] - GETTING String from Int
2021-03-11 22:28:55,334 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]]
2021-03-11 22:28:55,334 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]
2021-03-11 22:28:55,473 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:28:55,477 [main:117] - GENERATED CALL = (((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }))).toString(1104252133)
2021-03-11 22:28:55,477 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15e7f7d8]]
2021-03-11 22:28:55,477 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:28:55,477 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15e7f7d8]
2021-03-11 22:28:55,478 [main:117] - GENERATED CALL = (((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }))).toChar().uppercase()
2021-03-11 22:28:55,478 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6694d9]]
2021-03-11 22:28:55,478 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a]
2021-03-11 22:28:55,478 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6694d9]
2021-03-11 22:28:55,478 [main:117] - GENERATED CALL = (((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }))).toByte().toString((test({ 1627866910})))
2021-03-11 22:28:55,478 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]]
2021-03-11 22:28:55,478 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:28:55,478 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]
2021-03-11 22:28:55,615 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:28:55,619 [main:117] - GENERATED CALL = (((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }))).toInt().toString(-1771078057)
2021-03-11 22:28:55,619 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@630a089]]
2021-03-11 22:28:55,619 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd]
2021-03-11 22:28:55,620 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@630a089]
2021-03-11 22:28:55,620 [main:117] - GENERATED CALL = (((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }))).toShort().toString(test({ 2114828160}))
2021-03-11 22:28:55,620 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63cdd551], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]]
2021-03-11 22:28:55,620 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63cdd551]
2021-03-11 22:28:55,620 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]
2021-03-11 22:28:55,759 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:28:55,763 [main:117] - GENERATED CALL = (((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }))).div(((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong()).toString(953675163)
2021-03-11 22:28:55,763 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@416d03a5]]
2021-03-11 22:28:55,763 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:28:55,763 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@416d03a5]
2021-03-11 22:28:55,763 [main:117] - GENERATED CALL = (((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }))).toChar().lowercase()
2021-03-11 22:28:55,763 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58808d82]]
2021-03-11 22:28:55,763 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:28:55,763 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58808d82]
2021-03-11 22:28:55,764 [main:117] - GENERATED CALL = (((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }))).toChar().titlecase()
2021-03-11 22:28:55,764 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6fc8fc8f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]]
2021-03-11 22:28:55,764 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6fc8fc8f]
2021-03-11 22:28:55,764 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]
2021-03-11 22:28:55,764 [main:117] - GENERATED CALL = (((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }))).toLong().toString(prope0)
2021-03-11 22:28:55,764 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]]
2021-03-11 22:28:55,764 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:28:55,764 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]
2021-03-11 22:28:55,904 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:28:55,908 [main:117] - GENERATED CALL = (((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }))).compareTo(test({ -2})).toString(1411500243)
2021-03-11 22:28:55,909 [main:114] - replacement of "fail 5" of type String is (((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }))).toByte().toString((test({ 1627866910})))
2021-03-11 22:28:56,065 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:28:56,065 [main:66] - Compilation checking started
2021-03-11 22:28:56,506 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = (-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $((test({ -1627866910})).toByte().countLeadingZeroBits() + 4).unaryMinus()"

    return ((test({ 1627866910}))).compareTo(499457543).toString(test {
        try {
            val p = test({ -1627866910})
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}

suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu8(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu9(c: suspend () -> String): String {
    var prope3: String? = null

    c.startCoroutine(object: Kla5<String>() {
        override val context: CoroutineContext
            get() =  EmptyCoroutineContext

        override fun resumeWithException(exception: Throwable) {
            prope3 = "Exception: " + exception.message!!
        }

        override fun resume(value: String) {
            var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
prope3 = value
        }
    })

    return prope3 as String
}

fun box838(): String {
    var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (fu9 { "OK" } != "OK") return "fail 4"
    if (fu9 { fu7() } != "OK") return (((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }))).toByte().toString((test({ 1627866910})))

    if (fu9 { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu9 { fu8() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty2> fu10(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla5<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            resumeWithException(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla6 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu14() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu14(it)
    }

    fun fu14(c: Continuation<*>) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu15(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu16(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu17() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        (fu3<UShort>(Kla2(Kla2(Kla1("wtqfp"))))).toShort().countTrailingZeroBits()
        prope8 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:28:56,508 [main:107] - replacing (i, Int)
2021-03-11 22:28:56,508 [main:50] - replacing i Int
2021-03-11 22:28:56,508 [main:54] - Getting value of type Int
2021-03-11 22:28:56,647 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:28:56,650 [main:58] - GENERATED VALUE OF TYPE Int = 1900026934
2021-03-11 22:28:56,650 [main:61] - GENERATED IS CALL =false
2021-03-11 22:28:56,980 [main:67] - randomType = Sequence<Double>
2021-03-11 22:28:56,980 [main:106] - GETTING Int from Int
2021-03-11 22:28:57,012 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@48649202], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@54362452]]
2021-03-11 22:28:57,012 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@48649202]
2021-03-11 22:28:57,151 [main:302] - generating value of type = Double true depth = 0
2021-03-11 22:28:57,155 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@54362452]
2021-03-11 22:28:57,293 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:28:57,297 [main:117] - GENERATED CALL = ((test({ -1627866910}))).div(0.2657037531703297).compareTo(-111)
2021-03-11 22:28:57,297 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4b935a8b]]
2021-03-11 22:28:57,297 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a]
2021-03-11 22:28:57,297 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4b935a8b]
2021-03-11 22:28:57,297 [main:117] - GENERATED CALL = ((test({ -1627866910}))).toByte().countOneBits()
2021-03-11 22:28:57,297 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3bae5f78]]
2021-03-11 22:28:57,297 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:28:57,297 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3bae5f78]
2021-03-11 22:28:57,297 [main:117] - GENERATED CALL = ((test({ -1627866910}))).toInt().unaryPlus()
2021-03-11 22:28:57,297 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@60f9d3e1]]
2021-03-11 22:28:57,297 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:28:57,439 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:28:57,443 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@60f9d3e1]
2021-03-11 22:28:57,443 [main:117] - GENERATED CALL = ((test({ -1627866910}))).compareTo(-1536855267).coerceAtLeast(((test({ 1627866910}))))
2021-03-11 22:28:57,443 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@11648fd6]]
2021-03-11 22:28:57,443 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:28:57,443 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@11648fd6]
2021-03-11 22:28:57,443 [main:117] - GENERATED CALL = ((test({ -1627866910}))).toInt().compareTo((test({ -1627866910})).toByte())
2021-03-11 22:28:57,443 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@304035e4], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@1585bd5]]
2021-03-11 22:28:57,443 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@304035e4]
2021-03-11 22:28:57,443 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@1585bd5]
2021-03-11 22:28:57,580 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:28:57,584 [main:117] - GENERATED CALL = ((test({ -1627866910}))).toFloat().compareTo(80)
2021-03-11 22:28:57,585 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@44dce520]]
2021-03-11 22:28:57,585 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:28:57,585 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@44dce520]
2021-03-11 22:28:57,585 [main:117] - GENERATED CALL = ((test({ -1627866910}))).toInt().shl(val p =
2021-03-11 22:28:57,585 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6e484af9]]
2021-03-11 22:28:57,585 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a]
2021-03-11 22:28:57,585 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6e484af9]
2021-03-11 22:28:57,585 [main:117] - GENERATED CALL = ((test({ -1627866910}))).toByte().plus((test({ -2})).toByte())
2021-03-11 22:28:57,585 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3463d5f7]]
2021-03-11 22:28:57,585 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:28:57,722 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:28:57,726 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3463d5f7]
2021-03-11 22:28:57,726 [main:117] - GENERATED CALL = ((test({ -1627866910}))).compareTo(-1333490077).toInt()
2021-03-11 22:28:57,726 [main:113] - Case = [public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12446614]]
2021-03-11 22:28:57,726 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@12446614]
2021-03-11 22:28:57,726 [main:117] - GENERATED CALL = ((test({ -1627866910}))).and(val p =
2021-03-11 22:28:57,726 [main:114] - replacement of i of type Int is ((test({ -1627866910}))).toInt().shl(val p =
2021-03-11 22:28:57,862 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-11 22:28:57,863 [main:66] - Compilation checking started
2021-03-11 22:28:57,870 [main:71] - Wrong syntax or breaks conditions
2021-03-11 22:28:57,870 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = (-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $((test({ -1627866910})).toByte().countLeadingZeroBits() + 4).unaryMinus()"

    return ((test({ 1627866910}))).compareTo(499457543).toString(test {
        try {
            val p = test({ -1627866910})
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}

suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu8(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu9(c: suspend () -> String): String {
    var prope3: String? = null

    c.startCoroutine(object: Kla5<String>() {
        override val context: CoroutineContext
            get() =  EmptyCoroutineContext

        override fun resumeWithException(exception: Throwable) {
            prope3 = "Exception: " + exception.message!!
        }

        override fun resume(value: String) {
            var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
prope3 = value
        }
    })

    return prope3 as String
}

fun box838(): String {
    var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (fu9 { "OK" } != "OK") return "fail 4"
    if (fu9 { fu7() } != "OK") return "fail 5"

    if (fu9 { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu9 { fu8() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty2> fu10(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla5<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            resumeWithException(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla6 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu14() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu14(it)
    }

    fun fu14(c: Continuation<*>) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu15(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu16(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu17() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        (fu3<UShort>(Kla2(Kla2(Kla1("wtqfp"))))).toShort().countTrailingZeroBits()
        prope8 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
for (i in 1..numberOfSuspensions) {
            if (prope6 != ((test({ -1627866910}))).toInt().shl(val p =) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:28:57,872 [main:107] - replacing (x, Continuation<String>)
2021-03-11 22:28:57,872 [main:50] - replacing x Continuation<String>
2021-03-11 22:28:57,872 [main:54] - Getting value of type Continuation<String>
2021-03-11 22:28:58,011 [main:302] - generating value of type = Continuation<String> false depth = 0
2021-03-11 22:28:58,182 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-11 22:28:58,187 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-11 22:28:58,691 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 22:28:58,840 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:28:58,845 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:28:59,173 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 22:28:59,324 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:28:59,329 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:28:59,825 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-11 22:28:59,976 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:28:59,981 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:29:00,532 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:29:00,532 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:29:00,532 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:29:00,532 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-11 22:29:00,532 [main:58] - GENERATED VALUE OF TYPE Continuation<String> = 
2021-03-11 22:29:00,715 [main:67] - randomType = UShort?
2021-03-11 22:29:00,857 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 22:29:00,899 [main:106] - GETTING Continuation<String> from Int
2021-03-11 22:29:00,938 [main:106] - GETTING Continuation<String> from UByte
2021-03-11 22:29:00,960 [main:106] - GETTING Continuation<String> from Int
2021-03-11 22:29:00,961 [main:106] - GETTING Continuation<String> from Byte
2021-03-11 22:29:00,991 [main:106] - GETTING Continuation<String> from Int
2021-03-11 22:29:00,992 [main:106] - GETTING Continuation<String> from Int
2021-03-11 22:29:00,993 [main:106] - GETTING Continuation<String> from Int
2021-03-11 22:29:00,994 [main:106] - GETTING Continuation<String> from Any
2021-03-11 22:29:00,998 [main:106] - GETTING Continuation<String> from Int
2021-03-11 22:29:00,999 [main:106] - GETTING Continuation<String> from Boolean
2021-03-11 22:29:01,008 [main:106] - GETTING Continuation<String> from Int
2021-03-11 22:29:01,009 [main:106] - GETTING Continuation<String> from Int
2021-03-11 22:29:01,010 [main:106] - GETTING Continuation<String> from Kla0
2021-03-11 22:29:01,016 [main:106] - GETTING Continuation<String> from Int
2021-03-11 22:29:01,017 [main:106] - GETTING Continuation<String> from Int
2021-03-11 22:29:01,017 [main:106] - GETTING Continuation<String> from Int
2021-03-11 22:29:01,018 [main:106] - GETTING Continuation<String> from Int
2021-03-11 22:29:01,019 [main:106] - GETTING Continuation<String> from MutableMap<Kla1?, Kla2>
2021-03-11 22:29:01,058 [main:106] - GETTING Continuation<String> from Int
2021-03-11 22:29:01,059 [main:106] - GETTING Continuation<String> from Int
2021-03-11 22:29:01,060 [main:106] - GETTING Continuation<String> from Function2<UInt?, Int?, Kla2?>
2021-03-11 22:29:01,072 [main:106] - GETTING Continuation<String> from Long
2021-03-11 22:29:01,111 [main:106] - GETTING Continuation<String> from Byte
2021-03-11 22:29:01,112 [main:106] - GETTING Continuation<String> from Int
2021-03-11 22:29:01,113 [main:106] - GETTING Continuation<String> from Int
2021-03-11 22:29:01,114 [main:106] - GETTING Continuation<String> from Int
2021-03-11 22:29:01,115 [main:106] - GETTING Continuation<String> from Int
2021-03-11 22:29:01,116 [main:106] - GETTING Continuation<String> from Int
2021-03-11 22:29:01,117 [main:106] - GETTING Continuation<String> from Int
2021-03-11 22:29:01,118 [main:106] - GETTING Continuation<String> from Short
2021-03-11 22:29:01,172 [main:106] - GETTING Continuation<String> from Int
2021-03-11 22:29:01,173 [main:106] - GETTING Continuation<String> from Int
2021-03-11 22:29:01,174 [main:106] - GETTING Continuation<String> from Int
2021-03-11 22:29:01,175 [main:106] - GETTING Continuation<String> from Int
2021-03-11 22:29:01,176 [main:106] - GETTING Continuation<String> from Int
2021-03-11 22:29:01,177 [main:106] - GETTING Continuation<String> from UShort
2021-03-11 22:29:01,214 [main:111] - Cant find and generate replacement for x type Continuation<String>
2021-03-11 22:29:01,214 [main:107] - replacing ("OK", String)
2021-03-11 22:29:01,214 [main:50] - replacing "OK" String
2021-03-11 22:29:01,214 [main:54] - Getting value of type String
2021-03-11 22:29:01,362 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:29:01,366 [main:58] - GENERATED VALUE OF TYPE String = "dfalm"
2021-03-11 22:29:01,367 [main:61] - GENERATED IS CALL =false
2021-03-11 22:29:01,375 [main:67] - randomType = Int
2021-03-11 22:29:01,512 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:29:01,546 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6fc8fc8f]
2021-03-11 22:29:01,546 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]
2021-03-11 22:29:01,546 [main:78] - Generated call from random type = (-61146114).toLong().toString(test({ 2114828160}))
2021-03-11 22:29:01,547 [main:106] - GETTING String from Int
2021-03-11 22:29:01,576 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6694d9]]
2021-03-11 22:29:01,576 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a]
2021-03-11 22:29:01,576 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6694d9]
2021-03-11 22:29:01,576 [main:117] - GENERATED CALL = (test({ -1627866910})).toByte().toString(-3)
2021-03-11 22:29:01,577 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ef7baad]]
2021-03-11 22:29:01,577 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:29:01,577 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ef7baad]
2021-03-11 22:29:01,712 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:29:01,716 [main:117] - GENERATED CALL = (test({ -1627866910})).toChar().plus("klipe")
2021-03-11 22:29:01,716 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63cdd551], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]]
2021-03-11 22:29:01,716 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63cdd551]
2021-03-11 22:29:01,716 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]
2021-03-11 22:29:01,854 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:29:01,858 [main:117] - GENERATED CALL = (test({ -1627866910})).div(((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong()).toString(1539038388)
2021-03-11 22:29:01,858 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@416d03a5]]
2021-03-11 22:29:01,858 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:29:01,858 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@416d03a5]
2021-03-11 22:29:01,859 [main:117] - GENERATED CALL = (test({ -1627866910})).toChar().lowercase()
2021-03-11 22:29:01,859 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@630a089]]
2021-03-11 22:29:01,859 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67b2bcbd]
2021-03-11 22:29:01,859 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@630a089]
2021-03-11 22:29:01,859 [main:117] - GENERATED CALL = (test({ -1627866910})).toShort().toString((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }))
2021-03-11 22:29:01,859 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15e7f7d8]]
2021-03-11 22:29:01,859 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:29:01,859 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15e7f7d8]
2021-03-11 22:29:01,860 [main:117] - GENERATED CALL = (test({ -1627866910})).toChar().uppercase()
2021-03-11 22:29:01,860 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]]
2021-03-11 22:29:01,860 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:29:01,860 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]
2021-03-11 22:29:01,860 [main:117] - GENERATED CALL = (test({ -1627866910})).toInt().toString(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
2021-03-11 22:29:01,860 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6fc8fc8f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]]
2021-03-11 22:29:01,860 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6fc8fc8f]
2021-03-11 22:29:01,860 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]
2021-03-11 22:29:01,861 [main:117] - GENERATED CALL = (test({ -1627866910})).toLong().toString((-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus())
2021-03-11 22:29:01,861 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]]
2021-03-11 22:29:01,861 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:29:01,861 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]
2021-03-11 22:29:01,861 [main:117] - GENERATED CALL = (test({ -1627866910})).compareTo((test({ -1627866910}))).toString((-3))
2021-03-11 22:29:01,861 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58808d82]]
2021-03-11 22:29:01,861 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:29:01,862 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58808d82]
2021-03-11 22:29:01,862 [main:117] - GENERATED CALL = (test({ -1627866910})).toChar().titlecase()
2021-03-11 22:29:01,862 [main:114] - replacement of "OK" of type String is (test({ -1627866910})).div(((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong()).toString(1539038388)
2021-03-11 22:29:01,999 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:29:02,000 [main:66] - Compilation checking started
2021-03-11 22:29:02,451 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = (-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $((test({ -1627866910})).toByte().countLeadingZeroBits() + 4).unaryMinus()"

    return ((test({ 1627866910}))).compareTo(499457543).toString(test {
        try {
            val p = test({ -1627866910})
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}

suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu8(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu9(c: suspend () -> String): String {
    var prope3: String? = null

    c.startCoroutine(object: Kla5<String>() {
        override val context: CoroutineContext
            get() =  EmptyCoroutineContext

        override fun resumeWithException(exception: Throwable) {
            prope3 = "Exception: " + exception.message!!
        }

        override fun resume(value: String) {
            var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
prope3 = value
        }
    })

    return prope3 as String
}

fun box838(): String {
    var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (fu9 { "OK" } != (test({ -1627866910})).div(((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong()).toString(1539038388)) return "fail 4"
    if (fu9 { fu7() } != "OK") return "fail 5"

    if (fu9 { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu9 { fu8() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty2> fu10(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla5<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            resumeWithException(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla6 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu14() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu14(it)
    }

    fun fu14(c: Continuation<*>) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu15(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu16(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu17() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        (fu3<UShort>(Kla2(Kla2(Kla1("wtqfp"))))).toShort().countTrailingZeroBits()
        prope8 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:29:02,454 [main:107] - replacing (prope6, Int)
2021-03-11 22:29:02,454 [main:50] - replacing prope6 Int
2021-03-11 22:29:02,454 [main:54] - Getting value of type Int
2021-03-11 22:29:02,594 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:29:02,598 [main:58] - GENERATED VALUE OF TYPE Int = -1415423329
2021-03-11 22:29:02,598 [main:61] - GENERATED IS CALL =false
2021-03-11 22:29:02,927 [main:67] - randomType = ArrayList<Int?>
2021-03-11 22:29:03,062 [main:302] - generating value of type = ArrayList<Int?> false depth = 0
2021-03-11 22:29:03,204 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Int?> = TODO()
2021-03-11 22:29:03,209 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Int?> = TODO()
2021-03-11 22:29:03,362 [main:95] - GENERATED = arrayListOf<Int?>()
2021-03-11 22:29:03,489 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2e9d1b66]
2021-03-11 22:29:03,489 [main:78] - Generated call from random type = (arrayListOf<Int?>()).size.rotateRight(test({ 1627866910}))
2021-03-11 22:29:03,489 [main:114] - replacement of prope6 of type Int is (arrayListOf<Int?>()).size.rotateRight(test({ 1627866910}))
2021-03-11 22:29:03,628 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:29:03,628 [main:66] - Compilation checking started
2021-03-11 22:29:04,077 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = (-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $((test({ -1627866910})).toByte().countLeadingZeroBits() + 4).unaryMinus()"

    return ((test({ 1627866910}))).compareTo(499457543).toString(test {
        try {
            val p = test({ -1627866910})
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}

suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu8(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu9(c: suspend () -> String): String {
    var prope3: String? = null

    c.startCoroutine(object: Kla5<String>() {
        override val context: CoroutineContext
            get() =  EmptyCoroutineContext

        override fun resumeWithException(exception: Throwable) {
            prope3 = "Exception: " + exception.message!!
        }

        override fun resume(value: String) {
            var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
prope3 = value
        }
    })

    return prope3 as String
}

fun box838(): String {
    var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (fu9 { "OK" } != "OK") return "fail 4"
    if (fu9 { fu7() } != "OK") return "fail 5"

    if (fu9 { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu9 { fu8() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty2> fu10(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla5<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            resumeWithException(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla6 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu14() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu14(it)
    }

    fun fu14(c: Continuation<*>) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu15(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu16(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu17() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        (fu3<UShort>(Kla2(Kla2(Kla1("wtqfp"))))).toShort().countTrailingZeroBits()
        prope8 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if ((arrayListOf<Int?>()).size.rotateRight(test({ 1627866910})) != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:29:04,079 [main:107] - replacing ({ x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}, Function1<Continuation<String>, Any?>)
2021-03-11 22:29:04,079 [main:50] - replacing { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
} Function1<Continuation<String>, Any?>
2021-03-11 22:29:04,079 [main:54] - Getting value of type Function1<Continuation<String>, Any?>
2021-03-11 22:29:04,233 [main:302] - generating value of type = Function1<Continuation<String>, Any?> false depth = 0
2021-03-11 22:29:04,237 [main:302] - generating value of type = Any false depth = 1
2021-03-11 22:29:04,237 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<String>, Any?> = {a: Continuation<String> -> "tzatz"}
2021-03-11 22:29:04,238 [main:61] - GENERATED IS CALL =false
2021-03-11 22:29:04,775 [main:67] - randomType = HashMap<Kla6, Collection<Float>>
2021-03-11 22:29:04,914 [main:302] - generating value of type = HashMap<Kla6, Collection<Float>> false depth = 0
2021-03-11 22:29:05,057 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(): HashMap<Kla6, Collection<Float>> = TODO()
2021-03-11 22:29:05,062 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(): HashMap<Kla6, Collection<Float>> = TODO()
2021-03-11 22:29:05,219 [main:95] - GENERATED = hashMapOf<Kla6, Collection<Float>>()
2021-03-11 22:29:05,355 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:05,388 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:05,389 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:05,391 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:05,392 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:05,394 [main:106] - GETTING Function1<Continuation<String>, Any?> from Long
2021-03-11 22:29:05,424 [main:106] - GETTING Function1<Continuation<String>, Any?> from Boolean
2021-03-11 22:29:05,434 [main:106] - GETTING Function1<Continuation<String>, Any?> from Kla0
2021-03-11 22:29:05,438 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:05,439 [main:106] - GETTING Function1<Continuation<String>, Any?> from Any
2021-03-11 22:29:05,444 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:05,445 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:05,447 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:05,448 [main:106] - GETTING Function1<Continuation<String>, Any?> from Byte
2021-03-11 22:29:05,482 [main:106] - GETTING Function1<Continuation<String>, Any?> from Byte
2021-03-11 22:29:05,484 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:05,485 [main:106] - GETTING Function1<Continuation<String>, Any?> from Short
2021-03-11 22:29:05,524 [main:106] - GETTING Function1<Continuation<String>, Any?> from UByte
2021-03-11 22:29:05,559 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:05,560 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:05,562 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:05,563 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:05,565 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:05,566 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:05,568 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:05,569 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:05,571 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:05,572 [main:106] - GETTING Function1<Continuation<String>, Any?> from Function2<UInt?, Int?, Kla2?>
2021-03-11 22:29:05,585 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:05,586 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:05,588 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:05,589 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:05,591 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:05,592 [main:106] - GETTING Function1<Continuation<String>, Any?> from UShort
2021-03-11 22:29:05,630 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:05,632 [main:106] - GETTING Function1<Continuation<String>, Any?> from MutableMap<Kla1?, Kla2>
2021-03-11 22:29:05,677 [main:114] - replacement of { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
} of type Function1<Continuation<String>, Any?> is {a: Continuation<String> -> "tzatz"}
2021-03-11 22:29:05,818 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 22:29:05,819 [main:66] - Compilation checking started
2021-03-11 22:29:06,233 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = (-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $((test({ -1627866910})).toByte().countLeadingZeroBits() + 4).unaryMinus()"

    return ((test({ 1627866910}))).compareTo(499457543).toString(test {
        try {
            val p = test({ -1627866910})
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}

suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu8(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "tzatz"}

fun fu9(c: suspend () -> String): String {
    var prope3: String? = null

    c.startCoroutine(object: Kla5<String>() {
        override val context: CoroutineContext
            get() =  EmptyCoroutineContext

        override fun resumeWithException(exception: Throwable) {
            prope3 = "Exception: " + exception.message!!
        }

        override fun resume(value: String) {
            var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
prope3 = value
        }
    })

    return prope3 as String
}

fun box838(): String {
    var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (fu9 { "OK" } != "OK") return "fail 4"
    if (fu9 { fu7() } != "OK") return "fail 5"

    if (fu9 { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu9 { fu8() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty2> fu10(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla5<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            resumeWithException(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla6 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu14() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu14(it)
    }

    fun fu14(c: Continuation<*>) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu15(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu16(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu17() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        (fu3<UShort>(Kla2(Kla2(Kla1("wtqfp"))))).toShort().countTrailingZeroBits()
        prope8 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:29:06,235 [main:107] - replacing ("fail 6", String)
2021-03-11 22:29:06,235 [main:50] - replacing "fail 6" String
2021-03-11 22:29:06,235 [main:54] - Getting value of type String
2021-03-11 22:29:06,374 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:29:06,378 [main:58] - GENERATED VALUE OF TYPE String = "aybcy"
2021-03-11 22:29:06,378 [main:61] - GENERATED IS CALL =false
2021-03-11 22:29:06,393 [main:67] - randomType = Kla4
2021-03-11 22:29:06,531 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 22:29:06,534 [main:112] - generating klass Kla4 text = class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}
2021-03-11 22:29:06,555 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@6c0eeeaf]
2021-03-11 22:29:06,555 [main:78] - Generated call from random type = (Kla4()).prope4?.toString()!!
2021-03-11 22:29:06,555 [main:114] - replacement of "fail 6" of type String is (Kla4()).prope4?.toString()!!
2021-03-11 22:29:06,691 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(POSTFIX_EXPRESSION)
2021-03-11 22:29:06,691 [main:66] - Compilation checking started
2021-03-11 22:29:07,110 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = (-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $((test({ -1627866910})).toByte().countLeadingZeroBits() + 4).unaryMinus()"

    return ((test({ 1627866910}))).compareTo(499457543).toString(test {
        try {
            val p = test({ -1627866910})
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}

suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu8(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu9(c: suspend () -> String): String {
    var prope3: String? = null

    c.startCoroutine(object: Kla5<String>() {
        override val context: CoroutineContext
            get() =  EmptyCoroutineContext

        override fun resumeWithException(exception: Throwable) {
            prope3 = "Exception: " + exception.message!!
        }

        override fun resume(value: String) {
            var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
prope3 = value
        }
    })

    return prope3 as String
}

fun box838(): String {
    var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (fu9 { "OK" } != "OK") return "fail 4"
    if (fu9 { fu7() } != "OK") return "fail 5"

    if (fu9 { throw RuntimeException("OK") } != "Exception: OK") return (Kla4()).prope4?.toString()!!
    if (fu9 { fu8() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty2> fu10(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla5<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            resumeWithException(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla6 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu14() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu14(it)
    }

    fun fu14(c: Continuation<*>) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu15(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu16(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu17() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        (fu3<UShort>(Kla2(Kla2(Kla1("wtqfp"))))).toShort().countTrailingZeroBits()
        prope8 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:29:07,112 [main:107] - replacing (prope6 != numberOfSuspensions, Boolean)
2021-03-11 22:29:07,113 [main:50] - replacing prope6 != numberOfSuspensions Boolean
2021-03-11 22:29:07,113 [main:54] - Getting value of type Boolean
2021-03-11 22:29:07,249 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:29:07,252 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 22:29:07,253 [main:61] - GENERATED IS CALL =false
2021-03-11 22:29:07,912 [main:67] - randomType = LinkedHashMap<Int, HashSet<Float>>
2021-03-11 22:29:08,048 [main:302] - generating value of type = LinkedHashMap<Int, HashSet<Float>> false depth = 0
2021-03-11 22:29:08,191 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Int, HashSet<Float>> = TODO()
2021-03-11 22:29:08,196 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Int, HashSet<Float>> = TODO()
2021-03-11 22:29:08,350 [main:95] - GENERATED = linkedMapOf<Int, HashSet<Float>>()
2021-03-11 22:29:08,487 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <K, V> kotlin.collections.Map<out K, V>.isNotEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@760ff1c]
2021-03-11 22:29:08,488 [main:78] - Generated call from random type = (linkedMapOf<Int, HashSet<Float>>()).isNotEmpty()
2021-03-11 22:29:08,488 [main:106] - GETTING Boolean from Int
2021-03-11 22:29:08,517 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@304035e4], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@74f37601]]
2021-03-11 22:29:08,517 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@304035e4]
2021-03-11 22:29:08,517 [main:149] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@74f37601]
2021-03-11 22:29:08,518 [main:117] - GENERATED CALL = (((test({ -1627866910})).toByte().countLeadingZeroBits() + 4)).toFloat().isNaN()
2021-03-11 22:29:08,518 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@634a8ccd]]
2021-03-11 22:29:08,518 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:29:08,518 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@634a8ccd]
2021-03-11 22:29:08,518 [main:117] - GENERATED CALL = (((test({ -1627866910})).toByte().countLeadingZeroBits() + 4)).toChar().isDigit()
2021-03-11 22:29:08,518 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@48649202], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@76cbf191]]
2021-03-11 22:29:08,518 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@48649202]
2021-03-11 22:29:08,652 [main:302] - generating value of type = Double true depth = 0
2021-03-11 22:29:08,656 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@76cbf191]
2021-03-11 22:29:08,656 [main:117] - GENERATED CALL = (((test({ -1627866910})).toByte().countLeadingZeroBits() + 4)).div(0.600235034023309).isNaN()
2021-03-11 22:29:08,656 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6fc8fc8f], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@335cb6cd]]
2021-03-11 22:29:08,656 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6fc8fc8f]
2021-03-11 22:29:08,657 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@335cb6cd]
2021-03-11 22:29:08,790 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:29:08,791 [main:117] - GENERATED CALL = (((test({ -1627866910})).toByte().countLeadingZeroBits() + 4)).toLong().equals("ocreq")
2021-03-11 22:29:08,791 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27a69963]]
2021-03-11 22:29:08,791 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:29:08,791 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27a69963]
2021-03-11 22:29:08,791 [main:117] - GENERATED CALL = (((test({ -1627866910})).toByte().countLeadingZeroBits() + 4)).toChar().isLetterOrDigit()
2021-03-11 22:29:08,791 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4961b6f0], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@24b535c9]]
2021-03-11 22:29:08,791 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4961b6f0]
2021-03-11 22:29:08,929 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:29:08,929 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@24b535c9]
2021-03-11 22:29:08,930 [main:117] - GENERATED CALL = (((test({ -1627866910})).toByte().countLeadingZeroBits() + 4)).equals("agpep").xor(fu2<Boolean>(Kla2(Kla1("hqhpc"))))
2021-03-11 22:29:08,930 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4961b6f0]]
2021-03-11 22:29:08,930 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:29:08,930 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4961b6f0]
2021-03-11 22:29:09,076 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:29:09,077 [main:117] - GENERATED CALL = (((test({ -1627866910})).toByte().countLeadingZeroBits() + 4)).toInt().equals("nhfjl")
2021-03-11 22:29:09,077 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@f7f3777], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4ce6e84f]]
2021-03-11 22:29:09,077 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@f7f3777]
2021-03-11 22:29:09,077 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4ce6e84f]
2021-03-11 22:29:09,077 [main:117] - GENERATED CALL = (((test({ -1627866910})).toByte().countLeadingZeroBits() + 4)).toDouble().isInfinite()
2021-03-11 22:29:09,077 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4109a87b]]
2021-03-11 22:29:09,077 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:29:09,077 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4109a87b]
2021-03-11 22:29:09,077 [main:117] - GENERATED CALL = (((test({ -1627866910})).toByte().countLeadingZeroBits() + 4)).toChar().isISOControl()
2021-03-11 22:29:09,077 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@48649202], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6014ff2]]
2021-03-11 22:29:09,077 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@48649202]
2021-03-11 22:29:09,212 [main:302] - generating value of type = Double true depth = 0
2021-03-11 22:29:09,216 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6014ff2]
2021-03-11 22:29:09,355 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:29:09,356 [main:117] - GENERATED CALL = (((test({ -1627866910})).toByte().countLeadingZeroBits() + 4)).div(0.4177326982873738).equals("oxgnk")
2021-03-11 22:29:09,356 [main:114] - replacement of prope6 != numberOfSuspensions of type Boolean is (((test({ -1627866910})).toByte().countLeadingZeroBits() + 4)).equals("agpep").xor(fu2<Boolean>(Kla2(Kla1("hqhpc"))))
2021-03-11 22:29:09,490 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:29:09,490 [main:66] - Compilation checking started
2021-03-11 22:29:09,906 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = (-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $((test({ -1627866910})).toByte().countLeadingZeroBits() + 4).unaryMinus()"

    return ((test({ 1627866910}))).compareTo(499457543).toString(test {
        try {
            val p = test({ -1627866910})
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}

suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu8(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu9(c: suspend () -> String): String {
    var prope3: String? = null

    c.startCoroutine(object: Kla5<String>() {
        override val context: CoroutineContext
            get() =  EmptyCoroutineContext

        override fun resumeWithException(exception: Throwable) {
            prope3 = "Exception: " + exception.message!!
        }

        override fun resume(value: String) {
            var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
prope3 = value
        }
    })

    return prope3 as String
}

fun box838(): String {
    var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (fu9 { "OK" } != "OK") return "fail 4"
    if (fu9 { fu7() } != "OK") return "fail 5"

    if (fu9 { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu9 { fu8() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty2> fu10(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla5<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            resumeWithException(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla6 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu14() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu14(it)
    }

    fun fu14(c: Continuation<*>) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu15(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu16(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu17() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        (fu3<UShort>(Kla2(Kla2(Kla1("wtqfp"))))).toShort().countTrailingZeroBits()
        prope8 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if ((((test({ -1627866910})).toByte().countLeadingZeroBits() + 4)).equals("agpep").xor(fu2<Boolean>(Kla2(Kla1("hqhpc")))))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:29:09,908 [main:107] - replacing (c, Continuation<*>)
2021-03-11 22:29:09,908 [main:50] - replacing c Continuation<*>
2021-03-11 22:29:09,908 [main:54] - Getting value of type Continuation<*>
2021-03-11 22:29:10,047 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 22:29:10,190 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 22:29:10,194 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 22:29:10,668 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 22:29:10,808 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:29:10,813 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:29:11,128 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 22:29:11,284 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:29:11,289 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:29:11,795 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-11 22:29:11,940 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:29:11,944 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:29:12,422 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 12
2021-03-11 22:29:12,568 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 22:29:12,573 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 22:29:13,049 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 15
2021-03-11 22:29:13,194 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:29:13,199 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:29:13,734 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 18
2021-03-11 22:29:13,735 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:29:13,735 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 22:29:13,735 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:29:13,735 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:29:13,735 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:29:13,735 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 22:29:13,735 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 22:29:13,749 [main:67] - randomType = Kla2
2021-03-11 22:29:13,882 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 22:29:13,885 [main:112] - generating klass Kla2 text = inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}
2021-03-11 22:29:14,017 [main:194] - Type params = []
2021-03-11 22:29:14,151 [main:302] - generating value of type = Kla0 false depth = 2
2021-03-11 22:29:14,154 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:29:14,445 [main:302] - generating value of type = Kla2 false depth = 4
2021-03-11 22:29:14,449 [main:112] - generating klass Kla2 text = inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}
2021-03-11 22:29:14,583 [main:194] - Type params = []
2021-03-11 22:29:14,715 [main:302] - generating value of type = Kla0 false depth = 6
2021-03-11 22:29:14,719 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:29:15,000 [main:302] - generating value of type = Kla2 false depth = 8
2021-03-11 22:29:15,004 [main:112] - generating klass Kla2 text = inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}
2021-03-11 22:29:15,136 [main:194] - Type params = []
2021-03-11 22:29:15,271 [main:302] - generating value of type = Kla0 false depth = 10
2021-03-11 22:29:15,275 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:29:15,560 [main:302] - generating value of type = Kla2 false depth = 12
2021-03-11 22:29:15,564 [main:112] - generating klass Kla2 text = inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}
2021-03-11 22:29:15,697 [main:194] - Type params = []
2021-03-11 22:29:15,875 [main:302] - generating value of type = Kla0 false depth = 14
2021-03-11 22:29:15,878 [main:112] - generating klass Kla0 text = interface Kla0
2021-03-11 22:29:16,172 [main:302] - generating value of type = Kla2 false depth = 16
2021-03-11 22:29:16,185 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:29:16,220 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:29:16,221 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:29:16,222 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:29:16,223 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:29:16,223 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:29:16,224 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:29:16,225 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:29:16,226 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:29:16,227 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:29:16,228 [main:106] - GETTING Continuation<*> from Any
2021-03-11 22:29:16,232 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:29:16,233 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:29:16,233 [main:106] - GETTING Continuation<*> from MutableMap<Kla1?, Kla2>
2021-03-11 22:29:16,268 [main:106] - GETTING Continuation<*> from Byte
2021-03-11 22:29:16,304 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:29:16,305 [main:106] - GETTING Continuation<*> from UByte
2021-03-11 22:29:16,338 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:29:16,339 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:29:16,340 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:29:16,341 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:29:16,342 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:29:16,343 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:29:16,344 [main:106] - GETTING Continuation<*> from Kla0
2021-03-11 22:29:16,348 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:29:16,349 [main:106] - GETTING Continuation<*> from UShort
2021-03-11 22:29:16,375 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:29:16,376 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:29:16,377 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:29:16,378 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:29:16,379 [main:106] - GETTING Continuation<*> from Long
2021-03-11 22:29:16,408 [main:106] - GETTING Continuation<*> from Int
2021-03-11 22:29:16,409 [main:106] - GETTING Continuation<*> from Function2<UInt?, Int?, Kla2?>
2021-03-11 22:29:16,420 [main:106] - GETTING Continuation<*> from Boolean
2021-03-11 22:29:16,428 [main:106] - GETTING Continuation<*> from Short
2021-03-11 22:29:16,458 [main:106] - GETTING Continuation<*> from Byte
2021-03-11 22:29:16,458 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 22:29:16,458 [main:107] - replacing ("fail 4", String)
2021-03-11 22:29:16,458 [main:50] - replacing "fail 4" String
2021-03-11 22:29:16,458 [main:54] - Getting value of type String
2021-03-11 22:29:16,593 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:29:16,596 [main:58] - GENERATED VALUE OF TYPE String = "ipqnh"
2021-03-11 22:29:16,597 [main:61] - GENERATED IS CALL =false
2021-03-11 22:29:16,762 [main:67] - randomType = Short?
2021-03-11 22:29:16,894 [main:302] - generating value of type = Short true depth = 0
2021-03-11 22:29:16,929 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@5eb82ec9]
2021-03-11 22:29:17,053 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]
2021-03-11 22:29:17,188 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:29:17,191 [main:78] - Generated call from random type = (30013)?.compareTo((test({ -1627866910})).toByte()).toString(794714646)
2021-03-11 22:29:17,192 [main:106] - GETTING String from Short
2021-03-11 22:29:17,222 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4f015995], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6694d9]]
2021-03-11 22:29:17,222 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4f015995]
2021-03-11 22:29:17,222 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6694d9]
2021-03-11 22:29:17,223 [main:117] - GENERATED CALL = (fu1<Short>(Kla2(Kla2(Kla1("xzbxq"))))).toByte().toString(((test({ -1627866910})).toByte().countLeadingZeroBits() + 4))
2021-03-11 22:29:17,223 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@5eb82ec9], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]]
2021-03-11 22:29:17,223 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@5eb82ec9]
2021-03-11 22:29:17,223 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]
2021-03-11 22:29:17,223 [main:117] - GENERATED CALL = (fu1<Short>(Kla2(Kla2(Kla1("xzbxq"))))).compareTo((test({ -1627866910})).toByte()).toString(test({ 1627866910}))
2021-03-11 22:29:17,223 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]]
2021-03-11 22:29:17,223 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:29:17,223 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]
2021-03-11 22:29:17,358 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:29:17,362 [main:117] - GENERATED CALL = (fu1<Short>(Kla2(Kla2(Kla1("xzbxq"))))).toInt().toString(-1076534791)
2021-03-11 22:29:17,362 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@630a089]]
2021-03-11 22:29:17,362 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@630a089]
2021-03-11 22:29:17,362 [main:117] - GENERATED CALL = (fu1<Short>(Kla2(Kla2(Kla1("xzbxq"))))).toString(test({ -2}))
2021-03-11 22:29:17,362 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4cd775f3], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@416d03a5]]
2021-03-11 22:29:17,362 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4cd775f3]
2021-03-11 22:29:17,363 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@416d03a5]
2021-03-11 22:29:17,363 [main:117] - GENERATED CALL = (fu1<Short>(Kla2(Kla2(Kla1("xzbxq"))))).toChar().lowercase()
2021-03-11 22:29:17,363 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4cd775f3], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58808d82]]
2021-03-11 22:29:17,363 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4cd775f3]
2021-03-11 22:29:17,363 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58808d82]
2021-03-11 22:29:17,363 [main:117] - GENERATED CALL = (fu1<Short>(Kla2(Kla2(Kla1("xzbxq"))))).toChar().titlecase()
2021-03-11 22:29:17,363 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4cd775f3], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15e7f7d8]]
2021-03-11 22:29:17,363 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4cd775f3]
2021-03-11 22:29:17,363 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15e7f7d8]
2021-03-11 22:29:17,363 [main:117] - GENERATED CALL = (fu1<Short>(Kla2(Kla2(Kla1("xzbxq"))))).toChar().uppercase()
2021-03-11 22:29:17,363 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@18a564a7], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]]
2021-03-11 22:29:17,363 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@18a564a7]
2021-03-11 22:29:17,364 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]
2021-03-11 22:29:17,364 [main:117] - GENERATED CALL = (fu1<Short>(Kla2(Kla2(Kla1("xzbxq"))))).div(((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong()).toString((test({ 1627866910})).toInt().times(36))
2021-03-11 22:29:17,364 [main:113] - Case = [public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@19faba8e], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@630a089]]
2021-03-11 22:29:17,364 [main:149] - GENERATING call of type public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@19faba8e]
2021-03-11 22:29:17,364 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@630a089]
2021-03-11 22:29:17,365 [main:117] - GENERATED CALL = (fu1<Short>(Kla2(Kla2(Kla1("xzbxq"))))).toShort().toString((test({ -2})).toByte().countLeadingZeroBits())
2021-03-11 22:29:17,365 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4cd775f3], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ef7baad]]
2021-03-11 22:29:17,365 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4cd775f3]
2021-03-11 22:29:17,365 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ef7baad]
2021-03-11 22:29:17,500 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:29:17,503 [main:117] - GENERATED CALL = (fu1<Short>(Kla2(Kla2(Kla1("xzbxq"))))).toChar().plus("bplun")
2021-03-11 22:29:17,503 [main:114] - replacement of "fail 4" of type String is (fu1<Short>(Kla2(Kla2(Kla1("xzbxq"))))).compareTo((test({ -1627866910})).toByte()).toString(test({ 1627866910}))
2021-03-11 22:29:17,636 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:29:17,637 [main:66] - Compilation checking started
2021-03-11 22:29:18,034 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = (-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $((test({ -1627866910})).toByte().countLeadingZeroBits() + 4).unaryMinus()"

    return ((test({ 1627866910}))).compareTo(499457543).toString(test {
        try {
            val p = test({ -1627866910})
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}

suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu8(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu9(c: suspend () -> String): String {
    var prope3: String? = null

    c.startCoroutine(object: Kla5<String>() {
        override val context: CoroutineContext
            get() =  EmptyCoroutineContext

        override fun resumeWithException(exception: Throwable) {
            prope3 = "Exception: " + exception.message!!
        }

        override fun resume(value: String) {
            var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
prope3 = value
        }
    })

    return prope3 as String
}

fun box838(): String {
    var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (fu9 { "OK" } != "OK") return (fu1<Short>(Kla2(Kla2(Kla1("xzbxq"))))).compareTo((test({ -1627866910})).toByte()).toString(test({ 1627866910}))
    if (fu9 { fu7() } != "OK") return "fail 5"

    if (fu9 { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu9 { fu8() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty2> fu10(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla5<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            resumeWithException(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla6 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu14() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu14(it)
    }

    fun fu14(c: Continuation<*>) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu15(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu16(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu17() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        (fu3<UShort>(Kla2(Kla2(Kla1("wtqfp"))))).toShort().countTrailingZeroBits()
        prope8 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:29:18,036 [main:107] - replacing (c, Continuation<Unit>)
2021-03-11 22:29:18,036 [main:50] - replacing c Continuation<Unit>
2021-03-11 22:29:18,036 [main:54] - Getting value of type Continuation<Unit>
2021-03-11 22:29:18,171 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-11 22:29:18,323 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 22:29:18,329 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 22:29:18,804 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 22:29:18,951 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:29:18,956 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:29:19,264 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 22:29:19,409 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:29:19,414 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:29:19,894 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-11 22:29:20,038 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 22:29:20,043 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 22:29:20,522 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 22:29:20,522 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:29:20,522 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:29:20,522 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 22:29:20,522 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-11 22:29:20,686 [main:67] - randomType = Short?
2021-03-11 22:29:20,831 [main:302] - generating value of type = Short true depth = 0
2021-03-11 22:29:20,867 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:20,896 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:20,897 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:20,898 [main:106] - GETTING Continuation<Unit> from Short
2021-03-11 22:29:20,929 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:20,930 [main:106] - GETTING Continuation<Unit> from MutableMap<Kla1?, Kla2>
2021-03-11 22:29:20,964 [main:106] - GETTING Continuation<Unit> from Byte
2021-03-11 22:29:20,993 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:20,994 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:20,995 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:20,996 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:20,997 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:20,998 [main:106] - GETTING Continuation<Unit> from UShort
2021-03-11 22:29:21,022 [main:106] - GETTING Continuation<Unit> from Function2<UInt?, Int?, Kla2?>
2021-03-11 22:29:21,033 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:21,034 [main:106] - GETTING Continuation<Unit> from Byte
2021-03-11 22:29:21,035 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:21,036 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:21,037 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:21,037 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:21,038 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:21,039 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:21,040 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:21,041 [main:106] - GETTING Continuation<Unit> from Any
2021-03-11 22:29:21,045 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:21,046 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:21,047 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:21,048 [main:106] - GETTING Continuation<Unit> from Kla0
2021-03-11 22:29:21,052 [main:106] - GETTING Continuation<Unit> from UByte
2021-03-11 22:29:21,074 [main:106] - GETTING Continuation<Unit> from Long
2021-03-11 22:29:21,103 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:21,104 [main:106] - GETTING Continuation<Unit> from Boolean
2021-03-11 22:29:21,113 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:21,113 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:21,114 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:21,115 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:21,115 [main:111] - Cant find and generate replacement for c type Continuation<Unit>
2021-03-11 22:29:21,115 [main:107] - replacing (COROUTINE_SUSPENDED, Any)
2021-03-11 22:29:21,115 [main:50] - replacing COROUTINE_SUSPENDED Any
2021-03-11 22:29:21,115 [main:54] - Getting value of type Any
2021-03-11 22:29:21,248 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:29:21,248 [main:58] - GENERATED VALUE OF TYPE Any = "hsgve"
2021-03-11 22:29:21,248 [main:61] - GENERATED IS CALL =false
2021-03-11 22:29:21,417 [main:67] - randomType = LinkedHashSet<Short>
2021-03-11 22:29:21,550 [main:302] - generating value of type = LinkedHashSet<Short> false depth = 0
2021-03-11 22:29:21,690 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): LinkedHashSet<Short> = TODO()
2021-03-11 22:29:21,695 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): LinkedHashSet<Short> = TODO()
2021-03-11 22:29:22,149 [main:302] - generating value of type = Int true depth = 3
2021-03-11 22:29:22,153 [main:302] - generating value of type = Float true depth = 3
2021-03-11 22:29:22,156 [main:95] - GENERATED = LinkedHashSet<Short>(1095106314, 0.045749784f)
2021-03-11 22:29:22,271 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@539afc3d]
2021-03-11 22:29:22,271 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Any? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@3f8a6fe6]
2021-03-11 22:29:22,272 [main:78] - Generated call from random type = (LinkedHashSet<Short>(1095106314, 0.045749784f)).toArray().get(((test({ 1627866910}))))!!
2021-03-11 22:29:22,273 [main:106] - GETTING Any from Boolean
2021-03-11 22:29:22,281 [main:114] - replacement of COROUTINE_SUSPENDED of type Any is (LinkedHashSet<Short>(1095106314, 0.045749784f)).toArray().get(((test({ 1627866910}))))!!
2021-03-11 22:29:22,413 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-11 22:29:22,414 [main:66] - Compilation checking started
2021-03-11 22:29:22,926 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = (-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $((test({ -1627866910})).toByte().countLeadingZeroBits() + 4).unaryMinus()"

    return ((test({ 1627866910}))).compareTo(499457543).toString(test {
        try {
            val p = test({ -1627866910})
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}

suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    (LinkedHashSet<Short>(1095106314, 0.045749784f)).toArray().get(((test({ 1627866910}))))!!
}

suspend fun fu8(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu9(c: suspend () -> String): String {
    var prope3: String? = null

    c.startCoroutine(object: Kla5<String>() {
        override val context: CoroutineContext
            get() =  EmptyCoroutineContext

        override fun resumeWithException(exception: Throwable) {
            prope3 = "Exception: " + exception.message!!
        }

        override fun resume(value: String) {
            var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
prope3 = value
        }
    })

    return prope3 as String
}

fun box838(): String {
    var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (fu9 { "OK" } != "OK") return "fail 4"
    if (fu9 { fu7() } != "OK") return "fail 5"

    if (fu9 { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu9 { fu8() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty2> fu10(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla5<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            resumeWithException(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla6 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu14() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu14(it)
    }

    fun fu14(c: Continuation<*>) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu15(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu16(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu17() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        (fu3<UShort>(Kla2(Kla2(Kla1("wtqfp"))))).toShort().countTrailingZeroBits()
        prope8 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:29:22,929 [main:107] - replacing (prope8, Function0<Unit>)
2021-03-11 22:29:22,930 [main:50] - replacing prope8 Function0<Unit>
2021-03-11 22:29:22,930 [main:54] - Getting value of type Function0<Unit>
2021-03-11 22:29:23,071 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 22:29:23,075 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:29:23,219 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 22:29:23,224 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 22:29:23,542 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 22:29:23,545 [main:95] - GENERATED = require(true)
2021-03-11 22:29:23,545 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true)}
2021-03-11 22:29:23,546 [main:61] - GENERATED IS CALL =false
2021-03-11 22:29:23,704 [main:67] - randomType = ULong
2021-03-11 22:29:23,844 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 22:29:23,891 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:29:23,945 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:29:23,946 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:29:23,948 [main:106] - GETTING Function0<Unit> from Byte
2021-03-11 22:29:24,002 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:29:24,004 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:29:24,005 [main:106] - GETTING Function0<Unit> from MutableMap<Kla1?, Kla2>
2021-03-11 22:29:24,053 [main:106] - GETTING Function0<Unit> from Boolean
2021-03-11 22:29:24,063 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:29:24,064 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:29:24,065 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:29:24,066 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:29:24,067 [main:106] - GETTING Function0<Unit> from UShort
2021-03-11 22:29:24,090 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:29:24,091 [main:106] - GETTING Function0<Unit> from Short
2021-03-11 22:29:24,121 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:29:24,122 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:29:24,123 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:29:24,124 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:29:24,125 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:29:24,126 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:29:24,127 [main:106] - GETTING Function0<Unit> from UByte
2021-03-11 22:29:24,150 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:29:24,151 [main:106] - GETTING Function0<Unit> from Kla0
2021-03-11 22:29:24,155 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:29:24,156 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:29:24,157 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:29:24,158 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:29:24,159 [main:106] - GETTING Function0<Unit> from Byte
2021-03-11 22:29:24,160 [main:106] - GETTING Function0<Unit> from Function2<UInt?, Int?, Kla2?>
2021-03-11 22:29:24,171 [main:106] - GETTING Function0<Unit> from Any
2021-03-11 22:29:24,175 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:29:24,176 [main:106] - GETTING Function0<Unit> from Long
2021-03-11 22:29:24,204 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:29:24,205 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:29:24,206 [main:106] - GETTING Function0<Unit> from Int
2021-03-11 22:29:24,206 [main:114] - replacement of prope8 of type Function0<Unit> is { require(true)}
2021-03-11 22:29:24,342 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 22:29:24,342 [main:66] - Compilation checking started
2021-03-11 22:29:24,756 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = (-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $((test({ -1627866910})).toByte().countLeadingZeroBits() + 4).unaryMinus()"

    return ((test({ 1627866910}))).compareTo(499457543).toString(test {
        try {
            val p = test({ -1627866910})
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}

suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu8(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu9(c: suspend () -> String): String {
    var prope3: String? = null

    c.startCoroutine(object: Kla5<String>() {
        override val context: CoroutineContext
            get() =  EmptyCoroutineContext

        override fun resumeWithException(exception: Throwable) {
            prope3 = "Exception: " + exception.message!!
        }

        override fun resume(value: String) {
            var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
prope3 = value
        }
    })

    return prope3 as String
}

fun box838(): String {
    var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (fu9 { "OK" } != "OK") return "fail 4"
    if (fu9 { fu7() } != "OK") return "fail 5"

    if (fu9 { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu9 { fu8() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty2> fu10(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla5<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            resumeWithException(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla6 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu14() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu14(it)
    }

    fun fu14(c: Continuation<*>) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu15(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu16(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu17() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        (fu3<UShort>(Kla2(Kla2(Kla1("wtqfp"))))).toShort().countTrailingZeroBits()
        prope8 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
prope2.{ require(true)} = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:29:24,758 [main:107] - replacing ("fail 7", String)
2021-03-11 22:29:24,758 [main:50] - replacing "fail 7" String
2021-03-11 22:29:24,758 [main:54] - Getting value of type String
2021-03-11 22:29:24,894 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:29:24,898 [main:58] - GENERATED VALUE OF TYPE String = "entpu"
2021-03-11 22:29:24,898 [main:61] - GENERATED IS CALL =false
2021-03-11 22:29:25,429 [main:67] - randomType = Function1<Byte, Map<String, Kla3?>>
2021-03-11 22:29:25,430 [main:106] - GETTING String from Long
2021-03-11 22:29:25,459 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@5b14131], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15e7f7d8]]
2021-03-11 22:29:25,459 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@5b14131]
2021-03-11 22:29:25,459 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15e7f7d8]
2021-03-11 22:29:25,459 [main:117] - GENERATED CALL = (((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong()).toChar().uppercase()
2021-03-11 22:29:25,459 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]]
2021-03-11 22:29:25,459 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:29:25,459 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]
2021-03-11 22:29:25,460 [main:117] - GENERATED CALL = (((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong()).toInt().toString((-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus())
2021-03-11 22:29:25,460 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@784ec44d], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]]
2021-03-11 22:29:25,460 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@784ec44d]
2021-03-11 22:29:25,596 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:29:25,600 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]
2021-03-11 22:29:25,601 [main:117] - GENERATED CALL = (((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong()).compareTo(17).toString(val p = test({ -1627866910})
2021-03-11 22:29:25,601 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@7e128b54], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@630a089]]
2021-03-11 22:29:25,601 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@7e128b54]
2021-03-11 22:29:25,601 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@630a089]
2021-03-11 22:29:25,601 [main:117] - GENERATED CALL = (((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong()).toShort().toString((test({ -2})))
2021-03-11 22:29:25,601 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]]
2021-03-11 22:29:25,601 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]
2021-03-11 22:29:25,601 [main:117] - GENERATED CALL = (((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong()).toString(prope0)
2021-03-11 22:29:25,601 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6fc8fc8f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]]
2021-03-11 22:29:25,602 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6fc8fc8f]
2021-03-11 22:29:25,602 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]
2021-03-11 22:29:25,736 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:29:25,740 [main:117] - GENERATED CALL = (((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong()).toLong().toString(607950808)
2021-03-11 22:29:25,740 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@5b14131], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58808d82]]
2021-03-11 22:29:25,740 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@5b14131]
2021-03-11 22:29:25,740 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58808d82]
2021-03-11 22:29:25,740 [main:117] - GENERATED CALL = (((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong()).toChar().titlecase()
2021-03-11 22:29:25,740 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@6ec5c03], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6694d9]]
2021-03-11 22:29:25,740 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@6ec5c03]
2021-03-11 22:29:25,740 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6694d9]
2021-03-11 22:29:25,741 [main:117] - GENERATED CALL = (((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong()).toByte().toString(test({ 1627866910}))
2021-03-11 22:29:25,741 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@5b14131], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ef7baad]]
2021-03-11 22:29:25,741 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@5b14131]
2021-03-11 22:29:25,741 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ef7baad]
2021-03-11 22:29:25,875 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:29:25,879 [main:117] - GENERATED CALL = (((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong()).toChar().plus("essif")
2021-03-11 22:29:25,879 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@5b14131], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@416d03a5]]
2021-03-11 22:29:25,879 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@5b14131]
2021-03-11 22:29:25,879 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@416d03a5]
2021-03-11 22:29:25,880 [main:117] - GENERATED CALL = (((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong()).toChar().lowercase()
2021-03-11 22:29:25,880 [main:114] - replacement of "fail 7" of type String is (((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong()).toChar().titlecase()
2021-03-11 22:29:26,023 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:29:26,023 [main:66] - Compilation checking started
2021-03-11 22:29:26,433 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = (-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $((test({ -1627866910})).toByte().countLeadingZeroBits() + 4).unaryMinus()"

    return ((test({ 1627866910}))).compareTo(499457543).toString(test {
        try {
            val p = test({ -1627866910})
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}

suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu8(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu9(c: suspend () -> String): String {
    var prope3: String? = null

    c.startCoroutine(object: Kla5<String>() {
        override val context: CoroutineContext
            get() =  EmptyCoroutineContext

        override fun resumeWithException(exception: Throwable) {
            prope3 = "Exception: " + exception.message!!
        }

        override fun resume(value: String) {
            var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
prope3 = value
        }
    })

    return prope3 as String
}

fun box838(): String {
    var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (fu9 { "OK" } != "OK") return "fail 4"
    if (fu9 { fu7() } != "OK") return "fail 5"

    if (fu9 { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu9 { fu8() } != "Exception: OK") return (((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong()).toChar().titlecase()

    return "OK"
}

fun <Ty2> fu10(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla5<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            resumeWithException(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla6 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu14() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu14(it)
    }

    fun fu14(c: Continuation<*>) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu15(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu16(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu17() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        (fu3<UShort>(Kla2(Kla2(Kla1("wtqfp"))))).toShort().countTrailingZeroBits()
        prope8 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:29:26,435 [main:107] - replacing (checkFinished, Boolean)
2021-03-11 22:29:26,435 [main:50] - replacing checkFinished Boolean
2021-03-11 22:29:26,435 [main:54] - Getting value of type Boolean
2021-03-11 22:29:26,574 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:29:26,577 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 22:29:26,578 [main:61] - GENERATED IS CALL =false
2021-03-11 22:29:26,592 [main:67] - randomType = Kla3
2021-03-11 22:29:26,730 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 22:29:26,733 [main:112] - generating klass Kla3 text = open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}
2021-03-11 22:29:26,868 [main:194] - Type params = []
2021-03-11 22:29:27,003 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 22:29:27,149 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:29:27,154 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:29:27,479 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 22:29:27,626 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:29:27,631 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:29:28,121 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-11 22:29:28,266 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 22:29:28,271 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 22:29:28,790 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 22:29:28,790 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:29:28,791 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:29:28,803 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla3[DeserializedSimpleFunctionDescriptor@5463037]
2021-03-11 22:29:28,939 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:29:28,939 [main:78] - Generated call from random type = (Kla3()).equals("hypno")
2021-03-11 22:29:28,939 [main:114] - replacement of checkFinished of type Boolean is (Kla3()).equals("hypno")
2021-03-11 22:29:29,079 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:29:29,080 [main:66] - Compilation checking started
2021-03-11 22:29:29,505 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = (-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $((test({ -1627866910})).toByte().countLeadingZeroBits() + 4).unaryMinus()"

    return ((test({ 1627866910}))).compareTo(499457543).toString(test {
        try {
            val p = test({ -1627866910})
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}

suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu8(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu9(c: suspend () -> String): String {
    var prope3: String? = null

    c.startCoroutine(object: Kla5<String>() {
        override val context: CoroutineContext
            get() =  EmptyCoroutineContext

        override fun resumeWithException(exception: Throwable) {
            prope3 = "Exception: " + exception.message!!
        }

        override fun resume(value: String) {
            var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
prope3 = value
        }
    })

    return prope3 as String
}

fun box838(): String {
    var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (fu9 { "OK" } != "OK") return "fail 4"
    if (fu9 { fu7() } != "OK") return "fail 5"

    if (fu9 { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu9 { fu8() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty2> fu10(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla5<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            resumeWithException(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla6 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu14() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu14(it)
    }

    fun fu14(c: Continuation<*>) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu15(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu16(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu17() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        (fu3<UShort>(Kla2(Kla2(Kla1("wtqfp"))))).toShort().countTrailingZeroBits()
        prope8 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if ((Kla3()).equals("hypno") && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:29:29,507 [main:107] - replacing ({ x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}, Function1<Continuation<String>, Any?>)
2021-03-11 22:29:29,507 [main:50] - replacing { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
} Function1<Continuation<String>, Any?>
2021-03-11 22:29:29,507 [main:54] - Getting value of type Function1<Continuation<String>, Any?>
2021-03-11 22:29:29,653 [main:302] - generating value of type = Function1<Continuation<String>, Any?> false depth = 0
2021-03-11 22:29:29,657 [main:302] - generating value of type = Any false depth = 1
2021-03-11 22:29:29,657 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<String>, Any?> = {a: Continuation<String> -> "iwsbt"}
2021-03-11 22:29:29,658 [main:61] - GENERATED IS CALL =false
2021-03-11 22:29:29,672 [main:67] - randomType = Kla6
2021-03-11 22:29:29,808 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 22:29:29,812 [main:112] - generating klass Kla6 text = class Kla6 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu14() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu14(it)
    }

    fun fu14(c: Continuation<*>) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu15(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu16(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}
2021-03-11 22:29:29,821 [main:106] - GETTING Function1<Continuation<String>, Any?> from Byte
2021-03-11 22:29:29,871 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:29,922 [main:106] - GETTING Function1<Continuation<String>, Any?> from MutableMap<Kla1?, Kla2>
2021-03-11 22:29:29,970 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:29,972 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:29,973 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:29,975 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:29,976 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:29,978 [main:106] - GETTING Function1<Continuation<String>, Any?> from Byte
2021-03-11 22:29:29,979 [main:106] - GETTING Function1<Continuation<String>, Any?> from Boolean
2021-03-11 22:29:29,992 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:29,993 [main:106] - GETTING Function1<Continuation<String>, Any?> from Function2<UInt?, Int?, Kla2?>
2021-03-11 22:29:30,009 [main:106] - GETTING Function1<Continuation<String>, Any?> from Kla0
2021-03-11 22:29:30,016 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:30,018 [main:106] - GETTING Function1<Continuation<String>, Any?> from UShort
2021-03-11 22:29:30,055 [main:106] - GETTING Function1<Continuation<String>, Any?> from UByte
2021-03-11 22:29:30,092 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:30,093 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:30,095 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:30,096 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:30,098 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:30,099 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:30,101 [main:106] - GETTING Function1<Continuation<String>, Any?> from Short
2021-03-11 22:29:30,137 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:30,138 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:30,139 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:30,141 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:30,142 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:30,144 [main:106] - GETTING Function1<Continuation<String>, Any?> from Long
2021-03-11 22:29:30,174 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:30,176 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:30,177 [main:106] - GETTING Function1<Continuation<String>, Any?> from Any
2021-03-11 22:29:30,182 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:30,183 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:30,185 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:30,186 [main:106] - GETTING Function1<Continuation<String>, Any?> from Int
2021-03-11 22:29:30,186 [main:114] - replacement of { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
} of type Function1<Continuation<String>, Any?> is {a: Continuation<String> -> "iwsbt"}
2021-03-11 22:29:30,320 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 22:29:30,321 [main:66] - Compilation checking started
2021-03-11 22:29:30,710 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = (-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $((test({ -1627866910})).toByte().countLeadingZeroBits() + 4).unaryMinus()"

    return ((test({ 1627866910}))).compareTo(499457543).toString(test {
        try {
            val p = test({ -1627866910})
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}

suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "iwsbt"}

suspend fun fu8(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu9(c: suspend () -> String): String {
    var prope3: String? = null

    c.startCoroutine(object: Kla5<String>() {
        override val context: CoroutineContext
            get() =  EmptyCoroutineContext

        override fun resumeWithException(exception: Throwable) {
            prope3 = "Exception: " + exception.message!!
        }

        override fun resume(value: String) {
            var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
prope3 = value
        }
    })

    return prope3 as String
}

fun box838(): String {
    var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (fu9 { "OK" } != "OK") return "fail 4"
    if (fu9 { fu7() } != "OK") return "fail 5"

    if (fu9 { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu9 { fu8() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty2> fu10(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla5<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            resumeWithException(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla6 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu14() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu14(it)
    }

    fun fu14(c: Continuation<*>) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu15(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu16(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu17() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        (fu3<UShort>(Kla2(Kla2(Kla1("wtqfp"))))).toShort().countTrailingZeroBits()
        prope8 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:29:30,712 [main:107] - replacing (false, Boolean)
2021-03-11 22:29:30,712 [main:50] - replacing false Boolean
2021-03-11 22:29:30,712 [main:54] - Getting value of type Boolean
2021-03-11 22:29:30,862 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 22:29:30,866 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 22:29:30,866 [main:61] - GENERATED IS CALL =false
2021-03-11 22:29:31,044 [main:67] - randomType = Kla6?
2021-03-11 22:29:31,181 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 22:29:31,185 [main:112] - generating klass Kla6 text = class Kla6 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu14() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu14(it)
    }

    fun fu14(c: Continuation<*>) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu15(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu16(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}
2021-03-11 22:29:31,192 [main:149] - GENERATING call of type public final suspend fun fu14(): kotlin.Unit defined in Kla6[SimpleFunctionDescriptorImpl@13e4a97a]
2021-03-11 22:29:31,193 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@7993b9c3]
2021-03-11 22:29:31,344 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:29:31,344 [main:78] - Generated call from random type = (Kla6())?.fu14().equals("slpel")
2021-03-11 22:29:31,345 [main:106] - GETTING Boolean from Int
2021-03-11 22:29:31,381 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4961b6f0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@60496385]]
2021-03-11 22:29:31,381 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4961b6f0]
2021-03-11 22:29:31,520 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:29:31,520 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@60496385]
2021-03-11 22:29:31,656 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:29:31,656 [main:117] - GENERATED CALL = ((test({ 1627866910}))).equals("nklef").equals("dcjix")
2021-03-11 22:29:31,657 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@45c57d7f], public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@35730a4d]]
2021-03-11 22:29:31,657 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@45c57d7f]
2021-03-11 22:29:31,657 [main:149] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@35730a4d]
2021-03-11 22:29:31,657 [main:117] - GENERATED CALL = ((test({ 1627866910}))).rangeTo((test({ -2})).toByte()).isEmpty()
2021-03-11 22:29:31,657 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4961b6f0], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6a29807f]]
2021-03-11 22:29:31,657 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4961b6f0]
2021-03-11 22:29:31,791 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:29:31,792 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6a29807f]
2021-03-11 22:29:31,792 [main:117] - GENERATED CALL = ((test({ 1627866910}))).equals("nluoy").or(fu2<Boolean>(Kla2(Kla1("hqhpc"))))
2021-03-11 22:29:31,792 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27a69963]]
2021-03-11 22:29:31,792 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:29:31,792 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27a69963]
2021-03-11 22:29:31,792 [main:117] - GENERATED CALL = ((test({ 1627866910}))).toChar().isLetterOrDigit()
2021-03-11 22:29:31,792 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43cefadd]]
2021-03-11 22:29:31,792 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:29:31,792 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43cefadd]
2021-03-11 22:29:31,792 [main:117] - GENERATED CALL = ((test({ 1627866910}))).toChar().isLowSurrogate()
2021-03-11 22:29:31,793 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@48649202], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6014ff2]]
2021-03-11 22:29:31,793 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@48649202]
2021-03-11 22:29:31,927 [main:302] - generating value of type = Double true depth = 0
2021-03-11 22:29:31,931 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6014ff2]
2021-03-11 22:29:32,068 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:29:32,068 [main:117] - GENERATED CALL = ((test({ 1627866910}))).div(0.9265756490314128).equals("qagwo")
2021-03-11 22:29:32,068 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4961b6f0]]
2021-03-11 22:29:32,068 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:29:32,201 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:29:32,205 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4961b6f0]
2021-03-11 22:29:32,340 [main:302] - generating value of type = Any false depth = 0
2021-03-11 22:29:32,341 [main:117] - GENERATED CALL = ((test({ 1627866910}))).compareTo(498469176).equals("icptj")
2021-03-11 22:29:32,341 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@f7f3777], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@405dfba3]]
2021-03-11 22:29:32,341 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@f7f3777]
2021-03-11 22:29:32,341 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@405dfba3]
2021-03-11 22:29:32,341 [main:117] - GENERATED CALL = ((test({ 1627866910}))).toDouble().isFinite()
2021-03-11 22:29:32,341 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78c82e07]]
2021-03-11 22:29:32,341 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:29:32,341 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78c82e07]
2021-03-11 22:29:32,341 [main:117] - GENERATED CALL = ((test({ 1627866910}))).toChar().isDefined()
2021-03-11 22:29:32,341 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cf2425d]]
2021-03-11 22:29:32,341 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4aadcf12]
2021-03-11 22:29:32,341 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cf2425d]
2021-03-11 22:29:32,341 [main:117] - GENERATED CALL = ((test({ 1627866910}))).toChar().isLetter()
2021-03-11 22:29:32,341 [main:114] - replacement of false of type Boolean is ((test({ 1627866910}))).toDouble().isFinite()
2021-03-11 22:29:32,474 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:29:32,475 [main:66] - Compilation checking started
2021-03-11 22:29:32,887 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = (-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $((test({ -1627866910})).toByte().countLeadingZeroBits() + 4).unaryMinus()"

    return ((test({ 1627866910}))).compareTo(499457543).toString(test {
        try {
            val p = test({ -1627866910})
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}

suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu8(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu9(c: suspend () -> String): String {
    var prope3: String? = null

    c.startCoroutine(object: Kla5<String>() {
        override val context: CoroutineContext
            get() =  EmptyCoroutineContext

        override fun resumeWithException(exception: Throwable) {
            prope3 = "Exception: " + exception.message!!
        }

        override fun resume(value: String) {
            var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
prope3 = value
        }
    })

    return prope3 as String
}

fun box838(): String {
    var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (fu9 { "OK" } != "OK") return "fail 4"
    if (fu9 { fu7() } != "OK") return "fail 5"

    if (fu9 { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu9 { fu8() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty2> fu10(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla5<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            resumeWithException(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla6 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu14() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu14(it)
    }

    fun fu14(c: Continuation<*>) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu15(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu16(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope6 = 0
    var prope7 = ((test({ 1627866910}))).toDouble().isFinite()

    var prope8: () -> Unit = {}

    fun fu17() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        (fu3<UShort>(Kla2(Kla2(Kla1("wtqfp"))))).toShort().countTrailingZeroBits()
        prope8 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:29:32,889 [main:107] - replacing (c, Continuation<Unit>)
2021-03-11 22:29:32,889 [main:50] - replacing c Continuation<Unit>
2021-03-11 22:29:32,889 [main:54] - Getting value of type Continuation<Unit>
2021-03-11 22:29:33,025 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-11 22:29:33,164 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 22:29:33,169 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 22:29:33,646 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 22:29:33,786 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:29:33,791 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:29:34,145 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 22:29:34,289 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:29:34,294 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:29:34,768 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:29:34,768 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:29:34,768 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 22:29:34,768 [main:58] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-11 22:29:34,924 [main:67] - randomType = Double
2021-03-11 22:29:35,058 [main:302] - generating value of type = Double true depth = 0
2021-03-11 22:29:35,090 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:35,120 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:35,121 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:35,122 [main:106] - GETTING Continuation<Unit> from UByte
2021-03-11 22:29:35,144 [main:106] - GETTING Continuation<Unit> from Any
2021-03-11 22:29:35,147 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:35,148 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:35,149 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:35,150 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:35,151 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:35,152 [main:106] - GETTING Continuation<Unit> from Function2<UInt?, Int?, Kla2?>
2021-03-11 22:29:35,164 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:35,165 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:35,165 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:35,166 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:35,167 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:35,168 [main:106] - GETTING Continuation<Unit> from Kla0
2021-03-11 22:29:35,172 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:35,173 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:35,174 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:35,175 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:35,176 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:35,177 [main:106] - GETTING Continuation<Unit> from Boolean
2021-03-11 22:29:35,186 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:35,187 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:35,188 [main:106] - GETTING Continuation<Unit> from Short
2021-03-11 22:29:35,218 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:35,219 [main:106] - GETTING Continuation<Unit> from Long
2021-03-11 22:29:35,248 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:35,249 [main:106] - GETTING Continuation<Unit> from Byte
2021-03-11 22:29:35,278 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:35,279 [main:106] - GETTING Continuation<Unit> from UShort
2021-03-11 22:29:35,301 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:35,302 [main:106] - GETTING Continuation<Unit> from Int
2021-03-11 22:29:35,303 [main:106] - GETTING Continuation<Unit> from Byte
2021-03-11 22:29:35,304 [main:106] - GETTING Continuation<Unit> from MutableMap<Kla1?, Kla2>
2021-03-11 22:29:35,338 [main:111] - Cant find and generate replacement for c type Continuation<Unit>
2021-03-11 22:29:35,338 [main:107] - replacing ({ c ->
        (fu3<UShort>(Kla2(Kla2(Kla1("wtqfp"))))).toShort().countTrailingZeroBits()
        prope8 = { c.resume(Unit) }
    }, Function1<Continuation<Unit>, Unit>)
2021-03-11 22:29:35,338 [main:50] - replacing { c ->
        (fu3<UShort>(Kla2(Kla2(Kla1("wtqfp"))))).toShort().countTrailingZeroBits()
        prope8 = { c.resume(Unit) }
    } Function1<Continuation<Unit>, Unit>
2021-03-11 22:29:35,338 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-11 22:29:35,472 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-11 22:29:35,476 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:29:35,624 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 22:29:35,629 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 22:29:35,929 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 22:29:35,933 [main:95] - GENERATED = require(true)
2021-03-11 22:29:35,933 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> require(true)}
2021-03-11 22:29:35,933 [main:61] - GENERATED IS CALL =false
2021-03-11 22:29:36,427 [main:67] - randomType = Kla5<HashSet<Int>>
2021-03-11 22:29:36,561 [main:302] - generating value of type = Kla5<HashSet<Int>> false depth = 0
2021-03-11 22:29:36,564 [main:112] - generating klass Kla5 text = abstract class Kla5<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            resumeWithException(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty2)
}
2021-03-11 22:29:37,076 [main:302] - generating value of type = Kla8 false depth = 2
2021-03-11 22:29:37,080 [main:112] - generating klass Kla8 text = object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}
2021-03-11 22:29:37,103 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:37,137 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:37,138 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Byte
2021-03-11 22:29:37,169 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:37,171 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Boolean
2021-03-11 22:29:37,180 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from UShort
2021-03-11 22:29:37,203 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from UByte
2021-03-11 22:29:37,230 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Function2<UInt?, Int?, Kla2?>
2021-03-11 22:29:37,241 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:37,243 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:37,244 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:37,245 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:37,247 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:37,248 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:37,250 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from MutableMap<Kla1?, Kla2>
2021-03-11 22:29:37,286 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:37,287 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:37,288 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Byte
2021-03-11 22:29:37,290 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:37,291 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:37,293 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Short
2021-03-11 22:29:37,330 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:37,332 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:37,333 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Any
2021-03-11 22:29:37,338 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Kla0
2021-03-11 22:29:37,342 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:37,343 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:37,345 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:37,346 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:37,348 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:37,349 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:37,350 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:37,352 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Long
2021-03-11 22:29:37,382 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:37,383 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:37,385 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:37,385 [main:114] - replacement of { c ->
        (fu3<UShort>(Kla2(Kla2(Kla1("wtqfp"))))).toShort().countTrailingZeroBits()
        prope8 = { c.resume(Unit) }
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> require(true)}
2021-03-11 22:29:37,519 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 22:29:37,519 [main:66] - Compilation checking started
2021-03-11 22:29:37,914 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = (-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $((test({ -1627866910})).toByte().countLeadingZeroBits() + 4).unaryMinus()"

    return ((test({ 1627866910}))).compareTo(499457543).toString(test {
        try {
            val p = test({ -1627866910})
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}

suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu8(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu9(c: suspend () -> String): String {
    var prope3: String? = null

    c.startCoroutine(object: Kla5<String>() {
        override val context: CoroutineContext
            get() =  EmptyCoroutineContext

        override fun resumeWithException(exception: Throwable) {
            prope3 = "Exception: " + exception.message!!
        }

        override fun resume(value: String) {
            var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
prope3 = value
        }
    })

    return prope3 as String
}

fun box838(): String {
    var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (fu9 { "OK" } != "OK") return "fail 4"
    if (fu9 { fu7() } != "OK") return "fail 5"

    if (fu9 { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu9 { fu8() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty2> fu10(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla5<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            resumeWithException(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla6 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu14() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu14(it)
    }

    fun fu14(c: Continuation<*>) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu15(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu16(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu17() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true)}

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:29:37,916 [main:107] - replacing (fu9 { throw RuntimeException("OK") }, String)
2021-03-11 22:29:37,917 [main:50] - replacing fu9 { throw RuntimeException("OK") } String
2021-03-11 22:29:37,917 [main:54] - Getting value of type String
2021-03-11 22:29:38,050 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:29:38,054 [main:58] - GENERATED VALUE OF TYPE String = "xsjfh"
2021-03-11 22:29:38,054 [main:61] - GENERATED IS CALL =false
2021-03-11 22:29:38,751 [main:67] - randomType = Triple<ULong?, Kla3, Kla1>?
2021-03-11 22:29:38,891 [main:302] - generating value of type = Triple<ULong?, Kla3, Kla1> false depth = 0
2021-03-11 22:29:39,040 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: ULong?, second: Kla3, third: Kla1): Triple<ULong?, Kla3, Kla1> = TODO()
2021-03-11 22:29:39,045 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: ULong?, second: Kla3, third: Kla1): Triple<ULong?, Kla3, Kla1> = TODO()
2021-03-11 22:29:39,187 [main:302] - generating value of type = ULong true depth = 3
2021-03-11 22:29:39,191 [main:302] - generating value of type = Kla3 false depth = 3
2021-03-11 22:29:39,195 [main:112] - generating klass Kla3 text = open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}
2021-03-11 22:29:39,330 [main:194] - Type params = []
2021-03-11 22:29:39,489 [main:302] - generating value of type = CoroutineContext false depth = 5
2021-03-11 22:29:39,630 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:29:39,635 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:29:39,948 [main:302] - generating value of type = Key<*> false depth = 8
2021-03-11 22:29:40,093 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:29:40,099 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:29:40,582 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 11
2021-03-11 22:29:40,730 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 22:29:40,735 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 22:29:41,225 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 14
2021-03-11 22:29:41,375 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:29:41,380 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:29:41,863 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 17
2021-03-11 22:29:41,863 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 22:29:41,863 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 22:29:41,863 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 22:29:41,863 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 22:29:41,864 [main:302] - generating value of type = Kla1 false depth = 3
2021-03-11 22:29:41,868 [main:112] - generating klass Kla1 text = class Kla1(val value: Any): Kla0
2021-03-11 22:29:42,003 [main:194] - Type params = []
2021-03-11 22:29:42,136 [main:302] - generating value of type = Any false depth = 5
2021-03-11 22:29:42,136 [main:95] - GENERATED = Triple<ULong?, Kla3, Kla1>(952629875563039956.toULong(), Kla3(), Kla1("xwrtw"))
2021-03-11 22:29:42,161 [main:106] - GETTING String from Byte
2021-03-11 22:29:42,223 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6694d9]]
2021-03-11 22:29:42,227 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6694d9]
2021-03-11 22:29:42,228 [main:117] - GENERATED CALL = ((test({ -2})).toByte()).toString((0))
2021-03-11 22:29:42,228 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]]
2021-03-11 22:29:42,228 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:29:42,228 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]
2021-03-11 22:29:42,228 [main:117] - GENERATED CALL = ((test({ -2})).toByte()).toInt().toString(((test({ 1627866910}))).compareTo(499457543))
2021-03-11 22:29:42,228 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7116940a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58808d82]]
2021-03-11 22:29:42,228 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7116940a]
2021-03-11 22:29:42,228 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58808d82]
2021-03-11 22:29:42,228 [main:117] - GENERATED CALL = ((test({ -2})).toByte()).toChar().titlecase()
2021-03-11 22:29:42,228 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7116940a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@416d03a5]]
2021-03-11 22:29:42,228 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7116940a]
2021-03-11 22:29:42,229 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@416d03a5]
2021-03-11 22:29:42,229 [main:117] - GENERATED CALL = ((test({ -2})).toByte()).toChar().lowercase()
2021-03-11 22:29:42,229 [main:113] - Case = [public abstract fun toByte(): kotlin.Byte defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@220481f9], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6694d9]]
2021-03-11 22:29:42,229 [main:149] - GENERATING call of type public abstract fun toByte(): kotlin.Byte defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@220481f9]
2021-03-11 22:29:42,229 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6694d9]
2021-03-11 22:29:42,229 [main:117] - GENERATED CALL = ((test({ -2})).toByte()).toByte().toString(val p =
2021-03-11 22:29:42,229 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@21bf9d5e], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@630a089]]
2021-03-11 22:29:42,229 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@21bf9d5e]
2021-03-11 22:29:42,229 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@630a089]
2021-03-11 22:29:42,366 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:29:42,370 [main:117] - GENERATED CALL = ((test({ -2})).toByte()).toShort().toString(-989406396)
2021-03-11 22:29:42,370 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7116940a], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ef7baad]]
2021-03-11 22:29:42,370 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7116940a]
2021-03-11 22:29:42,370 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ef7baad]
2021-03-11 22:29:42,511 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:29:42,515 [main:117] - GENERATED CALL = ((test({ -2})).toByte()).toChar().plus("nxwho")
2021-03-11 22:29:42,515 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7116940a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15e7f7d8]]
2021-03-11 22:29:42,515 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7116940a]
2021-03-11 22:29:42,515 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15e7f7d8]
2021-03-11 22:29:42,515 [main:117] - GENERATED CALL = ((test({ -2})).toByte()).toChar().uppercase()
2021-03-11 22:29:42,515 [main:113] - Case = [public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@79cf42f2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]]
2021-03-11 22:29:42,516 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@79cf42f2]
2021-03-11 22:29:42,654 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:29:42,657 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]
2021-03-11 22:29:42,658 [main:117] - GENERATED CALL = ((test({ -2})).toByte()).compareTo(108).toString(val p =
2021-03-11 22:29:42,658 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@77a940aa], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]]
2021-03-11 22:29:42,658 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@77a940aa]
2021-03-11 22:29:42,658 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]
2021-03-11 22:29:42,659 [main:117] - GENERATED CALL = ((test({ -2})).toByte()).div(((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong()).toString(test({ 1627866910}))
2021-03-11 22:29:42,659 [main:114] - replacement of fu9 { throw RuntimeException("OK") } of type String is ((test({ -2})).toByte()).toShort().toString(-989406396)
2021-03-11 22:29:42,794 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:29:42,795 [main:66] - Compilation checking started
2021-03-11 22:29:43,185 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = (-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $((test({ -1627866910})).toByte().countLeadingZeroBits() + 4).unaryMinus()"

    return ((test({ 1627866910}))).compareTo(499457543).toString(test {
        try {
            val p = test({ -1627866910})
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}

suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu8(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu9(c: suspend () -> String): String {
    var prope3: String? = null

    c.startCoroutine(object: Kla5<String>() {
        override val context: CoroutineContext
            get() =  EmptyCoroutineContext

        override fun resumeWithException(exception: Throwable) {
            prope3 = "Exception: " + exception.message!!
        }

        override fun resume(value: String) {
            var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
prope3 = value
        }
    })

    return prope3 as String
}

fun box838(): String {
    var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (fu9 { "OK" } != "OK") return "fail 4"
    if (fu9 { fu7() } != "OK") return "fail 5"

    if (((test({ -2})).toByte()).toShort().toString(-989406396) != "Exception: OK") return "fail 6"
    if (fu9 { fu8() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty2> fu10(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla5<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            resumeWithException(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla6 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu14() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu14(it)
    }

    fun fu14(c: Continuation<*>) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu15(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu16(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu17() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        (fu3<UShort>(Kla2(Kla2(Kla1("wtqfp"))))).toShort().countTrailingZeroBits()
        prope8 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:29:43,187 [main:107] - replacing (prope4.exceptionOrNull(), Throwable?)
2021-03-11 22:29:43,189 [main:50] - replacing prope4.exceptionOrNull() Throwable?
2021-03-11 22:29:43,189 [main:54] - Getting value of type Throwable?
2021-03-11 22:29:43,327 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 22:29:43,335 [main:58] - GENERATED VALUE OF TYPE Throwable? = IllegalArgumentException()
2021-03-11 22:29:43,335 [main:61] - GENERATED IS CALL =true
2021-03-11 22:29:43,685 [main:67] - randomType = Map<Kla3, Long?>
2021-03-11 22:29:43,686 [main:106] - GETTING Throwable? from MutableMap<Kla1?, Kla2>
2021-03-11 22:29:43,729 [main:106] - GETTING Throwable? from Int
2021-03-11 22:29:43,765 [main:106] - GETTING Throwable? from Boolean
2021-03-11 22:29:43,774 [main:106] - GETTING Throwable? from Int
2021-03-11 22:29:43,775 [main:106] - GETTING Throwable? from Function2<UInt?, Int?, Kla2?>
2021-03-11 22:29:43,787 [main:106] - GETTING Throwable? from Int
2021-03-11 22:29:43,788 [main:106] - GETTING Throwable? from Int
2021-03-11 22:29:43,788 [main:106] - GETTING Throwable? from Int
2021-03-11 22:29:43,789 [main:106] - GETTING Throwable? from Int
2021-03-11 22:29:43,790 [main:106] - GETTING Throwable? from Any
2021-03-11 22:29:43,794 [main:106] - GETTING Throwable? from Int
2021-03-11 22:29:43,794 [main:106] - GETTING Throwable? from Int
2021-03-11 22:29:43,795 [main:106] - GETTING Throwable? from Int
2021-03-11 22:29:43,796 [main:106] - GETTING Throwable? from Int
2021-03-11 22:29:43,797 [main:106] - GETTING Throwable? from Byte
2021-03-11 22:29:43,833 [main:106] - GETTING Throwable? from Int
2021-03-11 22:29:43,834 [main:106] - GETTING Throwable? from Int
2021-03-11 22:29:43,835 [main:106] - GETTING Throwable? from Int
2021-03-11 22:29:43,836 [main:106] - GETTING Throwable? from UByte
2021-03-11 22:29:43,863 [main:106] - GETTING Throwable? from Int
2021-03-11 22:29:43,864 [main:106] - GETTING Throwable? from Int
2021-03-11 22:29:43,865 [main:106] - GETTING Throwable? from Int
2021-03-11 22:29:43,865 [main:106] - GETTING Throwable? from Kla0
2021-03-11 22:29:43,870 [main:106] - GETTING Throwable? from Int
2021-03-11 22:29:43,870 [main:106] - GETTING Throwable? from Long
2021-03-11 22:29:43,916 [main:106] - GETTING Throwable? from Int
2021-03-11 22:29:43,917 [main:106] - GETTING Throwable? from Int
2021-03-11 22:29:43,918 [main:106] - GETTING Throwable? from Int
2021-03-11 22:29:43,919 [main:106] - GETTING Throwable? from Int
2021-03-11 22:29:43,919 [main:106] - GETTING Throwable? from UShort
2021-03-11 22:29:43,953 [main:106] - GETTING Throwable? from Int
2021-03-11 22:29:43,953 [main:106] - GETTING Throwable? from Int
2021-03-11 22:29:43,954 [main:106] - GETTING Throwable? from Int
2021-03-11 22:29:43,955 [main:106] - GETTING Throwable? from Byte
2021-03-11 22:29:43,955 [main:106] - GETTING Throwable? from Short
2021-03-11 22:29:43,989 [main:106] - GETTING Throwable? from Int
2021-03-11 22:29:43,989 [main:114] - replacement of prope4.exceptionOrNull() of type Throwable? is IllegalArgumentException()
2021-03-11 22:29:44,123 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 22:29:44,126 [main:107] - replacing (prope3, String?)
2021-03-11 22:29:44,127 [main:50] - replacing prope3 String?
2021-03-11 22:29:44,127 [main:54] - Getting value of type String?
2021-03-11 22:29:44,270 [main:302] - generating value of type = String true depth = 0
2021-03-11 22:29:44,274 [main:58] - GENERATED VALUE OF TYPE String? = "frypy"
2021-03-11 22:29:44,275 [main:61] - GENERATED IS CALL =false
2021-03-11 22:29:44,445 [main:67] - randomType = Double
2021-03-11 22:29:44,583 [main:302] - generating value of type = Double true depth = 0
2021-03-11 22:29:44,623 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@76d9c6c6]
2021-03-11 22:29:44,623 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]
2021-03-11 22:29:44,759 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:29:44,764 [main:78] - Generated call from random type = (0.18177319288728788).toLong().toString(-901840503)
2021-03-11 22:29:44,765 [main:106] - GETTING String? from Byte
2021-03-11 22:29:44,795 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@77a940aa], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]]
2021-03-11 22:29:44,795 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@77a940aa]
2021-03-11 22:29:44,929 [main:302] - generating value of type = Long true depth = 0
2021-03-11 22:29:44,933 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]
2021-03-11 22:29:44,933 [main:117] - GENERATED CALL = ((test({ -2})).toByte())?.div(-6783003929899887424).toString(((test({ 1627866910}))).compareTo(499457543))
2021-03-11 22:29:44,933 [main:113] - Case = [public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@79cf42f2], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]]
2021-03-11 22:29:44,934 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@79cf42f2]
2021-03-11 22:29:44,934 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]
2021-03-11 22:29:44,934 [main:117] - GENERATED CALL = ((test({ -2})).toByte())?.compareTo((test({ -2})).toByte()).toString((test({ 1627866910})).toInt())
2021-03-11 22:29:44,934 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7116940a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15e7f7d8]]
2021-03-11 22:29:44,934 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7116940a]
2021-03-11 22:29:44,934 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@15e7f7d8]
2021-03-11 22:29:44,934 [main:117] - GENERATED CALL = ((test({ -2})).toByte())?.toChar().uppercase()
2021-03-11 22:29:44,934 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@21bf9d5e], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@630a089]]
2021-03-11 22:29:44,934 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@21bf9d5e]
2021-03-11 22:29:44,934 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@630a089]
2021-03-11 22:29:44,935 [main:117] - GENERATED CALL = ((test({ -2})).toByte())?.toShort().toString(val p =
2021-03-11 22:29:44,935 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]]
2021-03-11 22:29:44,935 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:29:44,935 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4369db27]
2021-03-11 22:29:44,935 [main:117] - GENERATED CALL = ((test({ -2})).toByte())?.toInt().toString(test({ 2114828160}))
2021-03-11 22:29:44,935 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6fc8fc8f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]]
2021-03-11 22:29:44,935 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6fc8fc8f]
2021-03-11 22:29:44,935 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a54364c]
2021-03-11 22:29:44,935 [main:117] - GENERATED CALL = ((test({ -2})).toByte())?.toLong().toString((test({ -2})).toByte().countLeadingZeroBits())
2021-03-11 22:29:44,935 [main:113] - Case = [public abstract fun toByte(): kotlin.Byte defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@220481f9], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6694d9]]
2021-03-11 22:29:44,935 [main:149] - GENERATING call of type public abstract fun toByte(): kotlin.Byte defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@220481f9]
2021-03-11 22:29:44,936 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6694d9]
2021-03-11 22:29:45,090 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:29:45,094 [main:117] - GENERATED CALL = ((test({ -2})).toByte())?.toByte().toString(-442352241)
2021-03-11 22:29:45,094 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7116940a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58808d82]]
2021-03-11 22:29:45,094 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7116940a]
2021-03-11 22:29:45,094 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58808d82]
2021-03-11 22:29:45,094 [main:117] - GENERATED CALL = ((test({ -2})).toByte())?.toChar().titlecase()
2021-03-11 22:29:45,094 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7116940a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@416d03a5]]
2021-03-11 22:29:45,094 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7116940a]
2021-03-11 22:29:45,094 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@416d03a5]
2021-03-11 22:29:45,095 [main:117] - GENERATED CALL = ((test({ -2})).toByte())?.toChar().lowercase()
2021-03-11 22:29:45,095 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6694d9]]
2021-03-11 22:29:45,095 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6694d9]
2021-03-11 22:29:45,095 [main:117] - GENERATED CALL = ((test({ -2})).toByte())?.toString(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
2021-03-11 22:29:45,095 [main:114] - replacement of prope3 of type String? is ((test({ -2})).toByte())?.toChar().titlecase()
2021-03-11 22:29:45,229 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 22:29:45,230 [main:66] - Compilation checking started
2021-03-11 22:29:45,629 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = (-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $((test({ -1627866910})).toByte().countLeadingZeroBits() + 4).unaryMinus()"

    return ((test({ 1627866910}))).compareTo(499457543).toString(test {
        try {
            val p = test({ -1627866910})
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}

suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu8(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu9(c: suspend () -> String): String {
    var prope3: String? = null

    c.startCoroutine(object: Kla5<String>() {
        override val context: CoroutineContext
            get() =  EmptyCoroutineContext

        override fun resumeWithException(exception: Throwable) {
            var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
((test({ -2})).toByte())?.toChar().titlecase() = "Exception: " + exception.message!!
        }

        override fun resume(value: String) {
            var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
prope3 = value
        }
    })

    return prope3 as String
}

fun box838(): String {
    var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (fu9 { "OK" } != "OK") return "fail 4"
    if (fu9 { fu7() } != "OK") return "fail 5"

    if (fu9 { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu9 { fu8() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty2> fu10(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla5<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            resumeWithException(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla6 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu14() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu14(it)
    }

    fun fu14(c: Continuation<*>) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu15(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu16(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu17() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        (fu3<UShort>(Kla2(Kla2(Kla1("wtqfp"))))).toShort().countTrailingZeroBits()
        prope8 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:29:45,631 [main:107] - replacing ({
        fu14(it)
    }, Function1<Continuation<Unit>, Unit>)
2021-03-11 22:29:45,632 [main:50] - replacing {
        fu14(it)
    } Function1<Continuation<Unit>, Unit>
2021-03-11 22:29:45,632 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-11 22:29:45,767 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-11 22:29:45,771 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 22:29:45,912 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 22:29:45,917 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 22:29:46,220 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 22:29:46,224 [main:95] - GENERATED = check(false)
2021-03-11 22:29:46,224 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> check(false)}
2021-03-11 22:29:46,224 [main:61] - GENERATED IS CALL =false
2021-03-11 22:29:46,720 [main:67] - randomType = MutableMap<Double?, Long>
2021-03-11 22:29:46,722 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:46,759 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:46,761 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:46,762 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:46,763 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from MutableMap<Kla1?, Kla2>
2021-03-11 22:29:46,798 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Any
2021-03-11 22:29:46,803 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:46,804 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:46,805 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from UShort
2021-03-11 22:29:46,829 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Byte
2021-03-11 22:29:46,859 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:46,860 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:46,862 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:46,863 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:46,864 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:46,866 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:46,867 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:46,869 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:46,870 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Boolean
2021-03-11 22:29:46,880 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:46,881 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Short
2021-03-11 22:29:46,912 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:46,914 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Long
2021-03-11 22:29:46,944 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:46,945 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:46,947 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:46,948 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:46,949 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from UByte
2021-03-11 22:29:46,973 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:46,974 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:46,976 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:46,977 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Function2<UInt?, Int?, Kla2?>
2021-03-11 22:29:46,989 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:46,991 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Byte
2021-03-11 22:29:46,992 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Kla0
2021-03-11 22:29:46,997 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-11 22:29:46,997 [main:114] - replacement of {
        fu14(it)
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> check(false)}
2021-03-11 22:29:47,135 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 22:29:47,135 [main:66] - Compilation checking started
2021-03-11 22:29:47,548 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
inline fun test(s: () -> Int): Int =
        try {
            val i = s()
            i + 10
        }
        finally {
            0
        }

fun box() : String {
    test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }

    return "Failed"
}

interface Kla0

class Kla1(val value: Any): Kla0

inline class Kla2(val value: Kla0): Kla0 {
    inline fun <Ty0> fu6(): Ty0 = "aaehr" as Ty0
}

inline fun <Ty0> Kla2.fu0(): Ty0 = (Kla1("rmtth") as Kla1).value as Ty0

inline fun <Ty0> fu1(a: Kla2): Ty0 = test({ -1627866910}) as Ty0

fun <Ty0> fu2(a: Kla2): Ty0 = fu5(Kla2(Kla1("gdwgq"))) {
    it.fu0()
}

fun <Ty0> fu3(a: Kla2): Ty0 = fu5(Kla2(Kla1("nyrsn"))) {
    it.fu6()
}

fun <Ty0> fu4(a: Kla2): Ty0 = fu5(a) {
    fu1(it)
}

fun <Ty0, Ty1> fu5(value: Ty0, f: (Ty0) -> Ty1): Ty1 {
    val p = 1
return f(value)
}

fun box930(): String {
    val p = 1
var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
    if (prope0 != 43) return "FAIL 2: $prope0"

    prope0 = (test({ -1627866910})).toByte().countLeadingZeroBits() + 4
    if ((test({ 1627866910})).toInt().times(36) != 44) return ((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong().toString(44)

    prope0 = (-3).compareTo(test {
        try {
            val p = 5
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            (-3)
        }
    }).unaryMinus() + 5
    if ((0).shr(try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }) != 45) return "FAIL 4: $((test({ -1627866910})).toByte().countLeadingZeroBits() + 4).unaryMinus()"

    return ((test({ 1627866910}))).compareTo(499457543).toString(test {
        try {
            val p = test({ -1627866910})
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })
}

suspend fun fu7(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resume("OK")
    COROUTINE_SUSPENDED
}

suspend fun fu8(): String = suspendCoroutineUninterceptedOrReturn { x ->
    x.resumeWithException(RuntimeException("OK"))
    COROUTINE_SUSPENDED
}

fun fu9(c: suspend () -> String): String {
    var prope3: String? = null

    c.startCoroutine(object: Kla5<String>() {
        override val context: CoroutineContext
            get() =  EmptyCoroutineContext

        override fun resumeWithException(exception: Throwable) {
            var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
prope3 = "Exception: " + exception.message!!
        }

        override fun resume(value: String) {
            var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
prope3 = value
        }
    })

    return prope3 as String
}

fun box838(): String {
    var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (fu9 { "OK" } != "OK") return "fail 4"
    if (fu9 { fu7() } != "OK") return "fail 5"

    if (fu9 { throw RuntimeException("OK") } != "Exception: OK") return "fail 6"
    if (fu9 { fu8() } != "Exception: OK") return "fail 7"

    return "OK"
}

fun <Ty2> fu10(x: (Ty2) -> Unit): Continuation<Ty2> = object: Continuation<Ty2> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        x(prope4.getOrThrow())
    }
}

fun fu11(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.exceptionOrNull()?.let(x)
    }
}

open class Kla3(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla9 : Kla3()
    override fun resumeWith(prope4: Result<Any?>) {
        prope4.getOrThrow()
    }
}

class Kla4 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Any?>) {
        this.prope4 = prope4.getOrThrow()
    }

    var prope4: Any? = null
}

abstract class Kla5<in Ty2> : Continuation<Ty2> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope4: Result<Ty2>) {
        if (prope4.isSuccess) {
            resume(prope4.getOrThrow())
        } else {
            resumeWithException(prope4.exceptionOrNull()!!)
        }
    }

    abstract fun resumeWithException(exception: Throwable)
    abstract fun resume(value: Ty2)
}

class Kla6 {
    private val prope5 = arrayListOf<StackTraceElement?>()

    suspend fun fu14() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(c: Continuation<*>) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope5.clear()
        var prope9: CoroutineStackFrame? = c
        while (prope9 != null) {
            prope5.add(prope9.getStackTraceElement())
            prope9 = prope9.callerFrame
        }
    }

    fun fu15(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope5.joinToString(separator = "\n")) }
    }

    fun fu16(method: String) {
        prope5.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope5.joinToString(separator = "\n"))
    }
}

val prope1 = Kla6()

class Kla7 {
    private var prope6 = 0
    var prope7 = false

    var prope8: () -> Unit = {}

    fun fu17() {
        prope6 = 0
        prope7 = false
        prope8 = {}
    }

    suspend fun fu7() = suspendCoroutine<Unit> { c ->
        (fu3<UShort>(Kla2(Kla2(Kla1("wtqfp"))))).toShort().countTrailingZeroBits()
        prope8 = { c.resume(Unit) }
    }

    fun fu18(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
for (i in 1..numberOfSuspensions) {
            if (prope6 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope6)
            prope8()
        }
        if (prope6 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope6)
        if (prope7) error("Wrong state-machine generated: it is finished early")
        prope8()
        if (checkFinished && !prope7) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla7()

object Kla8: Kla5<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = (test({ -2})).toByte().countLeadingZeroBits() + 3
val p = test({ -1627866910})
val p = 5
val p = 1
prope2.prope8 = {
            prope2.prope7 = true
        }
    }

    override fun resumeWithException(exception: Throwable) {
        throw exception
    }
}


2021-03-11 22:29:47,551 [main:107] - replacing (1, Int)
2021-03-11 22:29:47,551 [main:50] - replacing 1 Int
2021-03-11 22:29:47,551 [main:54] - Getting value of type Int
2021-03-11 22:29:47,685 [main:302] - generating value of type = Int true depth = 0
2021-03-11 22:29:47,689 [main:58] - GENERATED VALUE OF TYPE Int = -1819809562
2021-03-11 22:29:47,689 [main:61] - GENERATED IS CALL =false
2021-03-11 22:29:47,704 [main:67] - randomType = Kla0
2021-03-11 22:29:47,704 [main:106] - GETTING Int from Int
2021-03-11 22:29:47,754 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1f6e0bcf]]
2021-03-11 22:29:47,754 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1f6e0bcf]
2021-03-11 22:29:47,754 [main:117] - GENERATED CALL = ((test({ -2}))).takeLowestOneBit()
2021-03-11 22:29:47,755 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63cdd551], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@24823f40]]
2021-03-11 22:29:47,755 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63cdd551]
2021-03-11 22:29:47,755 [main:117] - GENERATED CALL = ((test({ -2}))).div(((-3).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    })).toLong()).sign
2021-03-11 22:29:47,755 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@42611ed]]
2021-03-11 22:29:47,755 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@36cd715c]
2021-03-11 22:29:47,755 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@42611ed]
2021-03-11 22:29:47,755 [main:117] - GENERATED CALL = ((test({ -2}))).toInt().dec()
2021-03-11 22:29:47,755 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6fc8fc8f], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@784ec44d]]
2021-03-11 22:29:47,755 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6fc8fc8f]
2021-03-11 22:29:47,755 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@784ec44d]
2021-03-11 22:29:47,756 [main:117] - GENERATED CALL = ((test({ -2}))).toLong().compareTo((test({ -1627866910})).toByte())
2021-03-11 22:29:47,756 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@45c57d7f], public final val first: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@7257cbce]]
2021-03-11 22:29:47,756 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@45c57d7f]
2021-03-11 22:29:47,756 [main:117] - GENERATED CALL = ((test({ -2}))).rangeTo((test({ -1627866910})).toByte()).first
2021-03-11 22:29:47,756 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@45c57d7f], public open val start: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@32b92218]]
2021-03-11 22:29:47,756 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@45c57d7f]
2021-03-11 22:29:47,891 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 22:29:47,895 [main:117] - GENERATED CALL = ((test({ -2}))).rangeTo(-20).start
2021-03-11 22:29:47,895 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@de1d842]]
2021-03-11 22:29:47,895 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@603a9c6a]
2021-03-11 22:29:47,895 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@de1d842]
2021-03-11 22:29:47,895 [main:117] - GENERATED CALL = ((test({ -2}))).toByte().unaryPlus()
2021-03-11 22:29:47,895 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@581fa170]]
2021-03-11 22:29:47,895 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@d3784e9]
2021-03-11 22:29:47,895 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@581fa170]
2021-03-11 22:29:47,896 [main:117] - GENERATED CALL = ((test({ -2}))).compareTo(test {
        try {
            val p = 1
            return "OK"
        }
        catch(e: Exception) {
            -2
        }
        finally {
            -3
        }
    }).inc()
2021-03-11 22:29:47,896 [main:113] - Case = [public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6b2ac950]]
2021-03-11 22:29:47,896 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6b2ac950]
